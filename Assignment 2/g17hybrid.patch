Binary files xv6org/a.out and xv6mhybrid/a.out differ
diff -ruN xv6org/bio.d xv6mhybrid/bio.d
--- xv6org/bio.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/bio.d	2020-10-15 19:50:35.861631829 +0530
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6org/bio.o and xv6mhybrid/bio.o differ
diff -ruN xv6org/bootasm.d xv6mhybrid/bootasm.d
--- xv6org/bootasm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/bootasm.d	2020-10-15 18:32:58.053743645 +0530
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files xv6org/bootasm.o and xv6mhybrid/bootasm.o differ
Binary files xv6org/bootblock and xv6mhybrid/bootblock differ
diff -ruN xv6org/bootblock.asm xv6mhybrid/bootblock.asm
--- xv6org/bootblock.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/bootblock.asm	2020-10-15 18:32:58.061743555 +0530
@@ -0,0 +1,354 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0xe>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 ee 00 00 00       	call   7d3b <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+  entry();
+}
+
+void
+waitdisk(void)
+{
+    7c7e:	55                   	push   %ebp
+    7c7f:	89 e5                	mov    %esp,%ebp
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c81:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c86:	ec                   	in     (%dx),%al
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c87:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c8a:	3c 40                	cmp    $0x40,%al
+    7c8c:	75 f8                	jne    7c86 <waitdisk+0x8>
+    ;
+}
+    7c8e:	5d                   	pop    %ebp
+    7c8f:	c3                   	ret    
+
+00007c90 <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c90:	55                   	push   %ebp
+    7c91:	89 e5                	mov    %esp,%ebp
+    7c93:	57                   	push   %edi
+    7c94:	53                   	push   %ebx
+    7c95:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c98:	e8 e1 ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7c9d:	b8 01 00 00 00       	mov    $0x1,%eax
+    7ca2:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca7:	ee                   	out    %al,(%dx)
+    7ca8:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cad:	89 d8                	mov    %ebx,%eax
+    7caf:	ee                   	out    %al,(%dx)
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+    7cb0:	89 d8                	mov    %ebx,%eax
+    7cb2:	c1 e8 08             	shr    $0x8,%eax
+    7cb5:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cba:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+    7cbb:	89 d8                	mov    %ebx,%eax
+    7cbd:	c1 e8 10             	shr    $0x10,%eax
+    7cc0:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc5:	ee                   	out    %al,(%dx)
+  outb(0x1F6, (offset >> 24) | 0xE0);
+    7cc6:	89 d8                	mov    %ebx,%eax
+    7cc8:	c1 e8 18             	shr    $0x18,%eax
+    7ccb:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cce:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cd3:	ee                   	out    %al,(%dx)
+    7cd4:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cd9:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cde:	ee                   	out    %al,(%dx)
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7cdf:	e8 9a ff ff ff       	call   7c7e <waitdisk>
+  asm volatile("cld; rep insl" :
+    7ce4:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ce7:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7cec:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7cf1:	fc                   	cld    
+    7cf2:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf4:	5b                   	pop    %ebx
+    7cf5:	5f                   	pop    %edi
+    7cf6:	5d                   	pop    %ebp
+    7cf7:	c3                   	ret    
+
+00007cf8 <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cf8:	55                   	push   %ebp
+    7cf9:	89 e5                	mov    %esp,%ebp
+    7cfb:	57                   	push   %edi
+    7cfc:	56                   	push   %esi
+    7cfd:	53                   	push   %ebx
+    7cfe:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d01:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d04:	89 df                	mov    %ebx,%edi
+    7d06:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d09:	89 f0                	mov    %esi,%eax
+    7d0b:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d10:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d12:	c1 ee 09             	shr    $0x9,%esi
+    7d15:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d18:	39 df                	cmp    %ebx,%edi
+    7d1a:	76 17                	jbe    7d33 <readseg+0x3b>
+    readsect(pa, offset);
+    7d1c:	56                   	push   %esi
+    7d1d:	53                   	push   %ebx
+    7d1e:	e8 6d ff ff ff       	call   7c90 <readsect>
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d23:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d29:	83 c6 01             	add    $0x1,%esi
+    7d2c:	83 c4 08             	add    $0x8,%esp
+    7d2f:	39 df                	cmp    %ebx,%edi
+    7d31:	77 e9                	ja     7d1c <readseg+0x24>
+}
+    7d33:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d36:	5b                   	pop    %ebx
+    7d37:	5e                   	pop    %esi
+    7d38:	5f                   	pop    %edi
+    7d39:	5d                   	pop    %ebp
+    7d3a:	c3                   	ret    
+
+00007d3b <bootmain>:
+{
+    7d3b:	55                   	push   %ebp
+    7d3c:	89 e5                	mov    %esp,%ebp
+    7d3e:	57                   	push   %edi
+    7d3f:	56                   	push   %esi
+    7d40:	53                   	push   %ebx
+    7d41:	83 ec 0c             	sub    $0xc,%esp
+  readseg((uchar*)elf, 4096, 0);
+    7d44:	6a 00                	push   $0x0
+    7d46:	68 00 10 00 00       	push   $0x1000
+    7d4b:	68 00 00 01 00       	push   $0x10000
+    7d50:	e8 a3 ff ff ff       	call   7cf8 <readseg>
+  if(elf->magic != ELF_MAGIC)
+    7d55:	83 c4 0c             	add    $0xc,%esp
+    7d58:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d5f:	45 4c 46 
+    7d62:	74 08                	je     7d6c <bootmain+0x31>
+}
+    7d64:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d67:	5b                   	pop    %ebx
+    7d68:	5e                   	pop    %esi
+    7d69:	5f                   	pop    %edi
+    7d6a:	5d                   	pop    %ebp
+    7d6b:	c3                   	ret    
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d6c:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d71:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d77:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d7e:	c1 e6 05             	shl    $0x5,%esi
+    7d81:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d83:	39 f3                	cmp    %esi,%ebx
+    7d85:	72 0f                	jb     7d96 <bootmain+0x5b>
+  entry();
+    7d87:	ff 15 18 00 01 00    	call   *0x10018
+    7d8d:	eb d5                	jmp    7d64 <bootmain+0x29>
+  for(; ph < eph; ph++){
+    7d8f:	83 c3 20             	add    $0x20,%ebx
+    7d92:	39 de                	cmp    %ebx,%esi
+    7d94:	76 f1                	jbe    7d87 <bootmain+0x4c>
+    pa = (uchar*)ph->paddr;
+    7d96:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7d99:	ff 73 04             	pushl  0x4(%ebx)
+    7d9c:	ff 73 10             	pushl  0x10(%ebx)
+    7d9f:	57                   	push   %edi
+    7da0:	e8 53 ff ff ff       	call   7cf8 <readseg>
+    if(ph->memsz > ph->filesz)
+    7da5:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7da8:	8b 43 10             	mov    0x10(%ebx),%eax
+    7dab:	83 c4 0c             	add    $0xc,%esp
+    7dae:	39 c1                	cmp    %eax,%ecx
+    7db0:	76 dd                	jbe    7d8f <bootmain+0x54>
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+    7db2:	01 c7                	add    %eax,%edi
+    7db4:	29 c1                	sub    %eax,%ecx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7db6:	b8 00 00 00 00       	mov    $0x0,%eax
+    7dbb:	fc                   	cld    
+    7dbc:	f3 aa                	rep stos %al,%es:(%edi)
+    7dbe:	eb cf                	jmp    7d8f <bootmain+0x54>
Binary files xv6org/bootblock.o and xv6mhybrid/bootblock.o differ
Binary files xv6org/bootblockother.o and xv6mhybrid/bootblockother.o differ
diff -ruN xv6org/bootmain.d xv6mhybrid/bootmain.d
--- xv6org/bootmain.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/bootmain.d	2020-10-15 18:32:58.045743735 +0530
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files xv6org/bootmain.o and xv6mhybrid/bootmain.o differ
Binary files xv6org/_cat and xv6mhybrid/_cat differ
diff -ruN xv6org/cat.asm xv6mhybrid/cat.asm
--- xv6org/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/cat.asm	2020-10-15 19:50:33.793766419 +0530
@@ -0,0 +1,1300 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	be 01 00 00 00       	mov    $0x1,%esi
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  21:	83 f8 01             	cmp    $0x1,%eax
+{
+  24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(argc <= 1){
+  27:	7e 54                	jle    7d <main+0x7d>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 66 03 00 00       	call   3a2 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	89 c7                	mov    %eax,%edi
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 2e 03 00 00       	call   38a <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 f9 02 00 00       	call   362 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 6b 08 00 00       	push   $0x86b
+  71:	6a 01                	push   $0x1
+  73:	e8 78 04 00 00       	call   4f0 <printf>
+      exit();
+  78:	e8 e5 02 00 00       	call   362 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 d6 02 00 00       	call   362 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 75 08             	mov    0x8(%ebp),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  98:	eb 1d                	jmp    b7 <cat+0x27>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 a0 0b 00 00       	push   $0xba0
+  a9:	6a 01                	push   $0x1
+  ab:	e8 d2 02 00 00       	call   382 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 26                	jne    dd <cat+0x4d>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 a0 0b 00 00       	push   $0xba0
+  c4:	56                   	push   %esi
+  c5:	e8 b0 02 00 00       	call   37a <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	83 f8 00             	cmp    $0x0,%eax
+  d0:	89 c3                	mov    %eax,%ebx
+  d2:	7f cc                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d4:	75 1b                	jne    f1 <cat+0x61>
+}
+  d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d9:	5b                   	pop    %ebx
+  da:	5e                   	pop    %esi
+  db:	5d                   	pop    %ebp
+  dc:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dd:	83 ec 08             	sub    $0x8,%esp
+  e0:	68 48 08 00 00       	push   $0x848
+  e5:	6a 01                	push   $0x1
+  e7:	e8 04 04 00 00       	call   4f0 <printf>
+      exit();
+  ec:	e8 71 02 00 00       	call   362 <exit>
+    printf(1, "cat: read error\n");
+  f1:	50                   	push   %eax
+  f2:	50                   	push   %eax
+  f3:	68 5a 08 00 00       	push   $0x85a
+  f8:	6a 01                	push   $0x1
+  fa:	e8 f1 03 00 00       	call   4f0 <printf>
+    exit();
+  ff:	e8 5e 02 00 00       	call   362 <exit>
+ 104:	66 90                	xchg   %ax,%ax
+ 106:	66 90                	xchg   %ax,%ax
+ 108:	66 90                	xchg   %ax,%ax
+ 10a:	66 90                	xchg   %ax,%ax
+ 10c:	66 90                	xchg   %ax,%ax
+ 10e:	66 90                	xchg   %ax,%ax
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	53                   	push   %ebx
+ 114:	8b 45 08             	mov    0x8(%ebp),%eax
+ 117:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 11a:	89 c2                	mov    %eax,%edx
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 120:	83 c1 01             	add    $0x1,%ecx
+ 123:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 127:	83 c2 01             	add    $0x1,%edx
+ 12a:	84 db                	test   %bl,%bl
+ 12c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 12f:	75 ef                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 131:	5b                   	pop    %ebx
+ 132:	5d                   	pop    %ebp
+ 133:	c3                   	ret    
+ 134:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 13a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 14a:	0f b6 02             	movzbl (%edx),%eax
+ 14d:	0f b6 19             	movzbl (%ecx),%ebx
+ 150:	84 c0                	test   %al,%al
+ 152:	75 1c                	jne    170 <strcmp+0x30>
+ 154:	eb 2a                	jmp    180 <strcmp+0x40>
+ 156:	8d 76 00             	lea    0x0(%esi),%esi
+ 159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 160:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 163:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 166:	83 c1 01             	add    $0x1,%ecx
+ 169:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 16c:	84 c0                	test   %al,%al
+ 16e:	74 10                	je     180 <strcmp+0x40>
+ 170:	38 d8                	cmp    %bl,%al
+ 172:	74 ec                	je     160 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 174:	29 d8                	sub    %ebx,%eax
+}
+ 176:	5b                   	pop    %ebx
+ 177:	5d                   	pop    %ebp
+ 178:	c3                   	ret    
+ 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 180:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	89 f6                	mov    %esi,%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 196:	80 39 00             	cmpb   $0x0,(%ecx)
+ 199:	74 15                	je     1b0 <strlen+0x20>
+ 19b:	31 d2                	xor    %edx,%edx
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+ 1a0:	83 c2 01             	add    $0x1,%edx
+ 1a3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1a7:	89 d0                	mov    %edx,%eax
+ 1a9:	75 f5                	jne    1a0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1b0:	31 c0                	xor    %eax,%eax
+}
+ 1b2:	5d                   	pop    %ebp
+ 1b3:	c3                   	ret    
+ 1b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1cd:	89 d7                	mov    %edx,%edi
+ 1cf:	fc                   	cld    
+ 1d0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1d2:	89 d0                	mov    %edx,%eax
+ 1d4:	5f                   	pop    %edi
+ 1d5:	5d                   	pop    %ebp
+ 1d6:	c3                   	ret    
+ 1d7:	89 f6                	mov    %esi,%esi
+ 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	53                   	push   %ebx
+ 1e4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1ea:	0f b6 10             	movzbl (%eax),%edx
+ 1ed:	84 d2                	test   %dl,%dl
+ 1ef:	74 1d                	je     20e <strchr+0x2e>
+    if(*s == c)
+ 1f1:	38 d3                	cmp    %dl,%bl
+ 1f3:	89 d9                	mov    %ebx,%ecx
+ 1f5:	75 0d                	jne    204 <strchr+0x24>
+ 1f7:	eb 17                	jmp    210 <strchr+0x30>
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	38 ca                	cmp    %cl,%dl
+ 202:	74 0c                	je     210 <strchr+0x30>
+  for(; *s; s++)
+ 204:	83 c0 01             	add    $0x1,%eax
+ 207:	0f b6 10             	movzbl (%eax),%edx
+ 20a:	84 d2                	test   %dl,%dl
+ 20c:	75 f2                	jne    200 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 20e:	31 c0                	xor    %eax,%eax
+}
+ 210:	5b                   	pop    %ebx
+ 211:	5d                   	pop    %ebp
+ 212:	c3                   	ret    
+ 213:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	57                   	push   %edi
+ 224:	56                   	push   %esi
+ 225:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 226:	31 f6                	xor    %esi,%esi
+ 228:	89 f3                	mov    %esi,%ebx
+{
+ 22a:	83 ec 1c             	sub    $0x1c,%esp
+ 22d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 230:	eb 2f                	jmp    261 <gets+0x41>
+ 232:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 238:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 23b:	83 ec 04             	sub    $0x4,%esp
+ 23e:	6a 01                	push   $0x1
+ 240:	50                   	push   %eax
+ 241:	6a 00                	push   $0x0
+ 243:	e8 32 01 00 00       	call   37a <read>
+    if(cc < 1)
+ 248:	83 c4 10             	add    $0x10,%esp
+ 24b:	85 c0                	test   %eax,%eax
+ 24d:	7e 1c                	jle    26b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 24f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 253:	83 c7 01             	add    $0x1,%edi
+ 256:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 259:	3c 0a                	cmp    $0xa,%al
+ 25b:	74 23                	je     280 <gets+0x60>
+ 25d:	3c 0d                	cmp    $0xd,%al
+ 25f:	74 1f                	je     280 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 261:	83 c3 01             	add    $0x1,%ebx
+ 264:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 267:	89 fe                	mov    %edi,%esi
+ 269:	7c cd                	jl     238 <gets+0x18>
+ 26b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 26d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 270:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 273:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+ 27b:	90                   	nop
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 280:	8b 75 08             	mov    0x8(%ebp),%esi
+ 283:	8b 45 08             	mov    0x8(%ebp),%eax
+ 286:	01 de                	add    %ebx,%esi
+ 288:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 28a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 290:	5b                   	pop    %ebx
+ 291:	5e                   	pop    %esi
+ 292:	5f                   	pop    %edi
+ 293:	5d                   	pop    %ebp
+ 294:	c3                   	ret    
+ 295:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2a5:	83 ec 08             	sub    $0x8,%esp
+ 2a8:	6a 00                	push   $0x0
+ 2aa:	ff 75 08             	pushl  0x8(%ebp)
+ 2ad:	e8 f0 00 00 00       	call   3a2 <open>
+  if(fd < 0)
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 27                	js     2e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2bf:	89 c3                	mov    %eax,%ebx
+ 2c1:	50                   	push   %eax
+ 2c2:	e8 f3 00 00 00       	call   3ba <fstat>
+  close(fd);
+ 2c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2cc:	e8 b9 00 00 00       	call   38a <close>
+  return r;
+ 2d1:	83 c4 10             	add    $0x10,%esp
+}
+ 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2d7:	89 f0                	mov    %esi,%eax
+ 2d9:	5b                   	pop    %ebx
+ 2da:	5e                   	pop    %esi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2e5:	eb ed                	jmp    2d4 <stat+0x34>
+ 2e7:	89 f6                	mov    %esi,%esi
+ 2e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2f0:	55                   	push   %ebp
+ 2f1:	89 e5                	mov    %esp,%ebp
+ 2f3:	53                   	push   %ebx
+ 2f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2f7:	0f be 11             	movsbl (%ecx),%edx
+ 2fa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2fd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2ff:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 304:	77 1f                	ja     325 <atoi+0x35>
+ 306:	8d 76 00             	lea    0x0(%esi),%esi
+ 309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 310:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 313:	83 c1 01             	add    $0x1,%ecx
+ 316:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 31a:	0f be 11             	movsbl (%ecx),%edx
+ 31d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 320:	80 fb 09             	cmp    $0x9,%bl
+ 323:	76 eb                	jbe    310 <atoi+0x20>
+  return n;
+}
+ 325:	5b                   	pop    %ebx
+ 326:	5d                   	pop    %ebp
+ 327:	c3                   	ret    
+ 328:	90                   	nop
+ 329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000330 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	56                   	push   %esi
+ 334:	53                   	push   %ebx
+ 335:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 338:	8b 45 08             	mov    0x8(%ebp),%eax
+ 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 33e:	85 db                	test   %ebx,%ebx
+ 340:	7e 14                	jle    356 <memmove+0x26>
+ 342:	31 d2                	xor    %edx,%edx
+ 344:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 348:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 34c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 34f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 352:	39 d3                	cmp    %edx,%ebx
+ 354:	75 f2                	jne    348 <memmove+0x18>
+  return vdst;
+}
+ 356:	5b                   	pop    %ebx
+ 357:	5e                   	pop    %esi
+ 358:	5d                   	pop    %ebp
+ 359:	c3                   	ret    
+
+0000035a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 35a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <exit>:
+SYSCALL(exit)
+ 362:	b8 02 00 00 00       	mov    $0x2,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <wait>:
+SYSCALL(wait)
+ 36a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <pipe>:
+SYSCALL(pipe)
+ 372:	b8 04 00 00 00       	mov    $0x4,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <read>:
+SYSCALL(read)
+ 37a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <write>:
+SYSCALL(write)
+ 382:	b8 10 00 00 00       	mov    $0x10,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <close>:
+SYSCALL(close)
+ 38a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <kill>:
+SYSCALL(kill)
+ 392:	b8 06 00 00 00       	mov    $0x6,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <exec>:
+SYSCALL(exec)
+ 39a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <open>:
+SYSCALL(open)
+ 3a2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <mknod>:
+SYSCALL(mknod)
+ 3aa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <unlink>:
+SYSCALL(unlink)
+ 3b2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <fstat>:
+SYSCALL(fstat)
+ 3ba:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <link>:
+SYSCALL(link)
+ 3c2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <mkdir>:
+SYSCALL(mkdir)
+ 3ca:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <chdir>:
+SYSCALL(chdir)
+ 3d2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <dup>:
+SYSCALL(dup)
+ 3da:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <getpid>:
+SYSCALL(getpid)
+ 3e2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <sbrk>:
+SYSCALL(sbrk)
+ 3ea:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <sleep>:
+SYSCALL(sleep)
+ 3f2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <uptime>:
+SYSCALL(uptime)
+ 3fa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <getNumProc>:
+SYSCALL(getNumProc)
+ 402:	b8 16 00 00 00       	mov    $0x16,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 40a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 412:	b8 18 00 00 00       	mov    $0x18,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 41a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 422:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <process_state>:
+SYSCALL(process_state)
+ 42a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 432:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <inc_cpucounter>:
+ 43a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+ 442:	66 90                	xchg   %ax,%ax
+ 444:	66 90                	xchg   %ax,%ax
+ 446:	66 90                	xchg   %ax,%ax
+ 448:	66 90                	xchg   %ax,%ax
+ 44a:	66 90                	xchg   %ax,%ax
+ 44c:	66 90                	xchg   %ax,%ax
+ 44e:	66 90                	xchg   %ax,%ax
+
+00000450 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 459:	85 d2                	test   %edx,%edx
+{
+ 45b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 45e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 460:	79 76                	jns    4d8 <printint+0x88>
+ 462:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 466:	74 70                	je     4d8 <printint+0x88>
+    x = -xx;
+ 468:	f7 d8                	neg    %eax
+    neg = 1;
+ 46a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 471:	31 f6                	xor    %esi,%esi
+ 473:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 476:	eb 0a                	jmp    482 <printint+0x32>
+ 478:	90                   	nop
+ 479:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 480:	89 fe                	mov    %edi,%esi
+ 482:	31 d2                	xor    %edx,%edx
+ 484:	8d 7e 01             	lea    0x1(%esi),%edi
+ 487:	f7 f1                	div    %ecx
+ 489:	0f b6 92 88 08 00 00 	movzbl 0x888(%edx),%edx
+  }while((x /= base) != 0);
+ 490:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 492:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 495:	75 e9                	jne    480 <printint+0x30>
+  if(neg)
+ 497:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 49a:	85 c0                	test   %eax,%eax
+ 49c:	74 08                	je     4a6 <printint+0x56>
+    buf[i++] = '-';
+ 49e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4a3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 4b3:	83 ec 04             	sub    $0x4,%esp
+ 4b6:	83 ee 01             	sub    $0x1,%esi
+ 4b9:	6a 01                	push   $0x1
+ 4bb:	53                   	push   %ebx
+ 4bc:	57                   	push   %edi
+ 4bd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4c0:	e8 bd fe ff ff       	call   382 <write>
+
+  while(--i >= 0)
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	39 de                	cmp    %ebx,%esi
+ 4ca:	75 e4                	jne    4b0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cf:	5b                   	pop    %ebx
+ 4d0:	5e                   	pop    %esi
+ 4d1:	5f                   	pop    %edi
+ 4d2:	5d                   	pop    %ebp
+ 4d3:	c3                   	ret    
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4df:	eb 90                	jmp    471 <printint+0x21>
+ 4e1:	eb 0d                	jmp    4f0 <printf>
+ 4e3:	90                   	nop
+ 4e4:	90                   	nop
+ 4e5:	90                   	nop
+ 4e6:	90                   	nop
+ 4e7:	90                   	nop
+ 4e8:	90                   	nop
+ 4e9:	90                   	nop
+ 4ea:	90                   	nop
+ 4eb:	90                   	nop
+ 4ec:	90                   	nop
+ 4ed:	90                   	nop
+ 4ee:	90                   	nop
+ 4ef:	90                   	nop
+
+000004f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4f0:	55                   	push   %ebp
+ 4f1:	89 e5                	mov    %esp,%ebp
+ 4f3:	57                   	push   %edi
+ 4f4:	56                   	push   %esi
+ 4f5:	53                   	push   %ebx
+ 4f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4f9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4fc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4ff:	84 db                	test   %bl,%bl
+ 501:	0f 84 b3 00 00 00    	je     5ba <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 507:	8d 45 10             	lea    0x10(%ebp),%eax
+ 50a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 50d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 50f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 512:	eb 2f                	jmp    543 <printf+0x53>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	0f 84 a7 00 00 00    	je     5c8 <printf+0xd8>
+  write(fd, &c, 1);
+ 521:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 524:	83 ec 04             	sub    $0x4,%esp
+ 527:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 52a:	6a 01                	push   $0x1
+ 52c:	50                   	push   %eax
+ 52d:	ff 75 08             	pushl  0x8(%ebp)
+ 530:	e8 4d fe ff ff       	call   382 <write>
+ 535:	83 c4 10             	add    $0x10,%esp
+ 538:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 53b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 53f:	84 db                	test   %bl,%bl
+ 541:	74 77                	je     5ba <printf+0xca>
+    if(state == 0){
+ 543:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 545:	0f be cb             	movsbl %bl,%ecx
+ 548:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 54b:	74 cb                	je     518 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 54d:	83 ff 25             	cmp    $0x25,%edi
+ 550:	75 e6                	jne    538 <printf+0x48>
+      if(c == 'd'){
+ 552:	83 f8 64             	cmp    $0x64,%eax
+ 555:	0f 84 05 01 00 00    	je     660 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 55b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 561:	83 f9 70             	cmp    $0x70,%ecx
+ 564:	74 72                	je     5d8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 566:	83 f8 73             	cmp    $0x73,%eax
+ 569:	0f 84 99 00 00 00    	je     608 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 56f:	83 f8 63             	cmp    $0x63,%eax
+ 572:	0f 84 08 01 00 00    	je     680 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 578:	83 f8 25             	cmp    $0x25,%eax
+ 57b:	0f 84 ef 00 00 00    	je     670 <printf+0x180>
+  write(fd, &c, 1);
+ 581:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 584:	83 ec 04             	sub    $0x4,%esp
+ 587:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 58b:	6a 01                	push   $0x1
+ 58d:	50                   	push   %eax
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+ 591:	e8 ec fd ff ff       	call   382 <write>
+ 596:	83 c4 0c             	add    $0xc,%esp
+ 599:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 59c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 59f:	6a 01                	push   $0x1
+ 5a1:	50                   	push   %eax
+ 5a2:	ff 75 08             	pushl  0x8(%ebp)
+ 5a5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5a8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 5aa:	e8 d3 fd ff ff       	call   382 <write>
+  for(i = 0; fmt[i]; i++){
+ 5af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 5b3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5b6:	84 db                	test   %bl,%bl
+ 5b8:	75 89                	jne    543 <printf+0x53>
+    }
+  }
+}
+ 5ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5bd:	5b                   	pop    %ebx
+ 5be:	5e                   	pop    %esi
+ 5bf:	5f                   	pop    %edi
+ 5c0:	5d                   	pop    %ebp
+ 5c1:	c3                   	ret    
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 5c8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5cd:	e9 66 ff ff ff       	jmp    538 <printf+0x48>
+ 5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5d8:	83 ec 0c             	sub    $0xc,%esp
+ 5db:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5e0:	6a 00                	push   $0x0
+ 5e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5e5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5e8:	8b 17                	mov    (%edi),%edx
+ 5ea:	e8 61 fe ff ff       	call   450 <printint>
+        ap++;
+ 5ef:	89 f8                	mov    %edi,%eax
+ 5f1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5f4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 5f6:	83 c0 04             	add    $0x4,%eax
+ 5f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5fc:	e9 37 ff ff ff       	jmp    538 <printf+0x48>
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 608:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 60b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 60d:	83 c0 04             	add    $0x4,%eax
+ 610:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 613:	85 c9                	test   %ecx,%ecx
+ 615:	0f 84 8e 00 00 00    	je     6a9 <printf+0x1b9>
+        while(*s != 0){
+ 61b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 61e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 620:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 622:	84 c0                	test   %al,%al
+ 624:	0f 84 0e ff ff ff    	je     538 <printf+0x48>
+ 62a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 62d:	89 de                	mov    %ebx,%esi
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 635:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 638:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 63b:	83 c6 01             	add    $0x1,%esi
+ 63e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 641:	6a 01                	push   $0x1
+ 643:	57                   	push   %edi
+ 644:	53                   	push   %ebx
+ 645:	e8 38 fd ff ff       	call   382 <write>
+        while(*s != 0){
+ 64a:	0f b6 06             	movzbl (%esi),%eax
+ 64d:	83 c4 10             	add    $0x10,%esp
+ 650:	84 c0                	test   %al,%al
+ 652:	75 e4                	jne    638 <printf+0x148>
+ 654:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 657:	31 ff                	xor    %edi,%edi
+ 659:	e9 da fe ff ff       	jmp    538 <printf+0x48>
+ 65e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 660:	83 ec 0c             	sub    $0xc,%esp
+ 663:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 668:	6a 01                	push   $0x1
+ 66a:	e9 73 ff ff ff       	jmp    5e2 <printf+0xf2>
+ 66f:	90                   	nop
+  write(fd, &c, 1);
+ 670:	83 ec 04             	sub    $0x4,%esp
+ 673:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 676:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 679:	6a 01                	push   $0x1
+ 67b:	e9 21 ff ff ff       	jmp    5a1 <printf+0xb1>
+        putc(fd, *ap);
+ 680:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 683:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 686:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 688:	6a 01                	push   $0x1
+        ap++;
+ 68a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 68d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 690:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 693:	50                   	push   %eax
+ 694:	ff 75 08             	pushl  0x8(%ebp)
+ 697:	e8 e6 fc ff ff       	call   382 <write>
+        ap++;
+ 69c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 69f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6a2:	31 ff                	xor    %edi,%edi
+ 6a4:	e9 8f fe ff ff       	jmp    538 <printf+0x48>
+          s = "(null)";
+ 6a9:	bb 80 08 00 00       	mov    $0x880,%ebx
+        while(*s != 0){
+ 6ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6b3:	e9 72 ff ff ff       	jmp    62a <printf+0x13a>
+ 6b8:	66 90                	xchg   %ax,%ax
+ 6ba:	66 90                	xchg   %ax,%ax
+ 6bc:	66 90                	xchg   %ax,%ax
+ 6be:	66 90                	xchg   %ax,%ax
+
+000006c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c1:	a1 80 0b 00 00       	mov    0xb80,%eax
+{
+ 6c6:	89 e5                	mov    %esp,%ebp
+ 6c8:	57                   	push   %edi
+ 6c9:	56                   	push   %esi
+ 6ca:	53                   	push   %ebx
+ 6cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d8:	39 c8                	cmp    %ecx,%eax
+ 6da:	8b 10                	mov    (%eax),%edx
+ 6dc:	73 32                	jae    710 <free+0x50>
+ 6de:	39 d1                	cmp    %edx,%ecx
+ 6e0:	72 04                	jb     6e6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e2:	39 d0                	cmp    %edx,%eax
+ 6e4:	72 32                	jb     718 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ec:	39 fa                	cmp    %edi,%edx
+ 6ee:	74 30                	je     720 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6f3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6f9:	39 f1                	cmp    %esi,%ecx
+ 6fb:	74 3a                	je     737 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6fd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 6ff:	a3 80 0b 00 00       	mov    %eax,0xb80
+}
+ 704:	5b                   	pop    %ebx
+ 705:	5e                   	pop    %esi
+ 706:	5f                   	pop    %edi
+ 707:	5d                   	pop    %ebp
+ 708:	c3                   	ret    
+ 709:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 710:	39 d0                	cmp    %edx,%eax
+ 712:	72 04                	jb     718 <free+0x58>
+ 714:	39 d1                	cmp    %edx,%ecx
+ 716:	72 ce                	jb     6e6 <free+0x26>
+{
+ 718:	89 d0                	mov    %edx,%eax
+ 71a:	eb bc                	jmp    6d8 <free+0x18>
+ 71c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 720:	03 72 04             	add    0x4(%edx),%esi
+ 723:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 726:	8b 10                	mov    (%eax),%edx
+ 728:	8b 12                	mov    (%edx),%edx
+ 72a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 72d:	8b 50 04             	mov    0x4(%eax),%edx
+ 730:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 733:	39 f1                	cmp    %esi,%ecx
+ 735:	75 c6                	jne    6fd <free+0x3d>
+    p->s.size += bp->s.size;
+ 737:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 73a:	a3 80 0b 00 00       	mov    %eax,0xb80
+    p->s.size += bp->s.size;
+ 73f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 742:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 745:	89 10                	mov    %edx,(%eax)
+}
+ 747:	5b                   	pop    %ebx
+ 748:	5e                   	pop    %esi
+ 749:	5f                   	pop    %edi
+ 74a:	5d                   	pop    %ebp
+ 74b:	c3                   	ret    
+ 74c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000750 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 750:	55                   	push   %ebp
+ 751:	89 e5                	mov    %esp,%ebp
+ 753:	57                   	push   %edi
+ 754:	56                   	push   %esi
+ 755:	53                   	push   %ebx
+ 756:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 759:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 75c:	8b 15 80 0b 00 00    	mov    0xb80,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 762:	8d 78 07             	lea    0x7(%eax),%edi
+ 765:	c1 ef 03             	shr    $0x3,%edi
+ 768:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 76b:	85 d2                	test   %edx,%edx
+ 76d:	0f 84 9d 00 00 00    	je     810 <malloc+0xc0>
+ 773:	8b 02                	mov    (%edx),%eax
+ 775:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 778:	39 cf                	cmp    %ecx,%edi
+ 77a:	76 6c                	jbe    7e8 <malloc+0x98>
+ 77c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 782:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 787:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 78a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 791:	eb 0e                	jmp    7a1 <malloc+0x51>
+ 793:	90                   	nop
+ 794:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 798:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 79a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 79d:	39 f9                	cmp    %edi,%ecx
+ 79f:	73 47                	jae    7e8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7a1:	39 05 80 0b 00 00    	cmp    %eax,0xb80
+ 7a7:	89 c2                	mov    %eax,%edx
+ 7a9:	75 ed                	jne    798 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7ab:	83 ec 0c             	sub    $0xc,%esp
+ 7ae:	56                   	push   %esi
+ 7af:	e8 36 fc ff ff       	call   3ea <sbrk>
+  if(p == (char*)-1)
+ 7b4:	83 c4 10             	add    $0x10,%esp
+ 7b7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ba:	74 1c                	je     7d8 <malloc+0x88>
+  hp->s.size = nu;
+ 7bc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7bf:	83 ec 0c             	sub    $0xc,%esp
+ 7c2:	83 c0 08             	add    $0x8,%eax
+ 7c5:	50                   	push   %eax
+ 7c6:	e8 f5 fe ff ff       	call   6c0 <free>
+  return freep;
+ 7cb:	8b 15 80 0b 00 00    	mov    0xb80,%edx
+      if((p = morecore(nunits)) == 0)
+ 7d1:	83 c4 10             	add    $0x10,%esp
+ 7d4:	85 d2                	test   %edx,%edx
+ 7d6:	75 c0                	jne    798 <malloc+0x48>
+        return 0;
+  }
+}
+ 7d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7db:	31 c0                	xor    %eax,%eax
+}
+ 7dd:	5b                   	pop    %ebx
+ 7de:	5e                   	pop    %esi
+ 7df:	5f                   	pop    %edi
+ 7e0:	5d                   	pop    %ebp
+ 7e1:	c3                   	ret    
+ 7e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7e8:	39 cf                	cmp    %ecx,%edi
+ 7ea:	74 54                	je     840 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7ec:	29 f9                	sub    %edi,%ecx
+ 7ee:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7f4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 7f7:	89 15 80 0b 00 00    	mov    %edx,0xb80
+}
+ 7fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 800:	83 c0 08             	add    $0x8,%eax
+}
+ 803:	5b                   	pop    %ebx
+ 804:	5e                   	pop    %esi
+ 805:	5f                   	pop    %edi
+ 806:	5d                   	pop    %ebp
+ 807:	c3                   	ret    
+ 808:	90                   	nop
+ 809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 810:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
+ 817:	0b 00 00 
+ 81a:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
+ 821:	0b 00 00 
+    base.s.size = 0;
+ 824:	b8 84 0b 00 00       	mov    $0xb84,%eax
+ 829:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
+ 830:	00 00 00 
+ 833:	e9 44 ff ff ff       	jmp    77c <malloc+0x2c>
+ 838:	90                   	nop
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 840:	8b 08                	mov    (%eax),%ecx
+ 842:	89 0a                	mov    %ecx,(%edx)
+ 844:	eb b1                	jmp    7f7 <malloc+0xa7>
diff -ruN xv6org/cat.d xv6mhybrid/cat.d
--- xv6org/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/cat.d	2020-10-15 19:50:33.665774779 +0530
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/cat.o and xv6mhybrid/cat.o differ
diff -ruN xv6org/cat.sym xv6mhybrid/cat.sym
--- xv6org/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/cat.sym	2020-10-15 19:50:33.797766158 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+00000848 .rodata
+0000089c .eh_frame
+00000b80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000450 printint
+00000888 digits.1056
+00000000 umalloc.c
+00000b80 freep
+00000b84 base
+00000110 strcpy
+000004f0 printf
+00000330 memmove
+000003aa mknod
+00000220 gets
+000003e2 getpid
+00000090 cat
+00000750 malloc
+000003f2 sleep
+00000422 get_burst_time
+00000372 pipe
+00000382 write
+000003ba fstat
+00000392 kill
+0000042a process_state
+000003d2 chdir
+00000432 dec_burstTime
+0000039a exec
+0000036a wait
+0000043a inc_cpucounter
+0000037a read
+000003b2 unlink
+0000035a fork
+000003ea sbrk
+000003fa uptime
+00000b64 __bss_start
+000001c0 memset
+00000000 main
+0000041a set_burst_time
+00000140 strcmp
+000003da dup
+0000040a getMaxPid
+00000ba0 buf
+00000402 getNumProc
+00000412 getProcInfo
+000002a0 stat
+00000b64 _edata
+00000da0 _end
+000003c2 link
+00000362 exit
+000002f0 atoi
+00000190 strlen
+000003a2 open
+000001e0 strchr
+000003ca mkdir
+0000038a close
+000006c0 free
diff -ruN xv6org/console.d xv6mhybrid/console.d
--- xv6org/console.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/console.d	2020-10-15 19:50:35.929627415 +0530
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
+ x86.h
Binary files xv6org/console.o and xv6mhybrid/console.o differ
diff -ruN xv6org/defs.h xv6mhybrid/defs.h
--- xv6org/defs.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/defs.h	2020-10-15 19:50:19.250731689 +0530
@@ -9,7 +9,7 @@
 struct sleeplock;
 struct stat;
 struct superblock;
-
+struct processInfo;
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -120,6 +120,14 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int 			getNumProc(void);
+int 			getMaxPid(void);
+int 			getProcInfo(int, struct processInfo*);
+int 			set_burst_time(int);
+int 			get_burst_time(void);
+int 			process_state(void);
+int 			inc_cpucounter(void);
+void			dec_burstTime(void);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
Binary files xv6org/_echo and xv6mhybrid/_echo differ
diff -ruN xv6org/echo.asm xv6mhybrid/echo.asm
--- xv6org/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/echo.asm	2020-10-15 19:50:33.869761455 +0530
@@ -0,0 +1,1214 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 3f                	jle    5c <main+0x5c>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	eb 18                	jmp    3d <main+0x3d>
+  25:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  28:	68 a8 07 00 00       	push   $0x7a8
+  2d:	50                   	push   %eax
+  2e:	68 aa 07 00 00       	push   $0x7aa
+  33:	6a 01                	push   $0x1
+  35:	e8 16 04 00 00       	call   450 <printf>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	83 c3 04             	add    $0x4,%ebx
+  40:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  43:	39 f3                	cmp    %esi,%ebx
+  45:	75 e1                	jne    28 <main+0x28>
+  47:	68 af 07 00 00       	push   $0x7af
+  4c:	50                   	push   %eax
+  4d:	68 aa 07 00 00       	push   $0x7aa
+  52:	6a 01                	push   $0x1
+  54:	e8 f7 03 00 00       	call   450 <printf>
+  59:	83 c4 10             	add    $0x10,%esp
+  exit();
+  5c:	e8 61 02 00 00       	call   2c2 <exit>
+  61:	66 90                	xchg   %ax,%ax
+  63:	66 90                	xchg   %ax,%ax
+  65:	66 90                	xchg   %ax,%ax
+  67:	66 90                	xchg   %ax,%ax
+  69:	66 90                	xchg   %ax,%ax
+  6b:	66 90                	xchg   %ax,%ax
+  6d:	66 90                	xchg   %ax,%ax
+  6f:	90                   	nop
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  71:	89 e5                	mov    %esp,%ebp
+  73:	53                   	push   %ebx
+  74:	8b 45 08             	mov    0x8(%ebp),%eax
+  77:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7a:	89 c2                	mov    %eax,%edx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  80:	83 c1 01             	add    $0x1,%ecx
+  83:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  87:	83 c2 01             	add    $0x1,%edx
+  8a:	84 db                	test   %bl,%bl
+  8c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  8f:	75 ef                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  91:	5b                   	pop    %ebx
+  92:	5d                   	pop    %ebp
+  93:	c3                   	ret    
+  94:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  9a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	53                   	push   %ebx
+  a4:	8b 55 08             	mov    0x8(%ebp),%edx
+  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  aa:	0f b6 02             	movzbl (%edx),%eax
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	84 c0                	test   %al,%al
+  b2:	75 1c                	jne    d0 <strcmp+0x30>
+  b4:	eb 2a                	jmp    e0 <strcmp+0x40>
+  b6:	8d 76 00             	lea    0x0(%esi),%esi
+  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  c0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  c3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  c6:	83 c1 01             	add    $0x1,%ecx
+  c9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  cc:	84 c0                	test   %al,%al
+  ce:	74 10                	je     e0 <strcmp+0x40>
+  d0:	38 d8                	cmp    %bl,%al
+  d2:	74 ec                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d4:	29 d8                	sub    %ebx,%eax
+}
+  d6:	5b                   	pop    %ebx
+  d7:	5d                   	pop    %ebp
+  d8:	c3                   	ret    
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	89 f6                	mov    %esi,%esi
+  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 39 00             	cmpb   $0x0,(%ecx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 d2                	xor    %edx,%edx
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c2 01             	add    $0x1,%edx
+ 103:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 107:	89 d0                	mov    %edx,%eax
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	5d                   	pop    %ebp
+ 10c:	c3                   	ret    
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 110:	31 c0                	xor    %eax,%eax
+}
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 11a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	89 d0                	mov    %edx,%eax
+ 134:	5f                   	pop    %edi
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	89 f6                	mov    %esi,%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	74 1d                	je     16e <strchr+0x2e>
+    if(*s == c)
+ 151:	38 d3                	cmp    %dl,%bl
+ 153:	89 d9                	mov    %ebx,%ecx
+ 155:	75 0d                	jne    164 <strchr+0x24>
+ 157:	eb 17                	jmp    170 <strchr+0x30>
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	38 ca                	cmp    %cl,%dl
+ 162:	74 0c                	je     170 <strchr+0x30>
+  for(; *s; s++)
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	0f b6 10             	movzbl (%eax),%edx
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 16e:	31 c0                	xor    %eax,%eax
+}
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+ 185:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 186:	31 f6                	xor    %esi,%esi
+ 188:	89 f3                	mov    %esi,%ebx
+{
+ 18a:	83 ec 1c             	sub    $0x1c,%esp
+ 18d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 190:	eb 2f                	jmp    1c1 <gets+0x41>
+ 192:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 198:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 19b:	83 ec 04             	sub    $0x4,%esp
+ 19e:	6a 01                	push   $0x1
+ 1a0:	50                   	push   %eax
+ 1a1:	6a 00                	push   $0x0
+ 1a3:	e8 32 01 00 00       	call   2da <read>
+    if(cc < 1)
+ 1a8:	83 c4 10             	add    $0x10,%esp
+ 1ab:	85 c0                	test   %eax,%eax
+ 1ad:	7e 1c                	jle    1cb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1af:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b3:	83 c7 01             	add    $0x1,%edi
+ 1b6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1b9:	3c 0a                	cmp    $0xa,%al
+ 1bb:	74 23                	je     1e0 <gets+0x60>
+ 1bd:	3c 0d                	cmp    $0xd,%al
+ 1bf:	74 1f                	je     1e0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1c1:	83 c3 01             	add    $0x1,%ebx
+ 1c4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1c7:	89 fe                	mov    %edi,%esi
+ 1c9:	7c cd                	jl     198 <gets+0x18>
+ 1cb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1d6:	5b                   	pop    %ebx
+ 1d7:	5e                   	pop    %esi
+ 1d8:	5f                   	pop    %edi
+ 1d9:	5d                   	pop    %ebp
+ 1da:	c3                   	ret    
+ 1db:	90                   	nop
+ 1dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e6:	01 de                	add    %ebx,%esi
+ 1e8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1ea:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5e                   	pop    %esi
+ 1f2:	5f                   	pop    %edi
+ 1f3:	5d                   	pop    %ebp
+ 1f4:	c3                   	ret    
+ 1f5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 f0 00 00 00       	call   302 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f3 00 00 00       	call   31a <fstat>
+  close(fd);
+ 227:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 22c:	e8 b9 00 00 00       	call   2ea <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+}
+ 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 237:	89 f0                	mov    %esi,%eax
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 245:	eb ed                	jmp    234 <stat+0x34>
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d 76 00             	lea    0x0(%esi),%esi
+ 269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 270:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 273:	83 c1 01             	add    $0x1,%ecx
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	90                   	nop
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+ 295:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 298:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 db                	test   %ebx,%ebx
+ 2a0:	7e 14                	jle    2b6 <memmove+0x26>
+ 2a2:	31 d2                	xor    %edx,%edx
+ 2a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2af:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2b2:	39 d3                	cmp    %edx,%ebx
+ 2b4:	75 f2                	jne    2a8 <memmove+0x18>
+  return vdst;
+}
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5d                   	pop    %ebp
+ 2b9:	c3                   	ret    
+
+000002ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <exit>:
+SYSCALL(exit)
+ 2c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <wait>:
+SYSCALL(wait)
+ 2ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <pipe>:
+SYSCALL(pipe)
+ 2d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <read>:
+SYSCALL(read)
+ 2da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <write>:
+SYSCALL(write)
+ 2e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <close>:
+SYSCALL(close)
+ 2ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <kill>:
+SYSCALL(kill)
+ 2f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <exec>:
+SYSCALL(exec)
+ 2fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <open>:
+SYSCALL(open)
+ 302:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mknod>:
+SYSCALL(mknod)
+ 30a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <unlink>:
+SYSCALL(unlink)
+ 312:	b8 12 00 00 00       	mov    $0x12,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <fstat>:
+SYSCALL(fstat)
+ 31a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <link>:
+SYSCALL(link)
+ 322:	b8 13 00 00 00       	mov    $0x13,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <mkdir>:
+SYSCALL(mkdir)
+ 32a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <chdir>:
+SYSCALL(chdir)
+ 332:	b8 09 00 00 00       	mov    $0x9,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <dup>:
+SYSCALL(dup)
+ 33a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getpid>:
+SYSCALL(getpid)
+ 342:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <sbrk>:
+SYSCALL(sbrk)
+ 34a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <sleep>:
+SYSCALL(sleep)
+ 352:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <uptime>:
+SYSCALL(uptime)
+ 35a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <getNumProc>:
+SYSCALL(getNumProc)
+ 362:	b8 16 00 00 00       	mov    $0x16,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 36a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 372:	b8 18 00 00 00       	mov    $0x18,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 37a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 382:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <process_state>:
+SYSCALL(process_state)
+ 38a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 392:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <inc_cpucounter>:
+ 39a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+ 3a2:	66 90                	xchg   %ax,%ax
+ 3a4:	66 90                	xchg   %ax,%ax
+ 3a6:	66 90                	xchg   %ax,%ax
+ 3a8:	66 90                	xchg   %ax,%ax
+ 3aa:	66 90                	xchg   %ax,%ax
+ 3ac:	66 90                	xchg   %ax,%ax
+ 3ae:	66 90                	xchg   %ax,%ax
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3b9:	85 d2                	test   %edx,%edx
+{
+ 3bb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3be:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3c0:	79 76                	jns    438 <printint+0x88>
+ 3c2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3c6:	74 70                	je     438 <printint+0x88>
+    x = -xx;
+ 3c8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3ca:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d1:	31 f6                	xor    %esi,%esi
+ 3d3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3d6:	eb 0a                	jmp    3e2 <printint+0x32>
+ 3d8:	90                   	nop
+ 3d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 fe                	mov    %edi,%esi
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3e7:	f7 f1                	div    %ecx
+ 3e9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
+  }while((x /= base) != 0);
+ 3f0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3f2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3f5:	75 e9                	jne    3e0 <printint+0x30>
+  if(neg)
+ 3f7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3fa:	85 c0                	test   %eax,%eax
+ 3fc:	74 08                	je     406 <printint+0x56>
+    buf[i++] = '-';
+ 3fe:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 403:	8d 7e 02             	lea    0x2(%esi),%edi
+ 406:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 40a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 40d:	8d 76 00             	lea    0x0(%esi),%esi
+ 410:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 413:	83 ec 04             	sub    $0x4,%esp
+ 416:	83 ee 01             	sub    $0x1,%esi
+ 419:	6a 01                	push   $0x1
+ 41b:	53                   	push   %ebx
+ 41c:	57                   	push   %edi
+ 41d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 420:	e8 bd fe ff ff       	call   2e2 <write>
+
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 43f:	eb 90                	jmp    3d1 <printint+0x21>
+ 441:	eb 0d                	jmp    450 <printf>
+ 443:	90                   	nop
+ 444:	90                   	nop
+ 445:	90                   	nop
+ 446:	90                   	nop
+ 447:	90                   	nop
+ 448:	90                   	nop
+ 449:	90                   	nop
+ 44a:	90                   	nop
+ 44b:	90                   	nop
+ 44c:	90                   	nop
+ 44d:	90                   	nop
+ 44e:	90                   	nop
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 459:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 45c:	0f b6 1e             	movzbl (%esi),%ebx
+ 45f:	84 db                	test   %bl,%bl
+ 461:	0f 84 b3 00 00 00    	je     51a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 467:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 46d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 46f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 472:	eb 2f                	jmp    4a3 <printf+0x53>
+ 474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	0f 84 a7 00 00 00    	je     528 <printf+0xd8>
+  write(fd, &c, 1);
+ 481:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 484:	83 ec 04             	sub    $0x4,%esp
+ 487:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 48a:	6a 01                	push   $0x1
+ 48c:	50                   	push   %eax
+ 48d:	ff 75 08             	pushl  0x8(%ebp)
+ 490:	e8 4d fe ff ff       	call   2e2 <write>
+ 495:	83 c4 10             	add    $0x10,%esp
+ 498:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 49b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 49f:	84 db                	test   %bl,%bl
+ 4a1:	74 77                	je     51a <printf+0xca>
+    if(state == 0){
+ 4a3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4a5:	0f be cb             	movsbl %bl,%ecx
+ 4a8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4ab:	74 cb                	je     478 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4ad:	83 ff 25             	cmp    $0x25,%edi
+ 4b0:	75 e6                	jne    498 <printf+0x48>
+      if(c == 'd'){
+ 4b2:	83 f8 64             	cmp    $0x64,%eax
+ 4b5:	0f 84 05 01 00 00    	je     5c0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4bb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4c1:	83 f9 70             	cmp    $0x70,%ecx
+ 4c4:	74 72                	je     538 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4c6:	83 f8 73             	cmp    $0x73,%eax
+ 4c9:	0f 84 99 00 00 00    	je     568 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4cf:	83 f8 63             	cmp    $0x63,%eax
+ 4d2:	0f 84 08 01 00 00    	je     5e0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	0f 84 ef 00 00 00    	je     5d0 <printf+0x180>
+  write(fd, &c, 1);
+ 4e1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4e4:	83 ec 04             	sub    $0x4,%esp
+ 4e7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4eb:	6a 01                	push   $0x1
+ 4ed:	50                   	push   %eax
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ec fd ff ff       	call   2e2 <write>
+ 4f6:	83 c4 0c             	add    $0xc,%esp
+ 4f9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4fc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ff:	6a 01                	push   $0x1
+ 501:	50                   	push   %eax
+ 502:	ff 75 08             	pushl  0x8(%ebp)
+ 505:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 508:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 50a:	e8 d3 fd ff ff       	call   2e2 <write>
+  for(i = 0; fmt[i]; i++){
+ 50f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 513:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 516:	84 db                	test   %bl,%bl
+ 518:	75 89                	jne    4a3 <printf+0x53>
+    }
+  }
+}
+ 51a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5f                   	pop    %edi
+ 520:	5d                   	pop    %ebp
+ 521:	c3                   	ret    
+ 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 528:	bf 25 00 00 00       	mov    $0x25,%edi
+ 52d:	e9 66 ff ff ff       	jmp    498 <printf+0x48>
+ 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 538:	83 ec 0c             	sub    $0xc,%esp
+ 53b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 540:	6a 00                	push   $0x0
+ 542:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 545:	8b 45 08             	mov    0x8(%ebp),%eax
+ 548:	8b 17                	mov    (%edi),%edx
+ 54a:	e8 61 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 54f:	89 f8                	mov    %edi,%eax
+ 551:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 554:	31 ff                	xor    %edi,%edi
+        ap++;
+ 556:	83 c0 04             	add    $0x4,%eax
+ 559:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 55c:	e9 37 ff ff ff       	jmp    498 <printf+0x48>
+ 561:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 568:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 56b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 56d:	83 c0 04             	add    $0x4,%eax
+ 570:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 573:	85 c9                	test   %ecx,%ecx
+ 575:	0f 84 8e 00 00 00    	je     609 <printf+0x1b9>
+        while(*s != 0){
+ 57b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 57e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 580:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 582:	84 c0                	test   %al,%al
+ 584:	0f 84 0e ff ff ff    	je     498 <printf+0x48>
+ 58a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 58d:	89 de                	mov    %ebx,%esi
+ 58f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 592:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 595:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 598:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 59b:	83 c6 01             	add    $0x1,%esi
+ 59e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5a1:	6a 01                	push   $0x1
+ 5a3:	57                   	push   %edi
+ 5a4:	53                   	push   %ebx
+ 5a5:	e8 38 fd ff ff       	call   2e2 <write>
+        while(*s != 0){
+ 5aa:	0f b6 06             	movzbl (%esi),%eax
+ 5ad:	83 c4 10             	add    $0x10,%esp
+ 5b0:	84 c0                	test   %al,%al
+ 5b2:	75 e4                	jne    598 <printf+0x148>
+ 5b4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5b7:	31 ff                	xor    %edi,%edi
+ 5b9:	e9 da fe ff ff       	jmp    498 <printf+0x48>
+ 5be:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	e9 73 ff ff ff       	jmp    542 <printf+0xf2>
+ 5cf:	90                   	nop
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+ 5d3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5d6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5d9:	6a 01                	push   $0x1
+ 5db:	e9 21 ff ff ff       	jmp    501 <printf+0xb1>
+        putc(fd, *ap);
+ 5e0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5e3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5e6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5e8:	6a 01                	push   $0x1
+        ap++;
+ 5ea:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5f0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5f3:	50                   	push   %eax
+ 5f4:	ff 75 08             	pushl  0x8(%ebp)
+ 5f7:	e8 e6 fc ff ff       	call   2e2 <write>
+        ap++;
+ 5fc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5ff:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 602:	31 ff                	xor    %edi,%edi
+ 604:	e9 8f fe ff ff       	jmp    498 <printf+0x48>
+          s = "(null)";
+ 609:	bb b1 07 00 00       	mov    $0x7b1,%ebx
+        while(*s != 0){
+ 60e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 613:	e9 72 ff ff ff       	jmp    58a <printf+0x13a>
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 621:	a1 64 0a 00 00       	mov    0xa64,%eax
+{
+ 626:	89 e5                	mov    %esp,%ebp
+ 628:	57                   	push   %edi
+ 629:	56                   	push   %esi
+ 62a:	53                   	push   %ebx
+ 62b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 62e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 638:	39 c8                	cmp    %ecx,%eax
+ 63a:	8b 10                	mov    (%eax),%edx
+ 63c:	73 32                	jae    670 <free+0x50>
+ 63e:	39 d1                	cmp    %edx,%ecx
+ 640:	72 04                	jb     646 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 642:	39 d0                	cmp    %edx,%eax
+ 644:	72 32                	jb     678 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 646:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 649:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64c:	39 fa                	cmp    %edi,%edx
+ 64e:	74 30                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 650:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 653:	8b 50 04             	mov    0x4(%eax),%edx
+ 656:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 659:	39 f1                	cmp    %esi,%ecx
+ 65b:	74 3a                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 65d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 65f:	a3 64 0a 00 00       	mov    %eax,0xa64
+}
+ 664:	5b                   	pop    %ebx
+ 665:	5e                   	pop    %esi
+ 666:	5f                   	pop    %edi
+ 667:	5d                   	pop    %ebp
+ 668:	c3                   	ret    
+ 669:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 04                	jb     678 <free+0x58>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	72 ce                	jb     646 <free+0x26>
+{
+ 678:	89 d0                	mov    %edx,%eax
+ 67a:	eb bc                	jmp    638 <free+0x18>
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 c6                	jne    65d <free+0x3d>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 64 0a 00 00       	mov    %eax,0xa64
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	55                   	push   %ebp
+ 6b1:	89 e5                	mov    %esp,%ebp
+ 6b3:	57                   	push   %edi
+ 6b4:	56                   	push   %esi
+ 6b5:	53                   	push   %ebx
+ 6b6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6bc:	8b 15 64 0a 00 00    	mov    0xa64,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6c5:	c1 ef 03             	shr    $0x3,%edi
+ 6c8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6cb:	85 d2                	test   %edx,%edx
+ 6cd:	0f 84 9d 00 00 00    	je     770 <malloc+0xc0>
+ 6d3:	8b 02                	mov    (%edx),%eax
+ 6d5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6d8:	39 cf                	cmp    %ecx,%edi
+ 6da:	76 6c                	jbe    748 <malloc+0x98>
+ 6dc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6e2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6e7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ea:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6f1:	eb 0e                	jmp    701 <malloc+0x51>
+ 6f3:	90                   	nop
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6fa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fd:	39 f9                	cmp    %edi,%ecx
+ 6ff:	73 47                	jae    748 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	39 05 64 0a 00 00    	cmp    %eax,0xa64
+ 707:	89 c2                	mov    %eax,%edx
+ 709:	75 ed                	jne    6f8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 70b:	83 ec 0c             	sub    $0xc,%esp
+ 70e:	56                   	push   %esi
+ 70f:	e8 36 fc ff ff       	call   34a <sbrk>
+  if(p == (char*)-1)
+ 714:	83 c4 10             	add    $0x10,%esp
+ 717:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 71a:	74 1c                	je     738 <malloc+0x88>
+  hp->s.size = nu;
+ 71c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 71f:	83 ec 0c             	sub    $0xc,%esp
+ 722:	83 c0 08             	add    $0x8,%eax
+ 725:	50                   	push   %eax
+ 726:	e8 f5 fe ff ff       	call   620 <free>
+  return freep;
+ 72b:	8b 15 64 0a 00 00    	mov    0xa64,%edx
+      if((p = morecore(nunits)) == 0)
+ 731:	83 c4 10             	add    $0x10,%esp
+ 734:	85 d2                	test   %edx,%edx
+ 736:	75 c0                	jne    6f8 <malloc+0x48>
+        return 0;
+  }
+}
+ 738:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 73b:	31 c0                	xor    %eax,%eax
+}
+ 73d:	5b                   	pop    %ebx
+ 73e:	5e                   	pop    %esi
+ 73f:	5f                   	pop    %edi
+ 740:	5d                   	pop    %ebp
+ 741:	c3                   	ret    
+ 742:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 748:	39 cf                	cmp    %ecx,%edi
+ 74a:	74 54                	je     7a0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 74c:	29 f9                	sub    %edi,%ecx
+ 74e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 751:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 754:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 757:	89 15 64 0a 00 00    	mov    %edx,0xa64
+}
+ 75d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 760:	83 c0 08             	add    $0x8,%eax
+}
+ 763:	5b                   	pop    %ebx
+ 764:	5e                   	pop    %esi
+ 765:	5f                   	pop    %edi
+ 766:	5d                   	pop    %ebp
+ 767:	c3                   	ret    
+ 768:	90                   	nop
+ 769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
+ 777:	0a 00 00 
+ 77a:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
+ 781:	0a 00 00 
+    base.s.size = 0;
+ 784:	b8 68 0a 00 00       	mov    $0xa68,%eax
+ 789:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
+ 790:	00 00 00 
+ 793:	e9 44 ff ff ff       	jmp    6dc <malloc+0x2c>
+ 798:	90                   	nop
+ 799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 08                	mov    (%eax),%ecx
+ 7a2:	89 0a                	mov    %ecx,(%edx)
+ 7a4:	eb b1                	jmp    757 <malloc+0xa7>
diff -ruN xv6org/echo.d xv6mhybrid/echo.d
--- xv6org/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/echo.d	2020-10-15 19:50:33.813765113 +0530
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/echo.o and xv6mhybrid/echo.o differ
diff -ruN xv6org/echo.sym xv6mhybrid/echo.sym
--- xv6org/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/echo.sym	2020-10-15 19:50:33.877760933 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+000007a8 .rodata
+000007cc .eh_frame
+00000a64 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+000007b8 digits.1056
+00000000 umalloc.c
+00000a64 freep
+00000a68 base
+00000070 strcpy
+00000450 printf
+00000290 memmove
+0000030a mknod
+00000180 gets
+00000342 getpid
+000006b0 malloc
+00000352 sleep
+00000382 get_burst_time
+000002d2 pipe
+000002e2 write
+0000031a fstat
+000002f2 kill
+0000038a process_state
+00000332 chdir
+00000392 dec_burstTime
+000002fa exec
+000002ca wait
+0000039a inc_cpucounter
+000002da read
+00000312 unlink
+000002ba fork
+0000034a sbrk
+0000035a uptime
+00000a64 __bss_start
+00000120 memset
+00000000 main
+0000037a set_burst_time
+000000a0 strcmp
+0000033a dup
+0000036a getMaxPid
+00000362 getNumProc
+00000372 getProcInfo
+00000200 stat
+00000a64 _edata
+00000a70 _end
+00000322 link
+000002c2 exit
+00000250 atoi
+000000f0 strlen
+00000302 open
+00000140 strchr
+0000032a mkdir
+000002ea close
+00000620 free
Binary files xv6org/entry.o and xv6mhybrid/entry.o differ
Binary files xv6org/entryother and xv6mhybrid/entryother differ
diff -ruN xv6org/entryother.asm xv6mhybrid/entryother.asm
--- xv6org/entryother.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/entryother.asm	2020-10-15 18:57:01.809599060 +0530
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -ruN xv6org/entryother.d xv6mhybrid/entryother.d
--- xv6org/entryother.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/entryother.d	2020-10-15 18:57:01.801599277 +0530
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files xv6org/entryother.o and xv6mhybrid/entryother.o differ
diff -ruN xv6org/ex1.c xv6mhybrid/ex1.c
--- xv6org/ex1.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ex1.c	2020-09-23 19:10:58.000000000 +0530
@@ -0,0 +1,21 @@
+#include <stdio.h>
+int main(int argc, char **argv)
+{
+    int x = 1;
+    printf("Hello x = %d\n", x);
+    //
+    // Put in-line assembly here to increment
+    // the value of x by 1 using in-line assembly
+    //
+    asm("inc %0": "+r"(x));
+    printf("Hello x = %d after increment\n", x);
+
+    if (x == 2)
+    {
+        printf("OK\n");
+    }
+    else
+    {
+        printf("ERROR\n");
+    }
+}
\ No newline at end of file
diff -ruN xv6org/exec.d xv6mhybrid/exec.d
--- xv6org/exec.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/exec.d	2020-10-15 19:50:35.965625078 +0530
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files xv6org/exec.o and xv6mhybrid/exec.o differ
diff -ruN xv6org/file.d xv6mhybrid/file.d
--- xv6org/file.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/file.d	2020-10-15 19:50:36.005622483 +0530
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files xv6org/file.o and xv6mhybrid/file.o differ
Binary files xv6org/_forktest and xv6mhybrid/_forktest differ
diff -ruN xv6org/forktest.asm xv6mhybrid/forktest.asm
--- xv6org/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/forktest.asm	2020-10-15 19:50:34.041750228 +0530
@@ -0,0 +1,716 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "OK tested.\n");
+}
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  forktest();
+  11:	e8 3a 00 00 00       	call   50 <forktest>
+  exit();
+  16:	e8 87 03 00 00       	call   3a2 <exit>
+  1b:	66 90                	xchg   %ax,%ax
+  1d:	66 90                	xchg   %ax,%ax
+  1f:	90                   	nop
+
+00000020 <printf>:
+{
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	53                   	push   %ebx
+  24:	83 ec 10             	sub    $0x10,%esp
+  27:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  2a:	53                   	push   %ebx
+  2b:	e8 a0 01 00 00       	call   1d0 <strlen>
+  30:	83 c4 0c             	add    $0xc,%esp
+  33:	50                   	push   %eax
+  34:	53                   	push   %ebx
+  35:	ff 75 08             	pushl  0x8(%ebp)
+  38:	e8 85 03 00 00       	call   3c2 <write>
+}
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  43:	c9                   	leave  
+  44:	c3                   	ret    
+  45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000050 <forktest>:
+{
+  50:	55                   	push   %ebp
+  51:	89 e5                	mov    %esp,%ebp
+  53:	53                   	push   %ebx
+  int n=0, pid;
+  54:	31 db                	xor    %ebx,%ebx
+{
+  56:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  59:	68 84 04 00 00       	push   $0x484
+  5e:	e8 6d 01 00 00       	call   1d0 <strlen>
+  63:	83 c4 0c             	add    $0xc,%esp
+  66:	50                   	push   %eax
+  67:	68 84 04 00 00       	push   $0x484
+  6c:	6a 01                	push   $0x1
+  6e:	e8 4f 03 00 00       	call   3c2 <write>
+  73:	83 c4 10             	add    $0x10,%esp
+  76:	eb 19                	jmp    91 <forktest+0x41>
+  78:	90                   	nop
+  79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(pid == 0)
+  80:	0f 84 7c 00 00 00    	je     102 <forktest+0xb2>
+    n++;
+  86:	83 c3 01             	add    $0x1,%ebx
+  while(n<1000)
+  89:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  8f:	74 4f                	je     e0 <forktest+0x90>
+    pid = fork();
+  91:	e8 04 03 00 00       	call   39a <fork>
+    if(pid < 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	79 e6                	jns    80 <forktest+0x30>
+  while(n>0)
+  9a:	85 db                	test   %ebx,%ebx
+  9c:	74 10                	je     ae <forktest+0x5e>
+  9e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0)
+  a0:	e8 05 03 00 00       	call   3aa <wait>
+  a5:	85 c0                	test   %eax,%eax
+  a7:	78 5e                	js     107 <forktest+0xb7>
+  while(n>0)
+  a9:	83 eb 01             	sub    $0x1,%ebx
+  ac:	75 f2                	jne    a0 <forktest+0x50>
+  if(wait() != -1)
+  ae:	e8 f7 02 00 00       	call   3aa <wait>
+  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  b6:	75 71                	jne    129 <forktest+0xd9>
+  write(fd, s, strlen(s));
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	68 be 04 00 00       	push   $0x4be
+  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
+  c5:	83 c4 0c             	add    $0xc,%esp
+  c8:	50                   	push   %eax
+  c9:	68 be 04 00 00       	push   $0x4be
+  ce:	6a 01                	push   $0x1
+  d0:	e8 ed 02 00 00       	call   3c2 <write>
+}
+  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d8:	c9                   	leave  
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  write(fd, s, strlen(s));
+  e0:	83 ec 0c             	sub    $0xc,%esp
+  e3:	68 cc 04 00 00       	push   $0x4cc
+  e8:	e8 e3 00 00 00       	call   1d0 <strlen>
+  ed:	83 c4 0c             	add    $0xc,%esp
+  f0:	50                   	push   %eax
+  f1:	68 cc 04 00 00       	push   $0x4cc
+  f6:	6a 01                	push   $0x1
+  f8:	e8 c5 02 00 00       	call   3c2 <write>
+    exit();
+  fd:	e8 a0 02 00 00       	call   3a2 <exit>
+      exit();
+ 102:	e8 9b 02 00 00       	call   3a2 <exit>
+  write(fd, s, strlen(s));
+ 107:	83 ec 0c             	sub    $0xc,%esp
+ 10a:	68 97 04 00 00       	push   $0x497
+ 10f:	e8 bc 00 00 00       	call   1d0 <strlen>
+ 114:	83 c4 0c             	add    $0xc,%esp
+ 117:	50                   	push   %eax
+ 118:	68 97 04 00 00       	push   $0x497
+ 11d:	6a 01                	push   $0x1
+ 11f:	e8 9e 02 00 00       	call   3c2 <write>
+      exit();
+ 124:	e8 79 02 00 00       	call   3a2 <exit>
+  write(fd, s, strlen(s));
+ 129:	83 ec 0c             	sub    $0xc,%esp
+ 12c:	68 ab 04 00 00       	push   $0x4ab
+ 131:	e8 9a 00 00 00       	call   1d0 <strlen>
+ 136:	83 c4 0c             	add    $0xc,%esp
+ 139:	50                   	push   %eax
+ 13a:	68 ab 04 00 00       	push   $0x4ab
+ 13f:	6a 01                	push   $0x1
+ 141:	e8 7c 02 00 00       	call   3c2 <write>
+    exit();
+ 146:	e8 57 02 00 00       	call   3a2 <exit>
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 15a:	89 c2                	mov    %eax,%edx
+ 15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 160:	83 c1 01             	add    $0x1,%ecx
+ 163:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 167:	83 c2 01             	add    $0x1,%edx
+ 16a:	84 db                	test   %bl,%bl
+ 16c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 16f:	75 ef                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 171:	5b                   	pop    %ebx
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 17a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 55 08             	mov    0x8(%ebp),%edx
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 18a:	0f b6 02             	movzbl (%edx),%eax
+ 18d:	0f b6 19             	movzbl (%ecx),%ebx
+ 190:	84 c0                	test   %al,%al
+ 192:	75 1c                	jne    1b0 <strcmp+0x30>
+ 194:	eb 2a                	jmp    1c0 <strcmp+0x40>
+ 196:	8d 76 00             	lea    0x0(%esi),%esi
+ 199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1a6:	83 c1 01             	add    $0x1,%ecx
+ 1a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 1ac:	84 c0                	test   %al,%al
+ 1ae:	74 10                	je     1c0 <strcmp+0x40>
+ 1b0:	38 d8                	cmp    %bl,%al
+ 1b2:	74 ec                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b4:	29 d8                	sub    %ebx,%eax
+}
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5d                   	pop    %ebp
+ 1b8:	c3                   	ret    
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	89 f6                	mov    %esi,%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1d6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1d9:	74 15                	je     1f0 <strlen+0x20>
+ 1db:	31 d2                	xor    %edx,%edx
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c2 01             	add    $0x1,%edx
+ 1e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1e7:	89 d0                	mov    %edx,%eax
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c0                	xor    %eax,%eax
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	c3                   	ret    
+ 1f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 212:	89 d0                	mov    %edx,%eax
+ 214:	5f                   	pop    %edi
+ 215:	5d                   	pop    %ebp
+ 216:	c3                   	ret    
+ 217:	89 f6                	mov    %esi,%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	53                   	push   %ebx
+ 224:	8b 45 08             	mov    0x8(%ebp),%eax
+ 227:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 22a:	0f b6 10             	movzbl (%eax),%edx
+ 22d:	84 d2                	test   %dl,%dl
+ 22f:	74 1d                	je     24e <strchr+0x2e>
+    if(*s == c)
+ 231:	38 d3                	cmp    %dl,%bl
+ 233:	89 d9                	mov    %ebx,%ecx
+ 235:	75 0d                	jne    244 <strchr+0x24>
+ 237:	eb 17                	jmp    250 <strchr+0x30>
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 240:	38 ca                	cmp    %cl,%dl
+ 242:	74 0c                	je     250 <strchr+0x30>
+  for(; *s; s++)
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	0f b6 10             	movzbl (%eax),%edx
+ 24a:	84 d2                	test   %dl,%dl
+ 24c:	75 f2                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 24e:	31 c0                	xor    %eax,%eax
+}
+ 250:	5b                   	pop    %ebx
+ 251:	5d                   	pop    %ebp
+ 252:	c3                   	ret    
+ 253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
+ 265:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 266:	31 f6                	xor    %esi,%esi
+ 268:	89 f3                	mov    %esi,%ebx
+{
+ 26a:	83 ec 1c             	sub    $0x1c,%esp
+ 26d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 270:	eb 2f                	jmp    2a1 <gets+0x41>
+ 272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 278:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 27b:	83 ec 04             	sub    $0x4,%esp
+ 27e:	6a 01                	push   $0x1
+ 280:	50                   	push   %eax
+ 281:	6a 00                	push   $0x0
+ 283:	e8 32 01 00 00       	call   3ba <read>
+    if(cc < 1)
+ 288:	83 c4 10             	add    $0x10,%esp
+ 28b:	85 c0                	test   %eax,%eax
+ 28d:	7e 1c                	jle    2ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 28f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 293:	83 c7 01             	add    $0x1,%edi
+ 296:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 299:	3c 0a                	cmp    $0xa,%al
+ 29b:	74 23                	je     2c0 <gets+0x60>
+ 29d:	3c 0d                	cmp    $0xd,%al
+ 29f:	74 1f                	je     2c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2a1:	83 c3 01             	add    $0x1,%ebx
+ 2a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2a7:	89 fe                	mov    %edi,%esi
+ 2a9:	7c cd                	jl     278 <gets+0x18>
+ 2ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+ 2bb:	90                   	nop
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2c6:	01 de                	add    %ebx,%esi
+ 2c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d0:	5b                   	pop    %ebx
+ 2d1:	5e                   	pop    %esi
+ 2d2:	5f                   	pop    %edi
+ 2d3:	5d                   	pop    %ebp
+ 2d4:	c3                   	ret    
+ 2d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	56                   	push   %esi
+ 2e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e5:	83 ec 08             	sub    $0x8,%esp
+ 2e8:	6a 00                	push   $0x0
+ 2ea:	ff 75 08             	pushl  0x8(%ebp)
+ 2ed:	e8 f0 00 00 00       	call   3e2 <open>
+  if(fd < 0)
+ 2f2:	83 c4 10             	add    $0x10,%esp
+ 2f5:	85 c0                	test   %eax,%eax
+ 2f7:	78 27                	js     320 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ff:	89 c3                	mov    %eax,%ebx
+ 301:	50                   	push   %eax
+ 302:	e8 f3 00 00 00       	call   3fa <fstat>
+  close(fd);
+ 307:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 30c:	e8 b9 00 00 00       	call   3ca <close>
+  return r;
+ 311:	83 c4 10             	add    $0x10,%esp
+}
+ 314:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 317:	89 f0                	mov    %esi,%eax
+ 319:	5b                   	pop    %ebx
+ 31a:	5e                   	pop    %esi
+ 31b:	5d                   	pop    %ebp
+ 31c:	c3                   	ret    
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 320:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 325:	eb ed                	jmp    314 <stat+0x34>
+ 327:	89 f6                	mov    %esi,%esi
+ 329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 337:	0f be 11             	movsbl (%ecx),%edx
+ 33a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 33d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 33f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 344:	77 1f                	ja     365 <atoi+0x35>
+ 346:	8d 76 00             	lea    0x0(%esi),%esi
+ 349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 350:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 353:	83 c1 01             	add    $0x1,%ecx
+ 356:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 11             	movsbl (%ecx),%edx
+ 35d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	5b                   	pop    %ebx
+ 366:	5d                   	pop    %ebp
+ 367:	c3                   	ret    
+ 368:	90                   	nop
+ 369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	56                   	push   %esi
+ 374:	53                   	push   %ebx
+ 375:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 378:	8b 45 08             	mov    0x8(%ebp),%eax
+ 37b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 37e:	85 db                	test   %ebx,%ebx
+ 380:	7e 14                	jle    396 <memmove+0x26>
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 388:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 38c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 38f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 392:	39 d3                	cmp    %edx,%ebx
+ 394:	75 f2                	jne    388 <memmove+0x18>
+  return vdst;
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5e                   	pop    %esi
+ 398:	5d                   	pop    %ebp
+ 399:	c3                   	ret    
+
+0000039a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <exit>:
+SYSCALL(exit)
+ 3a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <wait>:
+SYSCALL(wait)
+ 3aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <pipe>:
+SYSCALL(pipe)
+ 3b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <read>:
+SYSCALL(read)
+ 3ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <write>:
+SYSCALL(write)
+ 3c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <close>:
+SYSCALL(close)
+ 3ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <kill>:
+SYSCALL(kill)
+ 3d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <exec>:
+SYSCALL(exec)
+ 3da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <open>:
+SYSCALL(open)
+ 3e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <mknod>:
+SYSCALL(mknod)
+ 3ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <unlink>:
+SYSCALL(unlink)
+ 3f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <fstat>:
+SYSCALL(fstat)
+ 3fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <link>:
+SYSCALL(link)
+ 402:	b8 13 00 00 00       	mov    $0x13,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <mkdir>:
+SYSCALL(mkdir)
+ 40a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <chdir>:
+SYSCALL(chdir)
+ 412:	b8 09 00 00 00       	mov    $0x9,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <dup>:
+SYSCALL(dup)
+ 41a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <getpid>:
+SYSCALL(getpid)
+ 422:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <sbrk>:
+SYSCALL(sbrk)
+ 42a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <sleep>:
+SYSCALL(sleep)
+ 432:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <uptime>:
+SYSCALL(uptime)
+ 43a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <getNumProc>:
+SYSCALL(getNumProc)
+ 442:	b8 16 00 00 00       	mov    $0x16,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 44a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 452:	b8 18 00 00 00       	mov    $0x18,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 45a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 462:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <process_state>:
+SYSCALL(process_state)
+ 46a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+
+00000472 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 472:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 477:	cd 40                	int    $0x40
+ 479:	c3                   	ret    
+
+0000047a <inc_cpucounter>:
+ 47a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 47f:	cd 40                	int    $0x40
+ 481:	c3                   	ret    
diff -ruN xv6org/forktest.c xv6mhybrid/forktest.c
--- xv6org/forktest.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/forktest.c	2020-10-14 15:36:58.842936000 +0530
@@ -1,12 +1,8 @@
-// Test that fork fails gracefully.
-// Tiny executable so that the limit can be filling the proc table.
-
+// to test fork executes correctly or not
 #include "types.h"
 #include "stat.h"
 #include "user.h"
 
-#define N  1000
-
 void
 printf(int fd, const char *s, ...)
 {
@@ -16,36 +12,41 @@
 void
 forktest(void)
 {
-  int n, pid;
-
-  printf(1, "fork test\n");
-
-  for(n=0; n<N; n++){
+  int n=0, pid;
+  printf(1, "Fork test started\n");
+  while(n<1000)
+  {
     pid = fork();
     if(pid < 0)
       break;
     if(pid == 0)
       exit();
+    n++;
   }
 
-  if(n == N){
-    printf(1, "fork claimed to work N times!\n", N);
+  if(n == 1000)
+  {
+    printf(1, "fork claimed to work 1000 times!\n", 1000);
     exit();
   }
 
-  for(; n > 0; n--){
-    if(wait() < 0){
+  while(n>0)
+  {
+    if(wait() < 0)
+    {
       printf(1, "wait stopped early\n");
       exit();
     }
+    n--;
   }
 
-  if(wait() != -1){
+  if(wait() != -1)
+  {
     printf(1, "wait got too many\n");
     exit();
   }
 
-  printf(1, "fork test OK\n");
+  printf(1, "OK tested.\n");
 }
 
 int
diff -ruN xv6org/forktest.d xv6mhybrid/forktest.d
--- xv6org/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/forktest.d	2020-10-15 19:50:33.929757537 +0530
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/forktest.o and xv6mhybrid/forktest.o differ
diff -ruN xv6org/fs.d xv6mhybrid/fs.d
--- xv6org/fs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/fs.d	2020-10-15 19:50:36.121614968 +0530
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files xv6org/fs.img and xv6mhybrid/fs.img differ
Binary files xv6org/fs.o and xv6mhybrid/fs.o differ
diff -ruN xv6org/.git/config xv6mhybrid/.git/config
--- xv6org/.git/config	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/config	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1,11 @@
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+[remote "origin"]
+	url = git://github.com/mit-pdos/xv6-public.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "master"]
+	remote = origin
+	merge = refs/heads/master
diff -ruN xv6org/.git/description xv6mhybrid/.git/description
--- xv6org/.git/description	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/description	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1 @@
+Unnamed repository; edit this file 'description' to name the repository.
diff -ruN xv6org/.git/HEAD xv6mhybrid/.git/HEAD
--- xv6org/.git/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/HEAD	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1 @@
+ref: refs/heads/master
diff -ruN xv6org/.git/hooks/applypatch-msg.sample xv6mhybrid/.git/hooks/applypatch-msg.sample
--- xv6org/.git/hooks/applypatch-msg.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/applypatch-msg.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,15 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
diff -ruN xv6org/.git/hooks/commit-msg.sample xv6mhybrid/.git/hooks/commit-msg.sample
--- xv6org/.git/hooks/commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/commit-msg.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
diff -ruN xv6org/.git/hooks/fsmonitor-watchman.sample xv6mhybrid/.git/hooks/fsmonitor-watchman.sample
--- xv6org/.git/hooks/fsmonitor-watchman.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/fsmonitor-watchman.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,109 @@
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 1) and a time in nanoseconds
+# formatted as a string and outputs to stdout all files that have been
+# modified since the given time. Paths must be relative to the root of
+# the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $time) = @ARGV;
+
+# Check the hook interface version
+
+if ($version == 1) {
+	# convert nanoseconds to seconds
+	# subtract one second to make sure watchman will return all changes
+	$time = int ($time / 1000000000) - 1;
+} else {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree;
+if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+	$git_work_tree = Win32::GetCwd();
+	$git_work_tree =~ tr/\\/\//;
+} else {
+	require Cwd;
+	$git_work_tree = Cwd::cwd();
+}
+
+my $retry = 1;
+
+launch_watchman();
+
+sub launch_watchman {
+
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	    or die "open2() failed: $!\n" .
+	    "Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $time but were not transient (ie created after
+	# $time but no longer exist).
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only.
+
+	my $query = <<"	END";
+		["query", "$git_work_tree", {
+			"since": $time,
+			"fields": ["name"]
+		}]
+	END
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	die "Watchman: command returned no output.\n" .
+	    "Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	    "Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	my $json_pkg;
+	eval {
+		require JSON::XS;
+		$json_pkg = "JSON::XS";
+		1;
+	} or do {
+		require JSON::PP;
+		$json_pkg = "JSON::PP";
+	};
+
+	my $o = $json_pkg->new->utf8->decode($response);
+
+	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		print STDERR "Adding '$git_work_tree' to watchman's watch list.\n";
+		$retry--;
+		qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		print "/\0";
+		eval { launch_watchman() };
+		exit 0;
+	}
+
+	die "Watchman: $o->{error}.\n" .
+	    "Falling back to scanning...\n" if $o->{error};
+
+	binmode STDOUT, ":utf8";
+	local $, = "\0";
+	print @{$o->{files}};
+}
diff -ruN xv6org/.git/hooks/post-update.sample xv6mhybrid/.git/hooks/post-update.sample
--- xv6org/.git/hooks/post-update.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/post-update.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,8 @@
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
diff -ruN xv6org/.git/hooks/pre-applypatch.sample xv6mhybrid/.git/hooks/pre-applypatch.sample
--- xv6org/.git/hooks/pre-applypatch.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/pre-applypatch.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,14 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
diff -ruN xv6org/.git/hooks/pre-commit.sample xv6mhybrid/.git/hooks/pre-commit.sample
--- xv6org/.git/hooks/pre-commit.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/pre-commit.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,49 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
diff -ruN xv6org/.git/hooks/pre-merge-commit.sample xv6mhybrid/.git/hooks/pre-merge-commit.sample
--- xv6org/.git/hooks/pre-merge-commit.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/pre-merge-commit.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,13 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
diff -ruN xv6org/.git/hooks/prepare-commit-msg.sample xv6mhybrid/.git/hooks/prepare-commit-msg.sample
--- xv6org/.git/hooks/prepare-commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/prepare-commit-msg.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,42 @@
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
diff -ruN xv6org/.git/hooks/pre-push.sample xv6mhybrid/.git/hooks/pre-push.sample
--- xv6org/.git/hooks/pre-push.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/pre-push.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,53 @@
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local sha1> <remote ref> <remote sha1>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+z40=0000000000000000000000000000000000000000
+
+while read local_ref local_sha remote_ref remote_sha
+do
+	if [ "$local_sha" = $z40 ]
+	then
+		# Handle delete
+		:
+	else
+		if [ "$remote_sha" = $z40 ]
+		then
+			# New branch, examine all commits
+			range="$local_sha"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_sha..$local_sha"
+		fi
+
+		# Check for WIP commit
+		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
+		if [ -n "$commit" ]
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
diff -ruN xv6org/.git/hooks/pre-rebase.sample xv6mhybrid/.git/hooks/pre-rebase.sample
--- xv6org/.git/hooks/pre-rebase.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/pre-rebase.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,169 @@
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
diff -ruN xv6org/.git/hooks/pre-receive.sample xv6mhybrid/.git/hooks/pre-receive.sample
--- xv6org/.git/hooks/pre-receive.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/pre-receive.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
diff -ruN xv6org/.git/hooks/update.sample xv6mhybrid/.git/hooks/update.sample
--- xv6org/.git/hooks/update.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/hooks/update.sample	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,128 @@
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --bool hooks.allowunannotated)
+allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --bool hooks.denycreatebranch)
+allowdeletetag=$(git config --bool hooks.allowdeletetag)
+allowmodifytag=$(git config --bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero="0000000000000000000000000000000000000000"
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
Binary files xv6org/.git/index and xv6mhybrid/.git/index differ
diff -ruN xv6org/.git/info/exclude xv6mhybrid/.git/info/exclude
--- xv6org/.git/info/exclude	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/info/exclude	2020-09-14 14:50:30.000000000 +0530
@@ -0,0 +1,6 @@
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
diff -ruN xv6org/.git/logs/HEAD xv6mhybrid/.git/logs/HEAD
--- xv6org/.git/logs/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/logs/HEAD	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 kousikr26 <kousik18@iitg.ac.in> 1600075238 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -ruN xv6org/.git/logs/refs/heads/master xv6mhybrid/.git/logs/refs/heads/master
--- xv6org/.git/logs/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/logs/refs/heads/master	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 kousikr26 <kousik18@iitg.ac.in> 1600075238 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -ruN xv6org/.git/logs/refs/remotes/origin/HEAD xv6mhybrid/.git/logs/refs/remotes/origin/HEAD
--- xv6org/.git/logs/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/logs/refs/remotes/origin/HEAD	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 kousikr26 <kousik18@iitg.ac.in> 1600075238 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
Binary files xv6org/.git/objects/pack/pack-f1097e8f7b49771604867bcfd66ab0fb98ba7afb.idx and xv6mhybrid/.git/objects/pack/pack-f1097e8f7b49771604867bcfd66ab0fb98ba7afb.idx differ
Binary files xv6org/.git/objects/pack/pack-f1097e8f7b49771604867bcfd66ab0fb98ba7afb.pack and xv6mhybrid/.git/objects/pack/pack-f1097e8f7b49771604867bcfd66ab0fb98ba7afb.pack differ
diff -ruN xv6org/.git/packed-refs xv6mhybrid/.git/packed-refs
--- xv6org/.git/packed-refs	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/packed-refs	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1,28 @@
+# pack-refs with: peeled fully-peeled sorted 
+eeb7b415dbcb12cc362d0783e41c3d1f44066b17 refs/remotes/origin/master
+af0e851a3a8a7d13bc2f2d596b58500594040892 refs/tags/osdi12-submit
+^8286b58087750e09bac3815219e0382a0bb2b159
+9e698c587b135db17b38a5838976805b9c01e338 refs/tags/symlinks
+05e0b1218dcebe1f40028531b51926df8ae52be0 refs/tags/xv6-2006
+^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
+42f3c3f7be9717b66ba6e133a113c0f751c53133 refs/tags/xv6-2007
+adcd16c3f7588b4a28d37495f05e94278c9e3a1e refs/tags/xv6-2008
+124fe7e457c0dc9b671c7ffccb56004eb61da4f0 refs/tags/xv6-2010
+5922cdbbcc4fdbd76eec9e0dad9f650e4c86ee99 refs/tags/xv6-rev0
+^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
+81f31a773dd49b001437eaed3975438585ff9911 refs/tags/xv6-rev1
+^42f3c3f7be9717b66ba6e133a113c0f751c53133
+b818915f793cd20c5d1e24f668534a9d690f3cc8 refs/tags/xv6-rev11
+30dab73b68b816877dc8f78504ceca0808c976eb refs/tags/xv6-rev3
+^074ac7ccd43c08d01a237ce6f14cac10715a51ef
+113005d48f09a4e3939940d72a77bf6973ea8755 refs/tags/xv6-rev4
+^124fe7e457c0dc9b671c7ffccb56004eb61da4f0
+d6aa754494b37e32862b1f78d53deedc53f66a15 refs/tags/xv6-rev5
+^ae603ff5e79bb7b5eea4147425752f33d29fe558
+3e9d6413d331b4c912d55bfac253af1629d4bac9 refs/tags/xv6-rev6
+^e64c661ae8b91bd7e858bb1895bef96e6ac2b4bb
+ccc25c0fac59067d88af52ad9f3b8cee97c3810a refs/tags/xv6-rev7
+^2ae8392a5c203a7b1bc5b8bff5eabc8b5eab8972
+7d6f95e327f1c18570d5dd187e3d92e1aadae2cf refs/tags/xv6-rev8
+^9ba21267e796eb462a657392906e3cbccaedcc99
+5bf3fbee00fb27cb8cb4eca72dcd9fc4c288ed71 refs/tags/xv6-rev9
diff -ruN xv6org/.git/refs/heads/master xv6mhybrid/.git/refs/heads/master
--- xv6org/.git/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/refs/heads/master	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1 @@
+eeb7b415dbcb12cc362d0783e41c3d1f44066b17
diff -ruN xv6org/.git/refs/remotes/origin/HEAD xv6mhybrid/.git/refs/remotes/origin/HEAD
--- xv6org/.git/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/.git/refs/remotes/origin/HEAD	2020-09-14 14:50:38.000000000 +0530
@@ -0,0 +1 @@
+ref: refs/remotes/origin/master
Binary files xv6org/_grep and xv6mhybrid/_grep differ
diff -ruN xv6org/grep.asm xv6mhybrid/grep.asm
--- xv6org/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/grep.asm	2020-10-15 19:50:34.205739538 +0530
@@ -0,0 +1,1605 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 18             	sub    $0x18,%esp
+  14:	8b 39                	mov    (%ecx),%edi
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  19:	83 ff 01             	cmp    $0x1,%edi
+  1c:	7e 7c                	jle    9a <main+0x9a>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  1e:	8b 43 04             	mov    0x4(%ebx),%eax
+  21:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  24:	83 ff 02             	cmp    $0x2,%edi
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  27:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  2f:	74 46                	je     77 <main+0x77>
+  31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((fd = open(argv[i], 0)) < 0){
+  38:	83 ec 08             	sub    $0x8,%esp
+  3b:	6a 00                	push   $0x0
+  3d:	ff 33                	pushl  (%ebx)
+  3f:	e8 7e 05 00 00       	call   5c2 <open>
+  44:	83 c4 10             	add    $0x10,%esp
+  47:	85 c0                	test   %eax,%eax
+  49:	78 3b                	js     86 <main+0x86>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  4b:	83 ec 08             	sub    $0x8,%esp
+  4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(i = 2; i < argc; i++){
+  51:	83 c6 01             	add    $0x1,%esi
+    grep(pattern, fd);
+  54:	50                   	push   %eax
+  55:	ff 75 e0             	pushl  -0x20(%ebp)
+  58:	83 c3 04             	add    $0x4,%ebx
+  5b:	e8 d0 01 00 00       	call   230 <grep>
+    close(fd);
+  60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  63:	89 04 24             	mov    %eax,(%esp)
+  66:	e8 3f 05 00 00       	call   5aa <close>
+  for(i = 2; i < argc; i++){
+  6b:	83 c4 10             	add    $0x10,%esp
+  6e:	39 f7                	cmp    %esi,%edi
+  70:	7f c6                	jg     38 <main+0x38>
+  }
+  exit();
+  72:	e8 0b 05 00 00       	call   582 <exit>
+    grep(pattern, 0);
+  77:	52                   	push   %edx
+  78:	52                   	push   %edx
+  79:	6a 00                	push   $0x0
+  7b:	50                   	push   %eax
+  7c:	e8 af 01 00 00       	call   230 <grep>
+    exit();
+  81:	e8 fc 04 00 00       	call   582 <exit>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  86:	50                   	push   %eax
+  87:	ff 33                	pushl  (%ebx)
+  89:	68 88 0a 00 00       	push   $0xa88
+  8e:	6a 01                	push   $0x1
+  90:	e8 7b 06 00 00       	call   710 <printf>
+      exit();
+  95:	e8 e8 04 00 00       	call   582 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  9a:	51                   	push   %ecx
+  9b:	51                   	push   %ecx
+  9c:	68 68 0a 00 00       	push   $0xa68
+  a1:	6a 02                	push   $0x2
+  a3:	e8 68 06 00 00       	call   710 <printf>
+    exit();
+  a8:	e8 d5 04 00 00       	call   582 <exit>
+  ad:	66 90                	xchg   %ax,%ax
+  af:	90                   	nop
+
+000000b0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	57                   	push   %edi
+  b4:	56                   	push   %esi
+  b5:	53                   	push   %ebx
+  b6:	83 ec 0c             	sub    $0xc,%esp
+  b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bf:	8b 7d 10             	mov    0x10(%ebp),%edi
+  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  c8:	83 ec 08             	sub    $0x8,%esp
+  cb:	57                   	push   %edi
+  cc:	56                   	push   %esi
+  cd:	e8 3e 00 00 00       	call   110 <matchhere>
+  d2:	83 c4 10             	add    $0x10,%esp
+  d5:	85 c0                	test   %eax,%eax
+  d7:	75 1f                	jne    f8 <matchstar+0x48>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  d9:	0f be 17             	movsbl (%edi),%edx
+  dc:	84 d2                	test   %dl,%dl
+  de:	74 0c                	je     ec <matchstar+0x3c>
+  e0:	83 c7 01             	add    $0x1,%edi
+  e3:	39 da                	cmp    %ebx,%edx
+  e5:	74 e1                	je     c8 <matchstar+0x18>
+  e7:	83 fb 2e             	cmp    $0x2e,%ebx
+  ea:	74 dc                	je     c8 <matchstar+0x18>
+  return 0;
+}
+  ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  ef:	5b                   	pop    %ebx
+  f0:	5e                   	pop    %esi
+  f1:	5f                   	pop    %edi
+  f2:	5d                   	pop    %ebp
+  f3:	c3                   	ret    
+  f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+  fb:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 100:	5b                   	pop    %ebx
+ 101:	5e                   	pop    %esi
+ 102:	5f                   	pop    %edi
+ 103:	5d                   	pop    %ebp
+ 104:	c3                   	ret    
+ 105:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000110 <matchhere>:
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	56                   	push   %esi
+ 115:	53                   	push   %ebx
+ 116:	83 ec 0c             	sub    $0xc,%esp
+  if(re[0] == '\0')
+ 119:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+ 11c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 11f:	0f b6 08             	movzbl (%eax),%ecx
+ 122:	84 c9                	test   %cl,%cl
+ 124:	74 67                	je     18d <matchhere+0x7d>
+  if(re[1] == '*')
+ 126:	0f be 40 01          	movsbl 0x1(%eax),%eax
+ 12a:	3c 2a                	cmp    $0x2a,%al
+ 12c:	74 6c                	je     19a <matchhere+0x8a>
+  if(re[0] == '$' && re[1] == '\0')
+ 12e:	80 f9 24             	cmp    $0x24,%cl
+ 131:	0f b6 1f             	movzbl (%edi),%ebx
+ 134:	75 08                	jne    13e <matchhere+0x2e>
+ 136:	84 c0                	test   %al,%al
+ 138:	0f 84 81 00 00 00    	je     1bf <matchhere+0xaf>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 13e:	84 db                	test   %bl,%bl
+ 140:	74 09                	je     14b <matchhere+0x3b>
+ 142:	38 d9                	cmp    %bl,%cl
+ 144:	74 3c                	je     182 <matchhere+0x72>
+ 146:	80 f9 2e             	cmp    $0x2e,%cl
+ 149:	74 37                	je     182 <matchhere+0x72>
+}
+ 14b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 14e:	31 c0                	xor    %eax,%eax
+}
+ 150:	5b                   	pop    %ebx
+ 151:	5e                   	pop    %esi
+ 152:	5f                   	pop    %edi
+ 153:	5d                   	pop    %ebp
+ 154:	c3                   	ret    
+ 155:	8d 76 00             	lea    0x0(%esi),%esi
+  if(re[1] == '*')
+ 158:	8b 75 08             	mov    0x8(%ebp),%esi
+ 15b:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
+ 15f:	80 f9 2a             	cmp    $0x2a,%cl
+ 162:	74 3b                	je     19f <matchhere+0x8f>
+  if(re[0] == '$' && re[1] == '\0')
+ 164:	3c 24                	cmp    $0x24,%al
+ 166:	75 04                	jne    16c <matchhere+0x5c>
+ 168:	84 c9                	test   %cl,%cl
+ 16a:	74 4f                	je     1bb <matchhere+0xab>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 16c:	0f b6 33             	movzbl (%ebx),%esi
+ 16f:	89 f2                	mov    %esi,%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	74 d6                	je     14b <matchhere+0x3b>
+ 175:	3c 2e                	cmp    $0x2e,%al
+ 177:	89 df                	mov    %ebx,%edi
+ 179:	74 04                	je     17f <matchhere+0x6f>
+ 17b:	38 c2                	cmp    %al,%dl
+ 17d:	75 cc                	jne    14b <matchhere+0x3b>
+ 17f:	0f be c1             	movsbl %cl,%eax
+    return matchhere(re+1, text+1);
+ 182:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  if(re[0] == '\0')
+ 186:	84 c0                	test   %al,%al
+    return matchhere(re+1, text+1);
+ 188:	8d 5f 01             	lea    0x1(%edi),%ebx
+  if(re[0] == '\0')
+ 18b:	75 cb                	jne    158 <matchhere+0x48>
+    return 1;
+ 18d:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 192:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+ 197:	5f                   	pop    %edi
+ 198:	5d                   	pop    %ebp
+ 199:	c3                   	ret    
+  if(re[1] == '*')
+ 19a:	89 fb                	mov    %edi,%ebx
+ 19c:	0f be c1             	movsbl %cl,%eax
+    return matchstar(re[0], re+2, text);
+ 19f:	8b 7d 08             	mov    0x8(%ebp),%edi
+ 1a2:	83 ec 04             	sub    $0x4,%esp
+ 1a5:	53                   	push   %ebx
+ 1a6:	8d 57 02             	lea    0x2(%edi),%edx
+ 1a9:	52                   	push   %edx
+ 1aa:	50                   	push   %eax
+ 1ab:	e8 00 ff ff ff       	call   b0 <matchstar>
+ 1b0:	83 c4 10             	add    $0x10,%esp
+}
+ 1b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5e                   	pop    %esi
+ 1b8:	5f                   	pop    %edi
+ 1b9:	5d                   	pop    %ebp
+ 1ba:	c3                   	ret    
+ 1bb:	0f b6 5f 01          	movzbl 0x1(%edi),%ebx
+    return *text == '\0';
+ 1bf:	31 c0                	xor    %eax,%eax
+ 1c1:	84 db                	test   %bl,%bl
+ 1c3:	0f 94 c0             	sete   %al
+ 1c6:	eb ca                	jmp    192 <matchhere+0x82>
+ 1c8:	90                   	nop
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001d0 <match>:
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	56                   	push   %esi
+ 1d4:	53                   	push   %ebx
+ 1d5:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  if(re[0] == '^')
+ 1db:	80 3e 5e             	cmpb   $0x5e,(%esi)
+ 1de:	75 11                	jne    1f1 <match+0x21>
+ 1e0:	eb 2e                	jmp    210 <match+0x40>
+ 1e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 1e8:	83 c3 01             	add    $0x1,%ebx
+ 1eb:	80 7b ff 00          	cmpb   $0x0,-0x1(%ebx)
+ 1ef:	74 16                	je     207 <match+0x37>
+    if(matchhere(re, text))
+ 1f1:	83 ec 08             	sub    $0x8,%esp
+ 1f4:	53                   	push   %ebx
+ 1f5:	56                   	push   %esi
+ 1f6:	e8 15 ff ff ff       	call   110 <matchhere>
+ 1fb:	83 c4 10             	add    $0x10,%esp
+ 1fe:	85 c0                	test   %eax,%eax
+ 200:	74 e6                	je     1e8 <match+0x18>
+      return 1;
+ 202:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 207:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20a:	5b                   	pop    %ebx
+ 20b:	5e                   	pop    %esi
+ 20c:	5d                   	pop    %ebp
+ 20d:	c3                   	ret    
+ 20e:	66 90                	xchg   %ax,%ax
+    return matchhere(re+1, text);
+ 210:	83 c6 01             	add    $0x1,%esi
+ 213:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 21c:	e9 ef fe ff ff       	jmp    110 <matchhere>
+ 221:	eb 0d                	jmp    230 <grep>
+ 223:	90                   	nop
+ 224:	90                   	nop
+ 225:	90                   	nop
+ 226:	90                   	nop
+ 227:	90                   	nop
+ 228:	90                   	nop
+ 229:	90                   	nop
+ 22a:	90                   	nop
+ 22b:	90                   	nop
+ 22c:	90                   	nop
+ 22d:	90                   	nop
+ 22e:	90                   	nop
+ 22f:	90                   	nop
+
+00000230 <grep>:
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	56                   	push   %esi
+ 235:	53                   	push   %ebx
+  m = 0;
+ 236:	31 f6                	xor    %esi,%esi
+{
+ 238:	83 ec 1c             	sub    $0x1c,%esp
+ 23b:	90                   	nop
+ 23c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 240:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 245:	83 ec 04             	sub    $0x4,%esp
+ 248:	29 f0                	sub    %esi,%eax
+ 24a:	50                   	push   %eax
+ 24b:	8d 86 60 0e 00 00    	lea    0xe60(%esi),%eax
+ 251:	50                   	push   %eax
+ 252:	ff 75 0c             	pushl  0xc(%ebp)
+ 255:	e8 40 03 00 00       	call   59a <read>
+ 25a:	83 c4 10             	add    $0x10,%esp
+ 25d:	85 c0                	test   %eax,%eax
+ 25f:	0f 8e bb 00 00 00    	jle    320 <grep+0xf0>
+    m += n;
+ 265:	01 c6                	add    %eax,%esi
+    p = buf;
+ 267:	bb 60 0e 00 00       	mov    $0xe60,%ebx
+    buf[m] = '\0';
+ 26c:	c6 86 60 0e 00 00 00 	movb   $0x0,0xe60(%esi)
+ 273:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+ 276:	8d 76 00             	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    while((q = strchr(p, '\n')) != 0){
+ 280:	83 ec 08             	sub    $0x8,%esp
+ 283:	6a 0a                	push   $0xa
+ 285:	53                   	push   %ebx
+ 286:	e8 75 01 00 00       	call   400 <strchr>
+ 28b:	83 c4 10             	add    $0x10,%esp
+ 28e:	85 c0                	test   %eax,%eax
+ 290:	89 c6                	mov    %eax,%esi
+ 292:	74 44                	je     2d8 <grep+0xa8>
+      if(match(pattern, p)){
+ 294:	83 ec 08             	sub    $0x8,%esp
+      *q = 0;
+ 297:	c6 06 00             	movb   $0x0,(%esi)
+ 29a:	8d 7e 01             	lea    0x1(%esi),%edi
+      if(match(pattern, p)){
+ 29d:	53                   	push   %ebx
+ 29e:	ff 75 08             	pushl  0x8(%ebp)
+ 2a1:	e8 2a ff ff ff       	call   1d0 <match>
+ 2a6:	83 c4 10             	add    $0x10,%esp
+ 2a9:	85 c0                	test   %eax,%eax
+ 2ab:	75 0b                	jne    2b8 <grep+0x88>
+      p = q+1;
+ 2ad:	89 fb                	mov    %edi,%ebx
+ 2af:	eb cf                	jmp    280 <grep+0x50>
+ 2b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        write(1, p, q+1 - p);
+ 2b8:	89 f8                	mov    %edi,%eax
+ 2ba:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 2bd:	c6 06 0a             	movb   $0xa,(%esi)
+        write(1, p, q+1 - p);
+ 2c0:	29 d8                	sub    %ebx,%eax
+ 2c2:	50                   	push   %eax
+ 2c3:	53                   	push   %ebx
+      p = q+1;
+ 2c4:	89 fb                	mov    %edi,%ebx
+        write(1, p, q+1 - p);
+ 2c6:	6a 01                	push   $0x1
+ 2c8:	e8 d5 02 00 00       	call   5a2 <write>
+ 2cd:	83 c4 10             	add    $0x10,%esp
+ 2d0:	eb ae                	jmp    280 <grep+0x50>
+ 2d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(p == buf)
+ 2d8:	81 fb 60 0e 00 00    	cmp    $0xe60,%ebx
+ 2de:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+ 2e1:	74 2d                	je     310 <grep+0xe0>
+    if(m > 0){
+ 2e3:	85 f6                	test   %esi,%esi
+ 2e5:	0f 8e 55 ff ff ff    	jle    240 <grep+0x10>
+      m -= p - buf;
+ 2eb:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2ed:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2f0:	2d 60 0e 00 00       	sub    $0xe60,%eax
+ 2f5:	29 c6                	sub    %eax,%esi
+      memmove(buf, p, m);
+ 2f7:	56                   	push   %esi
+ 2f8:	53                   	push   %ebx
+ 2f9:	68 60 0e 00 00       	push   $0xe60
+ 2fe:	e8 4d 02 00 00       	call   550 <memmove>
+ 303:	83 c4 10             	add    $0x10,%esp
+ 306:	e9 35 ff ff ff       	jmp    240 <grep+0x10>
+ 30b:	90                   	nop
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m = 0;
+ 310:	31 f6                	xor    %esi,%esi
+ 312:	e9 29 ff ff ff       	jmp    240 <grep+0x10>
+ 317:	89 f6                	mov    %esi,%esi
+ 319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+}
+ 320:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 323:	5b                   	pop    %ebx
+ 324:	5e                   	pop    %esi
+ 325:	5f                   	pop    %edi
+ 326:	5d                   	pop    %ebp
+ 327:	c3                   	ret    
+ 328:	66 90                	xchg   %ax,%ax
+ 32a:	66 90                	xchg   %ax,%ax
+ 32c:	66 90                	xchg   %ax,%ax
+ 32e:	66 90                	xchg   %ax,%ax
+
+00000330 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 45 08             	mov    0x8(%ebp),%eax
+ 337:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 33a:	89 c2                	mov    %eax,%edx
+ 33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 340:	83 c1 01             	add    $0x1,%ecx
+ 343:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 347:	83 c2 01             	add    $0x1,%edx
+ 34a:	84 db                	test   %bl,%bl
+ 34c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 34f:	75 ef                	jne    340 <strcpy+0x10>
+    ;
+  return os;
+}
+ 351:	5b                   	pop    %ebx
+ 352:	5d                   	pop    %ebp
+ 353:	c3                   	ret    
+ 354:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 35a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000360 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
+ 367:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 36a:	0f b6 02             	movzbl (%edx),%eax
+ 36d:	0f b6 19             	movzbl (%ecx),%ebx
+ 370:	84 c0                	test   %al,%al
+ 372:	75 1c                	jne    390 <strcmp+0x30>
+ 374:	eb 2a                	jmp    3a0 <strcmp+0x40>
+ 376:	8d 76 00             	lea    0x0(%esi),%esi
+ 379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 380:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 383:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 386:	83 c1 01             	add    $0x1,%ecx
+ 389:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 38c:	84 c0                	test   %al,%al
+ 38e:	74 10                	je     3a0 <strcmp+0x40>
+ 390:	38 d8                	cmp    %bl,%al
+ 392:	74 ec                	je     380 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 394:	29 d8                	sub    %ebx,%eax
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5d                   	pop    %ebp
+ 398:	c3                   	ret    
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3a2:	29 d8                	sub    %ebx,%eax
+}
+ 3a4:	5b                   	pop    %ebx
+ 3a5:	5d                   	pop    %ebp
+ 3a6:	c3                   	ret    
+ 3a7:	89 f6                	mov    %esi,%esi
+ 3a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3b6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3b9:	74 15                	je     3d0 <strlen+0x20>
+ 3bb:	31 d2                	xor    %edx,%edx
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c0:	83 c2 01             	add    $0x1,%edx
+ 3c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3c7:	89 d0                	mov    %edx,%eax
+ 3c9:	75 f5                	jne    3c0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3cb:	5d                   	pop    %ebp
+ 3cc:	c3                   	ret    
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 3d0:	31 c0                	xor    %eax,%eax
+}
+ 3d2:	5d                   	pop    %ebp
+ 3d3:	c3                   	ret    
+ 3d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000003e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3ed:	89 d7                	mov    %edx,%edi
+ 3ef:	fc                   	cld    
+ 3f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 3f2:	89 d0                	mov    %edx,%eax
+ 3f4:	5f                   	pop    %edi
+ 3f5:	5d                   	pop    %ebp
+ 3f6:	c3                   	ret    
+ 3f7:	89 f6                	mov    %esi,%esi
+ 3f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000400 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	53                   	push   %ebx
+ 404:	8b 45 08             	mov    0x8(%ebp),%eax
+ 407:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 40a:	0f b6 10             	movzbl (%eax),%edx
+ 40d:	84 d2                	test   %dl,%dl
+ 40f:	74 1d                	je     42e <strchr+0x2e>
+    if(*s == c)
+ 411:	38 d3                	cmp    %dl,%bl
+ 413:	89 d9                	mov    %ebx,%ecx
+ 415:	75 0d                	jne    424 <strchr+0x24>
+ 417:	eb 17                	jmp    430 <strchr+0x30>
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 420:	38 ca                	cmp    %cl,%dl
+ 422:	74 0c                	je     430 <strchr+0x30>
+  for(; *s; s++)
+ 424:	83 c0 01             	add    $0x1,%eax
+ 427:	0f b6 10             	movzbl (%eax),%edx
+ 42a:	84 d2                	test   %dl,%dl
+ 42c:	75 f2                	jne    420 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 42e:	31 c0                	xor    %eax,%eax
+}
+ 430:	5b                   	pop    %ebx
+ 431:	5d                   	pop    %ebp
+ 432:	c3                   	ret    
+ 433:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000440 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 446:	31 f6                	xor    %esi,%esi
+ 448:	89 f3                	mov    %esi,%ebx
+{
+ 44a:	83 ec 1c             	sub    $0x1c,%esp
+ 44d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 450:	eb 2f                	jmp    481 <gets+0x41>
+ 452:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 458:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 45b:	83 ec 04             	sub    $0x4,%esp
+ 45e:	6a 01                	push   $0x1
+ 460:	50                   	push   %eax
+ 461:	6a 00                	push   $0x0
+ 463:	e8 32 01 00 00       	call   59a <read>
+    if(cc < 1)
+ 468:	83 c4 10             	add    $0x10,%esp
+ 46b:	85 c0                	test   %eax,%eax
+ 46d:	7e 1c                	jle    48b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 46f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 473:	83 c7 01             	add    $0x1,%edi
+ 476:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 479:	3c 0a                	cmp    $0xa,%al
+ 47b:	74 23                	je     4a0 <gets+0x60>
+ 47d:	3c 0d                	cmp    $0xd,%al
+ 47f:	74 1f                	je     4a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 481:	83 c3 01             	add    $0x1,%ebx
+ 484:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 487:	89 fe                	mov    %edi,%esi
+ 489:	7c cd                	jl     458 <gets+0x18>
+ 48b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 48d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 490:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 493:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 496:	5b                   	pop    %ebx
+ 497:	5e                   	pop    %esi
+ 498:	5f                   	pop    %edi
+ 499:	5d                   	pop    %ebp
+ 49a:	c3                   	ret    
+ 49b:	90                   	nop
+ 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4a6:	01 de                	add    %ebx,%esi
+ 4a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b0:	5b                   	pop    %ebx
+ 4b1:	5e                   	pop    %esi
+ 4b2:	5f                   	pop    %edi
+ 4b3:	5d                   	pop    %ebp
+ 4b4:	c3                   	ret    
+ 4b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000004c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	56                   	push   %esi
+ 4c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4c5:	83 ec 08             	sub    $0x8,%esp
+ 4c8:	6a 00                	push   $0x0
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 f0 00 00 00       	call   5c2 <open>
+  if(fd < 0)
+ 4d2:	83 c4 10             	add    $0x10,%esp
+ 4d5:	85 c0                	test   %eax,%eax
+ 4d7:	78 27                	js     500 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4d9:	83 ec 08             	sub    $0x8,%esp
+ 4dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4df:	89 c3                	mov    %eax,%ebx
+ 4e1:	50                   	push   %eax
+ 4e2:	e8 f3 00 00 00       	call   5da <fstat>
+  close(fd);
+ 4e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4ec:	e8 b9 00 00 00       	call   5aa <close>
+  return r;
+ 4f1:	83 c4 10             	add    $0x10,%esp
+}
+ 4f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4f7:	89 f0                	mov    %esi,%eax
+ 4f9:	5b                   	pop    %ebx
+ 4fa:	5e                   	pop    %esi
+ 4fb:	5d                   	pop    %ebp
+ 4fc:	c3                   	ret    
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 500:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 505:	eb ed                	jmp    4f4 <stat+0x34>
+ 507:	89 f6                	mov    %esi,%esi
+ 509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000510 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	53                   	push   %ebx
+ 514:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 517:	0f be 11             	movsbl (%ecx),%edx
+ 51a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 51d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 51f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 524:	77 1f                	ja     545 <atoi+0x35>
+ 526:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 530:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 533:	83 c1 01             	add    $0x1,%ecx
+ 536:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 53a:	0f be 11             	movsbl (%ecx),%edx
+ 53d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 540:	80 fb 09             	cmp    $0x9,%bl
+ 543:	76 eb                	jbe    530 <atoi+0x20>
+  return n;
+}
+ 545:	5b                   	pop    %ebx
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	90                   	nop
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000550 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	56                   	push   %esi
+ 554:	53                   	push   %ebx
+ 555:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 558:	8b 45 08             	mov    0x8(%ebp),%eax
+ 55b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 55e:	85 db                	test   %ebx,%ebx
+ 560:	7e 14                	jle    576 <memmove+0x26>
+ 562:	31 d2                	xor    %edx,%edx
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 568:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 56c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 56f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 572:	39 d3                	cmp    %edx,%ebx
+ 574:	75 f2                	jne    568 <memmove+0x18>
+  return vdst;
+}
+ 576:	5b                   	pop    %ebx
+ 577:	5e                   	pop    %esi
+ 578:	5d                   	pop    %ebp
+ 579:	c3                   	ret    
+
+0000057a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 57a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <exit>:
+SYSCALL(exit)
+ 582:	b8 02 00 00 00       	mov    $0x2,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <wait>:
+SYSCALL(wait)
+ 58a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <pipe>:
+SYSCALL(pipe)
+ 592:	b8 04 00 00 00       	mov    $0x4,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <read>:
+SYSCALL(read)
+ 59a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <write>:
+SYSCALL(write)
+ 5a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <close>:
+SYSCALL(close)
+ 5aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <kill>:
+SYSCALL(kill)
+ 5b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <exec>:
+SYSCALL(exec)
+ 5ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <open>:
+SYSCALL(open)
+ 5c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <mknod>:
+SYSCALL(mknod)
+ 5ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <unlink>:
+SYSCALL(unlink)
+ 5d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <fstat>:
+SYSCALL(fstat)
+ 5da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+
+000005e2 <link>:
+SYSCALL(link)
+ 5e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5e7:	cd 40                	int    $0x40
+ 5e9:	c3                   	ret    
+
+000005ea <mkdir>:
+SYSCALL(mkdir)
+ 5ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5ef:	cd 40                	int    $0x40
+ 5f1:	c3                   	ret    
+
+000005f2 <chdir>:
+SYSCALL(chdir)
+ 5f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5f7:	cd 40                	int    $0x40
+ 5f9:	c3                   	ret    
+
+000005fa <dup>:
+SYSCALL(dup)
+ 5fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <getpid>:
+SYSCALL(getpid)
+ 602:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+
+0000060a <sbrk>:
+SYSCALL(sbrk)
+ 60a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 60f:	cd 40                	int    $0x40
+ 611:	c3                   	ret    
+
+00000612 <sleep>:
+SYSCALL(sleep)
+ 612:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 617:	cd 40                	int    $0x40
+ 619:	c3                   	ret    
+
+0000061a <uptime>:
+SYSCALL(uptime)
+ 61a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 61f:	cd 40                	int    $0x40
+ 621:	c3                   	ret    
+
+00000622 <getNumProc>:
+SYSCALL(getNumProc)
+ 622:	b8 16 00 00 00       	mov    $0x16,%eax
+ 627:	cd 40                	int    $0x40
+ 629:	c3                   	ret    
+
+0000062a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 62a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 62f:	cd 40                	int    $0x40
+ 631:	c3                   	ret    
+
+00000632 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 632:	b8 18 00 00 00       	mov    $0x18,%eax
+ 637:	cd 40                	int    $0x40
+ 639:	c3                   	ret    
+
+0000063a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 63a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 63f:	cd 40                	int    $0x40
+ 641:	c3                   	ret    
+
+00000642 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 642:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 647:	cd 40                	int    $0x40
+ 649:	c3                   	ret    
+
+0000064a <process_state>:
+SYSCALL(process_state)
+ 64a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 64f:	cd 40                	int    $0x40
+ 651:	c3                   	ret    
+
+00000652 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 652:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 657:	cd 40                	int    $0x40
+ 659:	c3                   	ret    
+
+0000065a <inc_cpucounter>:
+ 65a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 65f:	cd 40                	int    $0x40
+ 661:	c3                   	ret    
+ 662:	66 90                	xchg   %ax,%ax
+ 664:	66 90                	xchg   %ax,%ax
+ 666:	66 90                	xchg   %ax,%ax
+ 668:	66 90                	xchg   %ax,%ax
+ 66a:	66 90                	xchg   %ax,%ax
+ 66c:	66 90                	xchg   %ax,%ax
+ 66e:	66 90                	xchg   %ax,%ax
+
+00000670 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 679:	85 d2                	test   %edx,%edx
+{
+ 67b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 67e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 680:	79 76                	jns    6f8 <printint+0x88>
+ 682:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 686:	74 70                	je     6f8 <printint+0x88>
+    x = -xx;
+ 688:	f7 d8                	neg    %eax
+    neg = 1;
+ 68a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 691:	31 f6                	xor    %esi,%esi
+ 693:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 696:	eb 0a                	jmp    6a2 <printint+0x32>
+ 698:	90                   	nop
+ 699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	89 fe                	mov    %edi,%esi
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 6a7:	f7 f1                	div    %ecx
+ 6a9:	0f b6 92 a8 0a 00 00 	movzbl 0xaa8(%edx),%edx
+  }while((x /= base) != 0);
+ 6b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 6b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 6b5:	75 e9                	jne    6a0 <printint+0x30>
+  if(neg)
+ 6b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 6ba:	85 c0                	test   %eax,%eax
+ 6bc:	74 08                	je     6c6 <printint+0x56>
+    buf[i++] = '-';
+ 6be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 6c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 6c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 6ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 6d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 6d3:	83 ec 04             	sub    $0x4,%esp
+ 6d6:	83 ee 01             	sub    $0x1,%esi
+ 6d9:	6a 01                	push   $0x1
+ 6db:	53                   	push   %ebx
+ 6dc:	57                   	push   %edi
+ 6dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6e0:	e8 bd fe ff ff       	call   5a2 <write>
+
+  while(--i >= 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6ff:	eb 90                	jmp    691 <printint+0x21>
+ 701:	eb 0d                	jmp    710 <printf>
+ 703:	90                   	nop
+ 704:	90                   	nop
+ 705:	90                   	nop
+ 706:	90                   	nop
+ 707:	90                   	nop
+ 708:	90                   	nop
+ 709:	90                   	nop
+ 70a:	90                   	nop
+ 70b:	90                   	nop
+ 70c:	90                   	nop
+ 70d:	90                   	nop
+ 70e:	90                   	nop
+ 70f:	90                   	nop
+
+00000710 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 719:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 71c:	0f b6 1e             	movzbl (%esi),%ebx
+ 71f:	84 db                	test   %bl,%bl
+ 721:	0f 84 b3 00 00 00    	je     7da <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 727:	8d 45 10             	lea    0x10(%ebp),%eax
+ 72a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 72d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 72f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 732:	eb 2f                	jmp    763 <printf+0x53>
+ 734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 738:	83 f8 25             	cmp    $0x25,%eax
+ 73b:	0f 84 a7 00 00 00    	je     7e8 <printf+0xd8>
+  write(fd, &c, 1);
+ 741:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 744:	83 ec 04             	sub    $0x4,%esp
+ 747:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 74a:	6a 01                	push   $0x1
+ 74c:	50                   	push   %eax
+ 74d:	ff 75 08             	pushl  0x8(%ebp)
+ 750:	e8 4d fe ff ff       	call   5a2 <write>
+ 755:	83 c4 10             	add    $0x10,%esp
+ 758:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 75b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 75f:	84 db                	test   %bl,%bl
+ 761:	74 77                	je     7da <printf+0xca>
+    if(state == 0){
+ 763:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 765:	0f be cb             	movsbl %bl,%ecx
+ 768:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 76b:	74 cb                	je     738 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 76d:	83 ff 25             	cmp    $0x25,%edi
+ 770:	75 e6                	jne    758 <printf+0x48>
+      if(c == 'd'){
+ 772:	83 f8 64             	cmp    $0x64,%eax
+ 775:	0f 84 05 01 00 00    	je     880 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 77b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 781:	83 f9 70             	cmp    $0x70,%ecx
+ 784:	74 72                	je     7f8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 786:	83 f8 73             	cmp    $0x73,%eax
+ 789:	0f 84 99 00 00 00    	je     828 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 78f:	83 f8 63             	cmp    $0x63,%eax
+ 792:	0f 84 08 01 00 00    	je     8a0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 798:	83 f8 25             	cmp    $0x25,%eax
+ 79b:	0f 84 ef 00 00 00    	je     890 <printf+0x180>
+  write(fd, &c, 1);
+ 7a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 7a4:	83 ec 04             	sub    $0x4,%esp
+ 7a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7ab:	6a 01                	push   $0x1
+ 7ad:	50                   	push   %eax
+ 7ae:	ff 75 08             	pushl  0x8(%ebp)
+ 7b1:	e8 ec fd ff ff       	call   5a2 <write>
+ 7b6:	83 c4 0c             	add    $0xc,%esp
+ 7b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 7bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 7bf:	6a 01                	push   $0x1
+ 7c1:	50                   	push   %eax
+ 7c2:	ff 75 08             	pushl  0x8(%ebp)
+ 7c5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7c8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 7ca:	e8 d3 fd ff ff       	call   5a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 7cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 7d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 7d6:	84 db                	test   %bl,%bl
+ 7d8:	75 89                	jne    763 <printf+0x53>
+    }
+  }
+}
+ 7da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7dd:	5b                   	pop    %ebx
+ 7de:	5e                   	pop    %esi
+ 7df:	5f                   	pop    %edi
+ 7e0:	5d                   	pop    %ebp
+ 7e1:	c3                   	ret    
+ 7e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 7e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 7ed:	e9 66 ff ff ff       	jmp    758 <printf+0x48>
+ 7f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 7f8:	83 ec 0c             	sub    $0xc,%esp
+ 7fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 800:	6a 00                	push   $0x0
+ 802:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 805:	8b 45 08             	mov    0x8(%ebp),%eax
+ 808:	8b 17                	mov    (%edi),%edx
+ 80a:	e8 61 fe ff ff       	call   670 <printint>
+        ap++;
+ 80f:	89 f8                	mov    %edi,%eax
+ 811:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 814:	31 ff                	xor    %edi,%edi
+        ap++;
+ 816:	83 c0 04             	add    $0x4,%eax
+ 819:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 81c:	e9 37 ff ff ff       	jmp    758 <printf+0x48>
+ 821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 828:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 82b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 82d:	83 c0 04             	add    $0x4,%eax
+ 830:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 833:	85 c9                	test   %ecx,%ecx
+ 835:	0f 84 8e 00 00 00    	je     8c9 <printf+0x1b9>
+        while(*s != 0){
+ 83b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 83e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 840:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 842:	84 c0                	test   %al,%al
+ 844:	0f 84 0e ff ff ff    	je     758 <printf+0x48>
+ 84a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 84d:	89 de                	mov    %ebx,%esi
+ 84f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 852:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 855:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 858:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 85b:	83 c6 01             	add    $0x1,%esi
+ 85e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 861:	6a 01                	push   $0x1
+ 863:	57                   	push   %edi
+ 864:	53                   	push   %ebx
+ 865:	e8 38 fd ff ff       	call   5a2 <write>
+        while(*s != 0){
+ 86a:	0f b6 06             	movzbl (%esi),%eax
+ 86d:	83 c4 10             	add    $0x10,%esp
+ 870:	84 c0                	test   %al,%al
+ 872:	75 e4                	jne    858 <printf+0x148>
+ 874:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 877:	31 ff                	xor    %edi,%edi
+ 879:	e9 da fe ff ff       	jmp    758 <printf+0x48>
+ 87e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 880:	83 ec 0c             	sub    $0xc,%esp
+ 883:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 888:	6a 01                	push   $0x1
+ 88a:	e9 73 ff ff ff       	jmp    802 <printf+0xf2>
+ 88f:	90                   	nop
+  write(fd, &c, 1);
+ 890:	83 ec 04             	sub    $0x4,%esp
+ 893:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 896:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 899:	6a 01                	push   $0x1
+ 89b:	e9 21 ff ff ff       	jmp    7c1 <printf+0xb1>
+        putc(fd, *ap);
+ 8a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 8a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 8a6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 8a8:	6a 01                	push   $0x1
+        ap++;
+ 8aa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 8ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 8b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 8b3:	50                   	push   %eax
+ 8b4:	ff 75 08             	pushl  0x8(%ebp)
+ 8b7:	e8 e6 fc ff ff       	call   5a2 <write>
+        ap++;
+ 8bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 8bf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 8c2:	31 ff                	xor    %edi,%edi
+ 8c4:	e9 8f fe ff ff       	jmp    758 <printf+0x48>
+          s = "(null)";
+ 8c9:	bb 9e 0a 00 00       	mov    $0xa9e,%ebx
+        while(*s != 0){
+ 8ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8d3:	e9 72 ff ff ff       	jmp    84a <printf+0x13a>
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e1:	a1 40 0e 00 00       	mov    0xe40,%eax
+{
+ 8e6:	89 e5                	mov    %esp,%ebp
+ 8e8:	57                   	push   %edi
+ 8e9:	56                   	push   %esi
+ 8ea:	53                   	push   %ebx
+ 8eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 8ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f8:	39 c8                	cmp    %ecx,%eax
+ 8fa:	8b 10                	mov    (%eax),%edx
+ 8fc:	73 32                	jae    930 <free+0x50>
+ 8fe:	39 d1                	cmp    %edx,%ecx
+ 900:	72 04                	jb     906 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 902:	39 d0                	cmp    %edx,%eax
+ 904:	72 32                	jb     938 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 906:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 909:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90c:	39 fa                	cmp    %edi,%edx
+ 90e:	74 30                	je     940 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 910:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 913:	8b 50 04             	mov    0x4(%eax),%edx
+ 916:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 919:	39 f1                	cmp    %esi,%ecx
+ 91b:	74 3a                	je     957 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 91d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 91f:	a3 40 0e 00 00       	mov    %eax,0xe40
+}
+ 924:	5b                   	pop    %ebx
+ 925:	5e                   	pop    %esi
+ 926:	5f                   	pop    %edi
+ 927:	5d                   	pop    %ebp
+ 928:	c3                   	ret    
+ 929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 930:	39 d0                	cmp    %edx,%eax
+ 932:	72 04                	jb     938 <free+0x58>
+ 934:	39 d1                	cmp    %edx,%ecx
+ 936:	72 ce                	jb     906 <free+0x26>
+{
+ 938:	89 d0                	mov    %edx,%eax
+ 93a:	eb bc                	jmp    8f8 <free+0x18>
+ 93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 940:	03 72 04             	add    0x4(%edx),%esi
+ 943:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 946:	8b 10                	mov    (%eax),%edx
+ 948:	8b 12                	mov    (%edx),%edx
+ 94a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 94d:	8b 50 04             	mov    0x4(%eax),%edx
+ 950:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 953:	39 f1                	cmp    %esi,%ecx
+ 955:	75 c6                	jne    91d <free+0x3d>
+    p->s.size += bp->s.size;
+ 957:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 95a:	a3 40 0e 00 00       	mov    %eax,0xe40
+    p->s.size += bp->s.size;
+ 95f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 962:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 965:	89 10                	mov    %edx,(%eax)
+}
+ 967:	5b                   	pop    %ebx
+ 968:	5e                   	pop    %esi
+ 969:	5f                   	pop    %edi
+ 96a:	5d                   	pop    %ebp
+ 96b:	c3                   	ret    
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 979:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 97c:	8b 15 40 0e 00 00    	mov    0xe40,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 982:	8d 78 07             	lea    0x7(%eax),%edi
+ 985:	c1 ef 03             	shr    $0x3,%edi
+ 988:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 98b:	85 d2                	test   %edx,%edx
+ 98d:	0f 84 9d 00 00 00    	je     a30 <malloc+0xc0>
+ 993:	8b 02                	mov    (%edx),%eax
+ 995:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 998:	39 cf                	cmp    %ecx,%edi
+ 99a:	76 6c                	jbe    a08 <malloc+0x98>
+ 99c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 9a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9a7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 9b1:	eb 0e                	jmp    9c1 <malloc+0x51>
+ 9b3:	90                   	nop
+ 9b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 9ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bd:	39 f9                	cmp    %edi,%ecx
+ 9bf:	73 47                	jae    a08 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9c1:	39 05 40 0e 00 00    	cmp    %eax,0xe40
+ 9c7:	89 c2                	mov    %eax,%edx
+ 9c9:	75 ed                	jne    9b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 9cb:	83 ec 0c             	sub    $0xc,%esp
+ 9ce:	56                   	push   %esi
+ 9cf:	e8 36 fc ff ff       	call   60a <sbrk>
+  if(p == (char*)-1)
+ 9d4:	83 c4 10             	add    $0x10,%esp
+ 9d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9da:	74 1c                	je     9f8 <malloc+0x88>
+  hp->s.size = nu;
+ 9dc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9df:	83 ec 0c             	sub    $0xc,%esp
+ 9e2:	83 c0 08             	add    $0x8,%eax
+ 9e5:	50                   	push   %eax
+ 9e6:	e8 f5 fe ff ff       	call   8e0 <free>
+  return freep;
+ 9eb:	8b 15 40 0e 00 00    	mov    0xe40,%edx
+      if((p = morecore(nunits)) == 0)
+ 9f1:	83 c4 10             	add    $0x10,%esp
+ 9f4:	85 d2                	test   %edx,%edx
+ 9f6:	75 c0                	jne    9b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 9f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9fb:	31 c0                	xor    %eax,%eax
+}
+ 9fd:	5b                   	pop    %ebx
+ 9fe:	5e                   	pop    %esi
+ 9ff:	5f                   	pop    %edi
+ a00:	5d                   	pop    %ebp
+ a01:	c3                   	ret    
+ a02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ a08:	39 cf                	cmp    %ecx,%edi
+ a0a:	74 54                	je     a60 <malloc+0xf0>
+        p->s.size -= nunits;
+ a0c:	29 f9                	sub    %edi,%ecx
+ a0e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ a11:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ a14:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ a17:	89 15 40 0e 00 00    	mov    %edx,0xe40
+}
+ a1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a20:	83 c0 08             	add    $0x8,%eax
+}
+ a23:	5b                   	pop    %ebx
+ a24:	5e                   	pop    %esi
+ a25:	5f                   	pop    %edi
+ a26:	5d                   	pop    %ebp
+ a27:	c3                   	ret    
+ a28:	90                   	nop
+ a29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ a30:	c7 05 40 0e 00 00 44 	movl   $0xe44,0xe40
+ a37:	0e 00 00 
+ a3a:	c7 05 44 0e 00 00 44 	movl   $0xe44,0xe44
+ a41:	0e 00 00 
+    base.s.size = 0;
+ a44:	b8 44 0e 00 00       	mov    $0xe44,%eax
+ a49:	c7 05 48 0e 00 00 00 	movl   $0x0,0xe48
+ a50:	00 00 00 
+ a53:	e9 44 ff ff ff       	jmp    99c <malloc+0x2c>
+ a58:	90                   	nop
+ a59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ a60:	8b 08                	mov    (%eax),%ecx
+ a62:	89 0a                	mov    %ecx,(%edx)
+ a64:	eb b1                	jmp    a17 <malloc+0xa7>
diff -ruN xv6org/grep.d xv6mhybrid/grep.d
--- xv6org/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/grep.d	2020-10-15 19:50:34.109745795 +0530
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/grep.o and xv6mhybrid/grep.o differ
diff -ruN xv6org/grep.sym xv6mhybrid/grep.sym
--- xv6org/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/grep.sym	2020-10-15 19:50:34.213739017 +0530
@@ -0,0 +1,70 @@
+00000000 .text
+00000a68 .rodata
+00000abc .eh_frame
+00000e40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000670 printint
+00000aa8 digits.1056
+00000000 umalloc.c
+00000e40 freep
+00000e44 base
+00000330 strcpy
+00000710 printf
+00000550 memmove
+00000110 matchhere
+000005ca mknod
+00000440 gets
+00000602 getpid
+00000230 grep
+00000970 malloc
+00000612 sleep
+00000642 get_burst_time
+00000592 pipe
+000005a2 write
+000005da fstat
+000005b2 kill
+0000064a process_state
+000005f2 chdir
+00000652 dec_burstTime
+000005ba exec
+0000058a wait
+0000065a inc_cpucounter
+0000059a read
+000005d2 unlink
+0000057a fork
+0000060a sbrk
+0000061a uptime
+00000e40 __bss_start
+000003e0 memset
+00000000 main
+0000063a set_burst_time
+000000b0 matchstar
+00000360 strcmp
+000005fa dup
+0000062a getMaxPid
+00000e60 buf
+00000622 getNumProc
+00000632 getProcInfo
+000004c0 stat
+00000e40 _edata
+00001260 _end
+000001d0 match
+000005e2 link
+00000582 exit
+00000510 atoi
+000003b0 strlen
+000005c2 open
+00000400 strchr
+000005ea mkdir
+000005aa close
+000008e0 free
diff -ruN xv6org/ide.d xv6mhybrid/ide.d
--- xv6org/ide.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ide.d	2020-10-15 19:50:36.161612376 +0530
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files xv6org/ide.o and xv6mhybrid/ide.o differ
Binary files xv6org/_init and xv6mhybrid/_init differ
diff -ruN xv6org/init.asm xv6mhybrid/init.asm
--- xv6org/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/init.asm	2020-10-15 19:50:34.353729892 +0530
@@ -0,0 +1,1274 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   f:	83 ec 08             	sub    $0x8,%esp
+  12:	6a 02                	push   $0x2
+  14:	68 28 08 00 00       	push   $0x828
+  19:	e8 64 03 00 00       	call   382 <open>
+  1e:	83 c4 10             	add    $0x10,%esp
+  21:	85 c0                	test   %eax,%eax
+  23:	0f 88 9f 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  29:	83 ec 0c             	sub    $0xc,%esp
+  2c:	6a 00                	push   $0x0
+  2e:	e8 87 03 00 00       	call   3ba <dup>
+  dup(0);  // stderr
+  33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3a:	e8 7b 03 00 00       	call   3ba <dup>
+  3f:	83 c4 10             	add    $0x10,%esp
+  42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  48:	83 ec 08             	sub    $0x8,%esp
+  4b:	68 30 08 00 00       	push   $0x830
+  50:	6a 01                	push   $0x1
+  52:	e8 79 04 00 00       	call   4d0 <printf>
+    pid = fork();
+  57:	e8 de 02 00 00       	call   33a <fork>
+    if(pid < 0){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	85 c0                	test   %eax,%eax
+    pid = fork();
+  61:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  63:	78 2c                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  65:	74 3d                	je     a4 <main+0xa4>
+  67:	89 f6                	mov    %esi,%esi
+  69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 d5 02 00 00       	call   34a <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 cf                	js     48 <main+0x48>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 cb                	je     48 <main+0x48>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 6f 08 00 00       	push   $0x86f
+  85:	6a 01                	push   $0x1
+  87:	e8 44 04 00 00       	call   4d0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 43 08 00 00       	push   $0x843
+  98:	6a 01                	push   $0x1
+  9a:	e8 31 04 00 00       	call   4d0 <printf>
+      exit();
+  9f:	e8 9e 02 00 00       	call   342 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 28 0b 00 00       	push   $0xb28
+  ab:	68 56 08 00 00       	push   $0x856
+  b0:	e8 c5 02 00 00       	call   37a <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 59 08 00 00       	push   $0x859
+  bc:	6a 01                	push   $0x1
+  be:	e8 0d 04 00 00       	call   4d0 <printf>
+      exit();
+  c3:	e8 7a 02 00 00       	call   342 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 28 08 00 00       	push   $0x828
+  d2:	e8 b3 02 00 00       	call   38a <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 28 08 00 00       	push   $0x828
+  e0:	e8 9d 02 00 00       	call   382 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	53                   	push   %ebx
+  f4:	8b 45 08             	mov    0x8(%ebp),%eax
+  f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  fa:	89 c2                	mov    %eax,%edx
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 100:	83 c1 01             	add    $0x1,%ecx
+ 103:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 107:	83 c2 01             	add    $0x1,%edx
+ 10a:	84 db                	test   %bl,%bl
+ 10c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 10f:	75 ef                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 111:	5b                   	pop    %ebx
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 11a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	53                   	push   %ebx
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+ 127:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 12a:	0f b6 02             	movzbl (%edx),%eax
+ 12d:	0f b6 19             	movzbl (%ecx),%ebx
+ 130:	84 c0                	test   %al,%al
+ 132:	75 1c                	jne    150 <strcmp+0x30>
+ 134:	eb 2a                	jmp    160 <strcmp+0x40>
+ 136:	8d 76 00             	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 140:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 143:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 146:	83 c1 01             	add    $0x1,%ecx
+ 149:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 14c:	84 c0                	test   %al,%al
+ 14e:	74 10                	je     160 <strcmp+0x40>
+ 150:	38 d8                	cmp    %bl,%al
+ 152:	74 ec                	je     140 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 154:	29 d8                	sub    %ebx,%eax
+}
+ 156:	5b                   	pop    %ebx
+ 157:	5d                   	pop    %ebp
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 162:	29 d8                	sub    %ebx,%eax
+}
+ 164:	5b                   	pop    %ebx
+ 165:	5d                   	pop    %ebp
+ 166:	c3                   	ret    
+ 167:	89 f6                	mov    %esi,%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 176:	80 39 00             	cmpb   $0x0,(%ecx)
+ 179:	74 15                	je     190 <strlen+0x20>
+ 17b:	31 d2                	xor    %edx,%edx
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+ 180:	83 c2 01             	add    $0x1,%edx
+ 183:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 187:	89 d0                	mov    %edx,%eax
+ 189:	75 f5                	jne    180 <strlen+0x10>
+    ;
+  return n;
+}
+ 18b:	5d                   	pop    %ebp
+ 18c:	c3                   	ret    
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 190:	31 c0                	xor    %eax,%eax
+}
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 19a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001a0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1a7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1aa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ad:	89 d7                	mov    %edx,%edi
+ 1af:	fc                   	cld    
+ 1b0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1b2:	89 d0                	mov    %edx,%eax
+ 1b4:	5f                   	pop    %edi
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	89 f6                	mov    %esi,%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	53                   	push   %ebx
+ 1c4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1ca:	0f b6 10             	movzbl (%eax),%edx
+ 1cd:	84 d2                	test   %dl,%dl
+ 1cf:	74 1d                	je     1ee <strchr+0x2e>
+    if(*s == c)
+ 1d1:	38 d3                	cmp    %dl,%bl
+ 1d3:	89 d9                	mov    %ebx,%ecx
+ 1d5:	75 0d                	jne    1e4 <strchr+0x24>
+ 1d7:	eb 17                	jmp    1f0 <strchr+0x30>
+ 1d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	38 ca                	cmp    %cl,%dl
+ 1e2:	74 0c                	je     1f0 <strchr+0x30>
+  for(; *s; s++)
+ 1e4:	83 c0 01             	add    $0x1,%eax
+ 1e7:	0f b6 10             	movzbl (%eax),%edx
+ 1ea:	84 d2                	test   %dl,%dl
+ 1ec:	75 f2                	jne    1e0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1ee:	31 c0                	xor    %eax,%eax
+}
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	56                   	push   %esi
+ 205:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 206:	31 f6                	xor    %esi,%esi
+ 208:	89 f3                	mov    %esi,%ebx
+{
+ 20a:	83 ec 1c             	sub    $0x1c,%esp
+ 20d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 210:	eb 2f                	jmp    241 <gets+0x41>
+ 212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 218:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 21b:	83 ec 04             	sub    $0x4,%esp
+ 21e:	6a 01                	push   $0x1
+ 220:	50                   	push   %eax
+ 221:	6a 00                	push   $0x0
+ 223:	e8 32 01 00 00       	call   35a <read>
+    if(cc < 1)
+ 228:	83 c4 10             	add    $0x10,%esp
+ 22b:	85 c0                	test   %eax,%eax
+ 22d:	7e 1c                	jle    24b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 22f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 233:	83 c7 01             	add    $0x1,%edi
+ 236:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 239:	3c 0a                	cmp    $0xa,%al
+ 23b:	74 23                	je     260 <gets+0x60>
+ 23d:	3c 0d                	cmp    $0xd,%al
+ 23f:	74 1f                	je     260 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 241:	83 c3 01             	add    $0x1,%ebx
+ 244:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 247:	89 fe                	mov    %edi,%esi
+ 249:	7c cd                	jl     218 <gets+0x18>
+ 24b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 24d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 250:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 253:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 256:	5b                   	pop    %ebx
+ 257:	5e                   	pop    %esi
+ 258:	5f                   	pop    %edi
+ 259:	5d                   	pop    %ebp
+ 25a:	c3                   	ret    
+ 25b:	90                   	nop
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 260:	8b 75 08             	mov    0x8(%ebp),%esi
+ 263:	8b 45 08             	mov    0x8(%ebp),%eax
+ 266:	01 de                	add    %ebx,%esi
+ 268:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 26a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 26d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 270:	5b                   	pop    %ebx
+ 271:	5e                   	pop    %esi
+ 272:	5f                   	pop    %edi
+ 273:	5d                   	pop    %ebp
+ 274:	c3                   	ret    
+ 275:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000280 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 285:	83 ec 08             	sub    $0x8,%esp
+ 288:	6a 00                	push   $0x0
+ 28a:	ff 75 08             	pushl  0x8(%ebp)
+ 28d:	e8 f0 00 00 00       	call   382 <open>
+  if(fd < 0)
+ 292:	83 c4 10             	add    $0x10,%esp
+ 295:	85 c0                	test   %eax,%eax
+ 297:	78 27                	js     2c0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	ff 75 0c             	pushl  0xc(%ebp)
+ 29f:	89 c3                	mov    %eax,%ebx
+ 2a1:	50                   	push   %eax
+ 2a2:	e8 f3 00 00 00       	call   39a <fstat>
+  close(fd);
+ 2a7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2aa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2ac:	e8 b9 00 00 00       	call   36a <close>
+  return r;
+ 2b1:	83 c4 10             	add    $0x10,%esp
+}
+ 2b4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2b7:	89 f0                	mov    %esi,%eax
+ 2b9:	5b                   	pop    %ebx
+ 2ba:	5e                   	pop    %esi
+ 2bb:	5d                   	pop    %ebp
+ 2bc:	c3                   	ret    
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2c0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2c5:	eb ed                	jmp    2b4 <stat+0x34>
+ 2c7:	89 f6                	mov    %esi,%esi
+ 2c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	53                   	push   %ebx
+ 2d4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2d7:	0f be 11             	movsbl (%ecx),%edx
+ 2da:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2dd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2df:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2e4:	77 1f                	ja     305 <atoi+0x35>
+ 2e6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 2f0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2f3:	83 c1 01             	add    $0x1,%ecx
+ 2f6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2fa:	0f be 11             	movsbl (%ecx),%edx
+ 2fd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 300:	80 fb 09             	cmp    $0x9,%bl
+ 303:	76 eb                	jbe    2f0 <atoi+0x20>
+  return n;
+}
+ 305:	5b                   	pop    %ebx
+ 306:	5d                   	pop    %ebp
+ 307:	c3                   	ret    
+ 308:	90                   	nop
+ 309:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
+ 315:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 318:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 31e:	85 db                	test   %ebx,%ebx
+ 320:	7e 14                	jle    336 <memmove+0x26>
+ 322:	31 d2                	xor    %edx,%edx
+ 324:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 328:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 32c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 32f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 332:	39 d3                	cmp    %edx,%ebx
+ 334:	75 f2                	jne    328 <memmove+0x18>
+  return vdst;
+}
+ 336:	5b                   	pop    %ebx
+ 337:	5e                   	pop    %esi
+ 338:	5d                   	pop    %ebp
+ 339:	c3                   	ret    
+
+0000033a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 33a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <exit>:
+SYSCALL(exit)
+ 342:	b8 02 00 00 00       	mov    $0x2,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <wait>:
+SYSCALL(wait)
+ 34a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <pipe>:
+SYSCALL(pipe)
+ 352:	b8 04 00 00 00       	mov    $0x4,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <read>:
+SYSCALL(read)
+ 35a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <write>:
+SYSCALL(write)
+ 362:	b8 10 00 00 00       	mov    $0x10,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <close>:
+SYSCALL(close)
+ 36a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <kill>:
+SYSCALL(kill)
+ 372:	b8 06 00 00 00       	mov    $0x6,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <exec>:
+SYSCALL(exec)
+ 37a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <open>:
+SYSCALL(open)
+ 382:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <mknod>:
+SYSCALL(mknod)
+ 38a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <unlink>:
+SYSCALL(unlink)
+ 392:	b8 12 00 00 00       	mov    $0x12,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <fstat>:
+SYSCALL(fstat)
+ 39a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <link>:
+SYSCALL(link)
+ 3a2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <mkdir>:
+SYSCALL(mkdir)
+ 3aa:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <chdir>:
+SYSCALL(chdir)
+ 3b2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <dup>:
+SYSCALL(dup)
+ 3ba:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <getpid>:
+SYSCALL(getpid)
+ 3c2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <sbrk>:
+SYSCALL(sbrk)
+ 3ca:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <sleep>:
+SYSCALL(sleep)
+ 3d2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <uptime>:
+SYSCALL(uptime)
+ 3da:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <getNumProc>:
+SYSCALL(getNumProc)
+ 3e2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <getMaxPid>:
+SYSCALL(getMaxPid)
+ 3ea:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 3f2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3fa:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 402:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <process_state>:
+SYSCALL(process_state)
+ 40a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 412:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <inc_cpucounter>:
+ 41a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+ 422:	66 90                	xchg   %ax,%ax
+ 424:	66 90                	xchg   %ax,%ax
+ 426:	66 90                	xchg   %ax,%ax
+ 428:	66 90                	xchg   %ax,%ax
+ 42a:	66 90                	xchg   %ax,%ax
+ 42c:	66 90                	xchg   %ax,%ax
+ 42e:	66 90                	xchg   %ax,%ax
+
+00000430 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 439:	85 d2                	test   %edx,%edx
+{
+ 43b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 43e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 440:	79 76                	jns    4b8 <printint+0x88>
+ 442:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 446:	74 70                	je     4b8 <printint+0x88>
+    x = -xx;
+ 448:	f7 d8                	neg    %eax
+    neg = 1;
+ 44a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 451:	31 f6                	xor    %esi,%esi
+ 453:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 456:	eb 0a                	jmp    462 <printint+0x32>
+ 458:	90                   	nop
+ 459:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 460:	89 fe                	mov    %edi,%esi
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	8d 7e 01             	lea    0x1(%esi),%edi
+ 467:	f7 f1                	div    %ecx
+ 469:	0f b6 92 80 08 00 00 	movzbl 0x880(%edx),%edx
+  }while((x /= base) != 0);
+ 470:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 472:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 475:	75 e9                	jne    460 <printint+0x30>
+  if(neg)
+ 477:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 47a:	85 c0                	test   %eax,%eax
+ 47c:	74 08                	je     486 <printint+0x56>
+    buf[i++] = '-';
+ 47e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 483:	8d 7e 02             	lea    0x2(%esi),%edi
+ 486:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 48a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+ 490:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 493:	83 ec 04             	sub    $0x4,%esp
+ 496:	83 ee 01             	sub    $0x1,%esi
+ 499:	6a 01                	push   $0x1
+ 49b:	53                   	push   %ebx
+ 49c:	57                   	push   %edi
+ 49d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4a0:	e8 bd fe ff ff       	call   362 <write>
+
+  while(--i >= 0)
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	39 de                	cmp    %ebx,%esi
+ 4aa:	75 e4                	jne    490 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4af:	5b                   	pop    %ebx
+ 4b0:	5e                   	pop    %esi
+ 4b1:	5f                   	pop    %edi
+ 4b2:	5d                   	pop    %ebp
+ 4b3:	c3                   	ret    
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4bf:	eb 90                	jmp    451 <printint+0x21>
+ 4c1:	eb 0d                	jmp    4d0 <printf>
+ 4c3:	90                   	nop
+ 4c4:	90                   	nop
+ 4c5:	90                   	nop
+ 4c6:	90                   	nop
+ 4c7:	90                   	nop
+ 4c8:	90                   	nop
+ 4c9:	90                   	nop
+ 4ca:	90                   	nop
+ 4cb:	90                   	nop
+ 4cc:	90                   	nop
+ 4cd:	90                   	nop
+ 4ce:	90                   	nop
+ 4cf:	90                   	nop
+
+000004d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	57                   	push   %edi
+ 4d4:	56                   	push   %esi
+ 4d5:	53                   	push   %ebx
+ 4d6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4df:	84 db                	test   %bl,%bl
+ 4e1:	0f 84 b3 00 00 00    	je     59a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 4e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ea:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 4ed:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 4ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4f2:	eb 2f                	jmp    523 <printf+0x53>
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	0f 84 a7 00 00 00    	je     5a8 <printf+0xd8>
+  write(fd, &c, 1);
+ 501:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 504:	83 ec 04             	sub    $0x4,%esp
+ 507:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 50a:	6a 01                	push   $0x1
+ 50c:	50                   	push   %eax
+ 50d:	ff 75 08             	pushl  0x8(%ebp)
+ 510:	e8 4d fe ff ff       	call   362 <write>
+ 515:	83 c4 10             	add    $0x10,%esp
+ 518:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 51b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 51f:	84 db                	test   %bl,%bl
+ 521:	74 77                	je     59a <printf+0xca>
+    if(state == 0){
+ 523:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 525:	0f be cb             	movsbl %bl,%ecx
+ 528:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 52b:	74 cb                	je     4f8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 52d:	83 ff 25             	cmp    $0x25,%edi
+ 530:	75 e6                	jne    518 <printf+0x48>
+      if(c == 'd'){
+ 532:	83 f8 64             	cmp    $0x64,%eax
+ 535:	0f 84 05 01 00 00    	je     640 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 53b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 541:	83 f9 70             	cmp    $0x70,%ecx
+ 544:	74 72                	je     5b8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 546:	83 f8 73             	cmp    $0x73,%eax
+ 549:	0f 84 99 00 00 00    	je     5e8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 54f:	83 f8 63             	cmp    $0x63,%eax
+ 552:	0f 84 08 01 00 00    	je     660 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 558:	83 f8 25             	cmp    $0x25,%eax
+ 55b:	0f 84 ef 00 00 00    	je     650 <printf+0x180>
+  write(fd, &c, 1);
+ 561:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 564:	83 ec 04             	sub    $0x4,%esp
+ 567:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 56b:	6a 01                	push   $0x1
+ 56d:	50                   	push   %eax
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 571:	e8 ec fd ff ff       	call   362 <write>
+ 576:	83 c4 0c             	add    $0xc,%esp
+ 579:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 57c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 57f:	6a 01                	push   $0x1
+ 581:	50                   	push   %eax
+ 582:	ff 75 08             	pushl  0x8(%ebp)
+ 585:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 588:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 58a:	e8 d3 fd ff ff       	call   362 <write>
+  for(i = 0; fmt[i]; i++){
+ 58f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 593:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 596:	84 db                	test   %bl,%bl
+ 598:	75 89                	jne    523 <printf+0x53>
+    }
+  }
+}
+ 59a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 59d:	5b                   	pop    %ebx
+ 59e:	5e                   	pop    %esi
+ 59f:	5f                   	pop    %edi
+ 5a0:	5d                   	pop    %ebp
+ 5a1:	c3                   	ret    
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 5a8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5ad:	e9 66 ff ff ff       	jmp    518 <printf+0x48>
+ 5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5b8:	83 ec 0c             	sub    $0xc,%esp
+ 5bb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c0:	6a 00                	push   $0x0
+ 5c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5c5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5c8:	8b 17                	mov    (%edi),%edx
+ 5ca:	e8 61 fe ff ff       	call   430 <printint>
+        ap++;
+ 5cf:	89 f8                	mov    %edi,%eax
+ 5d1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5d4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 5d6:	83 c0 04             	add    $0x4,%eax
+ 5d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5dc:	e9 37 ff ff ff       	jmp    518 <printf+0x48>
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5eb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 5ed:	83 c0 04             	add    $0x4,%eax
+ 5f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 5f3:	85 c9                	test   %ecx,%ecx
+ 5f5:	0f 84 8e 00 00 00    	je     689 <printf+0x1b9>
+        while(*s != 0){
+ 5fb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 5fe:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 600:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 602:	84 c0                	test   %al,%al
+ 604:	0f 84 0e ff ff ff    	je     518 <printf+0x48>
+ 60a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 60d:	89 de                	mov    %ebx,%esi
+ 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 612:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 615:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 618:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 61b:	83 c6 01             	add    $0x1,%esi
+ 61e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 621:	6a 01                	push   $0x1
+ 623:	57                   	push   %edi
+ 624:	53                   	push   %ebx
+ 625:	e8 38 fd ff ff       	call   362 <write>
+        while(*s != 0){
+ 62a:	0f b6 06             	movzbl (%esi),%eax
+ 62d:	83 c4 10             	add    $0x10,%esp
+ 630:	84 c0                	test   %al,%al
+ 632:	75 e4                	jne    618 <printf+0x148>
+ 634:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 637:	31 ff                	xor    %edi,%edi
+ 639:	e9 da fe ff ff       	jmp    518 <printf+0x48>
+ 63e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 648:	6a 01                	push   $0x1
+ 64a:	e9 73 ff ff ff       	jmp    5c2 <printf+0xf2>
+ 64f:	90                   	nop
+  write(fd, &c, 1);
+ 650:	83 ec 04             	sub    $0x4,%esp
+ 653:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 656:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 659:	6a 01                	push   $0x1
+ 65b:	e9 21 ff ff ff       	jmp    581 <printf+0xb1>
+        putc(fd, *ap);
+ 660:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 663:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 666:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 668:	6a 01                	push   $0x1
+        ap++;
+ 66a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 66d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 670:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 673:	50                   	push   %eax
+ 674:	ff 75 08             	pushl  0x8(%ebp)
+ 677:	e8 e6 fc ff ff       	call   362 <write>
+        ap++;
+ 67c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 67f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 682:	31 ff                	xor    %edi,%edi
+ 684:	e9 8f fe ff ff       	jmp    518 <printf+0x48>
+          s = "(null)";
+ 689:	bb 78 08 00 00       	mov    $0x878,%ebx
+        while(*s != 0){
+ 68e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 693:	e9 72 ff ff ff       	jmp    60a <printf+0x13a>
+ 698:	66 90                	xchg   %ax,%ax
+ 69a:	66 90                	xchg   %ax,%ax
+ 69c:	66 90                	xchg   %ax,%ax
+ 69e:	66 90                	xchg   %ax,%ax
+
+000006a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a1:	a1 30 0b 00 00       	mov    0xb30,%eax
+{
+ 6a6:	89 e5                	mov    %esp,%ebp
+ 6a8:	57                   	push   %edi
+ 6a9:	56                   	push   %esi
+ 6aa:	53                   	push   %ebx
+ 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b8:	39 c8                	cmp    %ecx,%eax
+ 6ba:	8b 10                	mov    (%eax),%edx
+ 6bc:	73 32                	jae    6f0 <free+0x50>
+ 6be:	39 d1                	cmp    %edx,%ecx
+ 6c0:	72 04                	jb     6c6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c2:	39 d0                	cmp    %edx,%eax
+ 6c4:	72 32                	jb     6f8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6cc:	39 fa                	cmp    %edi,%edx
+ 6ce:	74 30                	je     700 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6d3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6d9:	39 f1                	cmp    %esi,%ecx
+ 6db:	74 3a                	je     717 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6dd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 6df:	a3 30 0b 00 00       	mov    %eax,0xb30
+}
+ 6e4:	5b                   	pop    %ebx
+ 6e5:	5e                   	pop    %esi
+ 6e6:	5f                   	pop    %edi
+ 6e7:	5d                   	pop    %ebp
+ 6e8:	c3                   	ret    
+ 6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f0:	39 d0                	cmp    %edx,%eax
+ 6f2:	72 04                	jb     6f8 <free+0x58>
+ 6f4:	39 d1                	cmp    %edx,%ecx
+ 6f6:	72 ce                	jb     6c6 <free+0x26>
+{
+ 6f8:	89 d0                	mov    %edx,%eax
+ 6fa:	eb bc                	jmp    6b8 <free+0x18>
+ 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 700:	03 72 04             	add    0x4(%edx),%esi
+ 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 706:	8b 10                	mov    (%eax),%edx
+ 708:	8b 12                	mov    (%edx),%edx
+ 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 70d:	8b 50 04             	mov    0x4(%eax),%edx
+ 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 713:	39 f1                	cmp    %esi,%ecx
+ 715:	75 c6                	jne    6dd <free+0x3d>
+    p->s.size += bp->s.size;
+ 717:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 71a:	a3 30 0b 00 00       	mov    %eax,0xb30
+    p->s.size += bp->s.size;
+ 71f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 725:	89 10                	mov    %edx,(%eax)
+}
+ 727:	5b                   	pop    %ebx
+ 728:	5e                   	pop    %esi
+ 729:	5f                   	pop    %edi
+ 72a:	5d                   	pop    %ebp
+ 72b:	c3                   	ret    
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000730 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 730:	55                   	push   %ebp
+ 731:	89 e5                	mov    %esp,%ebp
+ 733:	57                   	push   %edi
+ 734:	56                   	push   %esi
+ 735:	53                   	push   %ebx
+ 736:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 739:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 73c:	8b 15 30 0b 00 00    	mov    0xb30,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 742:	8d 78 07             	lea    0x7(%eax),%edi
+ 745:	c1 ef 03             	shr    $0x3,%edi
+ 748:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 74b:	85 d2                	test   %edx,%edx
+ 74d:	0f 84 9d 00 00 00    	je     7f0 <malloc+0xc0>
+ 753:	8b 02                	mov    (%edx),%eax
+ 755:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 758:	39 cf                	cmp    %ecx,%edi
+ 75a:	76 6c                	jbe    7c8 <malloc+0x98>
+ 75c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 762:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 767:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 76a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 771:	eb 0e                	jmp    781 <malloc+0x51>
+ 773:	90                   	nop
+ 774:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 778:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 77a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 77d:	39 f9                	cmp    %edi,%ecx
+ 77f:	73 47                	jae    7c8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 781:	39 05 30 0b 00 00    	cmp    %eax,0xb30
+ 787:	89 c2                	mov    %eax,%edx
+ 789:	75 ed                	jne    778 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 78b:	83 ec 0c             	sub    $0xc,%esp
+ 78e:	56                   	push   %esi
+ 78f:	e8 36 fc ff ff       	call   3ca <sbrk>
+  if(p == (char*)-1)
+ 794:	83 c4 10             	add    $0x10,%esp
+ 797:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 79a:	74 1c                	je     7b8 <malloc+0x88>
+  hp->s.size = nu;
+ 79c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 79f:	83 ec 0c             	sub    $0xc,%esp
+ 7a2:	83 c0 08             	add    $0x8,%eax
+ 7a5:	50                   	push   %eax
+ 7a6:	e8 f5 fe ff ff       	call   6a0 <free>
+  return freep;
+ 7ab:	8b 15 30 0b 00 00    	mov    0xb30,%edx
+      if((p = morecore(nunits)) == 0)
+ 7b1:	83 c4 10             	add    $0x10,%esp
+ 7b4:	85 d2                	test   %edx,%edx
+ 7b6:	75 c0                	jne    778 <malloc+0x48>
+        return 0;
+  }
+}
+ 7b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7bb:	31 c0                	xor    %eax,%eax
+}
+ 7bd:	5b                   	pop    %ebx
+ 7be:	5e                   	pop    %esi
+ 7bf:	5f                   	pop    %edi
+ 7c0:	5d                   	pop    %ebp
+ 7c1:	c3                   	ret    
+ 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7c8:	39 cf                	cmp    %ecx,%edi
+ 7ca:	74 54                	je     820 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7cc:	29 f9                	sub    %edi,%ecx
+ 7ce:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7d4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 7d7:	89 15 30 0b 00 00    	mov    %edx,0xb30
+}
+ 7dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7e0:	83 c0 08             	add    $0x8,%eax
+}
+ 7e3:	5b                   	pop    %ebx
+ 7e4:	5e                   	pop    %esi
+ 7e5:	5f                   	pop    %edi
+ 7e6:	5d                   	pop    %ebp
+ 7e7:	c3                   	ret    
+ 7e8:	90                   	nop
+ 7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 7f0:	c7 05 30 0b 00 00 34 	movl   $0xb34,0xb30
+ 7f7:	0b 00 00 
+ 7fa:	c7 05 34 0b 00 00 34 	movl   $0xb34,0xb34
+ 801:	0b 00 00 
+    base.s.size = 0;
+ 804:	b8 34 0b 00 00       	mov    $0xb34,%eax
+ 809:	c7 05 38 0b 00 00 00 	movl   $0x0,0xb38
+ 810:	00 00 00 
+ 813:	e9 44 ff ff ff       	jmp    75c <malloc+0x2c>
+ 818:	90                   	nop
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 820:	8b 08                	mov    (%eax),%ecx
+ 822:	89 0a                	mov    %ecx,(%edx)
+ 824:	eb b1                	jmp    7d7 <malloc+0xa7>
Binary files xv6org/initcode and xv6mhybrid/initcode differ
diff -ruN xv6org/initcode.asm xv6mhybrid/initcode.asm
--- xv6org/initcode.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/initcode.asm	2020-10-15 18:57:01.825598628 +0530
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -ruN xv6org/initcode.d xv6mhybrid/initcode.d
--- xv6org/initcode.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/initcode.d	2020-10-15 18:57:01.817598844 +0530
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files xv6org/initcode.o and xv6mhybrid/initcode.o differ
Binary files xv6org/initcode.out and xv6mhybrid/initcode.out differ
diff -ruN xv6org/init.d xv6mhybrid/init.d
--- xv6org/init.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/init.d	2020-10-15 19:50:34.261735888 +0530
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files xv6org/init.o and xv6mhybrid/init.o differ
diff -ruN xv6org/init.sym xv6mhybrid/init.sym
--- xv6org/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/init.sym	2020-10-15 19:50:34.361729370 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+00000828 .rodata
+00000894 .eh_frame
+00000b28 .data
+00000b30 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+00000430 printint
+00000880 digits.1056
+00000000 umalloc.c
+00000b30 freep
+00000b34 base
+000000f0 strcpy
+000004d0 printf
+00000b28 argv
+00000310 memmove
+0000038a mknod
+00000200 gets
+000003c2 getpid
+00000730 malloc
+000003d2 sleep
+00000402 get_burst_time
+00000352 pipe
+00000362 write
+0000039a fstat
+00000372 kill
+0000040a process_state
+000003b2 chdir
+00000412 dec_burstTime
+0000037a exec
+0000034a wait
+0000041a inc_cpucounter
+0000035a read
+00000392 unlink
+0000033a fork
+000003ca sbrk
+000003da uptime
+00000b30 __bss_start
+000001a0 memset
+00000000 main
+000003fa set_burst_time
+00000120 strcmp
+000003ba dup
+000003ea getMaxPid
+000003e2 getNumProc
+000003f2 getProcInfo
+00000280 stat
+00000b30 _edata
+00000b3c _end
+000003a2 link
+00000342 exit
+000002d0 atoi
+00000170 strlen
+00000382 open
+000001c0 strchr
+000003aa mkdir
+0000036a close
+000006a0 free
diff -ruN xv6org/ioapic.d xv6mhybrid/ioapic.d
--- xv6org/ioapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ioapic.d	2020-10-15 19:50:36.185610821 +0530
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files xv6org/ioapic.o and xv6mhybrid/ioapic.o differ
diff -ruN xv6org/kalloc.d xv6mhybrid/kalloc.d
--- xv6org/kalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/kalloc.d	2020-10-15 19:50:36.217608748 +0530
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files xv6org/kalloc.o and xv6mhybrid/kalloc.o differ
diff -ruN xv6org/kbd.d xv6mhybrid/kbd.d
--- xv6org/kbd.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/kbd.d	2020-10-15 19:50:36.245606934 +0530
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files xv6org/kbd.o and xv6mhybrid/kbd.o differ
Binary files xv6org/kernel and xv6mhybrid/kernel differ
diff -ruN xv6org/kernel.asm xv6mhybrid/kernel.asm
--- xv6org/kernel.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/kernel.asm	2020-10-15 19:52:19.051698766 +0530
@@ -0,0 +1,16060 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 a0 2e 10 80       	mov    $0x80102ea0,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100040:	55                   	push   %ebp
+80100041:	89 e5                	mov    %esp,%ebp
+80100043:	53                   	push   %ebx
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100044:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
+{
+80100049:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&bcache.lock, "bcache");
+8010004c:	68 a0 73 10 80       	push   $0x801073a0
+80100051:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100056:	e8 95 45 00 00       	call   801045f0 <initlock>
+  bcache.head.prev = &bcache.head;
+8010005b:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
+80100062:	fc 10 80 
+  bcache.head.next = &bcache.head;
+80100065:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
+8010006c:	fc 10 80 
+8010006f:	83 c4 10             	add    $0x10,%esp
+80100072:	ba bc fc 10 80       	mov    $0x8010fcbc,%edx
+80100077:	eb 09                	jmp    80100082 <binit+0x42>
+80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100080:	89 c3                	mov    %eax,%ebx
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+80100082:	8d 43 0c             	lea    0xc(%ebx),%eax
+80100085:	83 ec 08             	sub    $0x8,%esp
+    b->next = bcache.head.next;
+80100088:	89 53 54             	mov    %edx,0x54(%ebx)
+    b->prev = &bcache.head;
+8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+    initsleeplock(&b->lock, "buffer");
+80100092:	68 a7 73 10 80       	push   $0x801073a7
+80100097:	50                   	push   %eax
+80100098:	e8 23 44 00 00       	call   801044c0 <initsleeplock>
+    bcache.head.next->prev = b;
+8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000a2:	83 c4 10             	add    $0x10,%esp
+801000a5:	89 da                	mov    %ebx,%edx
+    bcache.head.next->prev = b;
+801000a7:	89 58 50             	mov    %ebx,0x50(%eax)
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000aa:	8d 83 5c 02 00 00    	lea    0x25c(%ebx),%eax
+    bcache.head.next = b;
+801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000b6:	3d bc fc 10 80       	cmp    $0x8010fcbc,%eax
+801000bb:	72 c3                	jb     80100080 <binit+0x40>
+  }
+}
+801000bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c0:	c9                   	leave  
+801000c1:	c3                   	ret    
+801000c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801000d0 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+801000d0:	55                   	push   %ebp
+801000d1:	89 e5                	mov    %esp,%ebp
+801000d3:	57                   	push   %edi
+801000d4:	56                   	push   %esi
+801000d5:	53                   	push   %ebx
+801000d6:	83 ec 18             	sub    $0x18,%esp
+801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
+801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  acquire(&bcache.lock);
+801000df:	68 c0 b5 10 80       	push   $0x8010b5c0
+801000e4:	e8 47 46 00 00       	call   80104730 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000e9:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
+801000ef:	83 c4 10             	add    $0x10,%esp
+801000f2:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+801000f8:	75 11                	jne    8010010b <bread+0x3b>
+801000fa:	eb 24                	jmp    80100120 <bread+0x50>
+801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+    if(b->dev == dev && b->blockno == blockno){
+8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 7b 08             	cmp    0x8(%ebx),%edi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+      b->refcnt++;
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	90                   	nop
+8010011c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
+80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 60                	jmp    80100190 <bread+0xc0>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100139:	74 55                	je     80100190 <bread+0xc0>
+    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+      b->dev = dev;
+80100147:	89 73 04             	mov    %esi,0x4(%ebx)
+      b->blockno = blockno;
+8010014a:	89 7b 08             	mov    %edi,0x8(%ebx)
+      b->flags = 0;
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+      b->refcnt = 1;
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100162:	e8 89 46 00 00       	call   801047f0 <release>
+      acquiresleep(&b->lock);
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 8e 43 00 00       	call   80104500 <acquiresleep>
+80100172:	83 c4 10             	add    $0x10,%esp
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if((b->flags & B_VALID) == 0) {
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	75 0c                	jne    80100186 <bread+0xb6>
+    iderw(b);
+8010017a:	83 ec 0c             	sub    $0xc,%esp
+8010017d:	53                   	push   %ebx
+8010017e:	e8 9d 1f 00 00       	call   80102120 <iderw>
+80100183:	83 c4 10             	add    $0x10,%esp
+  }
+  return b;
+}
+80100186:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100189:	89 d8                	mov    %ebx,%eax
+8010018b:	5b                   	pop    %ebx
+8010018c:	5e                   	pop    %esi
+8010018d:	5f                   	pop    %edi
+8010018e:	5d                   	pop    %ebp
+8010018f:	c3                   	ret    
+  panic("bget: no buffers");
+80100190:	83 ec 0c             	sub    $0xc,%esp
+80100193:	68 ae 73 10 80       	push   $0x801073ae
+80100198:	e8 f3 01 00 00       	call   80100390 <panic>
+8010019d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001a0 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+801001a0:	55                   	push   %ebp
+801001a1:	89 e5                	mov    %esp,%ebp
+801001a3:	53                   	push   %ebx
+801001a4:	83 ec 10             	sub    $0x10,%esp
+801001a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001aa:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001ad:	50                   	push   %eax
+801001ae:	e8 ed 43 00 00       	call   801045a0 <holdingsleep>
+801001b3:	83 c4 10             	add    $0x10,%esp
+801001b6:	85 c0                	test   %eax,%eax
+801001b8:	74 0f                	je     801001c9 <bwrite+0x29>
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+801001ba:	83 0b 04             	orl    $0x4,(%ebx)
+  iderw(b);
+801001bd:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801001c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001c3:	c9                   	leave  
+  iderw(b);
+801001c4:	e9 57 1f 00 00       	jmp    80102120 <iderw>
+    panic("bwrite");
+801001c9:	83 ec 0c             	sub    $0xc,%esp
+801001cc:	68 bf 73 10 80       	push   $0x801073bf
+801001d1:	e8 ba 01 00 00       	call   80100390 <panic>
+801001d6:	8d 76 00             	lea    0x0(%esi),%esi
+801001d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801001e0 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+801001e0:	55                   	push   %ebp
+801001e1:	89 e5                	mov    %esp,%ebp
+801001e3:	56                   	push   %esi
+801001e4:	53                   	push   %ebx
+801001e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001e8:	83 ec 0c             	sub    $0xc,%esp
+801001eb:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001ee:	56                   	push   %esi
+801001ef:	e8 ac 43 00 00       	call   801045a0 <holdingsleep>
+801001f4:	83 c4 10             	add    $0x10,%esp
+801001f7:	85 c0                	test   %eax,%eax
+801001f9:	74 66                	je     80100261 <brelse+0x81>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+801001fb:	83 ec 0c             	sub    $0xc,%esp
+801001fe:	56                   	push   %esi
+801001ff:	e8 5c 43 00 00       	call   80104560 <releasesleep>
+
+  acquire(&bcache.lock);
+80100204:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
+8010020b:	e8 20 45 00 00       	call   80104730 <acquire>
+  b->refcnt--;
+80100210:	8b 43 4c             	mov    0x4c(%ebx),%eax
+  if (b->refcnt == 0) {
+80100213:	83 c4 10             	add    $0x10,%esp
+  b->refcnt--;
+80100216:	83 e8 01             	sub    $0x1,%eax
+  if (b->refcnt == 0) {
+80100219:	85 c0                	test   %eax,%eax
+  b->refcnt--;
+8010021b:	89 43 4c             	mov    %eax,0x4c(%ebx)
+  if (b->refcnt == 0) {
+8010021e:	75 2f                	jne    8010024f <brelse+0x6f>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+80100220:	8b 43 54             	mov    0x54(%ebx),%eax
+80100223:	8b 53 50             	mov    0x50(%ebx),%edx
+80100226:	89 50 50             	mov    %edx,0x50(%eax)
+    b->prev->next = b->next;
+80100229:	8b 43 50             	mov    0x50(%ebx),%eax
+8010022c:	8b 53 54             	mov    0x54(%ebx),%edx
+8010022f:	89 50 54             	mov    %edx,0x54(%eax)
+    b->next = bcache.head.next;
+80100232:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+    b->prev = &bcache.head;
+80100237:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+    b->next = bcache.head.next;
+8010023e:	89 43 54             	mov    %eax,0x54(%ebx)
+    bcache.head.next->prev = b;
+80100241:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100246:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+80100249:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+  }
+  
+  release(&bcache.lock);
+8010024f:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
+}
+80100256:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80100259:	5b                   	pop    %ebx
+8010025a:	5e                   	pop    %esi
+8010025b:	5d                   	pop    %ebp
+  release(&bcache.lock);
+8010025c:	e9 8f 45 00 00       	jmp    801047f0 <release>
+    panic("brelse");
+80100261:	83 ec 0c             	sub    $0xc,%esp
+80100264:	68 c6 73 10 80       	push   $0x801073c6
+80100269:	e8 22 01 00 00       	call   80100390 <panic>
+8010026e:	66 90                	xchg   %ax,%ax
+
+80100270 <consoleread>:
+  }
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+80100270:	55                   	push   %ebp
+80100271:	89 e5                	mov    %esp,%ebp
+80100273:	57                   	push   %edi
+80100274:	56                   	push   %esi
+80100275:	53                   	push   %ebx
+80100276:	83 ec 28             	sub    $0x28,%esp
+80100279:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010027c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  uint target;
+  int c;
+
+  iunlock(ip);
+8010027f:	57                   	push   %edi
+80100280:	e8 db 14 00 00       	call   80101760 <iunlock>
+  target = n;
+  acquire(&cons.lock);
+80100285:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010028c:	e8 9f 44 00 00       	call   80104730 <acquire>
+  while(n > 0){
+80100291:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80100294:	83 c4 10             	add    $0x10,%esp
+80100297:	31 c0                	xor    %eax,%eax
+80100299:	85 db                	test   %ebx,%ebx
+8010029b:	0f 8e a1 00 00 00    	jle    80100342 <consoleread+0xd2>
+    while(input.r == input.w){
+801002a1:	8b 15 a0 ff 10 80    	mov    0x8010ffa0,%edx
+801002a7:	39 15 a4 ff 10 80    	cmp    %edx,0x8010ffa4
+801002ad:	74 2c                	je     801002db <consoleread+0x6b>
+801002af:	eb 5f                	jmp    80100310 <consoleread+0xa0>
+801002b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(myproc()->killed){
+        release(&cons.lock);
+        ilock(ip);
+        return -1;
+      }
+      sleep(&input.r, &cons.lock);
+801002b8:	83 ec 08             	sub    $0x8,%esp
+801002bb:	68 20 a5 10 80       	push   $0x8010a520
+801002c0:	68 a0 ff 10 80       	push   $0x8010ffa0
+801002c5:	e8 16 3b 00 00       	call   80103de0 <sleep>
+    while(input.r == input.w){
+801002ca:	8b 15 a0 ff 10 80    	mov    0x8010ffa0,%edx
+801002d0:	83 c4 10             	add    $0x10,%esp
+801002d3:	3b 15 a4 ff 10 80    	cmp    0x8010ffa4,%edx
+801002d9:	75 35                	jne    80100310 <consoleread+0xa0>
+      if(myproc()->killed){
+801002db:	e8 20 35 00 00       	call   80103800 <myproc>
+801002e0:	8b 40 24             	mov    0x24(%eax),%eax
+801002e3:	85 c0                	test   %eax,%eax
+801002e5:	74 d1                	je     801002b8 <consoleread+0x48>
+        release(&cons.lock);
+801002e7:	83 ec 0c             	sub    $0xc,%esp
+801002ea:	68 20 a5 10 80       	push   $0x8010a520
+801002ef:	e8 fc 44 00 00       	call   801047f0 <release>
+        ilock(ip);
+801002f4:	89 3c 24             	mov    %edi,(%esp)
+801002f7:	e8 84 13 00 00       	call   80101680 <ilock>
+        return -1;
+801002fc:	83 c4 10             	add    $0x10,%esp
+  }
+  release(&cons.lock);
+  ilock(ip);
+
+  return target - n;
+}
+801002ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return -1;
+80100302:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100307:	5b                   	pop    %ebx
+80100308:	5e                   	pop    %esi
+80100309:	5f                   	pop    %edi
+8010030a:	5d                   	pop    %ebp
+8010030b:	c3                   	ret    
+8010030c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = input.buf[input.r++ % INPUT_BUF];
+80100310:	8d 42 01             	lea    0x1(%edx),%eax
+80100313:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
+80100318:	89 d0                	mov    %edx,%eax
+8010031a:	83 e0 7f             	and    $0x7f,%eax
+8010031d:	0f be 80 20 ff 10 80 	movsbl -0x7fef00e0(%eax),%eax
+    if(c == C('D')){  // EOF
+80100324:	83 f8 04             	cmp    $0x4,%eax
+80100327:	74 3f                	je     80100368 <consoleread+0xf8>
+    *dst++ = c;
+80100329:	83 c6 01             	add    $0x1,%esi
+    --n;
+8010032c:	83 eb 01             	sub    $0x1,%ebx
+    if(c == '\n')
+8010032f:	83 f8 0a             	cmp    $0xa,%eax
+    *dst++ = c;
+80100332:	88 46 ff             	mov    %al,-0x1(%esi)
+    if(c == '\n')
+80100335:	74 43                	je     8010037a <consoleread+0x10a>
+  while(n > 0){
+80100337:	85 db                	test   %ebx,%ebx
+80100339:	0f 85 62 ff ff ff    	jne    801002a1 <consoleread+0x31>
+8010033f:	8b 45 10             	mov    0x10(%ebp),%eax
+  release(&cons.lock);
+80100342:	83 ec 0c             	sub    $0xc,%esp
+80100345:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100348:	68 20 a5 10 80       	push   $0x8010a520
+8010034d:	e8 9e 44 00 00       	call   801047f0 <release>
+  ilock(ip);
+80100352:	89 3c 24             	mov    %edi,(%esp)
+80100355:	e8 26 13 00 00       	call   80101680 <ilock>
+  return target - n;
+8010035a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010035d:	83 c4 10             	add    $0x10,%esp
+}
+80100360:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100363:	5b                   	pop    %ebx
+80100364:	5e                   	pop    %esi
+80100365:	5f                   	pop    %edi
+80100366:	5d                   	pop    %ebp
+80100367:	c3                   	ret    
+80100368:	8b 45 10             	mov    0x10(%ebp),%eax
+8010036b:	29 d8                	sub    %ebx,%eax
+      if(n < target){
+8010036d:	3b 5d 10             	cmp    0x10(%ebp),%ebx
+80100370:	73 d0                	jae    80100342 <consoleread+0xd2>
+        input.r--;
+80100372:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
+80100378:	eb c8                	jmp    80100342 <consoleread+0xd2>
+8010037a:	8b 45 10             	mov    0x10(%ebp),%eax
+8010037d:	29 d8                	sub    %ebx,%eax
+8010037f:	eb c1                	jmp    80100342 <consoleread+0xd2>
+80100381:	eb 0d                	jmp    80100390 <panic>
+80100383:	90                   	nop
+80100384:	90                   	nop
+80100385:	90                   	nop
+80100386:	90                   	nop
+80100387:	90                   	nop
+80100388:	90                   	nop
+80100389:	90                   	nop
+8010038a:	90                   	nop
+8010038b:	90                   	nop
+8010038c:	90                   	nop
+8010038d:	90                   	nop
+8010038e:	90                   	nop
+8010038f:	90                   	nop
+
+80100390 <panic>:
+{
+80100390:	55                   	push   %ebp
+80100391:	89 e5                	mov    %esp,%ebp
+80100393:	56                   	push   %esi
+80100394:	53                   	push   %ebx
+80100395:	83 ec 30             	sub    $0x30,%esp
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+80100398:	fa                   	cli    
+  cons.locking = 0;
+80100399:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+801003a0:	00 00 00 
+  getcallerpcs(&s, pcs);
+801003a3:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+801003a6:	8d 75 f8             	lea    -0x8(%ebp),%esi
+  cprintf("lapicid %d: panic: ", lapicid());
+801003a9:	e8 82 23 00 00       	call   80102730 <lapicid>
+801003ae:	83 ec 08             	sub    $0x8,%esp
+801003b1:	50                   	push   %eax
+801003b2:	68 cd 73 10 80       	push   $0x801073cd
+801003b7:	e8 a4 02 00 00       	call   80100660 <cprintf>
+  cprintf(s);
+801003bc:	58                   	pop    %eax
+801003bd:	ff 75 08             	pushl  0x8(%ebp)
+801003c0:	e8 9b 02 00 00       	call   80100660 <cprintf>
+  cprintf("\n");
+801003c5:	c7 04 24 d7 7d 10 80 	movl   $0x80107dd7,(%esp)
+801003cc:	e8 8f 02 00 00       	call   80100660 <cprintf>
+  getcallerpcs(&s, pcs);
+801003d1:	5a                   	pop    %edx
+801003d2:	8d 45 08             	lea    0x8(%ebp),%eax
+801003d5:	59                   	pop    %ecx
+801003d6:	53                   	push   %ebx
+801003d7:	50                   	push   %eax
+801003d8:	e8 33 42 00 00       	call   80104610 <getcallerpcs>
+801003dd:	83 c4 10             	add    $0x10,%esp
+    cprintf(" %p", pcs[i]);
+801003e0:	83 ec 08             	sub    $0x8,%esp
+801003e3:	ff 33                	pushl  (%ebx)
+801003e5:	83 c3 04             	add    $0x4,%ebx
+801003e8:	68 e1 73 10 80       	push   $0x801073e1
+801003ed:	e8 6e 02 00 00       	call   80100660 <cprintf>
+  for(i=0; i<10; i++)
+801003f2:	83 c4 10             	add    $0x10,%esp
+801003f5:	39 f3                	cmp    %esi,%ebx
+801003f7:	75 e7                	jne    801003e0 <panic+0x50>
+  panicked = 1; // freeze other CPU
+801003f9:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+80100400:	00 00 00 
+80100403:	eb fe                	jmp    80100403 <panic+0x73>
+80100405:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100410 <consputc>:
+  if(panicked){
+80100410:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+80100416:	85 c9                	test   %ecx,%ecx
+80100418:	74 06                	je     80100420 <consputc+0x10>
+8010041a:	fa                   	cli    
+8010041b:	eb fe                	jmp    8010041b <consputc+0xb>
+8010041d:	8d 76 00             	lea    0x0(%esi),%esi
+{
+80100420:	55                   	push   %ebp
+80100421:	89 e5                	mov    %esp,%ebp
+80100423:	57                   	push   %edi
+80100424:	56                   	push   %esi
+80100425:	53                   	push   %ebx
+80100426:	89 c6                	mov    %eax,%esi
+80100428:	83 ec 0c             	sub    $0xc,%esp
+  if(c == BACKSPACE){
+8010042b:	3d 00 01 00 00       	cmp    $0x100,%eax
+80100430:	0f 84 b1 00 00 00    	je     801004e7 <consputc+0xd7>
+    uartputc(c);
+80100436:	83 ec 0c             	sub    $0xc,%esp
+80100439:	50                   	push   %eax
+8010043a:	e8 61 5b 00 00       	call   80105fa0 <uartputc>
+8010043f:	83 c4 10             	add    $0x10,%esp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100442:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+80100447:	b8 0e 00 00 00       	mov    $0xe,%eax
+8010044c:	89 da                	mov    %ebx,%edx
+8010044e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010044f:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+80100454:	89 ca                	mov    %ecx,%edx
+80100456:	ec                   	in     (%dx),%al
+  pos = inb(CRTPORT+1) << 8;
+80100457:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010045a:	89 da                	mov    %ebx,%edx
+8010045c:	c1 e0 08             	shl    $0x8,%eax
+8010045f:	89 c7                	mov    %eax,%edi
+80100461:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100466:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100467:	89 ca                	mov    %ecx,%edx
+80100469:	ec                   	in     (%dx),%al
+8010046a:	0f b6 d8             	movzbl %al,%ebx
+  pos |= inb(CRTPORT+1);
+8010046d:	09 fb                	or     %edi,%ebx
+  if(c == '\n')
+8010046f:	83 fe 0a             	cmp    $0xa,%esi
+80100472:	0f 84 f3 00 00 00    	je     8010056b <consputc+0x15b>
+  else if(c == BACKSPACE){
+80100478:	81 fe 00 01 00 00    	cmp    $0x100,%esi
+8010047e:	0f 84 d7 00 00 00    	je     8010055b <consputc+0x14b>
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+80100484:	89 f0                	mov    %esi,%eax
+80100486:	0f b6 c0             	movzbl %al,%eax
+80100489:	80 cc 07             	or     $0x7,%ah
+8010048c:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+80100493:	80 
+80100494:	83 c3 01             	add    $0x1,%ebx
+  if(pos < 0 || pos > 25*80)
+80100497:	81 fb d0 07 00 00    	cmp    $0x7d0,%ebx
+8010049d:	0f 8f ab 00 00 00    	jg     8010054e <consputc+0x13e>
+  if((pos/80) >= 24){  // Scroll up.
+801004a3:	81 fb 7f 07 00 00    	cmp    $0x77f,%ebx
+801004a9:	7f 66                	jg     80100511 <consputc+0x101>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801004ab:	be d4 03 00 00       	mov    $0x3d4,%esi
+801004b0:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004b5:	89 f2                	mov    %esi,%edx
+801004b7:	ee                   	out    %al,(%dx)
+801004b8:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+  outb(CRTPORT+1, pos>>8);
+801004bd:	89 d8                	mov    %ebx,%eax
+801004bf:	c1 f8 08             	sar    $0x8,%eax
+801004c2:	89 ca                	mov    %ecx,%edx
+801004c4:	ee                   	out    %al,(%dx)
+801004c5:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004ca:	89 f2                	mov    %esi,%edx
+801004cc:	ee                   	out    %al,(%dx)
+801004cd:	89 d8                	mov    %ebx,%eax
+801004cf:	89 ca                	mov    %ecx,%edx
+801004d1:	ee                   	out    %al,(%dx)
+  crt[pos] = ' ' | 0x0700;
+801004d2:	b8 20 07 00 00       	mov    $0x720,%eax
+801004d7:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+801004de:	80 
+}
+801004df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801004e2:	5b                   	pop    %ebx
+801004e3:	5e                   	pop    %esi
+801004e4:	5f                   	pop    %edi
+801004e5:	5d                   	pop    %ebp
+801004e6:	c3                   	ret    
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+801004e7:	83 ec 0c             	sub    $0xc,%esp
+801004ea:	6a 08                	push   $0x8
+801004ec:	e8 af 5a 00 00       	call   80105fa0 <uartputc>
+801004f1:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+801004f8:	e8 a3 5a 00 00       	call   80105fa0 <uartputc>
+801004fd:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+80100504:	e8 97 5a 00 00       	call   80105fa0 <uartputc>
+80100509:	83 c4 10             	add    $0x10,%esp
+8010050c:	e9 31 ff ff ff       	jmp    80100442 <consputc+0x32>
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100511:	52                   	push   %edx
+80100512:	68 60 0e 00 00       	push   $0xe60
+    pos -= 80;
+80100517:	83 eb 50             	sub    $0x50,%ebx
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+8010051a:	68 a0 80 0b 80       	push   $0x800b80a0
+8010051f:	68 00 80 0b 80       	push   $0x800b8000
+80100524:	e8 c7 43 00 00       	call   801048f0 <memmove>
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100529:	b8 80 07 00 00       	mov    $0x780,%eax
+8010052e:	83 c4 0c             	add    $0xc,%esp
+80100531:	29 d8                	sub    %ebx,%eax
+80100533:	01 c0                	add    %eax,%eax
+80100535:	50                   	push   %eax
+80100536:	8d 04 1b             	lea    (%ebx,%ebx,1),%eax
+80100539:	6a 00                	push   $0x0
+8010053b:	2d 00 80 f4 7f       	sub    $0x7ff48000,%eax
+80100540:	50                   	push   %eax
+80100541:	e8 fa 42 00 00       	call   80104840 <memset>
+80100546:	83 c4 10             	add    $0x10,%esp
+80100549:	e9 5d ff ff ff       	jmp    801004ab <consputc+0x9b>
+    panic("pos under/overflow");
+8010054e:	83 ec 0c             	sub    $0xc,%esp
+80100551:	68 e5 73 10 80       	push   $0x801073e5
+80100556:	e8 35 fe ff ff       	call   80100390 <panic>
+    if(pos > 0) --pos;
+8010055b:	85 db                	test   %ebx,%ebx
+8010055d:	0f 84 48 ff ff ff    	je     801004ab <consputc+0x9b>
+80100563:	83 eb 01             	sub    $0x1,%ebx
+80100566:	e9 2c ff ff ff       	jmp    80100497 <consputc+0x87>
+    pos += 80 - pos%80;
+8010056b:	89 d8                	mov    %ebx,%eax
+8010056d:	b9 50 00 00 00       	mov    $0x50,%ecx
+80100572:	99                   	cltd   
+80100573:	f7 f9                	idiv   %ecx
+80100575:	29 d1                	sub    %edx,%ecx
+80100577:	01 cb                	add    %ecx,%ebx
+80100579:	e9 19 ff ff ff       	jmp    80100497 <consputc+0x87>
+8010057e:	66 90                	xchg   %ax,%ax
+
+80100580 <printint>:
+{
+80100580:	55                   	push   %ebp
+80100581:	89 e5                	mov    %esp,%ebp
+80100583:	57                   	push   %edi
+80100584:	56                   	push   %esi
+80100585:	53                   	push   %ebx
+80100586:	89 d3                	mov    %edx,%ebx
+80100588:	83 ec 2c             	sub    $0x2c,%esp
+  if(sign && (sign = xx < 0))
+8010058b:	85 c9                	test   %ecx,%ecx
+{
+8010058d:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  if(sign && (sign = xx < 0))
+80100590:	74 04                	je     80100596 <printint+0x16>
+80100592:	85 c0                	test   %eax,%eax
+80100594:	78 5a                	js     801005f0 <printint+0x70>
+    x = xx;
+80100596:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+  i = 0;
+8010059d:	31 c9                	xor    %ecx,%ecx
+8010059f:	8d 75 d7             	lea    -0x29(%ebp),%esi
+801005a2:	eb 06                	jmp    801005aa <printint+0x2a>
+801005a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    buf[i++] = digits[x % base];
+801005a8:	89 f9                	mov    %edi,%ecx
+801005aa:	31 d2                	xor    %edx,%edx
+801005ac:	8d 79 01             	lea    0x1(%ecx),%edi
+801005af:	f7 f3                	div    %ebx
+801005b1:	0f b6 92 10 74 10 80 	movzbl -0x7fef8bf0(%edx),%edx
+  }while((x /= base) != 0);
+801005b8:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+801005ba:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+801005bd:	75 e9                	jne    801005a8 <printint+0x28>
+  if(sign)
+801005bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+801005c2:	85 c0                	test   %eax,%eax
+801005c4:	74 08                	je     801005ce <printint+0x4e>
+    buf[i++] = '-';
+801005c6:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+801005cb:	8d 79 02             	lea    0x2(%ecx),%edi
+801005ce:	8d 5c 3d d7          	lea    -0x29(%ebp,%edi,1),%ebx
+801005d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    consputc(buf[i]);
+801005d8:	0f be 03             	movsbl (%ebx),%eax
+801005db:	83 eb 01             	sub    $0x1,%ebx
+801005de:	e8 2d fe ff ff       	call   80100410 <consputc>
+  while(--i >= 0)
+801005e3:	39 f3                	cmp    %esi,%ebx
+801005e5:	75 f1                	jne    801005d8 <printint+0x58>
+}
+801005e7:	83 c4 2c             	add    $0x2c,%esp
+801005ea:	5b                   	pop    %ebx
+801005eb:	5e                   	pop    %esi
+801005ec:	5f                   	pop    %edi
+801005ed:	5d                   	pop    %ebp
+801005ee:	c3                   	ret    
+801005ef:	90                   	nop
+    x = -xx;
+801005f0:	f7 d8                	neg    %eax
+801005f2:	eb a9                	jmp    8010059d <printint+0x1d>
+801005f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801005fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80100600 <consolewrite>:
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100600:	55                   	push   %ebp
+80100601:	89 e5                	mov    %esp,%ebp
+80100603:	57                   	push   %edi
+80100604:	56                   	push   %esi
+80100605:	53                   	push   %ebx
+80100606:	83 ec 18             	sub    $0x18,%esp
+80100609:	8b 75 10             	mov    0x10(%ebp),%esi
+  int i;
+
+  iunlock(ip);
+8010060c:	ff 75 08             	pushl  0x8(%ebp)
+8010060f:	e8 4c 11 00 00       	call   80101760 <iunlock>
+  acquire(&cons.lock);
+80100614:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010061b:	e8 10 41 00 00       	call   80104730 <acquire>
+  for(i = 0; i < n; i++)
+80100620:	83 c4 10             	add    $0x10,%esp
+80100623:	85 f6                	test   %esi,%esi
+80100625:	7e 18                	jle    8010063f <consolewrite+0x3f>
+80100627:	8b 7d 0c             	mov    0xc(%ebp),%edi
+8010062a:	8d 1c 37             	lea    (%edi,%esi,1),%ebx
+8010062d:	8d 76 00             	lea    0x0(%esi),%esi
+    consputc(buf[i] & 0xff);
+80100630:	0f b6 07             	movzbl (%edi),%eax
+80100633:	83 c7 01             	add    $0x1,%edi
+80100636:	e8 d5 fd ff ff       	call   80100410 <consputc>
+  for(i = 0; i < n; i++)
+8010063b:	39 fb                	cmp    %edi,%ebx
+8010063d:	75 f1                	jne    80100630 <consolewrite+0x30>
+  release(&cons.lock);
+8010063f:	83 ec 0c             	sub    $0xc,%esp
+80100642:	68 20 a5 10 80       	push   $0x8010a520
+80100647:	e8 a4 41 00 00       	call   801047f0 <release>
+  ilock(ip);
+8010064c:	58                   	pop    %eax
+8010064d:	ff 75 08             	pushl  0x8(%ebp)
+80100650:	e8 2b 10 00 00       	call   80101680 <ilock>
+
+  return n;
+}
+80100655:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100658:	89 f0                	mov    %esi,%eax
+8010065a:	5b                   	pop    %ebx
+8010065b:	5e                   	pop    %esi
+8010065c:	5f                   	pop    %edi
+8010065d:	5d                   	pop    %ebp
+8010065e:	c3                   	ret    
+8010065f:	90                   	nop
+
+80100660 <cprintf>:
+{
+80100660:	55                   	push   %ebp
+80100661:	89 e5                	mov    %esp,%ebp
+80100663:	57                   	push   %edi
+80100664:	56                   	push   %esi
+80100665:	53                   	push   %ebx
+80100666:	83 ec 1c             	sub    $0x1c,%esp
+  locking = cons.locking;
+80100669:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+  if(locking)
+8010066e:	85 c0                	test   %eax,%eax
+  locking = cons.locking;
+80100670:	89 45 dc             	mov    %eax,-0x24(%ebp)
+  if(locking)
+80100673:	0f 85 6f 01 00 00    	jne    801007e8 <cprintf+0x188>
+  if (fmt == 0)
+80100679:	8b 45 08             	mov    0x8(%ebp),%eax
+8010067c:	85 c0                	test   %eax,%eax
+8010067e:	89 c7                	mov    %eax,%edi
+80100680:	0f 84 77 01 00 00    	je     801007fd <cprintf+0x19d>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100686:	0f b6 00             	movzbl (%eax),%eax
+  argp = (uint*)(void*)(&fmt + 1);
+80100689:	8d 4d 0c             	lea    0xc(%ebp),%ecx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010068c:	31 db                	xor    %ebx,%ebx
+  argp = (uint*)(void*)(&fmt + 1);
+8010068e:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100691:	85 c0                	test   %eax,%eax
+80100693:	75 56                	jne    801006eb <cprintf+0x8b>
+80100695:	eb 79                	jmp    80100710 <cprintf+0xb0>
+80100697:	89 f6                	mov    %esi,%esi
+80100699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[++i] & 0xff;
+801006a0:	0f b6 16             	movzbl (%esi),%edx
+    if(c == 0)
+801006a3:	85 d2                	test   %edx,%edx
+801006a5:	74 69                	je     80100710 <cprintf+0xb0>
+801006a7:	83 c3 02             	add    $0x2,%ebx
+    switch(c){
+801006aa:	83 fa 70             	cmp    $0x70,%edx
+801006ad:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
+801006b0:	0f 84 84 00 00 00    	je     8010073a <cprintf+0xda>
+801006b6:	7f 78                	jg     80100730 <cprintf+0xd0>
+801006b8:	83 fa 25             	cmp    $0x25,%edx
+801006bb:	0f 84 ff 00 00 00    	je     801007c0 <cprintf+0x160>
+801006c1:	83 fa 64             	cmp    $0x64,%edx
+801006c4:	0f 85 8e 00 00 00    	jne    80100758 <cprintf+0xf8>
+      printint(*argp++, 10, 1);
+801006ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801006cd:	ba 0a 00 00 00       	mov    $0xa,%edx
+801006d2:	8d 48 04             	lea    0x4(%eax),%ecx
+801006d5:	8b 00                	mov    (%eax),%eax
+801006d7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+801006da:	b9 01 00 00 00       	mov    $0x1,%ecx
+801006df:	e8 9c fe ff ff       	call   80100580 <printint>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006e4:	0f b6 06             	movzbl (%esi),%eax
+801006e7:	85 c0                	test   %eax,%eax
+801006e9:	74 25                	je     80100710 <cprintf+0xb0>
+801006eb:	8d 53 01             	lea    0x1(%ebx),%edx
+    if(c != '%'){
+801006ee:	83 f8 25             	cmp    $0x25,%eax
+801006f1:	8d 34 17             	lea    (%edi,%edx,1),%esi
+801006f4:	74 aa                	je     801006a0 <cprintf+0x40>
+801006f6:	89 55 e0             	mov    %edx,-0x20(%ebp)
+      consputc(c);
+801006f9:	e8 12 fd ff ff       	call   80100410 <consputc>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006fe:	0f b6 06             	movzbl (%esi),%eax
+      continue;
+80100701:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80100704:	89 d3                	mov    %edx,%ebx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100706:	85 c0                	test   %eax,%eax
+80100708:	75 e1                	jne    801006eb <cprintf+0x8b>
+8010070a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  if(locking)
+80100710:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80100713:	85 c0                	test   %eax,%eax
+80100715:	74 10                	je     80100727 <cprintf+0xc7>
+    release(&cons.lock);
+80100717:	83 ec 0c             	sub    $0xc,%esp
+8010071a:	68 20 a5 10 80       	push   $0x8010a520
+8010071f:	e8 cc 40 00 00       	call   801047f0 <release>
+80100724:	83 c4 10             	add    $0x10,%esp
+}
+80100727:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010072a:	5b                   	pop    %ebx
+8010072b:	5e                   	pop    %esi
+8010072c:	5f                   	pop    %edi
+8010072d:	5d                   	pop    %ebp
+8010072e:	c3                   	ret    
+8010072f:	90                   	nop
+    switch(c){
+80100730:	83 fa 73             	cmp    $0x73,%edx
+80100733:	74 43                	je     80100778 <cprintf+0x118>
+80100735:	83 fa 78             	cmp    $0x78,%edx
+80100738:	75 1e                	jne    80100758 <cprintf+0xf8>
+      printint(*argp++, 16, 0);
+8010073a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010073d:	ba 10 00 00 00       	mov    $0x10,%edx
+80100742:	8d 48 04             	lea    0x4(%eax),%ecx
+80100745:	8b 00                	mov    (%eax),%eax
+80100747:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+8010074a:	31 c9                	xor    %ecx,%ecx
+8010074c:	e8 2f fe ff ff       	call   80100580 <printint>
+      break;
+80100751:	eb 91                	jmp    801006e4 <cprintf+0x84>
+80100753:	90                   	nop
+80100754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      consputc('%');
+80100758:	b8 25 00 00 00       	mov    $0x25,%eax
+8010075d:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80100760:	e8 ab fc ff ff       	call   80100410 <consputc>
+      consputc(c);
+80100765:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80100768:	89 d0                	mov    %edx,%eax
+8010076a:	e8 a1 fc ff ff       	call   80100410 <consputc>
+      break;
+8010076f:	e9 70 ff ff ff       	jmp    801006e4 <cprintf+0x84>
+80100774:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      if((s = (char*)*argp++) == 0)
+80100778:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010077b:	8b 10                	mov    (%eax),%edx
+8010077d:	8d 48 04             	lea    0x4(%eax),%ecx
+80100780:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80100783:	85 d2                	test   %edx,%edx
+80100785:	74 49                	je     801007d0 <cprintf+0x170>
+      for(; *s; s++)
+80100787:	0f be 02             	movsbl (%edx),%eax
+      if((s = (char*)*argp++) == 0)
+8010078a:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+      for(; *s; s++)
+8010078d:	84 c0                	test   %al,%al
+8010078f:	0f 84 4f ff ff ff    	je     801006e4 <cprintf+0x84>
+80100795:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80100798:	89 d3                	mov    %edx,%ebx
+8010079a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801007a0:	83 c3 01             	add    $0x1,%ebx
+        consputc(*s);
+801007a3:	e8 68 fc ff ff       	call   80100410 <consputc>
+      for(; *s; s++)
+801007a8:	0f be 03             	movsbl (%ebx),%eax
+801007ab:	84 c0                	test   %al,%al
+801007ad:	75 f1                	jne    801007a0 <cprintf+0x140>
+      if((s = (char*)*argp++) == 0)
+801007af:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801007b2:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+801007b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801007b8:	e9 27 ff ff ff       	jmp    801006e4 <cprintf+0x84>
+801007bd:	8d 76 00             	lea    0x0(%esi),%esi
+      consputc('%');
+801007c0:	b8 25 00 00 00       	mov    $0x25,%eax
+801007c5:	e8 46 fc ff ff       	call   80100410 <consputc>
+      break;
+801007ca:	e9 15 ff ff ff       	jmp    801006e4 <cprintf+0x84>
+801007cf:	90                   	nop
+        s = "(null)";
+801007d0:	ba f8 73 10 80       	mov    $0x801073f8,%edx
+      for(; *s; s++)
+801007d5:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+801007d8:	b8 28 00 00 00       	mov    $0x28,%eax
+801007dd:	89 d3                	mov    %edx,%ebx
+801007df:	eb bf                	jmp    801007a0 <cprintf+0x140>
+801007e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    acquire(&cons.lock);
+801007e8:	83 ec 0c             	sub    $0xc,%esp
+801007eb:	68 20 a5 10 80       	push   $0x8010a520
+801007f0:	e8 3b 3f 00 00       	call   80104730 <acquire>
+801007f5:	83 c4 10             	add    $0x10,%esp
+801007f8:	e9 7c fe ff ff       	jmp    80100679 <cprintf+0x19>
+    panic("null fmt");
+801007fd:	83 ec 0c             	sub    $0xc,%esp
+80100800:	68 ff 73 10 80       	push   $0x801073ff
+80100805:	e8 86 fb ff ff       	call   80100390 <panic>
+8010080a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100810 <consoleintr>:
+{
+80100810:	55                   	push   %ebp
+80100811:	89 e5                	mov    %esp,%ebp
+80100813:	57                   	push   %edi
+80100814:	56                   	push   %esi
+80100815:	53                   	push   %ebx
+  int c, doprocdump = 0;
+80100816:	31 f6                	xor    %esi,%esi
+{
+80100818:	83 ec 18             	sub    $0x18,%esp
+8010081b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&cons.lock);
+8010081e:	68 20 a5 10 80       	push   $0x8010a520
+80100823:	e8 08 3f 00 00       	call   80104730 <acquire>
+  while((c = getc()) >= 0){
+80100828:	83 c4 10             	add    $0x10,%esp
+8010082b:	90                   	nop
+8010082c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100830:	ff d3                	call   *%ebx
+80100832:	85 c0                	test   %eax,%eax
+80100834:	89 c7                	mov    %eax,%edi
+80100836:	78 48                	js     80100880 <consoleintr+0x70>
+    switch(c){
+80100838:	83 ff 10             	cmp    $0x10,%edi
+8010083b:	0f 84 e7 00 00 00    	je     80100928 <consoleintr+0x118>
+80100841:	7e 5d                	jle    801008a0 <consoleintr+0x90>
+80100843:	83 ff 15             	cmp    $0x15,%edi
+80100846:	0f 84 ec 00 00 00    	je     80100938 <consoleintr+0x128>
+8010084c:	83 ff 7f             	cmp    $0x7f,%edi
+8010084f:	75 54                	jne    801008a5 <consoleintr+0x95>
+      if(input.e != input.w){
+80100851:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100856:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010085c:	74 d2                	je     80100830 <consoleintr+0x20>
+        input.e--;
+8010085e:	83 e8 01             	sub    $0x1,%eax
+80100861:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+        consputc(BACKSPACE);
+80100866:	b8 00 01 00 00       	mov    $0x100,%eax
+8010086b:	e8 a0 fb ff ff       	call   80100410 <consputc>
+  while((c = getc()) >= 0){
+80100870:	ff d3                	call   *%ebx
+80100872:	85 c0                	test   %eax,%eax
+80100874:	89 c7                	mov    %eax,%edi
+80100876:	79 c0                	jns    80100838 <consoleintr+0x28>
+80100878:	90                   	nop
+80100879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  release(&cons.lock);
+80100880:	83 ec 0c             	sub    $0xc,%esp
+80100883:	68 20 a5 10 80       	push   $0x8010a520
+80100888:	e8 63 3f 00 00       	call   801047f0 <release>
+  if(doprocdump) {
+8010088d:	83 c4 10             	add    $0x10,%esp
+80100890:	85 f6                	test   %esi,%esi
+80100892:	0f 85 f8 00 00 00    	jne    80100990 <consoleintr+0x180>
+}
+80100898:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010089b:	5b                   	pop    %ebx
+8010089c:	5e                   	pop    %esi
+8010089d:	5f                   	pop    %edi
+8010089e:	5d                   	pop    %ebp
+8010089f:	c3                   	ret    
+    switch(c){
+801008a0:	83 ff 08             	cmp    $0x8,%edi
+801008a3:	74 ac                	je     80100851 <consoleintr+0x41>
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+801008a5:	85 ff                	test   %edi,%edi
+801008a7:	74 87                	je     80100830 <consoleintr+0x20>
+801008a9:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008ae:	89 c2                	mov    %eax,%edx
+801008b0:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+801008b6:	83 fa 7f             	cmp    $0x7f,%edx
+801008b9:	0f 87 71 ff ff ff    	ja     80100830 <consoleintr+0x20>
+801008bf:	8d 50 01             	lea    0x1(%eax),%edx
+801008c2:	83 e0 7f             	and    $0x7f,%eax
+        c = (c == '\r') ? '\n' : c;
+801008c5:	83 ff 0d             	cmp    $0xd,%edi
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008c8:	89 15 a8 ff 10 80    	mov    %edx,0x8010ffa8
+        c = (c == '\r') ? '\n' : c;
+801008ce:	0f 84 cc 00 00 00    	je     801009a0 <consoleintr+0x190>
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008d4:	89 f9                	mov    %edi,%ecx
+801008d6:	88 88 20 ff 10 80    	mov    %cl,-0x7fef00e0(%eax)
+        consputc(c);
+801008dc:	89 f8                	mov    %edi,%eax
+801008de:	e8 2d fb ff ff       	call   80100410 <consputc>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+801008e3:	83 ff 0a             	cmp    $0xa,%edi
+801008e6:	0f 84 c5 00 00 00    	je     801009b1 <consoleintr+0x1a1>
+801008ec:	83 ff 04             	cmp    $0x4,%edi
+801008ef:	0f 84 bc 00 00 00    	je     801009b1 <consoleintr+0x1a1>
+801008f5:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801008fa:	83 e8 80             	sub    $0xffffff80,%eax
+801008fd:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+80100903:	0f 85 27 ff ff ff    	jne    80100830 <consoleintr+0x20>
+          wakeup(&input.r);
+80100909:	83 ec 0c             	sub    $0xc,%esp
+          input.w = input.e;
+8010090c:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+          wakeup(&input.r);
+80100911:	68 a0 ff 10 80       	push   $0x8010ffa0
+80100916:	e8 85 36 00 00       	call   80103fa0 <wakeup>
+8010091b:	83 c4 10             	add    $0x10,%esp
+8010091e:	e9 0d ff ff ff       	jmp    80100830 <consoleintr+0x20>
+80100923:	90                   	nop
+80100924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      doprocdump = 1;
+80100928:	be 01 00 00 00       	mov    $0x1,%esi
+8010092d:	e9 fe fe ff ff       	jmp    80100830 <consoleintr+0x20>
+80100932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      while(input.e != input.w &&
+80100938:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+8010093d:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+80100943:	75 2b                	jne    80100970 <consoleintr+0x160>
+80100945:	e9 e6 fe ff ff       	jmp    80100830 <consoleintr+0x20>
+8010094a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        input.e--;
+80100950:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+        consputc(BACKSPACE);
+80100955:	b8 00 01 00 00       	mov    $0x100,%eax
+8010095a:	e8 b1 fa ff ff       	call   80100410 <consputc>
+      while(input.e != input.w &&
+8010095f:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100964:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010096a:	0f 84 c0 fe ff ff    	je     80100830 <consoleintr+0x20>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+80100970:	83 e8 01             	sub    $0x1,%eax
+80100973:	89 c2                	mov    %eax,%edx
+80100975:	83 e2 7f             	and    $0x7f,%edx
+      while(input.e != input.w &&
+80100978:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+8010097f:	75 cf                	jne    80100950 <consoleintr+0x140>
+80100981:	e9 aa fe ff ff       	jmp    80100830 <consoleintr+0x20>
+80100986:	8d 76 00             	lea    0x0(%esi),%esi
+80100989:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+}
+80100990:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100993:	5b                   	pop    %ebx
+80100994:	5e                   	pop    %esi
+80100995:	5f                   	pop    %edi
+80100996:	5d                   	pop    %ebp
+    procdump();  // now call procdump() wo. cons.lock held
+80100997:	e9 e4 36 00 00       	jmp    80104080 <procdump>
+8010099c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        input.buf[input.e++ % INPUT_BUF] = c;
+801009a0:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
+        consputc(c);
+801009a7:	b8 0a 00 00 00       	mov    $0xa,%eax
+801009ac:	e8 5f fa ff ff       	call   80100410 <consputc>
+801009b1:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801009b6:	e9 4e ff ff ff       	jmp    80100909 <consoleintr+0xf9>
+801009bb:	90                   	nop
+801009bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801009c0 <consoleinit>:
+
+void
+consoleinit(void)
+{
+801009c0:	55                   	push   %ebp
+801009c1:	89 e5                	mov    %esp,%ebp
+801009c3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&cons.lock, "console");
+801009c6:	68 08 74 10 80       	push   $0x80107408
+801009cb:	68 20 a5 10 80       	push   $0x8010a520
+801009d0:	e8 1b 3c 00 00       	call   801045f0 <initlock>
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  ioapicenable(IRQ_KBD, 0);
+801009d5:	58                   	pop    %eax
+801009d6:	5a                   	pop    %edx
+801009d7:	6a 00                	push   $0x0
+801009d9:	6a 01                	push   $0x1
+  devsw[CONSOLE].write = consolewrite;
+801009db:	c7 05 6c 09 11 80 00 	movl   $0x80100600,0x8011096c
+801009e2:	06 10 80 
+  devsw[CONSOLE].read = consoleread;
+801009e5:	c7 05 68 09 11 80 70 	movl   $0x80100270,0x80110968
+801009ec:	02 10 80 
+  cons.locking = 1;
+801009ef:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+801009f6:	00 00 00 
+  ioapicenable(IRQ_KBD, 0);
+801009f9:	e8 d2 18 00 00       	call   801022d0 <ioapicenable>
+}
+801009fe:	83 c4 10             	add    $0x10,%esp
+80100a01:	c9                   	leave  
+80100a02:	c3                   	ret    
+80100a03:	66 90                	xchg   %ax,%ax
+80100a05:	66 90                	xchg   %ax,%ax
+80100a07:	66 90                	xchg   %ax,%ax
+80100a09:	66 90                	xchg   %ax,%ax
+80100a0b:	66 90                	xchg   %ax,%ax
+80100a0d:	66 90                	xchg   %ax,%ax
+80100a0f:	90                   	nop
+
+80100a10 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+80100a10:	55                   	push   %ebp
+80100a11:	89 e5                	mov    %esp,%ebp
+80100a13:	57                   	push   %edi
+80100a14:	56                   	push   %esi
+80100a15:	53                   	push   %ebx
+80100a16:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+  struct proc *curproc = myproc();
+80100a1c:	e8 df 2d 00 00       	call   80103800 <myproc>
+80100a21:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+
+  begin_op();
+80100a27:	e8 74 21 00 00       	call   80102ba0 <begin_op>
+
+  if((ip = namei(path)) == 0){
+80100a2c:	83 ec 0c             	sub    $0xc,%esp
+80100a2f:	ff 75 08             	pushl  0x8(%ebp)
+80100a32:	e8 a9 14 00 00       	call   80101ee0 <namei>
+80100a37:	83 c4 10             	add    $0x10,%esp
+80100a3a:	85 c0                	test   %eax,%eax
+80100a3c:	0f 84 91 01 00 00    	je     80100bd3 <exec+0x1c3>
+    end_op();
+    cprintf("exec: fail\n");
+    return -1;
+  }
+  ilock(ip);
+80100a42:	83 ec 0c             	sub    $0xc,%esp
+80100a45:	89 c3                	mov    %eax,%ebx
+80100a47:	50                   	push   %eax
+80100a48:	e8 33 0c 00 00       	call   80101680 <ilock>
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+80100a4d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+80100a53:	6a 34                	push   $0x34
+80100a55:	6a 00                	push   $0x0
+80100a57:	50                   	push   %eax
+80100a58:	53                   	push   %ebx
+80100a59:	e8 02 0f 00 00       	call   80101960 <readi>
+80100a5e:	83 c4 20             	add    $0x20,%esp
+80100a61:	83 f8 34             	cmp    $0x34,%eax
+80100a64:	74 22                	je     80100a88 <exec+0x78>
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+80100a66:	83 ec 0c             	sub    $0xc,%esp
+80100a69:	53                   	push   %ebx
+80100a6a:	e8 a1 0e 00 00       	call   80101910 <iunlockput>
+    end_op();
+80100a6f:	e8 9c 21 00 00       	call   80102c10 <end_op>
+80100a74:	83 c4 10             	add    $0x10,%esp
+  }
+  return -1;
+80100a77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100a7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100a7f:	5b                   	pop    %ebx
+80100a80:	5e                   	pop    %esi
+80100a81:	5f                   	pop    %edi
+80100a82:	5d                   	pop    %ebp
+80100a83:	c3                   	ret    
+80100a84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(elf.magic != ELF_MAGIC)
+80100a88:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+80100a8f:	45 4c 46 
+80100a92:	75 d2                	jne    80100a66 <exec+0x56>
+  if((pgdir = setupkvm()) == 0)
+80100a94:	e8 57 66 00 00       	call   801070f0 <setupkvm>
+80100a99:	85 c0                	test   %eax,%eax
+80100a9b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80100aa1:	74 c3                	je     80100a66 <exec+0x56>
+  sz = 0;
+80100aa3:	31 ff                	xor    %edi,%edi
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100aa5:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80100aac:	00 
+80100aad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
+80100ab3:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+80100ab9:	0f 84 8c 02 00 00    	je     80100d4b <exec+0x33b>
+80100abf:	31 f6                	xor    %esi,%esi
+80100ac1:	eb 7f                	jmp    80100b42 <exec+0x132>
+80100ac3:	90                   	nop
+80100ac4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ph.type != ELF_PROG_LOAD)
+80100ac8:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80100acf:	75 63                	jne    80100b34 <exec+0x124>
+    if(ph.memsz < ph.filesz)
+80100ad1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+80100ad7:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80100add:	0f 82 86 00 00 00    	jb     80100b69 <exec+0x159>
+80100ae3:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80100ae9:	72 7e                	jb     80100b69 <exec+0x159>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80100aeb:	83 ec 04             	sub    $0x4,%esp
+80100aee:	50                   	push   %eax
+80100aef:	57                   	push   %edi
+80100af0:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100af6:	e8 15 64 00 00       	call   80106f10 <allocuvm>
+80100afb:	83 c4 10             	add    $0x10,%esp
+80100afe:	85 c0                	test   %eax,%eax
+80100b00:	89 c7                	mov    %eax,%edi
+80100b02:	74 65                	je     80100b69 <exec+0x159>
+    if(ph.vaddr % PGSIZE != 0)
+80100b04:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100b0a:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80100b0f:	75 58                	jne    80100b69 <exec+0x159>
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80100b11:	83 ec 0c             	sub    $0xc,%esp
+80100b14:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+80100b1a:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80100b20:	53                   	push   %ebx
+80100b21:	50                   	push   %eax
+80100b22:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b28:	e8 23 63 00 00       	call   80106e50 <loaduvm>
+80100b2d:	83 c4 20             	add    $0x20,%esp
+80100b30:	85 c0                	test   %eax,%eax
+80100b32:	78 35                	js     80100b69 <exec+0x159>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100b34:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+80100b3b:	83 c6 01             	add    $0x1,%esi
+80100b3e:	39 f0                	cmp    %esi,%eax
+80100b40:	7e 3d                	jle    80100b7f <exec+0x16f>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+80100b42:	89 f0                	mov    %esi,%eax
+80100b44:	6a 20                	push   $0x20
+80100b46:	c1 e0 05             	shl    $0x5,%eax
+80100b49:	03 85 ec fe ff ff    	add    -0x114(%ebp),%eax
+80100b4f:	50                   	push   %eax
+80100b50:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+80100b56:	50                   	push   %eax
+80100b57:	53                   	push   %ebx
+80100b58:	e8 03 0e 00 00       	call   80101960 <readi>
+80100b5d:	83 c4 10             	add    $0x10,%esp
+80100b60:	83 f8 20             	cmp    $0x20,%eax
+80100b63:	0f 84 5f ff ff ff    	je     80100ac8 <exec+0xb8>
+    freevm(pgdir);
+80100b69:	83 ec 0c             	sub    $0xc,%esp
+80100b6c:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b72:	e8 f9 64 00 00       	call   80107070 <freevm>
+80100b77:	83 c4 10             	add    $0x10,%esp
+80100b7a:	e9 e7 fe ff ff       	jmp    80100a66 <exec+0x56>
+80100b7f:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+80100b85:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80100b8b:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+  iunlockput(ip);
+80100b91:	83 ec 0c             	sub    $0xc,%esp
+80100b94:	53                   	push   %ebx
+80100b95:	e8 76 0d 00 00       	call   80101910 <iunlockput>
+  end_op();
+80100b9a:	e8 71 20 00 00       	call   80102c10 <end_op>
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100b9f:	83 c4 0c             	add    $0xc,%esp
+80100ba2:	56                   	push   %esi
+80100ba3:	57                   	push   %edi
+80100ba4:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100baa:	e8 61 63 00 00       	call   80106f10 <allocuvm>
+80100baf:	83 c4 10             	add    $0x10,%esp
+80100bb2:	85 c0                	test   %eax,%eax
+80100bb4:	89 c6                	mov    %eax,%esi
+80100bb6:	75 3a                	jne    80100bf2 <exec+0x1e2>
+    freevm(pgdir);
+80100bb8:	83 ec 0c             	sub    $0xc,%esp
+80100bbb:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100bc1:	e8 aa 64 00 00       	call   80107070 <freevm>
+80100bc6:	83 c4 10             	add    $0x10,%esp
+  return -1;
+80100bc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100bce:	e9 a9 fe ff ff       	jmp    80100a7c <exec+0x6c>
+    end_op();
+80100bd3:	e8 38 20 00 00       	call   80102c10 <end_op>
+    cprintf("exec: fail\n");
+80100bd8:	83 ec 0c             	sub    $0xc,%esp
+80100bdb:	68 21 74 10 80       	push   $0x80107421
+80100be0:	e8 7b fa ff ff       	call   80100660 <cprintf>
+    return -1;
+80100be5:	83 c4 10             	add    $0x10,%esp
+80100be8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100bed:	e9 8a fe ff ff       	jmp    80100a7c <exec+0x6c>
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100bf2:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+80100bf8:	83 ec 08             	sub    $0x8,%esp
+  for(argc = 0; argv[argc]; argc++) {
+80100bfb:	31 ff                	xor    %edi,%edi
+80100bfd:	89 f3                	mov    %esi,%ebx
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100bff:	50                   	push   %eax
+80100c00:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100c06:	e8 85 65 00 00       	call   80107190 <clearpteu>
+  for(argc = 0; argv[argc]; argc++) {
+80100c0b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c0e:	83 c4 10             	add    $0x10,%esp
+80100c11:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c17:	8b 00                	mov    (%eax),%eax
+80100c19:	85 c0                	test   %eax,%eax
+80100c1b:	74 70                	je     80100c8d <exec+0x27d>
+80100c1d:	89 b5 ec fe ff ff    	mov    %esi,-0x114(%ebp)
+80100c23:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+80100c29:	eb 0a                	jmp    80100c35 <exec+0x225>
+80100c2b:	90                   	nop
+80100c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(argc >= MAXARG)
+80100c30:	83 ff 20             	cmp    $0x20,%edi
+80100c33:	74 83                	je     80100bb8 <exec+0x1a8>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100c35:	83 ec 0c             	sub    $0xc,%esp
+80100c38:	50                   	push   %eax
+80100c39:	e8 22 3e 00 00       	call   80104a60 <strlen>
+80100c3e:	f7 d0                	not    %eax
+80100c40:	01 c3                	add    %eax,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100c42:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c45:	5a                   	pop    %edx
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100c46:	83 e3 fc             	and    $0xfffffffc,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100c49:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100c4c:	e8 0f 3e 00 00       	call   80104a60 <strlen>
+80100c51:	83 c0 01             	add    $0x1,%eax
+80100c54:	50                   	push   %eax
+80100c55:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c58:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100c5b:	53                   	push   %ebx
+80100c5c:	56                   	push   %esi
+80100c5d:	e8 8e 66 00 00       	call   801072f0 <copyout>
+80100c62:	83 c4 20             	add    $0x20,%esp
+80100c65:	85 c0                	test   %eax,%eax
+80100c67:	0f 88 4b ff ff ff    	js     80100bb8 <exec+0x1a8>
+  for(argc = 0; argv[argc]; argc++) {
+80100c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
+    ustack[3+argc] = sp;
+80100c70:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+  for(argc = 0; argv[argc]; argc++) {
+80100c77:	83 c7 01             	add    $0x1,%edi
+    ustack[3+argc] = sp;
+80100c7a:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+  for(argc = 0; argv[argc]; argc++) {
+80100c80:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80100c83:	85 c0                	test   %eax,%eax
+80100c85:	75 a9                	jne    80100c30 <exec+0x220>
+80100c87:	8b b5 ec fe ff ff    	mov    -0x114(%ebp),%esi
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100c8d:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+80100c94:	89 d9                	mov    %ebx,%ecx
+  ustack[3+argc] = 0;
+80100c96:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+80100c9d:	00 00 00 00 
+  ustack[0] = 0xffffffff;  // fake return PC
+80100ca1:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+80100ca8:	ff ff ff 
+  ustack[1] = argc;
+80100cab:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100cb1:	29 c1                	sub    %eax,%ecx
+  sp -= (3+argc+1) * 4;
+80100cb3:	83 c0 0c             	add    $0xc,%eax
+80100cb6:	29 c3                	sub    %eax,%ebx
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100cb8:	50                   	push   %eax
+80100cb9:	52                   	push   %edx
+80100cba:	53                   	push   %ebx
+80100cbb:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100cc1:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100cc7:	e8 24 66 00 00       	call   801072f0 <copyout>
+80100ccc:	83 c4 10             	add    $0x10,%esp
+80100ccf:	85 c0                	test   %eax,%eax
+80100cd1:	0f 88 e1 fe ff ff    	js     80100bb8 <exec+0x1a8>
+  for(last=s=path; *s; s++)
+80100cd7:	8b 45 08             	mov    0x8(%ebp),%eax
+80100cda:	0f b6 00             	movzbl (%eax),%eax
+80100cdd:	84 c0                	test   %al,%al
+80100cdf:	74 17                	je     80100cf8 <exec+0x2e8>
+80100ce1:	8b 55 08             	mov    0x8(%ebp),%edx
+80100ce4:	89 d1                	mov    %edx,%ecx
+80100ce6:	83 c1 01             	add    $0x1,%ecx
+80100ce9:	3c 2f                	cmp    $0x2f,%al
+80100ceb:	0f b6 01             	movzbl (%ecx),%eax
+80100cee:	0f 44 d1             	cmove  %ecx,%edx
+80100cf1:	84 c0                	test   %al,%al
+80100cf3:	75 f1                	jne    80100ce6 <exec+0x2d6>
+80100cf5:	89 55 08             	mov    %edx,0x8(%ebp)
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+80100cf8:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80100cfe:	50                   	push   %eax
+80100cff:	6a 10                	push   $0x10
+80100d01:	ff 75 08             	pushl  0x8(%ebp)
+80100d04:	89 f8                	mov    %edi,%eax
+80100d06:	83 c0 6c             	add    $0x6c,%eax
+80100d09:	50                   	push   %eax
+80100d0a:	e8 11 3d 00 00       	call   80104a20 <safestrcpy>
+  curproc->pgdir = pgdir;
+80100d0f:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
+  oldpgdir = curproc->pgdir;
+80100d15:	89 f9                	mov    %edi,%ecx
+80100d17:	8b 7f 04             	mov    0x4(%edi),%edi
+  curproc->tf->eip = elf.entry;  // main
+80100d1a:	8b 41 18             	mov    0x18(%ecx),%eax
+  curproc->sz = sz;
+80100d1d:	89 31                	mov    %esi,(%ecx)
+  curproc->pgdir = pgdir;
+80100d1f:	89 51 04             	mov    %edx,0x4(%ecx)
+  curproc->tf->eip = elf.entry;  // main
+80100d22:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+80100d28:	89 50 38             	mov    %edx,0x38(%eax)
+  curproc->tf->esp = sp;
+80100d2b:	8b 41 18             	mov    0x18(%ecx),%eax
+80100d2e:	89 58 44             	mov    %ebx,0x44(%eax)
+  switchuvm(curproc);
+80100d31:	89 0c 24             	mov    %ecx,(%esp)
+80100d34:	e8 87 5f 00 00       	call   80106cc0 <switchuvm>
+  freevm(oldpgdir);
+80100d39:	89 3c 24             	mov    %edi,(%esp)
+80100d3c:	e8 2f 63 00 00       	call   80107070 <freevm>
+  return 0;
+80100d41:	83 c4 10             	add    $0x10,%esp
+80100d44:	31 c0                	xor    %eax,%eax
+80100d46:	e9 31 fd ff ff       	jmp    80100a7c <exec+0x6c>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100d4b:	be 00 20 00 00       	mov    $0x2000,%esi
+80100d50:	e9 3c fe ff ff       	jmp    80100b91 <exec+0x181>
+80100d55:	66 90                	xchg   %ax,%ax
+80100d57:	66 90                	xchg   %ax,%ax
+80100d59:	66 90                	xchg   %ax,%ax
+80100d5b:	66 90                	xchg   %ax,%ax
+80100d5d:	66 90                	xchg   %ax,%ax
+80100d5f:	90                   	nop
+
+80100d60 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+80100d60:	55                   	push   %ebp
+80100d61:	89 e5                	mov    %esp,%ebp
+80100d63:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ftable.lock, "ftable");
+80100d66:	68 2d 74 10 80       	push   $0x8010742d
+80100d6b:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100d70:	e8 7b 38 00 00       	call   801045f0 <initlock>
+}
+80100d75:	83 c4 10             	add    $0x10,%esp
+80100d78:	c9                   	leave  
+80100d79:	c3                   	ret    
+80100d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100d80 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+80100d80:	55                   	push   %ebp
+80100d81:	89 e5                	mov    %esp,%ebp
+80100d83:	53                   	push   %ebx
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100d84:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
+{
+80100d89:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ftable.lock);
+80100d8c:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100d91:	e8 9a 39 00 00       	call   80104730 <acquire>
+80100d96:	83 c4 10             	add    $0x10,%esp
+80100d99:	eb 10                	jmp    80100dab <filealloc+0x2b>
+80100d9b:	90                   	nop
+80100d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100da0:	83 c3 18             	add    $0x18,%ebx
+80100da3:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100da9:	73 25                	jae    80100dd0 <filealloc+0x50>
+    if(f->ref == 0){
+80100dab:	8b 43 04             	mov    0x4(%ebx),%eax
+80100dae:	85 c0                	test   %eax,%eax
+80100db0:	75 ee                	jne    80100da0 <filealloc+0x20>
+      f->ref = 1;
+      release(&ftable.lock);
+80100db2:	83 ec 0c             	sub    $0xc,%esp
+      f->ref = 1;
+80100db5:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+      release(&ftable.lock);
+80100dbc:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100dc1:	e8 2a 3a 00 00       	call   801047f0 <release>
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+80100dc6:	89 d8                	mov    %ebx,%eax
+      return f;
+80100dc8:	83 c4 10             	add    $0x10,%esp
+}
+80100dcb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100dce:	c9                   	leave  
+80100dcf:	c3                   	ret    
+  release(&ftable.lock);
+80100dd0:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80100dd3:	31 db                	xor    %ebx,%ebx
+  release(&ftable.lock);
+80100dd5:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100dda:	e8 11 3a 00 00       	call   801047f0 <release>
+}
+80100ddf:	89 d8                	mov    %ebx,%eax
+  return 0;
+80100de1:	83 c4 10             	add    $0x10,%esp
+}
+80100de4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100de7:	c9                   	leave  
+80100de8:	c3                   	ret    
+80100de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100df0 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80100df0:	55                   	push   %ebp
+80100df1:	89 e5                	mov    %esp,%ebp
+80100df3:	53                   	push   %ebx
+80100df4:	83 ec 10             	sub    $0x10,%esp
+80100df7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ftable.lock);
+80100dfa:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100dff:	e8 2c 39 00 00       	call   80104730 <acquire>
+  if(f->ref < 1)
+80100e04:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e07:	83 c4 10             	add    $0x10,%esp
+80100e0a:	85 c0                	test   %eax,%eax
+80100e0c:	7e 1a                	jle    80100e28 <filedup+0x38>
+    panic("filedup");
+  f->ref++;
+80100e0e:	83 c0 01             	add    $0x1,%eax
+  release(&ftable.lock);
+80100e11:	83 ec 0c             	sub    $0xc,%esp
+  f->ref++;
+80100e14:	89 43 04             	mov    %eax,0x4(%ebx)
+  release(&ftable.lock);
+80100e17:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e1c:	e8 cf 39 00 00       	call   801047f0 <release>
+  return f;
+}
+80100e21:	89 d8                	mov    %ebx,%eax
+80100e23:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e26:	c9                   	leave  
+80100e27:	c3                   	ret    
+    panic("filedup");
+80100e28:	83 ec 0c             	sub    $0xc,%esp
+80100e2b:	68 34 74 10 80       	push   $0x80107434
+80100e30:	e8 5b f5 ff ff       	call   80100390 <panic>
+80100e35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100e39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100e40 <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+80100e40:	55                   	push   %ebp
+80100e41:	89 e5                	mov    %esp,%ebp
+80100e43:	57                   	push   %edi
+80100e44:	56                   	push   %esi
+80100e45:	53                   	push   %ebx
+80100e46:	83 ec 28             	sub    $0x28,%esp
+80100e49:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct file ff;
+
+  acquire(&ftable.lock);
+80100e4c:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e51:	e8 da 38 00 00       	call   80104730 <acquire>
+  if(f->ref < 1)
+80100e56:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e59:	83 c4 10             	add    $0x10,%esp
+80100e5c:	85 c0                	test   %eax,%eax
+80100e5e:	0f 8e 9b 00 00 00    	jle    80100eff <fileclose+0xbf>
+    panic("fileclose");
+  if(--f->ref > 0){
+80100e64:	83 e8 01             	sub    $0x1,%eax
+80100e67:	85 c0                	test   %eax,%eax
+80100e69:	89 43 04             	mov    %eax,0x4(%ebx)
+80100e6c:	74 1a                	je     80100e88 <fileclose+0x48>
+    release(&ftable.lock);
+80100e6e:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
+  else if(ff.type == FD_INODE){
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80100e75:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100e78:	5b                   	pop    %ebx
+80100e79:	5e                   	pop    %esi
+80100e7a:	5f                   	pop    %edi
+80100e7b:	5d                   	pop    %ebp
+    release(&ftable.lock);
+80100e7c:	e9 6f 39 00 00       	jmp    801047f0 <release>
+80100e81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ff = *f;
+80100e88:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+80100e8c:	8b 3b                	mov    (%ebx),%edi
+  release(&ftable.lock);
+80100e8e:	83 ec 0c             	sub    $0xc,%esp
+  ff = *f;
+80100e91:	8b 73 0c             	mov    0xc(%ebx),%esi
+  f->type = FD_NONE;
+80100e94:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  ff = *f;
+80100e9a:	88 45 e7             	mov    %al,-0x19(%ebp)
+80100e9d:	8b 43 10             	mov    0x10(%ebx),%eax
+  release(&ftable.lock);
+80100ea0:	68 c0 ff 10 80       	push   $0x8010ffc0
+  ff = *f;
+80100ea5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  release(&ftable.lock);
+80100ea8:	e8 43 39 00 00       	call   801047f0 <release>
+  if(ff.type == FD_PIPE)
+80100ead:	83 c4 10             	add    $0x10,%esp
+80100eb0:	83 ff 01             	cmp    $0x1,%edi
+80100eb3:	74 13                	je     80100ec8 <fileclose+0x88>
+  else if(ff.type == FD_INODE){
+80100eb5:	83 ff 02             	cmp    $0x2,%edi
+80100eb8:	74 26                	je     80100ee0 <fileclose+0xa0>
+}
+80100eba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100ebd:	5b                   	pop    %ebx
+80100ebe:	5e                   	pop    %esi
+80100ebf:	5f                   	pop    %edi
+80100ec0:	5d                   	pop    %ebp
+80100ec1:	c3                   	ret    
+80100ec2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    pipeclose(ff.pipe, ff.writable);
+80100ec8:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80100ecc:	83 ec 08             	sub    $0x8,%esp
+80100ecf:	53                   	push   %ebx
+80100ed0:	56                   	push   %esi
+80100ed1:	e8 7a 24 00 00       	call   80103350 <pipeclose>
+80100ed6:	83 c4 10             	add    $0x10,%esp
+80100ed9:	eb df                	jmp    80100eba <fileclose+0x7a>
+80100edb:	90                   	nop
+80100edc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    begin_op();
+80100ee0:	e8 bb 1c 00 00       	call   80102ba0 <begin_op>
+    iput(ff.ip);
+80100ee5:	83 ec 0c             	sub    $0xc,%esp
+80100ee8:	ff 75 e0             	pushl  -0x20(%ebp)
+80100eeb:	e8 c0 08 00 00       	call   801017b0 <iput>
+    end_op();
+80100ef0:	83 c4 10             	add    $0x10,%esp
+}
+80100ef3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100ef6:	5b                   	pop    %ebx
+80100ef7:	5e                   	pop    %esi
+80100ef8:	5f                   	pop    %edi
+80100ef9:	5d                   	pop    %ebp
+    end_op();
+80100efa:	e9 11 1d 00 00       	jmp    80102c10 <end_op>
+    panic("fileclose");
+80100eff:	83 ec 0c             	sub    $0xc,%esp
+80100f02:	68 3c 74 10 80       	push   $0x8010743c
+80100f07:	e8 84 f4 ff ff       	call   80100390 <panic>
+80100f0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100f10 <filestat>:
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+80100f10:	55                   	push   %ebp
+80100f11:	89 e5                	mov    %esp,%ebp
+80100f13:	53                   	push   %ebx
+80100f14:	83 ec 04             	sub    $0x4,%esp
+80100f17:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(f->type == FD_INODE){
+80100f1a:	83 3b 02             	cmpl   $0x2,(%ebx)
+80100f1d:	75 31                	jne    80100f50 <filestat+0x40>
+    ilock(f->ip);
+80100f1f:	83 ec 0c             	sub    $0xc,%esp
+80100f22:	ff 73 10             	pushl  0x10(%ebx)
+80100f25:	e8 56 07 00 00       	call   80101680 <ilock>
+    stati(f->ip, st);
+80100f2a:	58                   	pop    %eax
+80100f2b:	5a                   	pop    %edx
+80100f2c:	ff 75 0c             	pushl  0xc(%ebp)
+80100f2f:	ff 73 10             	pushl  0x10(%ebx)
+80100f32:	e8 f9 09 00 00       	call   80101930 <stati>
+    iunlock(f->ip);
+80100f37:	59                   	pop    %ecx
+80100f38:	ff 73 10             	pushl  0x10(%ebx)
+80100f3b:	e8 20 08 00 00       	call   80101760 <iunlock>
+    return 0;
+80100f40:	83 c4 10             	add    $0x10,%esp
+80100f43:	31 c0                	xor    %eax,%eax
+  }
+  return -1;
+}
+80100f45:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100f48:	c9                   	leave  
+80100f49:	c3                   	ret    
+80100f4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  return -1;
+80100f50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100f55:	eb ee                	jmp    80100f45 <filestat+0x35>
+80100f57:	89 f6                	mov    %esi,%esi
+80100f59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100f60 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+80100f60:	55                   	push   %ebp
+80100f61:	89 e5                	mov    %esp,%ebp
+80100f63:	57                   	push   %edi
+80100f64:	56                   	push   %esi
+80100f65:	53                   	push   %ebx
+80100f66:	83 ec 0c             	sub    $0xc,%esp
+80100f69:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100f6c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80100f6f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  int r;
+
+  if(f->readable == 0)
+80100f72:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+80100f76:	74 60                	je     80100fd8 <fileread+0x78>
+    return -1;
+  if(f->type == FD_PIPE)
+80100f78:	8b 03                	mov    (%ebx),%eax
+80100f7a:	83 f8 01             	cmp    $0x1,%eax
+80100f7d:	74 41                	je     80100fc0 <fileread+0x60>
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+80100f7f:	83 f8 02             	cmp    $0x2,%eax
+80100f82:	75 5b                	jne    80100fdf <fileread+0x7f>
+    ilock(f->ip);
+80100f84:	83 ec 0c             	sub    $0xc,%esp
+80100f87:	ff 73 10             	pushl  0x10(%ebx)
+80100f8a:	e8 f1 06 00 00       	call   80101680 <ilock>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+80100f8f:	57                   	push   %edi
+80100f90:	ff 73 14             	pushl  0x14(%ebx)
+80100f93:	56                   	push   %esi
+80100f94:	ff 73 10             	pushl  0x10(%ebx)
+80100f97:	e8 c4 09 00 00       	call   80101960 <readi>
+80100f9c:	83 c4 20             	add    $0x20,%esp
+80100f9f:	85 c0                	test   %eax,%eax
+80100fa1:	89 c6                	mov    %eax,%esi
+80100fa3:	7e 03                	jle    80100fa8 <fileread+0x48>
+      f->off += r;
+80100fa5:	01 43 14             	add    %eax,0x14(%ebx)
+    iunlock(f->ip);
+80100fa8:	83 ec 0c             	sub    $0xc,%esp
+80100fab:	ff 73 10             	pushl  0x10(%ebx)
+80100fae:	e8 ad 07 00 00       	call   80101760 <iunlock>
+    return r;
+80100fb3:	83 c4 10             	add    $0x10,%esp
+  }
+  panic("fileread");
+}
+80100fb6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100fb9:	89 f0                	mov    %esi,%eax
+80100fbb:	5b                   	pop    %ebx
+80100fbc:	5e                   	pop    %esi
+80100fbd:	5f                   	pop    %edi
+80100fbe:	5d                   	pop    %ebp
+80100fbf:	c3                   	ret    
+    return piperead(f->pipe, addr, n);
+80100fc0:	8b 43 0c             	mov    0xc(%ebx),%eax
+80100fc3:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80100fc6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100fc9:	5b                   	pop    %ebx
+80100fca:	5e                   	pop    %esi
+80100fcb:	5f                   	pop    %edi
+80100fcc:	5d                   	pop    %ebp
+    return piperead(f->pipe, addr, n);
+80100fcd:	e9 2e 25 00 00       	jmp    80103500 <piperead>
+80100fd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80100fd8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80100fdd:	eb d7                	jmp    80100fb6 <fileread+0x56>
+  panic("fileread");
+80100fdf:	83 ec 0c             	sub    $0xc,%esp
+80100fe2:	68 46 74 10 80       	push   $0x80107446
+80100fe7:	e8 a4 f3 ff ff       	call   80100390 <panic>
+80100fec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100ff0 <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+80100ff0:	55                   	push   %ebp
+80100ff1:	89 e5                	mov    %esp,%ebp
+80100ff3:	57                   	push   %edi
+80100ff4:	56                   	push   %esi
+80100ff5:	53                   	push   %ebx
+80100ff6:	83 ec 1c             	sub    $0x1c,%esp
+80100ff9:	8b 75 08             	mov    0x8(%ebp),%esi
+80100ffc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  int r;
+
+  if(f->writable == 0)
+80100fff:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
+{
+80101003:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101006:	8b 45 10             	mov    0x10(%ebp),%eax
+80101009:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(f->writable == 0)
+8010100c:	0f 84 aa 00 00 00    	je     801010bc <filewrite+0xcc>
+    return -1;
+  if(f->type == FD_PIPE)
+80101012:	8b 06                	mov    (%esi),%eax
+80101014:	83 f8 01             	cmp    $0x1,%eax
+80101017:	0f 84 c3 00 00 00    	je     801010e0 <filewrite+0xf0>
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+8010101d:	83 f8 02             	cmp    $0x2,%eax
+80101020:	0f 85 d9 00 00 00    	jne    801010ff <filewrite+0x10f>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+80101026:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    int i = 0;
+80101029:	31 ff                	xor    %edi,%edi
+    while(i < n){
+8010102b:	85 c0                	test   %eax,%eax
+8010102d:	7f 34                	jg     80101063 <filewrite+0x73>
+8010102f:	e9 9c 00 00 00       	jmp    801010d0 <filewrite+0xe0>
+80101034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+80101038:	01 46 14             	add    %eax,0x14(%esi)
+      iunlock(f->ip);
+8010103b:	83 ec 0c             	sub    $0xc,%esp
+8010103e:	ff 76 10             	pushl  0x10(%esi)
+        f->off += r;
+80101041:	89 45 e0             	mov    %eax,-0x20(%ebp)
+      iunlock(f->ip);
+80101044:	e8 17 07 00 00       	call   80101760 <iunlock>
+      end_op();
+80101049:	e8 c2 1b 00 00       	call   80102c10 <end_op>
+8010104e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101051:	83 c4 10             	add    $0x10,%esp
+
+      if(r < 0)
+        break;
+      if(r != n1)
+80101054:	39 c3                	cmp    %eax,%ebx
+80101056:	0f 85 96 00 00 00    	jne    801010f2 <filewrite+0x102>
+        panic("short filewrite");
+      i += r;
+8010105c:	01 df                	add    %ebx,%edi
+    while(i < n){
+8010105e:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101061:	7e 6d                	jle    801010d0 <filewrite+0xe0>
+      int n1 = n - i;
+80101063:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101066:	b8 00 06 00 00       	mov    $0x600,%eax
+8010106b:	29 fb                	sub    %edi,%ebx
+8010106d:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
+80101073:	0f 4f d8             	cmovg  %eax,%ebx
+      begin_op();
+80101076:	e8 25 1b 00 00       	call   80102ba0 <begin_op>
+      ilock(f->ip);
+8010107b:	83 ec 0c             	sub    $0xc,%esp
+8010107e:	ff 76 10             	pushl  0x10(%esi)
+80101081:	e8 fa 05 00 00       	call   80101680 <ilock>
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+80101086:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101089:	53                   	push   %ebx
+8010108a:	ff 76 14             	pushl  0x14(%esi)
+8010108d:	01 f8                	add    %edi,%eax
+8010108f:	50                   	push   %eax
+80101090:	ff 76 10             	pushl  0x10(%esi)
+80101093:	e8 c8 09 00 00       	call   80101a60 <writei>
+80101098:	83 c4 20             	add    $0x20,%esp
+8010109b:	85 c0                	test   %eax,%eax
+8010109d:	7f 99                	jg     80101038 <filewrite+0x48>
+      iunlock(f->ip);
+8010109f:	83 ec 0c             	sub    $0xc,%esp
+801010a2:	ff 76 10             	pushl  0x10(%esi)
+801010a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801010a8:	e8 b3 06 00 00       	call   80101760 <iunlock>
+      end_op();
+801010ad:	e8 5e 1b 00 00       	call   80102c10 <end_op>
+      if(r < 0)
+801010b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010b5:	83 c4 10             	add    $0x10,%esp
+801010b8:	85 c0                	test   %eax,%eax
+801010ba:	74 98                	je     80101054 <filewrite+0x64>
+    }
+    return i == n ? n : -1;
+  }
+  panic("filewrite");
+}
+801010bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+801010bf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+}
+801010c4:	89 f8                	mov    %edi,%eax
+801010c6:	5b                   	pop    %ebx
+801010c7:	5e                   	pop    %esi
+801010c8:	5f                   	pop    %edi
+801010c9:	5d                   	pop    %ebp
+801010ca:	c3                   	ret    
+801010cb:	90                   	nop
+801010cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return i == n ? n : -1;
+801010d0:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801010d3:	75 e7                	jne    801010bc <filewrite+0xcc>
+}
+801010d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801010d8:	89 f8                	mov    %edi,%eax
+801010da:	5b                   	pop    %ebx
+801010db:	5e                   	pop    %esi
+801010dc:	5f                   	pop    %edi
+801010dd:	5d                   	pop    %ebp
+801010de:	c3                   	ret    
+801010df:	90                   	nop
+    return pipewrite(f->pipe, addr, n);
+801010e0:	8b 46 0c             	mov    0xc(%esi),%eax
+801010e3:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+801010e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801010e9:	5b                   	pop    %ebx
+801010ea:	5e                   	pop    %esi
+801010eb:	5f                   	pop    %edi
+801010ec:	5d                   	pop    %ebp
+    return pipewrite(f->pipe, addr, n);
+801010ed:	e9 fe 22 00 00       	jmp    801033f0 <pipewrite>
+        panic("short filewrite");
+801010f2:	83 ec 0c             	sub    $0xc,%esp
+801010f5:	68 4f 74 10 80       	push   $0x8010744f
+801010fa:	e8 91 f2 ff ff       	call   80100390 <panic>
+  panic("filewrite");
+801010ff:	83 ec 0c             	sub    $0xc,%esp
+80101102:	68 55 74 10 80       	push   $0x80107455
+80101107:	e8 84 f2 ff ff       	call   80100390 <panic>
+8010110c:	66 90                	xchg   %ax,%ax
+8010110e:	66 90                	xchg   %ax,%ax
+
+80101110 <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+80101110:	55                   	push   %ebp
+80101111:	89 e5                	mov    %esp,%ebp
+80101113:	56                   	push   %esi
+80101114:	53                   	push   %ebx
+80101115:	89 d3                	mov    %edx,%ebx
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+80101117:	c1 ea 0c             	shr    $0xc,%edx
+8010111a:	03 15 d8 09 11 80    	add    0x801109d8,%edx
+80101120:	83 ec 08             	sub    $0x8,%esp
+80101123:	52                   	push   %edx
+80101124:	50                   	push   %eax
+80101125:	e8 a6 ef ff ff       	call   801000d0 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+8010112a:	89 d9                	mov    %ebx,%ecx
+  if((bp->data[bi/8] & m) == 0)
+8010112c:	c1 fb 03             	sar    $0x3,%ebx
+  m = 1 << (bi % 8);
+8010112f:	ba 01 00 00 00       	mov    $0x1,%edx
+80101134:	83 e1 07             	and    $0x7,%ecx
+  if((bp->data[bi/8] & m) == 0)
+80101137:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+8010113d:	83 c4 10             	add    $0x10,%esp
+  m = 1 << (bi % 8);
+80101140:	d3 e2                	shl    %cl,%edx
+  if((bp->data[bi/8] & m) == 0)
+80101142:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+80101147:	85 d1                	test   %edx,%ecx
+80101149:	74 25                	je     80101170 <bfree+0x60>
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+8010114b:	f7 d2                	not    %edx
+8010114d:	89 c6                	mov    %eax,%esi
+  log_write(bp);
+8010114f:	83 ec 0c             	sub    $0xc,%esp
+  bp->data[bi/8] &= ~m;
+80101152:	21 ca                	and    %ecx,%edx
+80101154:	88 54 1e 5c          	mov    %dl,0x5c(%esi,%ebx,1)
+  log_write(bp);
+80101158:	56                   	push   %esi
+80101159:	e8 12 1c 00 00       	call   80102d70 <log_write>
+  brelse(bp);
+8010115e:	89 34 24             	mov    %esi,(%esp)
+80101161:	e8 7a f0 ff ff       	call   801001e0 <brelse>
+}
+80101166:	83 c4 10             	add    $0x10,%esp
+80101169:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010116c:	5b                   	pop    %ebx
+8010116d:	5e                   	pop    %esi
+8010116e:	5d                   	pop    %ebp
+8010116f:	c3                   	ret    
+    panic("freeing free block");
+80101170:	83 ec 0c             	sub    $0xc,%esp
+80101173:	68 5f 74 10 80       	push   $0x8010745f
+80101178:	e8 13 f2 ff ff       	call   80100390 <panic>
+8010117d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101180 <balloc>:
+{
+80101180:	55                   	push   %ebp
+80101181:	89 e5                	mov    %esp,%ebp
+80101183:	57                   	push   %edi
+80101184:	56                   	push   %esi
+80101185:	53                   	push   %ebx
+80101186:	83 ec 1c             	sub    $0x1c,%esp
+  for(b = 0; b < sb.size; b += BPB){
+80101189:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
+{
+8010118f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  for(b = 0; b < sb.size; b += BPB){
+80101192:	85 c9                	test   %ecx,%ecx
+80101194:	0f 84 87 00 00 00    	je     80101221 <balloc+0xa1>
+8010119a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    bp = bread(dev, BBLOCK(b, sb));
+801011a1:	8b 75 dc             	mov    -0x24(%ebp),%esi
+801011a4:	83 ec 08             	sub    $0x8,%esp
+801011a7:	89 f0                	mov    %esi,%eax
+801011a9:	c1 f8 0c             	sar    $0xc,%eax
+801011ac:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+801011b2:	50                   	push   %eax
+801011b3:	ff 75 d8             	pushl  -0x28(%ebp)
+801011b6:	e8 15 ef ff ff       	call   801000d0 <bread>
+801011bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+801011be:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+801011c3:	83 c4 10             	add    $0x10,%esp
+801011c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801011c9:	31 c0                	xor    %eax,%eax
+801011cb:	eb 2f                	jmp    801011fc <balloc+0x7c>
+801011cd:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 1 << (bi % 8);
+801011d0:	89 c1                	mov    %eax,%ecx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+801011d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      m = 1 << (bi % 8);
+801011d5:	bb 01 00 00 00       	mov    $0x1,%ebx
+801011da:	83 e1 07             	and    $0x7,%ecx
+801011dd:	d3 e3                	shl    %cl,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+801011df:	89 c1                	mov    %eax,%ecx
+801011e1:	c1 f9 03             	sar    $0x3,%ecx
+801011e4:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+801011e9:	85 df                	test   %ebx,%edi
+801011eb:	89 fa                	mov    %edi,%edx
+801011ed:	74 41                	je     80101230 <balloc+0xb0>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+801011ef:	83 c0 01             	add    $0x1,%eax
+801011f2:	83 c6 01             	add    $0x1,%esi
+801011f5:	3d 00 10 00 00       	cmp    $0x1000,%eax
+801011fa:	74 05                	je     80101201 <balloc+0x81>
+801011fc:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+801011ff:	77 cf                	ja     801011d0 <balloc+0x50>
+    brelse(bp);
+80101201:	83 ec 0c             	sub    $0xc,%esp
+80101204:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101207:	e8 d4 ef ff ff       	call   801001e0 <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+8010120c:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+80101213:	83 c4 10             	add    $0x10,%esp
+80101216:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101219:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+8010121f:	77 80                	ja     801011a1 <balloc+0x21>
+  panic("balloc: out of blocks");
+80101221:	83 ec 0c             	sub    $0xc,%esp
+80101224:	68 72 74 10 80       	push   $0x80107472
+80101229:	e8 62 f1 ff ff       	call   80100390 <panic>
+8010122e:	66 90                	xchg   %ax,%ax
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101230:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        log_write(bp);
+80101233:	83 ec 0c             	sub    $0xc,%esp
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101236:	09 da                	or     %ebx,%edx
+80101238:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+        log_write(bp);
+8010123c:	57                   	push   %edi
+8010123d:	e8 2e 1b 00 00       	call   80102d70 <log_write>
+        brelse(bp);
+80101242:	89 3c 24             	mov    %edi,(%esp)
+80101245:	e8 96 ef ff ff       	call   801001e0 <brelse>
+  bp = bread(dev, bno);
+8010124a:	58                   	pop    %eax
+8010124b:	5a                   	pop    %edx
+8010124c:	56                   	push   %esi
+8010124d:	ff 75 d8             	pushl  -0x28(%ebp)
+80101250:	e8 7b ee ff ff       	call   801000d0 <bread>
+80101255:	89 c3                	mov    %eax,%ebx
+  memset(bp->data, 0, BSIZE);
+80101257:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010125a:	83 c4 0c             	add    $0xc,%esp
+8010125d:	68 00 02 00 00       	push   $0x200
+80101262:	6a 00                	push   $0x0
+80101264:	50                   	push   %eax
+80101265:	e8 d6 35 00 00       	call   80104840 <memset>
+  log_write(bp);
+8010126a:	89 1c 24             	mov    %ebx,(%esp)
+8010126d:	e8 fe 1a 00 00       	call   80102d70 <log_write>
+  brelse(bp);
+80101272:	89 1c 24             	mov    %ebx,(%esp)
+80101275:	e8 66 ef ff ff       	call   801001e0 <brelse>
+}
+8010127a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010127d:	89 f0                	mov    %esi,%eax
+8010127f:	5b                   	pop    %ebx
+80101280:	5e                   	pop    %esi
+80101281:	5f                   	pop    %edi
+80101282:	5d                   	pop    %ebp
+80101283:	c3                   	ret    
+80101284:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010128a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101290 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+80101290:	55                   	push   %ebp
+80101291:	89 e5                	mov    %esp,%ebp
+80101293:	57                   	push   %edi
+80101294:	56                   	push   %esi
+80101295:	53                   	push   %ebx
+80101296:	89 c7                	mov    %eax,%edi
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+80101298:	31 f6                	xor    %esi,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010129a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
+{
+8010129f:	83 ec 28             	sub    $0x28,%esp
+801012a2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  acquire(&icache.lock);
+801012a5:	68 e0 09 11 80       	push   $0x801109e0
+801012aa:	e8 81 34 00 00       	call   80104730 <acquire>
+801012af:	83 c4 10             	add    $0x10,%esp
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+801012b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801012b5:	eb 17                	jmp    801012ce <iget+0x3e>
+801012b7:	89 f6                	mov    %esi,%esi
+801012b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801012c0:	81 c3 90 00 00 00    	add    $0x90,%ebx
+801012c6:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+801012cc:	73 22                	jae    801012f0 <iget+0x60>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+801012ce:	8b 4b 08             	mov    0x8(%ebx),%ecx
+801012d1:	85 c9                	test   %ecx,%ecx
+801012d3:	7e 04                	jle    801012d9 <iget+0x49>
+801012d5:	39 3b                	cmp    %edi,(%ebx)
+801012d7:	74 4f                	je     80101328 <iget+0x98>
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+801012d9:	85 f6                	test   %esi,%esi
+801012db:	75 e3                	jne    801012c0 <iget+0x30>
+801012dd:	85 c9                	test   %ecx,%ecx
+801012df:	0f 44 f3             	cmove  %ebx,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+801012e2:	81 c3 90 00 00 00    	add    $0x90,%ebx
+801012e8:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+801012ee:	72 de                	jb     801012ce <iget+0x3e>
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+801012f0:	85 f6                	test   %esi,%esi
+801012f2:	74 5b                	je     8010134f <iget+0xbf>
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+801012f4:	83 ec 0c             	sub    $0xc,%esp
+  ip->dev = dev;
+801012f7:	89 3e                	mov    %edi,(%esi)
+  ip->inum = inum;
+801012f9:	89 56 04             	mov    %edx,0x4(%esi)
+  ip->ref = 1;
+801012fc:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+  ip->valid = 0;
+80101303:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+  release(&icache.lock);
+8010130a:	68 e0 09 11 80       	push   $0x801109e0
+8010130f:	e8 dc 34 00 00       	call   801047f0 <release>
+
+  return ip;
+80101314:	83 c4 10             	add    $0x10,%esp
+}
+80101317:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010131a:	89 f0                	mov    %esi,%eax
+8010131c:	5b                   	pop    %ebx
+8010131d:	5e                   	pop    %esi
+8010131e:	5f                   	pop    %edi
+8010131f:	5d                   	pop    %ebp
+80101320:	c3                   	ret    
+80101321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101328:	39 53 04             	cmp    %edx,0x4(%ebx)
+8010132b:	75 ac                	jne    801012d9 <iget+0x49>
+      release(&icache.lock);
+8010132d:	83 ec 0c             	sub    $0xc,%esp
+      ip->ref++;
+80101330:	83 c1 01             	add    $0x1,%ecx
+      return ip;
+80101333:	89 de                	mov    %ebx,%esi
+      release(&icache.lock);
+80101335:	68 e0 09 11 80       	push   $0x801109e0
+      ip->ref++;
+8010133a:	89 4b 08             	mov    %ecx,0x8(%ebx)
+      release(&icache.lock);
+8010133d:	e8 ae 34 00 00       	call   801047f0 <release>
+      return ip;
+80101342:	83 c4 10             	add    $0x10,%esp
+}
+80101345:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101348:	89 f0                	mov    %esi,%eax
+8010134a:	5b                   	pop    %ebx
+8010134b:	5e                   	pop    %esi
+8010134c:	5f                   	pop    %edi
+8010134d:	5d                   	pop    %ebp
+8010134e:	c3                   	ret    
+    panic("iget: no inodes");
+8010134f:	83 ec 0c             	sub    $0xc,%esp
+80101352:	68 88 74 10 80       	push   $0x80107488
+80101357:	e8 34 f0 ff ff       	call   80100390 <panic>
+8010135c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101360 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+80101360:	55                   	push   %ebp
+80101361:	89 e5                	mov    %esp,%ebp
+80101363:	57                   	push   %edi
+80101364:	56                   	push   %esi
+80101365:	53                   	push   %ebx
+80101366:	89 c6                	mov    %eax,%esi
+80101368:	83 ec 1c             	sub    $0x1c,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+8010136b:	83 fa 0b             	cmp    $0xb,%edx
+8010136e:	77 18                	ja     80101388 <bmap+0x28>
+80101370:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+    if((addr = ip->addrs[bn]) == 0)
+80101373:	8b 5f 5c             	mov    0x5c(%edi),%ebx
+80101376:	85 db                	test   %ebx,%ebx
+80101378:	74 76                	je     801013f0 <bmap+0x90>
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+8010137a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010137d:	89 d8                	mov    %ebx,%eax
+8010137f:	5b                   	pop    %ebx
+80101380:	5e                   	pop    %esi
+80101381:	5f                   	pop    %edi
+80101382:	5d                   	pop    %ebp
+80101383:	c3                   	ret    
+80101384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  bn -= NDIRECT;
+80101388:	8d 5a f4             	lea    -0xc(%edx),%ebx
+  if(bn < NINDIRECT){
+8010138b:	83 fb 7f             	cmp    $0x7f,%ebx
+8010138e:	0f 87 90 00 00 00    	ja     80101424 <bmap+0xc4>
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101394:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
+8010139a:	8b 00                	mov    (%eax),%eax
+8010139c:	85 d2                	test   %edx,%edx
+8010139e:	74 70                	je     80101410 <bmap+0xb0>
+    bp = bread(ip->dev, addr);
+801013a0:	83 ec 08             	sub    $0x8,%esp
+801013a3:	52                   	push   %edx
+801013a4:	50                   	push   %eax
+801013a5:	e8 26 ed ff ff       	call   801000d0 <bread>
+    if((addr = a[bn]) == 0){
+801013aa:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+801013ae:	83 c4 10             	add    $0x10,%esp
+    bp = bread(ip->dev, addr);
+801013b1:	89 c7                	mov    %eax,%edi
+    if((addr = a[bn]) == 0){
+801013b3:	8b 1a                	mov    (%edx),%ebx
+801013b5:	85 db                	test   %ebx,%ebx
+801013b7:	75 1d                	jne    801013d6 <bmap+0x76>
+      a[bn] = addr = balloc(ip->dev);
+801013b9:	8b 06                	mov    (%esi),%eax
+801013bb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+801013be:	e8 bd fd ff ff       	call   80101180 <balloc>
+801013c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      log_write(bp);
+801013c6:	83 ec 0c             	sub    $0xc,%esp
+      a[bn] = addr = balloc(ip->dev);
+801013c9:	89 c3                	mov    %eax,%ebx
+801013cb:	89 02                	mov    %eax,(%edx)
+      log_write(bp);
+801013cd:	57                   	push   %edi
+801013ce:	e8 9d 19 00 00       	call   80102d70 <log_write>
+801013d3:	83 c4 10             	add    $0x10,%esp
+    brelse(bp);
+801013d6:	83 ec 0c             	sub    $0xc,%esp
+801013d9:	57                   	push   %edi
+801013da:	e8 01 ee ff ff       	call   801001e0 <brelse>
+801013df:	83 c4 10             	add    $0x10,%esp
+}
+801013e2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801013e5:	89 d8                	mov    %ebx,%eax
+801013e7:	5b                   	pop    %ebx
+801013e8:	5e                   	pop    %esi
+801013e9:	5f                   	pop    %edi
+801013ea:	5d                   	pop    %ebp
+801013eb:	c3                   	ret    
+801013ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      ip->addrs[bn] = addr = balloc(ip->dev);
+801013f0:	8b 00                	mov    (%eax),%eax
+801013f2:	e8 89 fd ff ff       	call   80101180 <balloc>
+801013f7:	89 47 5c             	mov    %eax,0x5c(%edi)
+}
+801013fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      ip->addrs[bn] = addr = balloc(ip->dev);
+801013fd:	89 c3                	mov    %eax,%ebx
+}
+801013ff:	89 d8                	mov    %ebx,%eax
+80101401:	5b                   	pop    %ebx
+80101402:	5e                   	pop    %esi
+80101403:	5f                   	pop    %edi
+80101404:	5d                   	pop    %ebp
+80101405:	c3                   	ret    
+80101406:	8d 76 00             	lea    0x0(%esi),%esi
+80101409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+80101410:	e8 6b fd ff ff       	call   80101180 <balloc>
+80101415:	89 c2                	mov    %eax,%edx
+80101417:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+8010141d:	8b 06                	mov    (%esi),%eax
+8010141f:	e9 7c ff ff ff       	jmp    801013a0 <bmap+0x40>
+  panic("bmap: out of range");
+80101424:	83 ec 0c             	sub    $0xc,%esp
+80101427:	68 98 74 10 80       	push   $0x80107498
+8010142c:	e8 5f ef ff ff       	call   80100390 <panic>
+80101431:	eb 0d                	jmp    80101440 <readsb>
+80101433:	90                   	nop
+80101434:	90                   	nop
+80101435:	90                   	nop
+80101436:	90                   	nop
+80101437:	90                   	nop
+80101438:	90                   	nop
+80101439:	90                   	nop
+8010143a:	90                   	nop
+8010143b:	90                   	nop
+8010143c:	90                   	nop
+8010143d:	90                   	nop
+8010143e:	90                   	nop
+8010143f:	90                   	nop
+
+80101440 <readsb>:
+{
+80101440:	55                   	push   %ebp
+80101441:	89 e5                	mov    %esp,%ebp
+80101443:	56                   	push   %esi
+80101444:	53                   	push   %ebx
+80101445:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bp = bread(dev, 1);
+80101448:	83 ec 08             	sub    $0x8,%esp
+8010144b:	6a 01                	push   $0x1
+8010144d:	ff 75 08             	pushl  0x8(%ebp)
+80101450:	e8 7b ec ff ff       	call   801000d0 <bread>
+80101455:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+80101457:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010145a:	83 c4 0c             	add    $0xc,%esp
+8010145d:	6a 1c                	push   $0x1c
+8010145f:	50                   	push   %eax
+80101460:	56                   	push   %esi
+80101461:	e8 8a 34 00 00       	call   801048f0 <memmove>
+  brelse(bp);
+80101466:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101469:	83 c4 10             	add    $0x10,%esp
+}
+8010146c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010146f:	5b                   	pop    %ebx
+80101470:	5e                   	pop    %esi
+80101471:	5d                   	pop    %ebp
+  brelse(bp);
+80101472:	e9 69 ed ff ff       	jmp    801001e0 <brelse>
+80101477:	89 f6                	mov    %esi,%esi
+80101479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101480 <iinit>:
+{
+80101480:	55                   	push   %ebp
+80101481:	89 e5                	mov    %esp,%ebp
+80101483:	53                   	push   %ebx
+80101484:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+80101489:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&icache.lock, "icache");
+8010148c:	68 ab 74 10 80       	push   $0x801074ab
+80101491:	68 e0 09 11 80       	push   $0x801109e0
+80101496:	e8 55 31 00 00       	call   801045f0 <initlock>
+8010149b:	83 c4 10             	add    $0x10,%esp
+8010149e:	66 90                	xchg   %ax,%ax
+    initsleeplock(&icache.inode[i].lock, "inode");
+801014a0:	83 ec 08             	sub    $0x8,%esp
+801014a3:	68 b2 74 10 80       	push   $0x801074b2
+801014a8:	53                   	push   %ebx
+801014a9:	81 c3 90 00 00 00    	add    $0x90,%ebx
+801014af:	e8 0c 30 00 00       	call   801044c0 <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+801014b4:	83 c4 10             	add    $0x10,%esp
+801014b7:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+801014bd:	75 e1                	jne    801014a0 <iinit+0x20>
+  readsb(dev, &sb);
+801014bf:	83 ec 08             	sub    $0x8,%esp
+801014c2:	68 c0 09 11 80       	push   $0x801109c0
+801014c7:	ff 75 08             	pushl  0x8(%ebp)
+801014ca:	e8 71 ff ff ff       	call   80101440 <readsb>
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+801014cf:	ff 35 d8 09 11 80    	pushl  0x801109d8
+801014d5:	ff 35 d4 09 11 80    	pushl  0x801109d4
+801014db:	ff 35 d0 09 11 80    	pushl  0x801109d0
+801014e1:	ff 35 cc 09 11 80    	pushl  0x801109cc
+801014e7:	ff 35 c8 09 11 80    	pushl  0x801109c8
+801014ed:	ff 35 c4 09 11 80    	pushl  0x801109c4
+801014f3:	ff 35 c0 09 11 80    	pushl  0x801109c0
+801014f9:	68 18 75 10 80       	push   $0x80107518
+801014fe:	e8 5d f1 ff ff       	call   80100660 <cprintf>
+}
+80101503:	83 c4 30             	add    $0x30,%esp
+80101506:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101509:	c9                   	leave  
+8010150a:	c3                   	ret    
+8010150b:	90                   	nop
+8010150c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101510 <ialloc>:
+{
+80101510:	55                   	push   %ebp
+80101511:	89 e5                	mov    %esp,%ebp
+80101513:	57                   	push   %edi
+80101514:	56                   	push   %esi
+80101515:	53                   	push   %ebx
+80101516:	83 ec 1c             	sub    $0x1c,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101519:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
+{
+80101520:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101523:	8b 75 08             	mov    0x8(%ebp),%esi
+80101526:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101529:	0f 86 91 00 00 00    	jbe    801015c0 <ialloc+0xb0>
+8010152f:	bb 01 00 00 00       	mov    $0x1,%ebx
+80101534:	eb 21                	jmp    80101557 <ialloc+0x47>
+80101536:	8d 76 00             	lea    0x0(%esi),%esi
+80101539:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    brelse(bp);
+80101540:	83 ec 0c             	sub    $0xc,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101543:	83 c3 01             	add    $0x1,%ebx
+    brelse(bp);
+80101546:	57                   	push   %edi
+80101547:	e8 94 ec ff ff       	call   801001e0 <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+8010154c:	83 c4 10             	add    $0x10,%esp
+8010154f:	39 1d c8 09 11 80    	cmp    %ebx,0x801109c8
+80101555:	76 69                	jbe    801015c0 <ialloc+0xb0>
+    bp = bread(dev, IBLOCK(inum, sb));
+80101557:	89 d8                	mov    %ebx,%eax
+80101559:	83 ec 08             	sub    $0x8,%esp
+8010155c:	c1 e8 03             	shr    $0x3,%eax
+8010155f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+80101565:	50                   	push   %eax
+80101566:	56                   	push   %esi
+80101567:	e8 64 eb ff ff       	call   801000d0 <bread>
+8010156c:	89 c7                	mov    %eax,%edi
+    dip = (struct dinode*)bp->data + inum%IPB;
+8010156e:	89 d8                	mov    %ebx,%eax
+    if(dip->type == 0){  // a free inode
+80101570:	83 c4 10             	add    $0x10,%esp
+    dip = (struct dinode*)bp->data + inum%IPB;
+80101573:	83 e0 07             	and    $0x7,%eax
+80101576:	c1 e0 06             	shl    $0x6,%eax
+80101579:	8d 4c 07 5c          	lea    0x5c(%edi,%eax,1),%ecx
+    if(dip->type == 0){  // a free inode
+8010157d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80101581:	75 bd                	jne    80101540 <ialloc+0x30>
+      memset(dip, 0, sizeof(*dip));
+80101583:	83 ec 04             	sub    $0x4,%esp
+80101586:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80101589:	6a 40                	push   $0x40
+8010158b:	6a 00                	push   $0x0
+8010158d:	51                   	push   %ecx
+8010158e:	e8 ad 32 00 00       	call   80104840 <memset>
+      dip->type = type;
+80101593:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80101597:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010159a:	66 89 01             	mov    %ax,(%ecx)
+      log_write(bp);   // mark it allocated on the disk
+8010159d:	89 3c 24             	mov    %edi,(%esp)
+801015a0:	e8 cb 17 00 00       	call   80102d70 <log_write>
+      brelse(bp);
+801015a5:	89 3c 24             	mov    %edi,(%esp)
+801015a8:	e8 33 ec ff ff       	call   801001e0 <brelse>
+      return iget(dev, inum);
+801015ad:	83 c4 10             	add    $0x10,%esp
+}
+801015b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return iget(dev, inum);
+801015b3:	89 da                	mov    %ebx,%edx
+801015b5:	89 f0                	mov    %esi,%eax
+}
+801015b7:	5b                   	pop    %ebx
+801015b8:	5e                   	pop    %esi
+801015b9:	5f                   	pop    %edi
+801015ba:	5d                   	pop    %ebp
+      return iget(dev, inum);
+801015bb:	e9 d0 fc ff ff       	jmp    80101290 <iget>
+  panic("ialloc: no inodes");
+801015c0:	83 ec 0c             	sub    $0xc,%esp
+801015c3:	68 b8 74 10 80       	push   $0x801074b8
+801015c8:	e8 c3 ed ff ff       	call   80100390 <panic>
+801015cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801015d0 <iupdate>:
+{
+801015d0:	55                   	push   %ebp
+801015d1:	89 e5                	mov    %esp,%ebp
+801015d3:	56                   	push   %esi
+801015d4:	53                   	push   %ebx
+801015d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801015d8:	83 ec 08             	sub    $0x8,%esp
+801015db:	8b 43 04             	mov    0x4(%ebx),%eax
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801015de:	83 c3 5c             	add    $0x5c,%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801015e1:	c1 e8 03             	shr    $0x3,%eax
+801015e4:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801015ea:	50                   	push   %eax
+801015eb:	ff 73 a4             	pushl  -0x5c(%ebx)
+801015ee:	e8 dd ea ff ff       	call   801000d0 <bread>
+801015f3:	89 c6                	mov    %eax,%esi
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+801015f5:	8b 43 a8             	mov    -0x58(%ebx),%eax
+  dip->type = ip->type;
+801015f8:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801015fc:	83 c4 0c             	add    $0xc,%esp
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+801015ff:	83 e0 07             	and    $0x7,%eax
+80101602:	c1 e0 06             	shl    $0x6,%eax
+80101605:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+  dip->type = ip->type;
+80101609:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+8010160c:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+80101610:	83 c0 0c             	add    $0xc,%eax
+  dip->major = ip->major;
+80101613:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+  dip->minor = ip->minor;
+80101617:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+8010161b:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+  dip->nlink = ip->nlink;
+8010161f:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+80101623:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+  dip->size = ip->size;
+80101627:	8b 53 fc             	mov    -0x4(%ebx),%edx
+8010162a:	89 50 fc             	mov    %edx,-0x4(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010162d:	6a 34                	push   $0x34
+8010162f:	53                   	push   %ebx
+80101630:	50                   	push   %eax
+80101631:	e8 ba 32 00 00       	call   801048f0 <memmove>
+  log_write(bp);
+80101636:	89 34 24             	mov    %esi,(%esp)
+80101639:	e8 32 17 00 00       	call   80102d70 <log_write>
+  brelse(bp);
+8010163e:	89 75 08             	mov    %esi,0x8(%ebp)
+80101641:	83 c4 10             	add    $0x10,%esp
+}
+80101644:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101647:	5b                   	pop    %ebx
+80101648:	5e                   	pop    %esi
+80101649:	5d                   	pop    %ebp
+  brelse(bp);
+8010164a:	e9 91 eb ff ff       	jmp    801001e0 <brelse>
+8010164f:	90                   	nop
+
+80101650 <idup>:
+{
+80101650:	55                   	push   %ebp
+80101651:	89 e5                	mov    %esp,%ebp
+80101653:	53                   	push   %ebx
+80101654:	83 ec 10             	sub    $0x10,%esp
+80101657:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&icache.lock);
+8010165a:	68 e0 09 11 80       	push   $0x801109e0
+8010165f:	e8 cc 30 00 00       	call   80104730 <acquire>
+  ip->ref++;
+80101664:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+80101668:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+8010166f:	e8 7c 31 00 00       	call   801047f0 <release>
+}
+80101674:	89 d8                	mov    %ebx,%eax
+80101676:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101679:	c9                   	leave  
+8010167a:	c3                   	ret    
+8010167b:	90                   	nop
+8010167c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101680 <ilock>:
+{
+80101680:	55                   	push   %ebp
+80101681:	89 e5                	mov    %esp,%ebp
+80101683:	56                   	push   %esi
+80101684:	53                   	push   %ebx
+80101685:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || ip->ref < 1)
+80101688:	85 db                	test   %ebx,%ebx
+8010168a:	0f 84 b7 00 00 00    	je     80101747 <ilock+0xc7>
+80101690:	8b 53 08             	mov    0x8(%ebx),%edx
+80101693:	85 d2                	test   %edx,%edx
+80101695:	0f 8e ac 00 00 00    	jle    80101747 <ilock+0xc7>
+  acquiresleep(&ip->lock);
+8010169b:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010169e:	83 ec 0c             	sub    $0xc,%esp
+801016a1:	50                   	push   %eax
+801016a2:	e8 59 2e 00 00       	call   80104500 <acquiresleep>
+  if(ip->valid == 0){
+801016a7:	8b 43 4c             	mov    0x4c(%ebx),%eax
+801016aa:	83 c4 10             	add    $0x10,%esp
+801016ad:	85 c0                	test   %eax,%eax
+801016af:	74 0f                	je     801016c0 <ilock+0x40>
+}
+801016b1:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801016b4:	5b                   	pop    %ebx
+801016b5:	5e                   	pop    %esi
+801016b6:	5d                   	pop    %ebp
+801016b7:	c3                   	ret    
+801016b8:	90                   	nop
+801016b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801016c0:	8b 43 04             	mov    0x4(%ebx),%eax
+801016c3:	83 ec 08             	sub    $0x8,%esp
+801016c6:	c1 e8 03             	shr    $0x3,%eax
+801016c9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801016cf:	50                   	push   %eax
+801016d0:	ff 33                	pushl  (%ebx)
+801016d2:	e8 f9 e9 ff ff       	call   801000d0 <bread>
+801016d7:	89 c6                	mov    %eax,%esi
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801016d9:	8b 43 04             	mov    0x4(%ebx),%eax
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801016dc:	83 c4 0c             	add    $0xc,%esp
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801016df:	83 e0 07             	and    $0x7,%eax
+801016e2:	c1 e0 06             	shl    $0x6,%eax
+801016e5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+    ip->type = dip->type;
+801016e9:	0f b7 10             	movzwl (%eax),%edx
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801016ec:	83 c0 0c             	add    $0xc,%eax
+    ip->type = dip->type;
+801016ef:	66 89 53 50          	mov    %dx,0x50(%ebx)
+    ip->major = dip->major;
+801016f3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+801016f7:	66 89 53 52          	mov    %dx,0x52(%ebx)
+    ip->minor = dip->minor;
+801016fb:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+801016ff:	66 89 53 54          	mov    %dx,0x54(%ebx)
+    ip->nlink = dip->nlink;
+80101703:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+80101707:	66 89 53 56          	mov    %dx,0x56(%ebx)
+    ip->size = dip->size;
+8010170b:	8b 50 fc             	mov    -0x4(%eax),%edx
+8010170e:	89 53 58             	mov    %edx,0x58(%ebx)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+80101711:	6a 34                	push   $0x34
+80101713:	50                   	push   %eax
+80101714:	8d 43 5c             	lea    0x5c(%ebx),%eax
+80101717:	50                   	push   %eax
+80101718:	e8 d3 31 00 00       	call   801048f0 <memmove>
+    brelse(bp);
+8010171d:	89 34 24             	mov    %esi,(%esp)
+80101720:	e8 bb ea ff ff       	call   801001e0 <brelse>
+    if(ip->type == 0)
+80101725:	83 c4 10             	add    $0x10,%esp
+80101728:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+    ip->valid = 1;
+8010172d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+    if(ip->type == 0)
+80101734:	0f 85 77 ff ff ff    	jne    801016b1 <ilock+0x31>
+      panic("ilock: no type");
+8010173a:	83 ec 0c             	sub    $0xc,%esp
+8010173d:	68 d0 74 10 80       	push   $0x801074d0
+80101742:	e8 49 ec ff ff       	call   80100390 <panic>
+    panic("ilock");
+80101747:	83 ec 0c             	sub    $0xc,%esp
+8010174a:	68 ca 74 10 80       	push   $0x801074ca
+8010174f:	e8 3c ec ff ff       	call   80100390 <panic>
+80101754:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010175a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101760 <iunlock>:
+{
+80101760:	55                   	push   %ebp
+80101761:	89 e5                	mov    %esp,%ebp
+80101763:	56                   	push   %esi
+80101764:	53                   	push   %ebx
+80101765:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101768:	85 db                	test   %ebx,%ebx
+8010176a:	74 28                	je     80101794 <iunlock+0x34>
+8010176c:	8d 73 0c             	lea    0xc(%ebx),%esi
+8010176f:	83 ec 0c             	sub    $0xc,%esp
+80101772:	56                   	push   %esi
+80101773:	e8 28 2e 00 00       	call   801045a0 <holdingsleep>
+80101778:	83 c4 10             	add    $0x10,%esp
+8010177b:	85 c0                	test   %eax,%eax
+8010177d:	74 15                	je     80101794 <iunlock+0x34>
+8010177f:	8b 43 08             	mov    0x8(%ebx),%eax
+80101782:	85 c0                	test   %eax,%eax
+80101784:	7e 0e                	jle    80101794 <iunlock+0x34>
+  releasesleep(&ip->lock);
+80101786:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80101789:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010178c:	5b                   	pop    %ebx
+8010178d:	5e                   	pop    %esi
+8010178e:	5d                   	pop    %ebp
+  releasesleep(&ip->lock);
+8010178f:	e9 cc 2d 00 00       	jmp    80104560 <releasesleep>
+    panic("iunlock");
+80101794:	83 ec 0c             	sub    $0xc,%esp
+80101797:	68 df 74 10 80       	push   $0x801074df
+8010179c:	e8 ef eb ff ff       	call   80100390 <panic>
+801017a1:	eb 0d                	jmp    801017b0 <iput>
+801017a3:	90                   	nop
+801017a4:	90                   	nop
+801017a5:	90                   	nop
+801017a6:	90                   	nop
+801017a7:	90                   	nop
+801017a8:	90                   	nop
+801017a9:	90                   	nop
+801017aa:	90                   	nop
+801017ab:	90                   	nop
+801017ac:	90                   	nop
+801017ad:	90                   	nop
+801017ae:	90                   	nop
+801017af:	90                   	nop
+
+801017b0 <iput>:
+{
+801017b0:	55                   	push   %ebp
+801017b1:	89 e5                	mov    %esp,%ebp
+801017b3:	57                   	push   %edi
+801017b4:	56                   	push   %esi
+801017b5:	53                   	push   %ebx
+801017b6:	83 ec 28             	sub    $0x28,%esp
+801017b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquiresleep(&ip->lock);
+801017bc:	8d 7b 0c             	lea    0xc(%ebx),%edi
+801017bf:	57                   	push   %edi
+801017c0:	e8 3b 2d 00 00       	call   80104500 <acquiresleep>
+  if(ip->valid && ip->nlink == 0){
+801017c5:	8b 53 4c             	mov    0x4c(%ebx),%edx
+801017c8:	83 c4 10             	add    $0x10,%esp
+801017cb:	85 d2                	test   %edx,%edx
+801017cd:	74 07                	je     801017d6 <iput+0x26>
+801017cf:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801017d4:	74 32                	je     80101808 <iput+0x58>
+  releasesleep(&ip->lock);
+801017d6:	83 ec 0c             	sub    $0xc,%esp
+801017d9:	57                   	push   %edi
+801017da:	e8 81 2d 00 00       	call   80104560 <releasesleep>
+  acquire(&icache.lock);
+801017df:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+801017e6:	e8 45 2f 00 00       	call   80104730 <acquire>
+  ip->ref--;
+801017eb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+801017ef:	83 c4 10             	add    $0x10,%esp
+801017f2:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
+}
+801017f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801017fc:	5b                   	pop    %ebx
+801017fd:	5e                   	pop    %esi
+801017fe:	5f                   	pop    %edi
+801017ff:	5d                   	pop    %ebp
+  release(&icache.lock);
+80101800:	e9 eb 2f 00 00       	jmp    801047f0 <release>
+80101805:	8d 76 00             	lea    0x0(%esi),%esi
+    acquire(&icache.lock);
+80101808:	83 ec 0c             	sub    $0xc,%esp
+8010180b:	68 e0 09 11 80       	push   $0x801109e0
+80101810:	e8 1b 2f 00 00       	call   80104730 <acquire>
+    int r = ip->ref;
+80101815:	8b 73 08             	mov    0x8(%ebx),%esi
+    release(&icache.lock);
+80101818:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+8010181f:	e8 cc 2f 00 00       	call   801047f0 <release>
+    if(r == 1){
+80101824:	83 c4 10             	add    $0x10,%esp
+80101827:	83 fe 01             	cmp    $0x1,%esi
+8010182a:	75 aa                	jne    801017d6 <iput+0x26>
+8010182c:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+80101832:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80101835:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80101838:	89 cf                	mov    %ecx,%edi
+8010183a:	eb 0b                	jmp    80101847 <iput+0x97>
+8010183c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101840:	83 c6 04             	add    $0x4,%esi
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80101843:	39 fe                	cmp    %edi,%esi
+80101845:	74 19                	je     80101860 <iput+0xb0>
+    if(ip->addrs[i]){
+80101847:	8b 16                	mov    (%esi),%edx
+80101849:	85 d2                	test   %edx,%edx
+8010184b:	74 f3                	je     80101840 <iput+0x90>
+      bfree(ip->dev, ip->addrs[i]);
+8010184d:	8b 03                	mov    (%ebx),%eax
+8010184f:	e8 bc f8 ff ff       	call   80101110 <bfree>
+      ip->addrs[i] = 0;
+80101854:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+8010185a:	eb e4                	jmp    80101840 <iput+0x90>
+8010185c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+80101860:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+80101866:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80101869:	85 c0                	test   %eax,%eax
+8010186b:	75 33                	jne    801018a0 <iput+0xf0>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+8010186d:	83 ec 0c             	sub    $0xc,%esp
+  ip->size = 0;
+80101870:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  iupdate(ip);
+80101877:	53                   	push   %ebx
+80101878:	e8 53 fd ff ff       	call   801015d0 <iupdate>
+      ip->type = 0;
+8010187d:	31 c0                	xor    %eax,%eax
+8010187f:	66 89 43 50          	mov    %ax,0x50(%ebx)
+      iupdate(ip);
+80101883:	89 1c 24             	mov    %ebx,(%esp)
+80101886:	e8 45 fd ff ff       	call   801015d0 <iupdate>
+      ip->valid = 0;
+8010188b:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+80101892:	83 c4 10             	add    $0x10,%esp
+80101895:	e9 3c ff ff ff       	jmp    801017d6 <iput+0x26>
+8010189a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+801018a0:	83 ec 08             	sub    $0x8,%esp
+801018a3:	50                   	push   %eax
+801018a4:	ff 33                	pushl  (%ebx)
+801018a6:	e8 25 e8 ff ff       	call   801000d0 <bread>
+801018ab:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+801018b1:	89 7d e0             	mov    %edi,-0x20(%ebp)
+801018b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    a = (uint*)bp->data;
+801018b7:	8d 70 5c             	lea    0x5c(%eax),%esi
+801018ba:	83 c4 10             	add    $0x10,%esp
+801018bd:	89 cf                	mov    %ecx,%edi
+801018bf:	eb 0e                	jmp    801018cf <iput+0x11f>
+801018c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801018c8:	83 c6 04             	add    $0x4,%esi
+    for(j = 0; j < NINDIRECT; j++){
+801018cb:	39 fe                	cmp    %edi,%esi
+801018cd:	74 0f                	je     801018de <iput+0x12e>
+      if(a[j])
+801018cf:	8b 16                	mov    (%esi),%edx
+801018d1:	85 d2                	test   %edx,%edx
+801018d3:	74 f3                	je     801018c8 <iput+0x118>
+        bfree(ip->dev, a[j]);
+801018d5:	8b 03                	mov    (%ebx),%eax
+801018d7:	e8 34 f8 ff ff       	call   80101110 <bfree>
+801018dc:	eb ea                	jmp    801018c8 <iput+0x118>
+    brelse(bp);
+801018de:	83 ec 0c             	sub    $0xc,%esp
+801018e1:	ff 75 e4             	pushl  -0x1c(%ebp)
+801018e4:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801018e7:	e8 f4 e8 ff ff       	call   801001e0 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+801018ec:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+801018f2:	8b 03                	mov    (%ebx),%eax
+801018f4:	e8 17 f8 ff ff       	call   80101110 <bfree>
+    ip->addrs[NDIRECT] = 0;
+801018f9:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+80101900:	00 00 00 
+80101903:	83 c4 10             	add    $0x10,%esp
+80101906:	e9 62 ff ff ff       	jmp    8010186d <iput+0xbd>
+8010190b:	90                   	nop
+8010190c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101910 <iunlockput>:
+{
+80101910:	55                   	push   %ebp
+80101911:	89 e5                	mov    %esp,%ebp
+80101913:	53                   	push   %ebx
+80101914:	83 ec 10             	sub    $0x10,%esp
+80101917:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  iunlock(ip);
+8010191a:	53                   	push   %ebx
+8010191b:	e8 40 fe ff ff       	call   80101760 <iunlock>
+  iput(ip);
+80101920:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101923:	83 c4 10             	add    $0x10,%esp
+}
+80101926:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101929:	c9                   	leave  
+  iput(ip);
+8010192a:	e9 81 fe ff ff       	jmp    801017b0 <iput>
+8010192f:	90                   	nop
+
+80101930 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+80101930:	55                   	push   %ebp
+80101931:	89 e5                	mov    %esp,%ebp
+80101933:	8b 55 08             	mov    0x8(%ebp),%edx
+80101936:	8b 45 0c             	mov    0xc(%ebp),%eax
+  st->dev = ip->dev;
+80101939:	8b 0a                	mov    (%edx),%ecx
+8010193b:	89 48 04             	mov    %ecx,0x4(%eax)
+  st->ino = ip->inum;
+8010193e:	8b 4a 04             	mov    0x4(%edx),%ecx
+80101941:	89 48 08             	mov    %ecx,0x8(%eax)
+  st->type = ip->type;
+80101944:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+80101948:	66 89 08             	mov    %cx,(%eax)
+  st->nlink = ip->nlink;
+8010194b:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+8010194f:	66 89 48 0c          	mov    %cx,0xc(%eax)
+  st->size = ip->size;
+80101953:	8b 52 58             	mov    0x58(%edx),%edx
+80101956:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80101959:	5d                   	pop    %ebp
+8010195a:	c3                   	ret    
+8010195b:	90                   	nop
+8010195c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101960 <readi>:
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80101960:	55                   	push   %ebp
+80101961:	89 e5                	mov    %esp,%ebp
+80101963:	57                   	push   %edi
+80101964:	56                   	push   %esi
+80101965:	53                   	push   %ebx
+80101966:	83 ec 1c             	sub    $0x1c,%esp
+80101969:	8b 45 08             	mov    0x8(%ebp),%eax
+8010196c:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010196f:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101972:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101977:	89 75 e0             	mov    %esi,-0x20(%ebp)
+8010197a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+8010197d:	8b 75 10             	mov    0x10(%ebp),%esi
+80101980:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+  if(ip->type == T_DEV){
+80101983:	0f 84 a7 00 00 00    	je     80101a30 <readi+0xd0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101989:	8b 45 d8             	mov    -0x28(%ebp),%eax
+8010198c:	8b 40 58             	mov    0x58(%eax),%eax
+8010198f:	39 c6                	cmp    %eax,%esi
+80101991:	0f 87 ba 00 00 00    	ja     80101a51 <readi+0xf1>
+80101997:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+8010199a:	89 f9                	mov    %edi,%ecx
+8010199c:	01 f1                	add    %esi,%ecx
+8010199e:	0f 82 ad 00 00 00    	jb     80101a51 <readi+0xf1>
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+801019a4:	89 c2                	mov    %eax,%edx
+801019a6:	29 f2                	sub    %esi,%edx
+801019a8:	39 c8                	cmp    %ecx,%eax
+801019aa:	0f 43 d7             	cmovae %edi,%edx
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801019ad:	31 ff                	xor    %edi,%edi
+801019af:	85 d2                	test   %edx,%edx
+    n = ip->size - off;
+801019b1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801019b4:	74 6c                	je     80101a22 <readi+0xc2>
+801019b6:	8d 76 00             	lea    0x0(%esi),%esi
+801019b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801019c0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+801019c3:	89 f2                	mov    %esi,%edx
+801019c5:	c1 ea 09             	shr    $0x9,%edx
+801019c8:	89 d8                	mov    %ebx,%eax
+801019ca:	e8 91 f9 ff ff       	call   80101360 <bmap>
+801019cf:	83 ec 08             	sub    $0x8,%esp
+801019d2:	50                   	push   %eax
+801019d3:	ff 33                	pushl  (%ebx)
+801019d5:	e8 f6 e6 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019da:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801019dd:	89 c2                	mov    %eax,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019df:	89 f0                	mov    %esi,%eax
+801019e1:	25 ff 01 00 00       	and    $0x1ff,%eax
+801019e6:	b9 00 02 00 00       	mov    $0x200,%ecx
+801019eb:	83 c4 0c             	add    $0xc,%esp
+801019ee:	29 c1                	sub    %eax,%ecx
+    memmove(dst, bp->data + off%BSIZE, m);
+801019f0:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+801019f4:	89 55 dc             	mov    %edx,-0x24(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019f7:	29 fb                	sub    %edi,%ebx
+801019f9:	39 d9                	cmp    %ebx,%ecx
+801019fb:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+801019fe:	53                   	push   %ebx
+801019ff:	50                   	push   %eax
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a00:	01 df                	add    %ebx,%edi
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a02:	ff 75 e0             	pushl  -0x20(%ebp)
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a05:	01 de                	add    %ebx,%esi
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a07:	e8 e4 2e 00 00       	call   801048f0 <memmove>
+    brelse(bp);
+80101a0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101a0f:	89 14 24             	mov    %edx,(%esp)
+80101a12:	e8 c9 e7 ff ff       	call   801001e0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a17:	01 5d e0             	add    %ebx,-0x20(%ebp)
+80101a1a:	83 c4 10             	add    $0x10,%esp
+80101a1d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101a20:	77 9e                	ja     801019c0 <readi+0x60>
+  }
+  return n;
+80101a22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+}
+80101a25:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a28:	5b                   	pop    %ebx
+80101a29:	5e                   	pop    %esi
+80101a2a:	5f                   	pop    %edi
+80101a2b:	5d                   	pop    %ebp
+80101a2c:	c3                   	ret    
+80101a2d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80101a30:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101a34:	66 83 f8 09          	cmp    $0x9,%ax
+80101a38:	77 17                	ja     80101a51 <readi+0xf1>
+80101a3a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101a41:	85 c0                	test   %eax,%eax
+80101a43:	74 0c                	je     80101a51 <readi+0xf1>
+    return devsw[ip->major].read(ip, dst, n);
+80101a45:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80101a48:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a4b:	5b                   	pop    %ebx
+80101a4c:	5e                   	pop    %esi
+80101a4d:	5f                   	pop    %edi
+80101a4e:	5d                   	pop    %ebp
+    return devsw[ip->major].read(ip, dst, n);
+80101a4f:	ff e0                	jmp    *%eax
+      return -1;
+80101a51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101a56:	eb cd                	jmp    80101a25 <readi+0xc5>
+80101a58:	90                   	nop
+80101a59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101a60 <writei>:
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80101a60:	55                   	push   %ebp
+80101a61:	89 e5                	mov    %esp,%ebp
+80101a63:	57                   	push   %edi
+80101a64:	56                   	push   %esi
+80101a65:	53                   	push   %ebx
+80101a66:	83 ec 1c             	sub    $0x1c,%esp
+80101a69:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a6c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101a6f:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101a72:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101a77:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101a7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101a7d:	8b 75 10             	mov    0x10(%ebp),%esi
+80101a80:	89 7d e0             	mov    %edi,-0x20(%ebp)
+  if(ip->type == T_DEV){
+80101a83:	0f 84 b7 00 00 00    	je     80101b40 <writei+0xe0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101a89:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101a8c:	39 70 58             	cmp    %esi,0x58(%eax)
+80101a8f:	0f 82 eb 00 00 00    	jb     80101b80 <writei+0x120>
+80101a95:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101a98:	31 d2                	xor    %edx,%edx
+80101a9a:	89 f8                	mov    %edi,%eax
+80101a9c:	01 f0                	add    %esi,%eax
+80101a9e:	0f 92 c2             	setb   %dl
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+80101aa1:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80101aa6:	0f 87 d4 00 00 00    	ja     80101b80 <writei+0x120>
+80101aac:	85 d2                	test   %edx,%edx
+80101aae:	0f 85 cc 00 00 00    	jne    80101b80 <writei+0x120>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101ab4:	85 ff                	test   %edi,%edi
+80101ab6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80101abd:	74 72                	je     80101b31 <writei+0xd1>
+80101abf:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101ac0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+80101ac3:	89 f2                	mov    %esi,%edx
+80101ac5:	c1 ea 09             	shr    $0x9,%edx
+80101ac8:	89 f8                	mov    %edi,%eax
+80101aca:	e8 91 f8 ff ff       	call   80101360 <bmap>
+80101acf:	83 ec 08             	sub    $0x8,%esp
+80101ad2:	50                   	push   %eax
+80101ad3:	ff 37                	pushl  (%edi)
+80101ad5:	e8 f6 e5 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101ada:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+80101add:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101ae0:	89 c7                	mov    %eax,%edi
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101ae2:	89 f0                	mov    %esi,%eax
+80101ae4:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101ae9:	83 c4 0c             	add    $0xc,%esp
+80101aec:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101af1:	29 c1                	sub    %eax,%ecx
+    memmove(bp->data + off%BSIZE, src, m);
+80101af3:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101af7:	39 d9                	cmp    %ebx,%ecx
+80101af9:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(bp->data + off%BSIZE, src, m);
+80101afc:	53                   	push   %ebx
+80101afd:	ff 75 dc             	pushl  -0x24(%ebp)
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101b00:	01 de                	add    %ebx,%esi
+    memmove(bp->data + off%BSIZE, src, m);
+80101b02:	50                   	push   %eax
+80101b03:	e8 e8 2d 00 00       	call   801048f0 <memmove>
+    log_write(bp);
+80101b08:	89 3c 24             	mov    %edi,(%esp)
+80101b0b:	e8 60 12 00 00       	call   80102d70 <log_write>
+    brelse(bp);
+80101b10:	89 3c 24             	mov    %edi,(%esp)
+80101b13:	e8 c8 e6 ff ff       	call   801001e0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101b18:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+80101b1b:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80101b1e:	83 c4 10             	add    $0x10,%esp
+80101b21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101b24:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80101b27:	77 97                	ja     80101ac0 <writei+0x60>
+  }
+
+  if(n > 0 && off > ip->size){
+80101b29:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101b2c:	3b 70 58             	cmp    0x58(%eax),%esi
+80101b2f:	77 37                	ja     80101b68 <writei+0x108>
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+80101b31:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+80101b34:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b37:	5b                   	pop    %ebx
+80101b38:	5e                   	pop    %esi
+80101b39:	5f                   	pop    %edi
+80101b3a:	5d                   	pop    %ebp
+80101b3b:	c3                   	ret    
+80101b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80101b40:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101b44:	66 83 f8 09          	cmp    $0x9,%ax
+80101b48:	77 36                	ja     80101b80 <writei+0x120>
+80101b4a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101b51:	85 c0                	test   %eax,%eax
+80101b53:	74 2b                	je     80101b80 <writei+0x120>
+    return devsw[ip->major].write(ip, src, n);
+80101b55:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80101b58:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b5b:	5b                   	pop    %ebx
+80101b5c:	5e                   	pop    %esi
+80101b5d:	5f                   	pop    %edi
+80101b5e:	5d                   	pop    %ebp
+    return devsw[ip->major].write(ip, src, n);
+80101b5f:	ff e0                	jmp    *%eax
+80101b61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    ip->size = off;
+80101b68:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    iupdate(ip);
+80101b6b:	83 ec 0c             	sub    $0xc,%esp
+    ip->size = off;
+80101b6e:	89 70 58             	mov    %esi,0x58(%eax)
+    iupdate(ip);
+80101b71:	50                   	push   %eax
+80101b72:	e8 59 fa ff ff       	call   801015d0 <iupdate>
+80101b77:	83 c4 10             	add    $0x10,%esp
+80101b7a:	eb b5                	jmp    80101b31 <writei+0xd1>
+80101b7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      return -1;
+80101b80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101b85:	eb ad                	jmp    80101b34 <writei+0xd4>
+80101b87:	89 f6                	mov    %esi,%esi
+80101b89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101b90 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80101b90:	55                   	push   %ebp
+80101b91:	89 e5                	mov    %esp,%ebp
+80101b93:	83 ec 0c             	sub    $0xc,%esp
+  return strncmp(s, t, DIRSIZ);
+80101b96:	6a 0e                	push   $0xe
+80101b98:	ff 75 0c             	pushl  0xc(%ebp)
+80101b9b:	ff 75 08             	pushl  0x8(%ebp)
+80101b9e:	e8 bd 2d 00 00       	call   80104960 <strncmp>
+}
+80101ba3:	c9                   	leave  
+80101ba4:	c3                   	ret    
+80101ba5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101bb0 <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+80101bb0:	55                   	push   %ebp
+80101bb1:	89 e5                	mov    %esp,%ebp
+80101bb3:	57                   	push   %edi
+80101bb4:	56                   	push   %esi
+80101bb5:	53                   	push   %ebx
+80101bb6:	83 ec 1c             	sub    $0x1c,%esp
+80101bb9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+80101bbc:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80101bc1:	0f 85 85 00 00 00    	jne    80101c4c <dirlookup+0x9c>
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101bc7:	8b 53 58             	mov    0x58(%ebx),%edx
+80101bca:	31 ff                	xor    %edi,%edi
+80101bcc:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101bcf:	85 d2                	test   %edx,%edx
+80101bd1:	74 3e                	je     80101c11 <dirlookup+0x61>
+80101bd3:	90                   	nop
+80101bd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101bd8:	6a 10                	push   $0x10
+80101bda:	57                   	push   %edi
+80101bdb:	56                   	push   %esi
+80101bdc:	53                   	push   %ebx
+80101bdd:	e8 7e fd ff ff       	call   80101960 <readi>
+80101be2:	83 c4 10             	add    $0x10,%esp
+80101be5:	83 f8 10             	cmp    $0x10,%eax
+80101be8:	75 55                	jne    80101c3f <dirlookup+0x8f>
+      panic("dirlookup read");
+    if(de.inum == 0)
+80101bea:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101bef:	74 18                	je     80101c09 <dirlookup+0x59>
+  return strncmp(s, t, DIRSIZ);
+80101bf1:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101bf4:	83 ec 04             	sub    $0x4,%esp
+80101bf7:	6a 0e                	push   $0xe
+80101bf9:	50                   	push   %eax
+80101bfa:	ff 75 0c             	pushl  0xc(%ebp)
+80101bfd:	e8 5e 2d 00 00       	call   80104960 <strncmp>
+      continue;
+    if(namecmp(name, de.name) == 0){
+80101c02:	83 c4 10             	add    $0x10,%esp
+80101c05:	85 c0                	test   %eax,%eax
+80101c07:	74 17                	je     80101c20 <dirlookup+0x70>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101c09:	83 c7 10             	add    $0x10,%edi
+80101c0c:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101c0f:	72 c7                	jb     80101bd8 <dirlookup+0x28>
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+80101c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80101c14:	31 c0                	xor    %eax,%eax
+}
+80101c16:	5b                   	pop    %ebx
+80101c17:	5e                   	pop    %esi
+80101c18:	5f                   	pop    %edi
+80101c19:	5d                   	pop    %ebp
+80101c1a:	c3                   	ret    
+80101c1b:	90                   	nop
+80101c1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      if(poff)
+80101c20:	8b 45 10             	mov    0x10(%ebp),%eax
+80101c23:	85 c0                	test   %eax,%eax
+80101c25:	74 05                	je     80101c2c <dirlookup+0x7c>
+        *poff = off;
+80101c27:	8b 45 10             	mov    0x10(%ebp),%eax
+80101c2a:	89 38                	mov    %edi,(%eax)
+      inum = de.inum;
+80101c2c:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+      return iget(dp->dev, inum);
+80101c30:	8b 03                	mov    (%ebx),%eax
+80101c32:	e8 59 f6 ff ff       	call   80101290 <iget>
+}
+80101c37:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c3a:	5b                   	pop    %ebx
+80101c3b:	5e                   	pop    %esi
+80101c3c:	5f                   	pop    %edi
+80101c3d:	5d                   	pop    %ebp
+80101c3e:	c3                   	ret    
+      panic("dirlookup read");
+80101c3f:	83 ec 0c             	sub    $0xc,%esp
+80101c42:	68 f9 74 10 80       	push   $0x801074f9
+80101c47:	e8 44 e7 ff ff       	call   80100390 <panic>
+    panic("dirlookup not DIR");
+80101c4c:	83 ec 0c             	sub    $0xc,%esp
+80101c4f:	68 e7 74 10 80       	push   $0x801074e7
+80101c54:	e8 37 e7 ff ff       	call   80100390 <panic>
+80101c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101c60 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80101c60:	55                   	push   %ebp
+80101c61:	89 e5                	mov    %esp,%ebp
+80101c63:	57                   	push   %edi
+80101c64:	56                   	push   %esi
+80101c65:	53                   	push   %ebx
+80101c66:	89 cf                	mov    %ecx,%edi
+80101c68:	89 c3                	mov    %eax,%ebx
+80101c6a:	83 ec 1c             	sub    $0x1c,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+80101c6d:	80 38 2f             	cmpb   $0x2f,(%eax)
+{
+80101c70:	89 55 e0             	mov    %edx,-0x20(%ebp)
+  if(*path == '/')
+80101c73:	0f 84 67 01 00 00    	je     80101de0 <namex+0x180>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+80101c79:	e8 82 1b 00 00       	call   80103800 <myproc>
+  acquire(&icache.lock);
+80101c7e:	83 ec 0c             	sub    $0xc,%esp
+    ip = idup(myproc()->cwd);
+80101c81:	8b 70 68             	mov    0x68(%eax),%esi
+  acquire(&icache.lock);
+80101c84:	68 e0 09 11 80       	push   $0x801109e0
+80101c89:	e8 a2 2a 00 00       	call   80104730 <acquire>
+  ip->ref++;
+80101c8e:	83 46 08 01          	addl   $0x1,0x8(%esi)
+  release(&icache.lock);
+80101c92:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+80101c99:	e8 52 2b 00 00       	call   801047f0 <release>
+80101c9e:	83 c4 10             	add    $0x10,%esp
+80101ca1:	eb 08                	jmp    80101cab <namex+0x4b>
+80101ca3:	90                   	nop
+80101ca4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    path++;
+80101ca8:	83 c3 01             	add    $0x1,%ebx
+  while(*path == '/')
+80101cab:	0f b6 03             	movzbl (%ebx),%eax
+80101cae:	3c 2f                	cmp    $0x2f,%al
+80101cb0:	74 f6                	je     80101ca8 <namex+0x48>
+  if(*path == 0)
+80101cb2:	84 c0                	test   %al,%al
+80101cb4:	0f 84 ee 00 00 00    	je     80101da8 <namex+0x148>
+  while(*path != '/' && *path != 0)
+80101cba:	0f b6 03             	movzbl (%ebx),%eax
+80101cbd:	3c 2f                	cmp    $0x2f,%al
+80101cbf:	0f 84 b3 00 00 00    	je     80101d78 <namex+0x118>
+80101cc5:	84 c0                	test   %al,%al
+80101cc7:	89 da                	mov    %ebx,%edx
+80101cc9:	75 09                	jne    80101cd4 <namex+0x74>
+80101ccb:	e9 a8 00 00 00       	jmp    80101d78 <namex+0x118>
+80101cd0:	84 c0                	test   %al,%al
+80101cd2:	74 0a                	je     80101cde <namex+0x7e>
+    path++;
+80101cd4:	83 c2 01             	add    $0x1,%edx
+  while(*path != '/' && *path != 0)
+80101cd7:	0f b6 02             	movzbl (%edx),%eax
+80101cda:	3c 2f                	cmp    $0x2f,%al
+80101cdc:	75 f2                	jne    80101cd0 <namex+0x70>
+80101cde:	89 d1                	mov    %edx,%ecx
+80101ce0:	29 d9                	sub    %ebx,%ecx
+  if(len >= DIRSIZ)
+80101ce2:	83 f9 0d             	cmp    $0xd,%ecx
+80101ce5:	0f 8e 91 00 00 00    	jle    80101d7c <namex+0x11c>
+    memmove(name, s, DIRSIZ);
+80101ceb:	83 ec 04             	sub    $0x4,%esp
+80101cee:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101cf1:	6a 0e                	push   $0xe
+80101cf3:	53                   	push   %ebx
+80101cf4:	57                   	push   %edi
+80101cf5:	e8 f6 2b 00 00       	call   801048f0 <memmove>
+    path++;
+80101cfa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+    memmove(name, s, DIRSIZ);
+80101cfd:	83 c4 10             	add    $0x10,%esp
+    path++;
+80101d00:	89 d3                	mov    %edx,%ebx
+  while(*path == '/')
+80101d02:	80 3a 2f             	cmpb   $0x2f,(%edx)
+80101d05:	75 11                	jne    80101d18 <namex+0xb8>
+80101d07:	89 f6                	mov    %esi,%esi
+80101d09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    path++;
+80101d10:	83 c3 01             	add    $0x1,%ebx
+  while(*path == '/')
+80101d13:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80101d16:	74 f8                	je     80101d10 <namex+0xb0>
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+80101d18:	83 ec 0c             	sub    $0xc,%esp
+80101d1b:	56                   	push   %esi
+80101d1c:	e8 5f f9 ff ff       	call   80101680 <ilock>
+    if(ip->type != T_DIR){
+80101d21:	83 c4 10             	add    $0x10,%esp
+80101d24:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80101d29:	0f 85 91 00 00 00    	jne    80101dc0 <namex+0x160>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+80101d2f:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101d32:	85 d2                	test   %edx,%edx
+80101d34:	74 09                	je     80101d3f <namex+0xdf>
+80101d36:	80 3b 00             	cmpb   $0x0,(%ebx)
+80101d39:	0f 84 b7 00 00 00    	je     80101df6 <namex+0x196>
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80101d3f:	83 ec 04             	sub    $0x4,%esp
+80101d42:	6a 00                	push   $0x0
+80101d44:	57                   	push   %edi
+80101d45:	56                   	push   %esi
+80101d46:	e8 65 fe ff ff       	call   80101bb0 <dirlookup>
+80101d4b:	83 c4 10             	add    $0x10,%esp
+80101d4e:	85 c0                	test   %eax,%eax
+80101d50:	74 6e                	je     80101dc0 <namex+0x160>
+  iunlock(ip);
+80101d52:	83 ec 0c             	sub    $0xc,%esp
+80101d55:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101d58:	56                   	push   %esi
+80101d59:	e8 02 fa ff ff       	call   80101760 <iunlock>
+  iput(ip);
+80101d5e:	89 34 24             	mov    %esi,(%esp)
+80101d61:	e8 4a fa ff ff       	call   801017b0 <iput>
+80101d66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101d69:	83 c4 10             	add    $0x10,%esp
+80101d6c:	89 c6                	mov    %eax,%esi
+80101d6e:	e9 38 ff ff ff       	jmp    80101cab <namex+0x4b>
+80101d73:	90                   	nop
+80101d74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while(*path != '/' && *path != 0)
+80101d78:	89 da                	mov    %ebx,%edx
+80101d7a:	31 c9                	xor    %ecx,%ecx
+    memmove(name, s, len);
+80101d7c:	83 ec 04             	sub    $0x4,%esp
+80101d7f:	89 55 dc             	mov    %edx,-0x24(%ebp)
+80101d82:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80101d85:	51                   	push   %ecx
+80101d86:	53                   	push   %ebx
+80101d87:	57                   	push   %edi
+80101d88:	e8 63 2b 00 00       	call   801048f0 <memmove>
+    name[len] = 0;
+80101d8d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80101d90:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101d93:	83 c4 10             	add    $0x10,%esp
+80101d96:	c6 04 0f 00          	movb   $0x0,(%edi,%ecx,1)
+80101d9a:	89 d3                	mov    %edx,%ebx
+80101d9c:	e9 61 ff ff ff       	jmp    80101d02 <namex+0xa2>
+80101da1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+80101da8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101dab:	85 c0                	test   %eax,%eax
+80101dad:	75 5d                	jne    80101e0c <namex+0x1ac>
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101daf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101db2:	89 f0                	mov    %esi,%eax
+80101db4:	5b                   	pop    %ebx
+80101db5:	5e                   	pop    %esi
+80101db6:	5f                   	pop    %edi
+80101db7:	5d                   	pop    %ebp
+80101db8:	c3                   	ret    
+80101db9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  iunlock(ip);
+80101dc0:	83 ec 0c             	sub    $0xc,%esp
+80101dc3:	56                   	push   %esi
+80101dc4:	e8 97 f9 ff ff       	call   80101760 <iunlock>
+  iput(ip);
+80101dc9:	89 34 24             	mov    %esi,(%esp)
+      return 0;
+80101dcc:	31 f6                	xor    %esi,%esi
+  iput(ip);
+80101dce:	e8 dd f9 ff ff       	call   801017b0 <iput>
+      return 0;
+80101dd3:	83 c4 10             	add    $0x10,%esp
+}
+80101dd6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101dd9:	89 f0                	mov    %esi,%eax
+80101ddb:	5b                   	pop    %ebx
+80101ddc:	5e                   	pop    %esi
+80101ddd:	5f                   	pop    %edi
+80101dde:	5d                   	pop    %ebp
+80101ddf:	c3                   	ret    
+    ip = iget(ROOTDEV, ROOTINO);
+80101de0:	ba 01 00 00 00       	mov    $0x1,%edx
+80101de5:	b8 01 00 00 00       	mov    $0x1,%eax
+80101dea:	e8 a1 f4 ff ff       	call   80101290 <iget>
+80101def:	89 c6                	mov    %eax,%esi
+80101df1:	e9 b5 fe ff ff       	jmp    80101cab <namex+0x4b>
+      iunlock(ip);
+80101df6:	83 ec 0c             	sub    $0xc,%esp
+80101df9:	56                   	push   %esi
+80101dfa:	e8 61 f9 ff ff       	call   80101760 <iunlock>
+      return ip;
+80101dff:	83 c4 10             	add    $0x10,%esp
+}
+80101e02:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101e05:	89 f0                	mov    %esi,%eax
+80101e07:	5b                   	pop    %ebx
+80101e08:	5e                   	pop    %esi
+80101e09:	5f                   	pop    %edi
+80101e0a:	5d                   	pop    %ebp
+80101e0b:	c3                   	ret    
+    iput(ip);
+80101e0c:	83 ec 0c             	sub    $0xc,%esp
+80101e0f:	56                   	push   %esi
+    return 0;
+80101e10:	31 f6                	xor    %esi,%esi
+    iput(ip);
+80101e12:	e8 99 f9 ff ff       	call   801017b0 <iput>
+    return 0;
+80101e17:	83 c4 10             	add    $0x10,%esp
+80101e1a:	eb 93                	jmp    80101daf <namex+0x14f>
+80101e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101e20 <dirlink>:
+{
+80101e20:	55                   	push   %ebp
+80101e21:	89 e5                	mov    %esp,%ebp
+80101e23:	57                   	push   %edi
+80101e24:	56                   	push   %esi
+80101e25:	53                   	push   %ebx
+80101e26:	83 ec 20             	sub    $0x20,%esp
+80101e29:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80101e2c:	6a 00                	push   $0x0
+80101e2e:	ff 75 0c             	pushl  0xc(%ebp)
+80101e31:	53                   	push   %ebx
+80101e32:	e8 79 fd ff ff       	call   80101bb0 <dirlookup>
+80101e37:	83 c4 10             	add    $0x10,%esp
+80101e3a:	85 c0                	test   %eax,%eax
+80101e3c:	75 67                	jne    80101ea5 <dirlink+0x85>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101e3e:	8b 7b 58             	mov    0x58(%ebx),%edi
+80101e41:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101e44:	85 ff                	test   %edi,%edi
+80101e46:	74 29                	je     80101e71 <dirlink+0x51>
+80101e48:	31 ff                	xor    %edi,%edi
+80101e4a:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101e4d:	eb 09                	jmp    80101e58 <dirlink+0x38>
+80101e4f:	90                   	nop
+80101e50:	83 c7 10             	add    $0x10,%edi
+80101e53:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101e56:	73 19                	jae    80101e71 <dirlink+0x51>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e58:	6a 10                	push   $0x10
+80101e5a:	57                   	push   %edi
+80101e5b:	56                   	push   %esi
+80101e5c:	53                   	push   %ebx
+80101e5d:	e8 fe fa ff ff       	call   80101960 <readi>
+80101e62:	83 c4 10             	add    $0x10,%esp
+80101e65:	83 f8 10             	cmp    $0x10,%eax
+80101e68:	75 4e                	jne    80101eb8 <dirlink+0x98>
+    if(de.inum == 0)
+80101e6a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101e6f:	75 df                	jne    80101e50 <dirlink+0x30>
+  strncpy(de.name, name, DIRSIZ);
+80101e71:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101e74:	83 ec 04             	sub    $0x4,%esp
+80101e77:	6a 0e                	push   $0xe
+80101e79:	ff 75 0c             	pushl  0xc(%ebp)
+80101e7c:	50                   	push   %eax
+80101e7d:	e8 3e 2b 00 00       	call   801049c0 <strncpy>
+  de.inum = inum;
+80101e82:	8b 45 10             	mov    0x10(%ebp),%eax
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e85:	6a 10                	push   $0x10
+80101e87:	57                   	push   %edi
+80101e88:	56                   	push   %esi
+80101e89:	53                   	push   %ebx
+  de.inum = inum;
+80101e8a:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e8e:	e8 cd fb ff ff       	call   80101a60 <writei>
+80101e93:	83 c4 20             	add    $0x20,%esp
+80101e96:	83 f8 10             	cmp    $0x10,%eax
+80101e99:	75 2a                	jne    80101ec5 <dirlink+0xa5>
+  return 0;
+80101e9b:	31 c0                	xor    %eax,%eax
+}
+80101e9d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ea0:	5b                   	pop    %ebx
+80101ea1:	5e                   	pop    %esi
+80101ea2:	5f                   	pop    %edi
+80101ea3:	5d                   	pop    %ebp
+80101ea4:	c3                   	ret    
+    iput(ip);
+80101ea5:	83 ec 0c             	sub    $0xc,%esp
+80101ea8:	50                   	push   %eax
+80101ea9:	e8 02 f9 ff ff       	call   801017b0 <iput>
+    return -1;
+80101eae:	83 c4 10             	add    $0x10,%esp
+80101eb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101eb6:	eb e5                	jmp    80101e9d <dirlink+0x7d>
+      panic("dirlink read");
+80101eb8:	83 ec 0c             	sub    $0xc,%esp
+80101ebb:	68 08 75 10 80       	push   $0x80107508
+80101ec0:	e8 cb e4 ff ff       	call   80100390 <panic>
+    panic("dirlink");
+80101ec5:	83 ec 0c             	sub    $0xc,%esp
+80101ec8:	68 be 7b 10 80       	push   $0x80107bbe
+80101ecd:	e8 be e4 ff ff       	call   80100390 <panic>
+80101ed2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101ed9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101ee0 <namei>:
+
+struct inode*
+namei(char *path)
+{
+80101ee0:	55                   	push   %ebp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+80101ee1:	31 d2                	xor    %edx,%edx
+{
+80101ee3:	89 e5                	mov    %esp,%ebp
+80101ee5:	83 ec 18             	sub    $0x18,%esp
+  return namex(path, 0, name);
+80101ee8:	8b 45 08             	mov    0x8(%ebp),%eax
+80101eeb:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80101eee:	e8 6d fd ff ff       	call   80101c60 <namex>
+}
+80101ef3:	c9                   	leave  
+80101ef4:	c3                   	ret    
+80101ef5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101ef9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101f00 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+80101f00:	55                   	push   %ebp
+  return namex(path, 1, name);
+80101f01:	ba 01 00 00 00       	mov    $0x1,%edx
+{
+80101f06:	89 e5                	mov    %esp,%ebp
+  return namex(path, 1, name);
+80101f08:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80101f0b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80101f0e:	5d                   	pop    %ebp
+  return namex(path, 1, name);
+80101f0f:	e9 4c fd ff ff       	jmp    80101c60 <namex>
+80101f14:	66 90                	xchg   %ax,%ax
+80101f16:	66 90                	xchg   %ax,%ax
+80101f18:	66 90                	xchg   %ax,%ax
+80101f1a:	66 90                	xchg   %ax,%ax
+80101f1c:	66 90                	xchg   %ax,%ax
+80101f1e:	66 90                	xchg   %ax,%ax
+
+80101f20 <idestart>:
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80101f20:	55                   	push   %ebp
+80101f21:	89 e5                	mov    %esp,%ebp
+80101f23:	57                   	push   %edi
+80101f24:	56                   	push   %esi
+80101f25:	53                   	push   %ebx
+80101f26:	83 ec 0c             	sub    $0xc,%esp
+  if(b == 0)
+80101f29:	85 c0                	test   %eax,%eax
+80101f2b:	0f 84 b4 00 00 00    	je     80101fe5 <idestart+0xc5>
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+80101f31:	8b 58 08             	mov    0x8(%eax),%ebx
+80101f34:	89 c6                	mov    %eax,%esi
+80101f36:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx
+80101f3c:	0f 87 96 00 00 00    	ja     80101fd8 <idestart+0xb8>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80101f42:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80101f47:	89 f6                	mov    %esi,%esi
+80101f49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80101f50:	89 ca                	mov    %ecx,%edx
+80101f52:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80101f53:	83 e0 c0             	and    $0xffffffc0,%eax
+80101f56:	3c 40                	cmp    $0x40,%al
+80101f58:	75 f6                	jne    80101f50 <idestart+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80101f5a:	31 ff                	xor    %edi,%edi
+80101f5c:	ba f6 03 00 00       	mov    $0x3f6,%edx
+80101f61:	89 f8                	mov    %edi,%eax
+80101f63:	ee                   	out    %al,(%dx)
+80101f64:	b8 01 00 00 00       	mov    $0x1,%eax
+80101f69:	ba f2 01 00 00       	mov    $0x1f2,%edx
+80101f6e:	ee                   	out    %al,(%dx)
+80101f6f:	ba f3 01 00 00       	mov    $0x1f3,%edx
+80101f74:	89 d8                	mov    %ebx,%eax
+80101f76:	ee                   	out    %al,(%dx)
+
+  idewait(0);
+  outb(0x3f6, 0);  // generate interrupt
+  outb(0x1f2, sector_per_block);  // number of sectors
+  outb(0x1f3, sector & 0xff);
+  outb(0x1f4, (sector >> 8) & 0xff);
+80101f77:	89 d8                	mov    %ebx,%eax
+80101f79:	ba f4 01 00 00       	mov    $0x1f4,%edx
+80101f7e:	c1 f8 08             	sar    $0x8,%eax
+80101f81:	ee                   	out    %al,(%dx)
+80101f82:	ba f5 01 00 00       	mov    $0x1f5,%edx
+80101f87:	89 f8                	mov    %edi,%eax
+80101f89:	ee                   	out    %al,(%dx)
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+80101f8a:	0f b6 46 04          	movzbl 0x4(%esi),%eax
+80101f8e:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80101f93:	c1 e0 04             	shl    $0x4,%eax
+80101f96:	83 e0 10             	and    $0x10,%eax
+80101f99:	83 c8 e0             	or     $0xffffffe0,%eax
+80101f9c:	ee                   	out    %al,(%dx)
+  if(b->flags & B_DIRTY){
+80101f9d:	f6 06 04             	testb  $0x4,(%esi)
+80101fa0:	75 16                	jne    80101fb8 <idestart+0x98>
+80101fa2:	b8 20 00 00 00       	mov    $0x20,%eax
+80101fa7:	89 ca                	mov    %ecx,%edx
+80101fa9:	ee                   	out    %al,(%dx)
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+80101faa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101fad:	5b                   	pop    %ebx
+80101fae:	5e                   	pop    %esi
+80101faf:	5f                   	pop    %edi
+80101fb0:	5d                   	pop    %ebp
+80101fb1:	c3                   	ret    
+80101fb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101fb8:	b8 30 00 00 00       	mov    $0x30,%eax
+80101fbd:	89 ca                	mov    %ecx,%edx
+80101fbf:	ee                   	out    %al,(%dx)
+  asm volatile("cld; rep outsl" :
+80101fc0:	b9 80 00 00 00       	mov    $0x80,%ecx
+    outsl(0x1f0, b->data, BSIZE/4);
+80101fc5:	83 c6 5c             	add    $0x5c,%esi
+80101fc8:	ba f0 01 00 00       	mov    $0x1f0,%edx
+80101fcd:	fc                   	cld    
+80101fce:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+}
+80101fd0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101fd3:	5b                   	pop    %ebx
+80101fd4:	5e                   	pop    %esi
+80101fd5:	5f                   	pop    %edi
+80101fd6:	5d                   	pop    %ebp
+80101fd7:	c3                   	ret    
+    panic("incorrect blockno");
+80101fd8:	83 ec 0c             	sub    $0xc,%esp
+80101fdb:	68 74 75 10 80       	push   $0x80107574
+80101fe0:	e8 ab e3 ff ff       	call   80100390 <panic>
+    panic("idestart");
+80101fe5:	83 ec 0c             	sub    $0xc,%esp
+80101fe8:	68 6b 75 10 80       	push   $0x8010756b
+80101fed:	e8 9e e3 ff ff       	call   80100390 <panic>
+80101ff2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102000 <ideinit>:
+{
+80102000:	55                   	push   %ebp
+80102001:	89 e5                	mov    %esp,%ebp
+80102003:	83 ec 10             	sub    $0x10,%esp
+  initlock(&idelock, "ide");
+80102006:	68 86 75 10 80       	push   $0x80107586
+8010200b:	68 80 a5 10 80       	push   $0x8010a580
+80102010:	e8 db 25 00 00       	call   801045f0 <initlock>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+80102015:	58                   	pop    %eax
+80102016:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+8010201b:	5a                   	pop    %edx
+8010201c:	83 e8 01             	sub    $0x1,%eax
+8010201f:	50                   	push   %eax
+80102020:	6a 0e                	push   $0xe
+80102022:	e8 a9 02 00 00       	call   801022d0 <ioapicenable>
+80102027:	83 c4 10             	add    $0x10,%esp
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010202a:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010202f:	90                   	nop
+80102030:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102031:	83 e0 c0             	and    $0xffffffc0,%eax
+80102034:	3c 40                	cmp    $0x40,%al
+80102036:	75 f8                	jne    80102030 <ideinit+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102038:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+8010203d:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102042:	ee                   	out    %al,(%dx)
+80102043:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102048:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010204d:	eb 06                	jmp    80102055 <ideinit+0x55>
+8010204f:	90                   	nop
+  for(i=0; i<1000; i++){
+80102050:	83 e9 01             	sub    $0x1,%ecx
+80102053:	74 0f                	je     80102064 <ideinit+0x64>
+80102055:	ec                   	in     (%dx),%al
+    if(inb(0x1f7) != 0){
+80102056:	84 c0                	test   %al,%al
+80102058:	74 f6                	je     80102050 <ideinit+0x50>
+      havedisk1 = 1;
+8010205a:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+80102061:	00 00 00 
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102064:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+80102069:	ba f6 01 00 00       	mov    $0x1f6,%edx
+8010206e:	ee                   	out    %al,(%dx)
+}
+8010206f:	c9                   	leave  
+80102070:	c3                   	ret    
+80102071:	eb 0d                	jmp    80102080 <ideintr>
+80102073:	90                   	nop
+80102074:	90                   	nop
+80102075:	90                   	nop
+80102076:	90                   	nop
+80102077:	90                   	nop
+80102078:	90                   	nop
+80102079:	90                   	nop
+8010207a:	90                   	nop
+8010207b:	90                   	nop
+8010207c:	90                   	nop
+8010207d:	90                   	nop
+8010207e:	90                   	nop
+8010207f:	90                   	nop
+
+80102080 <ideintr>:
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102080:	55                   	push   %ebp
+80102081:	89 e5                	mov    %esp,%ebp
+80102083:	57                   	push   %edi
+80102084:	56                   	push   %esi
+80102085:	53                   	push   %ebx
+80102086:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+80102089:	68 80 a5 10 80       	push   $0x8010a580
+8010208e:	e8 9d 26 00 00       	call   80104730 <acquire>
+
+  if((b = idequeue) == 0){
+80102093:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+80102099:	83 c4 10             	add    $0x10,%esp
+8010209c:	85 db                	test   %ebx,%ebx
+8010209e:	74 67                	je     80102107 <ideintr+0x87>
+    release(&idelock);
+    return;
+  }
+  idequeue = b->qnext;
+801020a0:	8b 43 58             	mov    0x58(%ebx),%eax
+801020a3:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+801020a8:	8b 3b                	mov    (%ebx),%edi
+801020aa:	f7 c7 04 00 00 00    	test   $0x4,%edi
+801020b0:	75 31                	jne    801020e3 <ideintr+0x63>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801020b2:	ba f7 01 00 00       	mov    $0x1f7,%edx
+801020b7:	89 f6                	mov    %esi,%esi
+801020b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801020c0:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+801020c1:	89 c6                	mov    %eax,%esi
+801020c3:	83 e6 c0             	and    $0xffffffc0,%esi
+801020c6:	89 f1                	mov    %esi,%ecx
+801020c8:	80 f9 40             	cmp    $0x40,%cl
+801020cb:	75 f3                	jne    801020c0 <ideintr+0x40>
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+801020cd:	a8 21                	test   $0x21,%al
+801020cf:	75 12                	jne    801020e3 <ideintr+0x63>
+    insl(0x1f0, b->data, BSIZE/4);
+801020d1:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+  asm volatile("cld; rep insl" :
+801020d4:	b9 80 00 00 00       	mov    $0x80,%ecx
+801020d9:	ba f0 01 00 00       	mov    $0x1f0,%edx
+801020de:	fc                   	cld    
+801020df:	f3 6d                	rep insl (%dx),%es:(%edi)
+801020e1:	8b 3b                	mov    (%ebx),%edi
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+801020e3:	83 e7 fb             	and    $0xfffffffb,%edi
+  wakeup(b);
+801020e6:	83 ec 0c             	sub    $0xc,%esp
+  b->flags &= ~B_DIRTY;
+801020e9:	89 f9                	mov    %edi,%ecx
+801020eb:	83 c9 02             	or     $0x2,%ecx
+801020ee:	89 0b                	mov    %ecx,(%ebx)
+  wakeup(b);
+801020f0:	53                   	push   %ebx
+801020f1:	e8 aa 1e 00 00       	call   80103fa0 <wakeup>
+
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+801020f6:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+801020fb:	83 c4 10             	add    $0x10,%esp
+801020fe:	85 c0                	test   %eax,%eax
+80102100:	74 05                	je     80102107 <ideintr+0x87>
+    idestart(idequeue);
+80102102:	e8 19 fe ff ff       	call   80101f20 <idestart>
+    release(&idelock);
+80102107:	83 ec 0c             	sub    $0xc,%esp
+8010210a:	68 80 a5 10 80       	push   $0x8010a580
+8010210f:	e8 dc 26 00 00       	call   801047f0 <release>
+
+  release(&idelock);
+}
+80102114:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102117:	5b                   	pop    %ebx
+80102118:	5e                   	pop    %esi
+80102119:	5f                   	pop    %edi
+8010211a:	5d                   	pop    %ebp
+8010211b:	c3                   	ret    
+8010211c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102120 <iderw>:
+// Sync buf with disk.
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+80102120:	55                   	push   %ebp
+80102121:	89 e5                	mov    %esp,%ebp
+80102123:	53                   	push   %ebx
+80102124:	83 ec 10             	sub    $0x10,%esp
+80102127:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+8010212a:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010212d:	50                   	push   %eax
+8010212e:	e8 6d 24 00 00       	call   801045a0 <holdingsleep>
+80102133:	83 c4 10             	add    $0x10,%esp
+80102136:	85 c0                	test   %eax,%eax
+80102138:	0f 84 c6 00 00 00    	je     80102204 <iderw+0xe4>
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+8010213e:	8b 03                	mov    (%ebx),%eax
+80102140:	83 e0 06             	and    $0x6,%eax
+80102143:	83 f8 02             	cmp    $0x2,%eax
+80102146:	0f 84 ab 00 00 00    	je     801021f7 <iderw+0xd7>
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+8010214c:	8b 53 04             	mov    0x4(%ebx),%edx
+8010214f:	85 d2                	test   %edx,%edx
+80102151:	74 0d                	je     80102160 <iderw+0x40>
+80102153:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+80102158:	85 c0                	test   %eax,%eax
+8010215a:	0f 84 b1 00 00 00    	je     80102211 <iderw+0xf1>
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+80102160:	83 ec 0c             	sub    $0xc,%esp
+80102163:	68 80 a5 10 80       	push   $0x8010a580
+80102168:	e8 c3 25 00 00       	call   80104730 <acquire>
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010216d:	8b 15 64 a5 10 80    	mov    0x8010a564,%edx
+80102173:	83 c4 10             	add    $0x10,%esp
+  b->qnext = 0;
+80102176:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010217d:	85 d2                	test   %edx,%edx
+8010217f:	75 09                	jne    8010218a <iderw+0x6a>
+80102181:	eb 6d                	jmp    801021f0 <iderw+0xd0>
+80102183:	90                   	nop
+80102184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102188:	89 c2                	mov    %eax,%edx
+8010218a:	8b 42 58             	mov    0x58(%edx),%eax
+8010218d:	85 c0                	test   %eax,%eax
+8010218f:	75 f7                	jne    80102188 <iderw+0x68>
+80102191:	83 c2 58             	add    $0x58,%edx
+    ;
+  *pp = b;
+80102194:	89 1a                	mov    %ebx,(%edx)
+
+  // Start disk if necessary.
+  if(idequeue == b)
+80102196:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+8010219c:	74 42                	je     801021e0 <iderw+0xc0>
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+8010219e:	8b 03                	mov    (%ebx),%eax
+801021a0:	83 e0 06             	and    $0x6,%eax
+801021a3:	83 f8 02             	cmp    $0x2,%eax
+801021a6:	74 23                	je     801021cb <iderw+0xab>
+801021a8:	90                   	nop
+801021a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    sleep(b, &idelock);
+801021b0:	83 ec 08             	sub    $0x8,%esp
+801021b3:	68 80 a5 10 80       	push   $0x8010a580
+801021b8:	53                   	push   %ebx
+801021b9:	e8 22 1c 00 00       	call   80103de0 <sleep>
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+801021be:	8b 03                	mov    (%ebx),%eax
+801021c0:	83 c4 10             	add    $0x10,%esp
+801021c3:	83 e0 06             	and    $0x6,%eax
+801021c6:	83 f8 02             	cmp    $0x2,%eax
+801021c9:	75 e5                	jne    801021b0 <iderw+0x90>
+  }
+
+
+  release(&idelock);
+801021cb:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+}
+801021d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801021d5:	c9                   	leave  
+  release(&idelock);
+801021d6:	e9 15 26 00 00       	jmp    801047f0 <release>
+801021db:	90                   	nop
+801021dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    idestart(b);
+801021e0:	89 d8                	mov    %ebx,%eax
+801021e2:	e8 39 fd ff ff       	call   80101f20 <idestart>
+801021e7:	eb b5                	jmp    8010219e <iderw+0x7e>
+801021e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+801021f0:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+801021f5:	eb 9d                	jmp    80102194 <iderw+0x74>
+    panic("iderw: nothing to do");
+801021f7:	83 ec 0c             	sub    $0xc,%esp
+801021fa:	68 a0 75 10 80       	push   $0x801075a0
+801021ff:	e8 8c e1 ff ff       	call   80100390 <panic>
+    panic("iderw: buf not locked");
+80102204:	83 ec 0c             	sub    $0xc,%esp
+80102207:	68 8a 75 10 80       	push   $0x8010758a
+8010220c:	e8 7f e1 ff ff       	call   80100390 <panic>
+    panic("iderw: ide disk 1 not present");
+80102211:	83 ec 0c             	sub    $0xc,%esp
+80102214:	68 b5 75 10 80       	push   $0x801075b5
+80102219:	e8 72 e1 ff ff       	call   80100390 <panic>
+8010221e:	66 90                	xchg   %ax,%ax
+
+80102220 <ioapicinit>:
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+80102220:	55                   	push   %ebp
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+80102221:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+80102228:	00 c0 fe 
+{
+8010222b:	89 e5                	mov    %esp,%ebp
+8010222d:	56                   	push   %esi
+8010222e:	53                   	push   %ebx
+  ioapic->reg = reg;
+8010222f:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+80102236:	00 00 00 
+  return ioapic->data;
+80102239:	a1 34 26 11 80       	mov    0x80112634,%eax
+8010223e:	8b 58 10             	mov    0x10(%eax),%ebx
+  ioapic->reg = reg;
+80102241:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  return ioapic->data;
+80102247:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+8010224d:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+80102254:	c1 eb 10             	shr    $0x10,%ebx
+  return ioapic->data;
+80102257:	8b 41 10             	mov    0x10(%ecx),%eax
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+8010225a:	0f b6 db             	movzbl %bl,%ebx
+  id = ioapicread(REG_ID) >> 24;
+8010225d:	c1 e8 18             	shr    $0x18,%eax
+  if(id != ioapicid)
+80102260:	39 c2                	cmp    %eax,%edx
+80102262:	74 16                	je     8010227a <ioapicinit+0x5a>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+80102264:	83 ec 0c             	sub    $0xc,%esp
+80102267:	68 d4 75 10 80       	push   $0x801075d4
+8010226c:	e8 ef e3 ff ff       	call   80100660 <cprintf>
+80102271:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102277:	83 c4 10             	add    $0x10,%esp
+8010227a:	83 c3 21             	add    $0x21,%ebx
+{
+8010227d:	ba 10 00 00 00       	mov    $0x10,%edx
+80102282:	b8 20 00 00 00       	mov    $0x20,%eax
+80102287:	89 f6                	mov    %esi,%esi
+80102289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  ioapic->reg = reg;
+80102290:	89 11                	mov    %edx,(%ecx)
+  ioapic->data = data;
+80102292:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102298:	89 c6                	mov    %eax,%esi
+8010229a:	81 ce 00 00 01 00    	or     $0x10000,%esi
+801022a0:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+801022a3:	89 71 10             	mov    %esi,0x10(%ecx)
+801022a6:	8d 72 01             	lea    0x1(%edx),%esi
+801022a9:	83 c2 02             	add    $0x2,%edx
+  for(i = 0; i <= maxintr; i++){
+801022ac:	39 d8                	cmp    %ebx,%eax
+  ioapic->reg = reg;
+801022ae:	89 31                	mov    %esi,(%ecx)
+  ioapic->data = data;
+801022b0:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801022b6:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+  for(i = 0; i <= maxintr; i++){
+801022bd:	75 d1                	jne    80102290 <ioapicinit+0x70>
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+801022bf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801022c2:	5b                   	pop    %ebx
+801022c3:	5e                   	pop    %esi
+801022c4:	5d                   	pop    %ebp
+801022c5:	c3                   	ret    
+801022c6:	8d 76 00             	lea    0x0(%esi),%esi
+801022c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801022d0 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+801022d0:	55                   	push   %ebp
+  ioapic->reg = reg;
+801022d1:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+{
+801022d7:	89 e5                	mov    %esp,%ebp
+801022d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+801022dc:	8d 50 20             	lea    0x20(%eax),%edx
+801022df:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+  ioapic->reg = reg;
+801022e3:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801022e5:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801022eb:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+801022ee:	89 51 10             	mov    %edx,0x10(%ecx)
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801022f1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  ioapic->reg = reg;
+801022f4:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801022f6:	a1 34 26 11 80       	mov    0x80112634,%eax
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801022fb:	c1 e2 18             	shl    $0x18,%edx
+  ioapic->data = data;
+801022fe:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80102301:	5d                   	pop    %ebp
+80102302:	c3                   	ret    
+80102303:	66 90                	xchg   %ax,%ax
+80102305:	66 90                	xchg   %ax,%ax
+80102307:	66 90                	xchg   %ax,%ax
+80102309:	66 90                	xchg   %ax,%ax
+8010230b:	66 90                	xchg   %ax,%ax
+8010230d:	66 90                	xchg   %ax,%ax
+8010230f:	90                   	nop
+
+80102310 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+80102310:	55                   	push   %ebp
+80102311:	89 e5                	mov    %esp,%ebp
+80102313:	53                   	push   %ebx
+80102314:	83 ec 04             	sub    $0x4,%esp
+80102317:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+8010231a:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+80102320:	75 70                	jne    80102392 <kfree+0x82>
+80102322:	81 fb a8 57 11 80    	cmp    $0x801157a8,%ebx
+80102328:	72 68                	jb     80102392 <kfree+0x82>
+8010232a:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80102330:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102335:	77 5b                	ja     80102392 <kfree+0x82>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+80102337:	83 ec 04             	sub    $0x4,%esp
+8010233a:	68 00 10 00 00       	push   $0x1000
+8010233f:	6a 01                	push   $0x1
+80102341:	53                   	push   %ebx
+80102342:	e8 f9 24 00 00       	call   80104840 <memset>
+
+  if(kmem.use_lock)
+80102347:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+8010234d:	83 c4 10             	add    $0x10,%esp
+80102350:	85 d2                	test   %edx,%edx
+80102352:	75 2c                	jne    80102380 <kfree+0x70>
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+80102354:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102359:	89 03                	mov    %eax,(%ebx)
+  kmem.freelist = r;
+  if(kmem.use_lock)
+8010235b:	a1 74 26 11 80       	mov    0x80112674,%eax
+  kmem.freelist = r;
+80102360:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
+  if(kmem.use_lock)
+80102366:	85 c0                	test   %eax,%eax
+80102368:	75 06                	jne    80102370 <kfree+0x60>
+    release(&kmem.lock);
+}
+8010236a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010236d:	c9                   	leave  
+8010236e:	c3                   	ret    
+8010236f:	90                   	nop
+    release(&kmem.lock);
+80102370:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+}
+80102377:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010237a:	c9                   	leave  
+    release(&kmem.lock);
+8010237b:	e9 70 24 00 00       	jmp    801047f0 <release>
+    acquire(&kmem.lock);
+80102380:	83 ec 0c             	sub    $0xc,%esp
+80102383:	68 40 26 11 80       	push   $0x80112640
+80102388:	e8 a3 23 00 00       	call   80104730 <acquire>
+8010238d:	83 c4 10             	add    $0x10,%esp
+80102390:	eb c2                	jmp    80102354 <kfree+0x44>
+    panic("kfree");
+80102392:	83 ec 0c             	sub    $0xc,%esp
+80102395:	68 06 76 10 80       	push   $0x80107606
+8010239a:	e8 f1 df ff ff       	call   80100390 <panic>
+8010239f:	90                   	nop
+
+801023a0 <freerange>:
+{
+801023a0:	55                   	push   %ebp
+801023a1:	89 e5                	mov    %esp,%ebp
+801023a3:	56                   	push   %esi
+801023a4:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+801023a5:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+801023a8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  p = (char*)PGROUNDUP((uint)vstart);
+801023ab:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801023b1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023b7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801023bd:	39 de                	cmp    %ebx,%esi
+801023bf:	72 23                	jb     801023e4 <freerange+0x44>
+801023c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+801023c8:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+801023ce:	83 ec 0c             	sub    $0xc,%esp
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023d1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+801023d7:	50                   	push   %eax
+801023d8:	e8 33 ff ff ff       	call   80102310 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023dd:	83 c4 10             	add    $0x10,%esp
+801023e0:	39 f3                	cmp    %esi,%ebx
+801023e2:	76 e4                	jbe    801023c8 <freerange+0x28>
+}
+801023e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801023e7:	5b                   	pop    %ebx
+801023e8:	5e                   	pop    %esi
+801023e9:	5d                   	pop    %ebp
+801023ea:	c3                   	ret    
+801023eb:	90                   	nop
+801023ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801023f0 <kinit1>:
+{
+801023f0:	55                   	push   %ebp
+801023f1:	89 e5                	mov    %esp,%ebp
+801023f3:	56                   	push   %esi
+801023f4:	53                   	push   %ebx
+801023f5:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+801023f8:	83 ec 08             	sub    $0x8,%esp
+801023fb:	68 0c 76 10 80       	push   $0x8010760c
+80102400:	68 40 26 11 80       	push   $0x80112640
+80102405:	e8 e6 21 00 00       	call   801045f0 <initlock>
+  p = (char*)PGROUNDUP((uint)vstart);
+8010240a:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010240d:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+80102410:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
+80102417:	00 00 00 
+  p = (char*)PGROUNDUP((uint)vstart);
+8010241a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102420:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102426:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010242c:	39 de                	cmp    %ebx,%esi
+8010242e:	72 1c                	jb     8010244c <kinit1+0x5c>
+    kfree(p);
+80102430:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+80102436:	83 ec 0c             	sub    $0xc,%esp
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102439:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+8010243f:	50                   	push   %eax
+80102440:	e8 cb fe ff ff       	call   80102310 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102445:	83 c4 10             	add    $0x10,%esp
+80102448:	39 de                	cmp    %ebx,%esi
+8010244a:	73 e4                	jae    80102430 <kinit1+0x40>
+}
+8010244c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010244f:	5b                   	pop    %ebx
+80102450:	5e                   	pop    %esi
+80102451:	5d                   	pop    %ebp
+80102452:	c3                   	ret    
+80102453:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102460 <kinit2>:
+{
+80102460:	55                   	push   %ebp
+80102461:	89 e5                	mov    %esp,%ebp
+80102463:	56                   	push   %esi
+80102464:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+80102465:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102468:	8b 75 0c             	mov    0xc(%ebp),%esi
+  p = (char*)PGROUNDUP((uint)vstart);
+8010246b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102471:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102477:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010247d:	39 de                	cmp    %ebx,%esi
+8010247f:	72 23                	jb     801024a4 <kinit2+0x44>
+80102481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102488:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+8010248e:	83 ec 0c             	sub    $0xc,%esp
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102491:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102497:	50                   	push   %eax
+80102498:	e8 73 fe ff ff       	call   80102310 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010249d:	83 c4 10             	add    $0x10,%esp
+801024a0:	39 de                	cmp    %ebx,%esi
+801024a2:	73 e4                	jae    80102488 <kinit2+0x28>
+  kmem.use_lock = 1;
+801024a4:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
+801024ab:	00 00 00 
+}
+801024ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801024b1:	5b                   	pop    %ebx
+801024b2:	5e                   	pop    %esi
+801024b3:	5d                   	pop    %ebp
+801024b4:	c3                   	ret    
+801024b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801024b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801024c0 <kalloc>:
+char*
+kalloc(void)
+{
+  struct run *r;
+
+  if(kmem.use_lock)
+801024c0:	a1 74 26 11 80       	mov    0x80112674,%eax
+801024c5:	85 c0                	test   %eax,%eax
+801024c7:	75 1f                	jne    801024e8 <kalloc+0x28>
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+801024c9:	a1 78 26 11 80       	mov    0x80112678,%eax
+  if(r)
+801024ce:	85 c0                	test   %eax,%eax
+801024d0:	74 0e                	je     801024e0 <kalloc+0x20>
+    kmem.freelist = r->next;
+801024d2:	8b 10                	mov    (%eax),%edx
+801024d4:	89 15 78 26 11 80    	mov    %edx,0x80112678
+801024da:	c3                   	ret    
+801024db:	90                   	nop
+801024dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return (char*)r;
+}
+801024e0:	f3 c3                	repz ret 
+801024e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+{
+801024e8:	55                   	push   %ebp
+801024e9:	89 e5                	mov    %esp,%ebp
+801024eb:	83 ec 24             	sub    $0x24,%esp
+    acquire(&kmem.lock);
+801024ee:	68 40 26 11 80       	push   $0x80112640
+801024f3:	e8 38 22 00 00       	call   80104730 <acquire>
+  r = kmem.freelist;
+801024f8:	a1 78 26 11 80       	mov    0x80112678,%eax
+  if(r)
+801024fd:	83 c4 10             	add    $0x10,%esp
+80102500:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+80102506:	85 c0                	test   %eax,%eax
+80102508:	74 08                	je     80102512 <kalloc+0x52>
+    kmem.freelist = r->next;
+8010250a:	8b 08                	mov    (%eax),%ecx
+8010250c:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
+  if(kmem.use_lock)
+80102512:	85 d2                	test   %edx,%edx
+80102514:	74 16                	je     8010252c <kalloc+0x6c>
+    release(&kmem.lock);
+80102516:	83 ec 0c             	sub    $0xc,%esp
+80102519:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010251c:	68 40 26 11 80       	push   $0x80112640
+80102521:	e8 ca 22 00 00       	call   801047f0 <release>
+  return (char*)r;
+80102526:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    release(&kmem.lock);
+80102529:	83 c4 10             	add    $0x10,%esp
+}
+8010252c:	c9                   	leave  
+8010252d:	c3                   	ret    
+8010252e:	66 90                	xchg   %ax,%ax
+
+80102530 <kbdgetc>:
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102530:	ba 64 00 00 00       	mov    $0x64,%edx
+80102535:	ec                   	in     (%dx),%al
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+80102536:	a8 01                	test   $0x1,%al
+80102538:	0f 84 c2 00 00 00    	je     80102600 <kbdgetc+0xd0>
+8010253e:	ba 60 00 00 00       	mov    $0x60,%edx
+80102543:	ec                   	in     (%dx),%al
+    return -1;
+  data = inb(KBDATAP);
+80102544:	0f b6 d0             	movzbl %al,%edx
+80102547:	8b 0d b4 a5 10 80    	mov    0x8010a5b4,%ecx
+
+  if(data == 0xE0){
+8010254d:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
+80102553:	0f 84 7f 00 00 00    	je     801025d8 <kbdgetc+0xa8>
+{
+80102559:	55                   	push   %ebp
+8010255a:	89 e5                	mov    %esp,%ebp
+8010255c:	53                   	push   %ebx
+8010255d:	89 cb                	mov    %ecx,%ebx
+8010255f:	83 e3 40             	and    $0x40,%ebx
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+80102562:	84 c0                	test   %al,%al
+80102564:	78 4a                	js     801025b0 <kbdgetc+0x80>
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+80102566:	85 db                	test   %ebx,%ebx
+80102568:	74 09                	je     80102573 <kbdgetc+0x43>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+8010256a:	83 c8 80             	or     $0xffffff80,%eax
+    shift &= ~E0ESC;
+8010256d:	83 e1 bf             	and    $0xffffffbf,%ecx
+    data |= 0x80;
+80102570:	0f b6 d0             	movzbl %al,%edx
+  }
+
+  shift |= shiftcode[data];
+80102573:	0f b6 82 40 77 10 80 	movzbl -0x7fef88c0(%edx),%eax
+8010257a:	09 c1                	or     %eax,%ecx
+  shift ^= togglecode[data];
+8010257c:	0f b6 82 40 76 10 80 	movzbl -0x7fef89c0(%edx),%eax
+80102583:	31 c1                	xor    %eax,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102585:	89 c8                	mov    %ecx,%eax
+  shift ^= togglecode[data];
+80102587:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+  c = charcode[shift & (CTL | SHIFT)][data];
+8010258d:	83 e0 03             	and    $0x3,%eax
+  if(shift & CAPSLOCK){
+80102590:	83 e1 08             	and    $0x8,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102593:	8b 04 85 20 76 10 80 	mov    -0x7fef89e0(,%eax,4),%eax
+8010259a:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+  if(shift & CAPSLOCK){
+8010259e:	74 31                	je     801025d1 <kbdgetc+0xa1>
+    if('a' <= c && c <= 'z')
+801025a0:	8d 50 9f             	lea    -0x61(%eax),%edx
+801025a3:	83 fa 19             	cmp    $0x19,%edx
+801025a6:	77 40                	ja     801025e8 <kbdgetc+0xb8>
+      c += 'A' - 'a';
+801025a8:	83 e8 20             	sub    $0x20,%eax
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+801025ab:	5b                   	pop    %ebx
+801025ac:	5d                   	pop    %ebp
+801025ad:	c3                   	ret    
+801025ae:	66 90                	xchg   %ax,%ax
+    data = (shift & E0ESC ? data : data & 0x7F);
+801025b0:	83 e0 7f             	and    $0x7f,%eax
+801025b3:	85 db                	test   %ebx,%ebx
+801025b5:	0f 44 d0             	cmove  %eax,%edx
+    shift &= ~(shiftcode[data] | E0ESC);
+801025b8:	0f b6 82 40 77 10 80 	movzbl -0x7fef88c0(%edx),%eax
+801025bf:	83 c8 40             	or     $0x40,%eax
+801025c2:	0f b6 c0             	movzbl %al,%eax
+801025c5:	f7 d0                	not    %eax
+801025c7:	21 c1                	and    %eax,%ecx
+    return 0;
+801025c9:	31 c0                	xor    %eax,%eax
+    shift &= ~(shiftcode[data] | E0ESC);
+801025cb:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+}
+801025d1:	5b                   	pop    %ebx
+801025d2:	5d                   	pop    %ebp
+801025d3:	c3                   	ret    
+801025d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    shift |= E0ESC;
+801025d8:	83 c9 40             	or     $0x40,%ecx
+    return 0;
+801025db:	31 c0                	xor    %eax,%eax
+    shift |= E0ESC;
+801025dd:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+    return 0;
+801025e3:	c3                   	ret    
+801025e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    else if('A' <= c && c <= 'Z')
+801025e8:	8d 48 bf             	lea    -0x41(%eax),%ecx
+      c += 'a' - 'A';
+801025eb:	8d 50 20             	lea    0x20(%eax),%edx
+}
+801025ee:	5b                   	pop    %ebx
+      c += 'a' - 'A';
+801025ef:	83 f9 1a             	cmp    $0x1a,%ecx
+801025f2:	0f 42 c2             	cmovb  %edx,%eax
+}
+801025f5:	5d                   	pop    %ebp
+801025f6:	c3                   	ret    
+801025f7:	89 f6                	mov    %esi,%esi
+801025f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80102600:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80102605:	c3                   	ret    
+80102606:	8d 76 00             	lea    0x0(%esi),%esi
+80102609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102610 <kbdintr>:
+
+void
+kbdintr(void)
+{
+80102610:	55                   	push   %ebp
+80102611:	89 e5                	mov    %esp,%ebp
+80102613:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(kbdgetc);
+80102616:	68 30 25 10 80       	push   $0x80102530
+8010261b:	e8 f0 e1 ff ff       	call   80100810 <consoleintr>
+}
+80102620:	83 c4 10             	add    $0x10,%esp
+80102623:	c9                   	leave  
+80102624:	c3                   	ret    
+80102625:	66 90                	xchg   %ax,%ax
+80102627:	66 90                	xchg   %ax,%ax
+80102629:	66 90                	xchg   %ax,%ax
+8010262b:	66 90                	xchg   %ax,%ax
+8010262d:	66 90                	xchg   %ax,%ax
+8010262f:	90                   	nop
+
+80102630 <lapicinit>:
+}
+
+void
+lapicinit(void)
+{
+  if(!lapic)
+80102630:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+{
+80102635:	55                   	push   %ebp
+80102636:	89 e5                	mov    %esp,%ebp
+  if(!lapic)
+80102638:	85 c0                	test   %eax,%eax
+8010263a:	0f 84 c8 00 00 00    	je     80102708 <lapicinit+0xd8>
+  lapic[index] = value;
+80102640:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+80102647:	01 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010264a:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010264d:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+80102654:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102657:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010265a:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+80102661:	00 02 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102664:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102667:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+8010266e:	96 98 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102671:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102674:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+8010267b:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010267e:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102681:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+80102688:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010268b:	8b 50 20             	mov    0x20(%eax),%edx
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+8010268e:	8b 50 30             	mov    0x30(%eax),%edx
+80102691:	c1 ea 10             	shr    $0x10,%edx
+80102694:	80 fa 03             	cmp    $0x3,%dl
+80102697:	77 77                	ja     80102710 <lapicinit+0xe0>
+  lapic[index] = value;
+80102699:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+801026a0:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026a3:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801026a6:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+801026ad:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026b0:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801026b3:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+801026ba:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026bd:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801026c0:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801026c7:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026ca:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801026cd:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+801026d4:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026d7:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801026da:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+801026e1:	85 08 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026e4:	8b 50 20             	mov    0x20(%eax),%edx
+801026e7:	89 f6                	mov    %esi,%esi
+801026e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+801026f0:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+801026f6:	80 e6 10             	and    $0x10,%dh
+801026f9:	75 f5                	jne    801026f0 <lapicinit+0xc0>
+  lapic[index] = value;
+801026fb:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+80102702:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102705:	8b 40 20             	mov    0x20(%eax),%eax
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+80102708:	5d                   	pop    %ebp
+80102709:	c3                   	ret    
+8010270a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  lapic[index] = value;
+80102710:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80102717:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010271a:	8b 50 20             	mov    0x20(%eax),%edx
+8010271d:	e9 77 ff ff ff       	jmp    80102699 <lapicinit+0x69>
+80102722:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102729:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102730 <lapicid>:
+
+int
+lapicid(void)
+{
+  if (!lapic)
+80102730:	8b 15 7c 26 11 80    	mov    0x8011267c,%edx
+{
+80102736:	55                   	push   %ebp
+80102737:	31 c0                	xor    %eax,%eax
+80102739:	89 e5                	mov    %esp,%ebp
+  if (!lapic)
+8010273b:	85 d2                	test   %edx,%edx
+8010273d:	74 06                	je     80102745 <lapicid+0x15>
+    return 0;
+  return lapic[ID] >> 24;
+8010273f:	8b 42 20             	mov    0x20(%edx),%eax
+80102742:	c1 e8 18             	shr    $0x18,%eax
+}
+80102745:	5d                   	pop    %ebp
+80102746:	c3                   	ret    
+80102747:	89 f6                	mov    %esi,%esi
+80102749:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102750 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+  if(lapic)
+80102750:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+{
+80102755:	55                   	push   %ebp
+80102756:	89 e5                	mov    %esp,%ebp
+  if(lapic)
+80102758:	85 c0                	test   %eax,%eax
+8010275a:	74 0d                	je     80102769 <lapiceoi+0x19>
+  lapic[index] = value;
+8010275c:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102763:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102766:	8b 40 20             	mov    0x20(%eax),%eax
+    lapicw(EOI, 0);
+}
+80102769:	5d                   	pop    %ebp
+8010276a:	c3                   	ret    
+8010276b:	90                   	nop
+8010276c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102770 <microdelay>:
+
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+80102770:	55                   	push   %ebp
+80102771:	89 e5                	mov    %esp,%ebp
+}
+80102773:	5d                   	pop    %ebp
+80102774:	c3                   	ret    
+80102775:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102779:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102780 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+80102780:	55                   	push   %ebp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102781:	b8 0f 00 00 00       	mov    $0xf,%eax
+80102786:	ba 70 00 00 00       	mov    $0x70,%edx
+8010278b:	89 e5                	mov    %esp,%ebp
+8010278d:	53                   	push   %ebx
+8010278e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102791:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102794:	ee                   	out    %al,(%dx)
+80102795:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010279a:	ba 71 00 00 00       	mov    $0x71,%edx
+8010279f:	ee                   	out    %al,(%dx)
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+801027a0:	31 c0                	xor    %eax,%eax
+  wrv[1] = addr >> 4;
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+801027a2:	c1 e3 18             	shl    $0x18,%ebx
+  wrv[0] = 0;
+801027a5:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+  wrv[1] = addr >> 4;
+801027ab:	89 c8                	mov    %ecx,%eax
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+801027ad:	c1 e9 0c             	shr    $0xc,%ecx
+  wrv[1] = addr >> 4;
+801027b0:	c1 e8 04             	shr    $0x4,%eax
+  lapicw(ICRHI, apicid<<24);
+801027b3:	89 da                	mov    %ebx,%edx
+    lapicw(ICRLO, STARTUP | (addr>>12));
+801027b5:	80 cd 06             	or     $0x6,%ch
+  wrv[1] = addr >> 4;
+801027b8:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+  lapic[index] = value;
+801027be:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801027c3:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801027c9:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801027cc:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+801027d3:	c5 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027d6:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801027d9:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+801027e0:	85 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027e3:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801027e6:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801027ec:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801027ef:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801027f5:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801027f8:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801027fe:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102801:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102807:	8b 40 20             	mov    0x20(%eax),%eax
+    microdelay(200);
+  }
+}
+8010280a:	5b                   	pop    %ebx
+8010280b:	5d                   	pop    %ebp
+8010280c:	c3                   	ret    
+8010280d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102810 <cmostime>:
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void
+cmostime(struct rtcdate *r)
+{
+80102810:	55                   	push   %ebp
+80102811:	b8 0b 00 00 00       	mov    $0xb,%eax
+80102816:	ba 70 00 00 00       	mov    $0x70,%edx
+8010281b:	89 e5                	mov    %esp,%ebp
+8010281d:	57                   	push   %edi
+8010281e:	56                   	push   %esi
+8010281f:	53                   	push   %ebx
+80102820:	83 ec 4c             	sub    $0x4c,%esp
+80102823:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102824:	ba 71 00 00 00       	mov    $0x71,%edx
+80102829:	ec                   	in     (%dx),%al
+8010282a:	83 e0 04             	and    $0x4,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010282d:	bb 70 00 00 00       	mov    $0x70,%ebx
+80102832:	88 45 b3             	mov    %al,-0x4d(%ebp)
+80102835:	8d 76 00             	lea    0x0(%esi),%esi
+80102838:	31 c0                	xor    %eax,%eax
+8010283a:	89 da                	mov    %ebx,%edx
+8010283c:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010283d:	b9 71 00 00 00       	mov    $0x71,%ecx
+80102842:	89 ca                	mov    %ecx,%edx
+80102844:	ec                   	in     (%dx),%al
+80102845:	88 45 b7             	mov    %al,-0x49(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102848:	89 da                	mov    %ebx,%edx
+8010284a:	b8 02 00 00 00       	mov    $0x2,%eax
+8010284f:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102850:	89 ca                	mov    %ecx,%edx
+80102852:	ec                   	in     (%dx),%al
+80102853:	88 45 b6             	mov    %al,-0x4a(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102856:	89 da                	mov    %ebx,%edx
+80102858:	b8 04 00 00 00       	mov    $0x4,%eax
+8010285d:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010285e:	89 ca                	mov    %ecx,%edx
+80102860:	ec                   	in     (%dx),%al
+80102861:	88 45 b5             	mov    %al,-0x4b(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102864:	89 da                	mov    %ebx,%edx
+80102866:	b8 07 00 00 00       	mov    $0x7,%eax
+8010286b:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010286c:	89 ca                	mov    %ecx,%edx
+8010286e:	ec                   	in     (%dx),%al
+8010286f:	88 45 b4             	mov    %al,-0x4c(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102872:	89 da                	mov    %ebx,%edx
+80102874:	b8 08 00 00 00       	mov    $0x8,%eax
+80102879:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010287a:	89 ca                	mov    %ecx,%edx
+8010287c:	ec                   	in     (%dx),%al
+8010287d:	89 c7                	mov    %eax,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010287f:	89 da                	mov    %ebx,%edx
+80102881:	b8 09 00 00 00       	mov    $0x9,%eax
+80102886:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102887:	89 ca                	mov    %ecx,%edx
+80102889:	ec                   	in     (%dx),%al
+8010288a:	89 c6                	mov    %eax,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010288c:	89 da                	mov    %ebx,%edx
+8010288e:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102893:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102894:	89 ca                	mov    %ecx,%edx
+80102896:	ec                   	in     (%dx),%al
+  bcd = (sb & (1 << 2)) == 0;
+
+  // make sure CMOS doesn't modify time while we read it
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+80102897:	84 c0                	test   %al,%al
+80102899:	78 9d                	js     80102838 <cmostime+0x28>
+  return inb(CMOS_RETURN);
+8010289b:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+8010289f:	89 fa                	mov    %edi,%edx
+801028a1:	0f b6 fa             	movzbl %dl,%edi
+801028a4:	89 f2                	mov    %esi,%edx
+801028a6:	0f b6 f2             	movzbl %dl,%esi
+801028a9:	89 7d c8             	mov    %edi,-0x38(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801028ac:	89 da                	mov    %ebx,%edx
+801028ae:	89 75 cc             	mov    %esi,-0x34(%ebp)
+801028b1:	89 45 b8             	mov    %eax,-0x48(%ebp)
+801028b4:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+801028b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
+801028bb:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+801028bf:	89 45 c0             	mov    %eax,-0x40(%ebp)
+801028c2:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+801028c6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+801028c9:	31 c0                	xor    %eax,%eax
+801028cb:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801028cc:	89 ca                	mov    %ecx,%edx
+801028ce:	ec                   	in     (%dx),%al
+801028cf:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801028d2:	89 da                	mov    %ebx,%edx
+801028d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+801028d7:	b8 02 00 00 00       	mov    $0x2,%eax
+801028dc:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801028dd:	89 ca                	mov    %ecx,%edx
+801028df:	ec                   	in     (%dx),%al
+801028e0:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801028e3:	89 da                	mov    %ebx,%edx
+801028e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+801028e8:	b8 04 00 00 00       	mov    $0x4,%eax
+801028ed:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801028ee:	89 ca                	mov    %ecx,%edx
+801028f0:	ec                   	in     (%dx),%al
+801028f1:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801028f4:	89 da                	mov    %ebx,%edx
+801028f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+801028f9:	b8 07 00 00 00       	mov    $0x7,%eax
+801028fe:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801028ff:	89 ca                	mov    %ecx,%edx
+80102901:	ec                   	in     (%dx),%al
+80102902:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102905:	89 da                	mov    %ebx,%edx
+80102907:	89 45 dc             	mov    %eax,-0x24(%ebp)
+8010290a:	b8 08 00 00 00       	mov    $0x8,%eax
+8010290f:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102910:	89 ca                	mov    %ecx,%edx
+80102912:	ec                   	in     (%dx),%al
+80102913:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102916:	89 da                	mov    %ebx,%edx
+80102918:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010291b:	b8 09 00 00 00       	mov    $0x9,%eax
+80102920:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102921:	89 ca                	mov    %ecx,%edx
+80102923:	ec                   	in     (%dx),%al
+80102924:	0f b6 c0             	movzbl %al,%eax
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+80102927:	83 ec 04             	sub    $0x4,%esp
+  return inb(CMOS_RETURN);
+8010292a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+8010292d:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80102930:	6a 18                	push   $0x18
+80102932:	50                   	push   %eax
+80102933:	8d 45 b8             	lea    -0x48(%ebp),%eax
+80102936:	50                   	push   %eax
+80102937:	e8 54 1f 00 00       	call   80104890 <memcmp>
+8010293c:	83 c4 10             	add    $0x10,%esp
+8010293f:	85 c0                	test   %eax,%eax
+80102941:	0f 85 f1 fe ff ff    	jne    80102838 <cmostime+0x28>
+      break;
+  }
+
+  // convert
+  if(bcd) {
+80102947:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+8010294b:	75 78                	jne    801029c5 <cmostime+0x1b5>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+8010294d:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102950:	89 c2                	mov    %eax,%edx
+80102952:	83 e0 0f             	and    $0xf,%eax
+80102955:	c1 ea 04             	shr    $0x4,%edx
+80102958:	8d 14 92             	lea    (%edx,%edx,4),%edx
+8010295b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+8010295e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    CONV(minute);
+80102961:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102964:	89 c2                	mov    %eax,%edx
+80102966:	83 e0 0f             	and    $0xf,%eax
+80102969:	c1 ea 04             	shr    $0x4,%edx
+8010296c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+8010296f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102972:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    CONV(hour  );
+80102975:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102978:	89 c2                	mov    %eax,%edx
+8010297a:	83 e0 0f             	and    $0xf,%eax
+8010297d:	c1 ea 04             	shr    $0x4,%edx
+80102980:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102983:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102986:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    CONV(day   );
+80102989:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+8010298c:	89 c2                	mov    %eax,%edx
+8010298e:	83 e0 0f             	and    $0xf,%eax
+80102991:	c1 ea 04             	shr    $0x4,%edx
+80102994:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102997:	8d 04 50             	lea    (%eax,%edx,2),%eax
+8010299a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    CONV(month );
+8010299d:	8b 45 c8             	mov    -0x38(%ebp),%eax
+801029a0:	89 c2                	mov    %eax,%edx
+801029a2:	83 e0 0f             	and    $0xf,%eax
+801029a5:	c1 ea 04             	shr    $0x4,%edx
+801029a8:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801029ab:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801029ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    CONV(year  );
+801029b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
+801029b4:	89 c2                	mov    %eax,%edx
+801029b6:	83 e0 0f             	and    $0xf,%eax
+801029b9:	c1 ea 04             	shr    $0x4,%edx
+801029bc:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801029bf:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801029c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+801029c5:	8b 75 08             	mov    0x8(%ebp),%esi
+801029c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
+801029cb:	89 06                	mov    %eax,(%esi)
+801029cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
+801029d0:	89 46 04             	mov    %eax,0x4(%esi)
+801029d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
+801029d6:	89 46 08             	mov    %eax,0x8(%esi)
+801029d9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+801029dc:	89 46 0c             	mov    %eax,0xc(%esi)
+801029df:	8b 45 c8             	mov    -0x38(%ebp),%eax
+801029e2:	89 46 10             	mov    %eax,0x10(%esi)
+801029e5:	8b 45 cc             	mov    -0x34(%ebp),%eax
+801029e8:	89 46 14             	mov    %eax,0x14(%esi)
+  r->year += 2000;
+801029eb:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+}
+801029f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801029f5:	5b                   	pop    %ebx
+801029f6:	5e                   	pop    %esi
+801029f7:	5f                   	pop    %edi
+801029f8:	5d                   	pop    %ebp
+801029f9:	c3                   	ret    
+801029fa:	66 90                	xchg   %ax,%ax
+801029fc:	66 90                	xchg   %ax,%ax
+801029fe:	66 90                	xchg   %ax,%ax
+
+80102a00 <install_trans>:
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102a00:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102a06:	85 c9                	test   %ecx,%ecx
+80102a08:	0f 8e 8a 00 00 00    	jle    80102a98 <install_trans+0x98>
+{
+80102a0e:	55                   	push   %ebp
+80102a0f:	89 e5                	mov    %esp,%ebp
+80102a11:	57                   	push   %edi
+80102a12:	56                   	push   %esi
+80102a13:	53                   	push   %ebx
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102a14:	31 db                	xor    %ebx,%ebx
+{
+80102a16:	83 ec 0c             	sub    $0xc,%esp
+80102a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+80102a20:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102a25:	83 ec 08             	sub    $0x8,%esp
+80102a28:	01 d8                	add    %ebx,%eax
+80102a2a:	83 c0 01             	add    $0x1,%eax
+80102a2d:	50                   	push   %eax
+80102a2e:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102a34:	e8 97 d6 ff ff       	call   801000d0 <bread>
+80102a39:	89 c7                	mov    %eax,%edi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102a3b:	58                   	pop    %eax
+80102a3c:	5a                   	pop    %edx
+80102a3d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
+80102a44:	ff 35 c4 26 11 80    	pushl  0x801126c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102a4a:	83 c3 01             	add    $0x1,%ebx
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102a4d:	e8 7e d6 ff ff       	call   801000d0 <bread>
+80102a52:	89 c6                	mov    %eax,%esi
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+80102a54:	8d 47 5c             	lea    0x5c(%edi),%eax
+80102a57:	83 c4 0c             	add    $0xc,%esp
+80102a5a:	68 00 02 00 00       	push   $0x200
+80102a5f:	50                   	push   %eax
+80102a60:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102a63:	50                   	push   %eax
+80102a64:	e8 87 1e 00 00       	call   801048f0 <memmove>
+    bwrite(dbuf);  // write dst to disk
+80102a69:	89 34 24             	mov    %esi,(%esp)
+80102a6c:	e8 2f d7 ff ff       	call   801001a0 <bwrite>
+    brelse(lbuf);
+80102a71:	89 3c 24             	mov    %edi,(%esp)
+80102a74:	e8 67 d7 ff ff       	call   801001e0 <brelse>
+    brelse(dbuf);
+80102a79:	89 34 24             	mov    %esi,(%esp)
+80102a7c:	e8 5f d7 ff ff       	call   801001e0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102a81:	83 c4 10             	add    $0x10,%esp
+80102a84:	39 1d c8 26 11 80    	cmp    %ebx,0x801126c8
+80102a8a:	7f 94                	jg     80102a20 <install_trans+0x20>
+  }
+}
+80102a8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102a8f:	5b                   	pop    %ebx
+80102a90:	5e                   	pop    %esi
+80102a91:	5f                   	pop    %edi
+80102a92:	5d                   	pop    %ebp
+80102a93:	c3                   	ret    
+80102a94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102a98:	f3 c3                	repz ret 
+80102a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102aa0 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+80102aa0:	55                   	push   %ebp
+80102aa1:	89 e5                	mov    %esp,%ebp
+80102aa3:	56                   	push   %esi
+80102aa4:	53                   	push   %ebx
+  struct buf *buf = bread(log.dev, log.start);
+80102aa5:	83 ec 08             	sub    $0x8,%esp
+80102aa8:	ff 35 b4 26 11 80    	pushl  0x801126b4
+80102aae:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102ab4:	e8 17 d6 ff ff       	call   801000d0 <bread>
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+80102ab9:	8b 1d c8 26 11 80    	mov    0x801126c8,%ebx
+  for (i = 0; i < log.lh.n; i++) {
+80102abf:	83 c4 10             	add    $0x10,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80102ac2:	89 c6                	mov    %eax,%esi
+  for (i = 0; i < log.lh.n; i++) {
+80102ac4:	85 db                	test   %ebx,%ebx
+  hb->n = log.lh.n;
+80102ac6:	89 58 5c             	mov    %ebx,0x5c(%eax)
+  for (i = 0; i < log.lh.n; i++) {
+80102ac9:	7e 16                	jle    80102ae1 <write_head+0x41>
+80102acb:	c1 e3 02             	shl    $0x2,%ebx
+80102ace:	31 d2                	xor    %edx,%edx
+    hb->block[i] = log.lh.block[i];
+80102ad0:	8b 8a cc 26 11 80    	mov    -0x7feed934(%edx),%ecx
+80102ad6:	89 4c 16 60          	mov    %ecx,0x60(%esi,%edx,1)
+80102ada:	83 c2 04             	add    $0x4,%edx
+  for (i = 0; i < log.lh.n; i++) {
+80102add:	39 da                	cmp    %ebx,%edx
+80102adf:	75 ef                	jne    80102ad0 <write_head+0x30>
+  }
+  bwrite(buf);
+80102ae1:	83 ec 0c             	sub    $0xc,%esp
+80102ae4:	56                   	push   %esi
+80102ae5:	e8 b6 d6 ff ff       	call   801001a0 <bwrite>
+  brelse(buf);
+80102aea:	89 34 24             	mov    %esi,(%esp)
+80102aed:	e8 ee d6 ff ff       	call   801001e0 <brelse>
+}
+80102af2:	83 c4 10             	add    $0x10,%esp
+80102af5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102af8:	5b                   	pop    %ebx
+80102af9:	5e                   	pop    %esi
+80102afa:	5d                   	pop    %ebp
+80102afb:	c3                   	ret    
+80102afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102b00 <initlog>:
+{
+80102b00:	55                   	push   %ebp
+80102b01:	89 e5                	mov    %esp,%ebp
+80102b03:	53                   	push   %ebx
+80102b04:	83 ec 2c             	sub    $0x2c,%esp
+80102b07:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&log.lock, "log");
+80102b0a:	68 40 78 10 80       	push   $0x80107840
+80102b0f:	68 80 26 11 80       	push   $0x80112680
+80102b14:	e8 d7 1a 00 00       	call   801045f0 <initlock>
+  readsb(dev, &sb);
+80102b19:	58                   	pop    %eax
+80102b1a:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102b1d:	5a                   	pop    %edx
+80102b1e:	50                   	push   %eax
+80102b1f:	53                   	push   %ebx
+80102b20:	e8 1b e9 ff ff       	call   80101440 <readsb>
+  log.size = sb.nlog;
+80102b25:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  log.start = sb.logstart;
+80102b28:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  struct buf *buf = bread(log.dev, log.start);
+80102b2b:	59                   	pop    %ecx
+  log.dev = dev;
+80102b2c:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
+  log.size = sb.nlog;
+80102b32:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
+  log.start = sb.logstart;
+80102b38:	a3 b4 26 11 80       	mov    %eax,0x801126b4
+  struct buf *buf = bread(log.dev, log.start);
+80102b3d:	5a                   	pop    %edx
+80102b3e:	50                   	push   %eax
+80102b3f:	53                   	push   %ebx
+80102b40:	e8 8b d5 ff ff       	call   801000d0 <bread>
+  log.lh.n = lh->n;
+80102b45:	8b 58 5c             	mov    0x5c(%eax),%ebx
+  for (i = 0; i < log.lh.n; i++) {
+80102b48:	83 c4 10             	add    $0x10,%esp
+80102b4b:	85 db                	test   %ebx,%ebx
+  log.lh.n = lh->n;
+80102b4d:	89 1d c8 26 11 80    	mov    %ebx,0x801126c8
+  for (i = 0; i < log.lh.n; i++) {
+80102b53:	7e 1c                	jle    80102b71 <initlog+0x71>
+80102b55:	c1 e3 02             	shl    $0x2,%ebx
+80102b58:	31 d2                	xor    %edx,%edx
+80102b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    log.lh.block[i] = lh->block[i];
+80102b60:	8b 4c 10 60          	mov    0x60(%eax,%edx,1),%ecx
+80102b64:	83 c2 04             	add    $0x4,%edx
+80102b67:	89 8a c8 26 11 80    	mov    %ecx,-0x7feed938(%edx)
+  for (i = 0; i < log.lh.n; i++) {
+80102b6d:	39 d3                	cmp    %edx,%ebx
+80102b6f:	75 ef                	jne    80102b60 <initlog+0x60>
+  brelse(buf);
+80102b71:	83 ec 0c             	sub    $0xc,%esp
+80102b74:	50                   	push   %eax
+80102b75:	e8 66 d6 ff ff       	call   801001e0 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(); // if committed, copy from log to disk
+80102b7a:	e8 81 fe ff ff       	call   80102a00 <install_trans>
+  log.lh.n = 0;
+80102b7f:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102b86:	00 00 00 
+  write_head(); // clear the log
+80102b89:	e8 12 ff ff ff       	call   80102aa0 <write_head>
+}
+80102b8e:	83 c4 10             	add    $0x10,%esp
+80102b91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102b94:	c9                   	leave  
+80102b95:	c3                   	ret    
+80102b96:	8d 76 00             	lea    0x0(%esi),%esi
+80102b99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102ba0 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+80102ba0:	55                   	push   %ebp
+80102ba1:	89 e5                	mov    %esp,%ebp
+80102ba3:	83 ec 14             	sub    $0x14,%esp
+  acquire(&log.lock);
+80102ba6:	68 80 26 11 80       	push   $0x80112680
+80102bab:	e8 80 1b 00 00       	call   80104730 <acquire>
+80102bb0:	83 c4 10             	add    $0x10,%esp
+80102bb3:	eb 18                	jmp    80102bcd <begin_op+0x2d>
+80102bb5:	8d 76 00             	lea    0x0(%esi),%esi
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+80102bb8:	83 ec 08             	sub    $0x8,%esp
+80102bbb:	68 80 26 11 80       	push   $0x80112680
+80102bc0:	68 80 26 11 80       	push   $0x80112680
+80102bc5:	e8 16 12 00 00       	call   80103de0 <sleep>
+80102bca:	83 c4 10             	add    $0x10,%esp
+    if(log.committing){
+80102bcd:	a1 c0 26 11 80       	mov    0x801126c0,%eax
+80102bd2:	85 c0                	test   %eax,%eax
+80102bd4:	75 e2                	jne    80102bb8 <begin_op+0x18>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+80102bd6:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102bdb:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102be1:	83 c0 01             	add    $0x1,%eax
+80102be4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102be7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102bea:	83 fa 1e             	cmp    $0x1e,%edx
+80102bed:	7f c9                	jg     80102bb8 <begin_op+0x18>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+80102bef:	83 ec 0c             	sub    $0xc,%esp
+      log.outstanding += 1;
+80102bf2:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+      release(&log.lock);
+80102bf7:	68 80 26 11 80       	push   $0x80112680
+80102bfc:	e8 ef 1b 00 00       	call   801047f0 <release>
+      break;
+    }
+  }
+}
+80102c01:	83 c4 10             	add    $0x10,%esp
+80102c04:	c9                   	leave  
+80102c05:	c3                   	ret    
+80102c06:	8d 76 00             	lea    0x0(%esi),%esi
+80102c09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102c10 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80102c10:	55                   	push   %ebp
+80102c11:	89 e5                	mov    %esp,%ebp
+80102c13:	57                   	push   %edi
+80102c14:	56                   	push   %esi
+80102c15:	53                   	push   %ebx
+80102c16:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+
+  acquire(&log.lock);
+80102c19:	68 80 26 11 80       	push   $0x80112680
+80102c1e:	e8 0d 1b 00 00       	call   80104730 <acquire>
+  log.outstanding -= 1;
+80102c23:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+  if(log.committing)
+80102c28:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
+80102c2e:	83 c4 10             	add    $0x10,%esp
+  log.outstanding -= 1;
+80102c31:	8d 58 ff             	lea    -0x1(%eax),%ebx
+  if(log.committing)
+80102c34:	85 f6                	test   %esi,%esi
+  log.outstanding -= 1;
+80102c36:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
+  if(log.committing)
+80102c3c:	0f 85 1a 01 00 00    	jne    80102d5c <end_op+0x14c>
+    panic("log.committing");
+  if(log.outstanding == 0){
+80102c42:	85 db                	test   %ebx,%ebx
+80102c44:	0f 85 ee 00 00 00    	jne    80102d38 <end_op+0x128>
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+80102c4a:	83 ec 0c             	sub    $0xc,%esp
+    log.committing = 1;
+80102c4d:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
+80102c54:	00 00 00 
+  release(&log.lock);
+80102c57:	68 80 26 11 80       	push   $0x80112680
+80102c5c:	e8 8f 1b 00 00       	call   801047f0 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+80102c61:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102c67:	83 c4 10             	add    $0x10,%esp
+80102c6a:	85 c9                	test   %ecx,%ecx
+80102c6c:	0f 8e 85 00 00 00    	jle    80102cf7 <end_op+0xe7>
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80102c72:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102c77:	83 ec 08             	sub    $0x8,%esp
+80102c7a:	01 d8                	add    %ebx,%eax
+80102c7c:	83 c0 01             	add    $0x1,%eax
+80102c7f:	50                   	push   %eax
+80102c80:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102c86:	e8 45 d4 ff ff       	call   801000d0 <bread>
+80102c8b:	89 c6                	mov    %eax,%esi
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102c8d:	58                   	pop    %eax
+80102c8e:	5a                   	pop    %edx
+80102c8f:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
+80102c96:	ff 35 c4 26 11 80    	pushl  0x801126c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102c9c:	83 c3 01             	add    $0x1,%ebx
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102c9f:	e8 2c d4 ff ff       	call   801000d0 <bread>
+80102ca4:	89 c7                	mov    %eax,%edi
+    memmove(to->data, from->data, BSIZE);
+80102ca6:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102ca9:	83 c4 0c             	add    $0xc,%esp
+80102cac:	68 00 02 00 00       	push   $0x200
+80102cb1:	50                   	push   %eax
+80102cb2:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102cb5:	50                   	push   %eax
+80102cb6:	e8 35 1c 00 00       	call   801048f0 <memmove>
+    bwrite(to);  // write the log
+80102cbb:	89 34 24             	mov    %esi,(%esp)
+80102cbe:	e8 dd d4 ff ff       	call   801001a0 <bwrite>
+    brelse(from);
+80102cc3:	89 3c 24             	mov    %edi,(%esp)
+80102cc6:	e8 15 d5 ff ff       	call   801001e0 <brelse>
+    brelse(to);
+80102ccb:	89 34 24             	mov    %esi,(%esp)
+80102cce:	e8 0d d5 ff ff       	call   801001e0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102cd3:	83 c4 10             	add    $0x10,%esp
+80102cd6:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
+80102cdc:	7c 94                	jl     80102c72 <end_op+0x62>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+80102cde:	e8 bd fd ff ff       	call   80102aa0 <write_head>
+    install_trans(); // Now install writes to home locations
+80102ce3:	e8 18 fd ff ff       	call   80102a00 <install_trans>
+    log.lh.n = 0;
+80102ce8:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102cef:	00 00 00 
+    write_head();    // Erase the transaction from the log
+80102cf2:	e8 a9 fd ff ff       	call   80102aa0 <write_head>
+    acquire(&log.lock);
+80102cf7:	83 ec 0c             	sub    $0xc,%esp
+80102cfa:	68 80 26 11 80       	push   $0x80112680
+80102cff:	e8 2c 1a 00 00       	call   80104730 <acquire>
+    wakeup(&log);
+80102d04:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+    log.committing = 0;
+80102d0b:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
+80102d12:	00 00 00 
+    wakeup(&log);
+80102d15:	e8 86 12 00 00       	call   80103fa0 <wakeup>
+    release(&log.lock);
+80102d1a:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102d21:	e8 ca 1a 00 00       	call   801047f0 <release>
+80102d26:	83 c4 10             	add    $0x10,%esp
+}
+80102d29:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102d2c:	5b                   	pop    %ebx
+80102d2d:	5e                   	pop    %esi
+80102d2e:	5f                   	pop    %edi
+80102d2f:	5d                   	pop    %ebp
+80102d30:	c3                   	ret    
+80102d31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wakeup(&log);
+80102d38:	83 ec 0c             	sub    $0xc,%esp
+80102d3b:	68 80 26 11 80       	push   $0x80112680
+80102d40:	e8 5b 12 00 00       	call   80103fa0 <wakeup>
+  release(&log.lock);
+80102d45:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102d4c:	e8 9f 1a 00 00       	call   801047f0 <release>
+80102d51:	83 c4 10             	add    $0x10,%esp
+}
+80102d54:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102d57:	5b                   	pop    %ebx
+80102d58:	5e                   	pop    %esi
+80102d59:	5f                   	pop    %edi
+80102d5a:	5d                   	pop    %ebp
+80102d5b:	c3                   	ret    
+    panic("log.committing");
+80102d5c:	83 ec 0c             	sub    $0xc,%esp
+80102d5f:	68 44 78 10 80       	push   $0x80107844
+80102d64:	e8 27 d6 ff ff       	call   80100390 <panic>
+80102d69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102d70 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80102d70:	55                   	push   %ebp
+80102d71:	89 e5                	mov    %esp,%ebp
+80102d73:	53                   	push   %ebx
+80102d74:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102d77:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+{
+80102d7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102d80:	83 fa 1d             	cmp    $0x1d,%edx
+80102d83:	0f 8f 9d 00 00 00    	jg     80102e26 <log_write+0xb6>
+80102d89:	a1 b8 26 11 80       	mov    0x801126b8,%eax
+80102d8e:	83 e8 01             	sub    $0x1,%eax
+80102d91:	39 c2                	cmp    %eax,%edx
+80102d93:	0f 8d 8d 00 00 00    	jge    80102e26 <log_write+0xb6>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+80102d99:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102d9e:	85 c0                	test   %eax,%eax
+80102da0:	0f 8e 8d 00 00 00    	jle    80102e33 <log_write+0xc3>
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+80102da6:	83 ec 0c             	sub    $0xc,%esp
+80102da9:	68 80 26 11 80       	push   $0x80112680
+80102dae:	e8 7d 19 00 00       	call   80104730 <acquire>
+  for (i = 0; i < log.lh.n; i++) {
+80102db3:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102db9:	83 c4 10             	add    $0x10,%esp
+80102dbc:	83 f9 00             	cmp    $0x0,%ecx
+80102dbf:	7e 57                	jle    80102e18 <log_write+0xa8>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102dc1:	8b 53 08             	mov    0x8(%ebx),%edx
+  for (i = 0; i < log.lh.n; i++) {
+80102dc4:	31 c0                	xor    %eax,%eax
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102dc6:	3b 15 cc 26 11 80    	cmp    0x801126cc,%edx
+80102dcc:	75 0b                	jne    80102dd9 <log_write+0x69>
+80102dce:	eb 38                	jmp    80102e08 <log_write+0x98>
+80102dd0:	39 14 85 cc 26 11 80 	cmp    %edx,-0x7feed934(,%eax,4)
+80102dd7:	74 2f                	je     80102e08 <log_write+0x98>
+  for (i = 0; i < log.lh.n; i++) {
+80102dd9:	83 c0 01             	add    $0x1,%eax
+80102ddc:	39 c1                	cmp    %eax,%ecx
+80102dde:	75 f0                	jne    80102dd0 <log_write+0x60>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+80102de0:	89 14 85 cc 26 11 80 	mov    %edx,-0x7feed934(,%eax,4)
+  if (i == log.lh.n)
+    log.lh.n++;
+80102de7:	83 c0 01             	add    $0x1,%eax
+80102dea:	a3 c8 26 11 80       	mov    %eax,0x801126c8
+  b->flags |= B_DIRTY; // prevent eviction
+80102def:	83 0b 04             	orl    $0x4,(%ebx)
+  release(&log.lock);
+80102df2:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
+}
+80102df9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102dfc:	c9                   	leave  
+  release(&log.lock);
+80102dfd:	e9 ee 19 00 00       	jmp    801047f0 <release>
+80102e02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  log.lh.block[i] = b->blockno;
+80102e08:	89 14 85 cc 26 11 80 	mov    %edx,-0x7feed934(,%eax,4)
+80102e0f:	eb de                	jmp    80102def <log_write+0x7f>
+80102e11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102e18:	8b 43 08             	mov    0x8(%ebx),%eax
+80102e1b:	a3 cc 26 11 80       	mov    %eax,0x801126cc
+  if (i == log.lh.n)
+80102e20:	75 cd                	jne    80102def <log_write+0x7f>
+80102e22:	31 c0                	xor    %eax,%eax
+80102e24:	eb c1                	jmp    80102de7 <log_write+0x77>
+    panic("too big a transaction");
+80102e26:	83 ec 0c             	sub    $0xc,%esp
+80102e29:	68 53 78 10 80       	push   $0x80107853
+80102e2e:	e8 5d d5 ff ff       	call   80100390 <panic>
+    panic("log_write outside of trans");
+80102e33:	83 ec 0c             	sub    $0xc,%esp
+80102e36:	68 69 78 10 80       	push   $0x80107869
+80102e3b:	e8 50 d5 ff ff       	call   80100390 <panic>
+
+80102e40 <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+80102e40:	55                   	push   %ebp
+80102e41:	89 e5                	mov    %esp,%ebp
+80102e43:	53                   	push   %ebx
+80102e44:	83 ec 04             	sub    $0x4,%esp
+  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
+80102e47:	e8 94 09 00 00       	call   801037e0 <cpuid>
+80102e4c:	89 c3                	mov    %eax,%ebx
+80102e4e:	e8 8d 09 00 00       	call   801037e0 <cpuid>
+80102e53:	83 ec 04             	sub    $0x4,%esp
+80102e56:	53                   	push   %ebx
+80102e57:	50                   	push   %eax
+80102e58:	68 84 78 10 80       	push   $0x80107884
+80102e5d:	e8 fe d7 ff ff       	call   80100660 <cprintf>
+  idtinit();       // load idt register
+80102e62:	e8 29 2d 00 00       	call   80105b90 <idtinit>
+  xchg(&(mycpu()->started), 1); // tell startothers() we're up
+80102e67:	e8 f4 08 00 00       	call   80103760 <mycpu>
+80102e6c:	89 c2                	mov    %eax,%edx
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+80102e6e:	b8 01 00 00 00       	mov    $0x1,%eax
+80102e73:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+  scheduler();     // start running processes
+80102e7a:	e8 41 0c 00 00       	call   80103ac0 <scheduler>
+80102e7f:	90                   	nop
+
+80102e80 <mpenter>:
+{
+80102e80:	55                   	push   %ebp
+80102e81:	89 e5                	mov    %esp,%ebp
+80102e83:	83 ec 08             	sub    $0x8,%esp
+  switchkvm();
+80102e86:	e8 15 3e 00 00       	call   80106ca0 <switchkvm>
+  seginit();
+80102e8b:	e8 80 3d 00 00       	call   80106c10 <seginit>
+  lapicinit();
+80102e90:	e8 9b f7 ff ff       	call   80102630 <lapicinit>
+  mpmain();
+80102e95:	e8 a6 ff ff ff       	call   80102e40 <mpmain>
+80102e9a:	66 90                	xchg   %ax,%ax
+80102e9c:	66 90                	xchg   %ax,%ax
+80102e9e:	66 90                	xchg   %ax,%ax
+
+80102ea0 <main>:
+{
+80102ea0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80102ea4:	83 e4 f0             	and    $0xfffffff0,%esp
+80102ea7:	ff 71 fc             	pushl  -0x4(%ecx)
+80102eaa:	55                   	push   %ebp
+80102eab:	89 e5                	mov    %esp,%ebp
+80102ead:	53                   	push   %ebx
+80102eae:	51                   	push   %ecx
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+80102eaf:	83 ec 08             	sub    $0x8,%esp
+80102eb2:	68 00 00 40 80       	push   $0x80400000
+80102eb7:	68 a8 57 11 80       	push   $0x801157a8
+80102ebc:	e8 2f f5 ff ff       	call   801023f0 <kinit1>
+  kvmalloc();      // kernel page table
+80102ec1:	e8 aa 42 00 00       	call   80107170 <kvmalloc>
+  mpinit();        // detect other processors
+80102ec6:	e8 75 01 00 00       	call   80103040 <mpinit>
+  lapicinit();     // interrupt controller
+80102ecb:	e8 60 f7 ff ff       	call   80102630 <lapicinit>
+  seginit();       // segment descriptors
+80102ed0:	e8 3b 3d 00 00       	call   80106c10 <seginit>
+  picinit();       // disable pic
+80102ed5:	e8 46 03 00 00       	call   80103220 <picinit>
+  ioapicinit();    // another interrupt controller
+80102eda:	e8 41 f3 ff ff       	call   80102220 <ioapicinit>
+  consoleinit();   // console hardware
+80102edf:	e8 dc da ff ff       	call   801009c0 <consoleinit>
+  uartinit();      // serial port
+80102ee4:	e8 f7 2f 00 00       	call   80105ee0 <uartinit>
+  pinit();         // process table
+80102ee9:	e8 52 08 00 00       	call   80103740 <pinit>
+  tvinit();        // trap vectors
+80102eee:	e8 1d 2c 00 00       	call   80105b10 <tvinit>
+  binit();         // buffer cache
+80102ef3:	e8 48 d1 ff ff       	call   80100040 <binit>
+  fileinit();      // file table
+80102ef8:	e8 63 de ff ff       	call   80100d60 <fileinit>
+  ideinit();       // disk 
+80102efd:	e8 fe f0 ff ff       	call   80102000 <ideinit>
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+80102f02:	83 c4 0c             	add    $0xc,%esp
+80102f05:	68 8a 00 00 00       	push   $0x8a
+80102f0a:	68 8c a4 10 80       	push   $0x8010a48c
+80102f0f:	68 00 70 00 80       	push   $0x80007000
+80102f14:	e8 d7 19 00 00       	call   801048f0 <memmove>
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80102f19:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+80102f20:	00 00 00 
+80102f23:	83 c4 10             	add    $0x10,%esp
+80102f26:	05 80 27 11 80       	add    $0x80112780,%eax
+80102f2b:	3d 80 27 11 80       	cmp    $0x80112780,%eax
+80102f30:	76 71                	jbe    80102fa3 <main+0x103>
+80102f32:	bb 80 27 11 80       	mov    $0x80112780,%ebx
+80102f37:	89 f6                	mov    %esi,%esi
+80102f39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(c == mycpu())  // We've started already.
+80102f40:	e8 1b 08 00 00       	call   80103760 <mycpu>
+80102f45:	39 d8                	cmp    %ebx,%eax
+80102f47:	74 41                	je     80102f8a <main+0xea>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80102f49:	e8 72 f5 ff ff       	call   801024c0 <kalloc>
+    *(void**)(code-4) = stack + KSTACKSIZE;
+80102f4e:	05 00 10 00 00       	add    $0x1000,%eax
+    *(void(**)(void))(code-8) = mpenter;
+80102f53:	c7 05 f8 6f 00 80 80 	movl   $0x80102e80,0x80006ff8
+80102f5a:	2e 10 80 
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+80102f5d:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
+80102f64:	90 10 00 
+    *(void**)(code-4) = stack + KSTACKSIZE;
+80102f67:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+
+    lapicstartap(c->apicid, V2P(code));
+80102f6c:	0f b6 03             	movzbl (%ebx),%eax
+80102f6f:	83 ec 08             	sub    $0x8,%esp
+80102f72:	68 00 70 00 00       	push   $0x7000
+80102f77:	50                   	push   %eax
+80102f78:	e8 03 f8 ff ff       	call   80102780 <lapicstartap>
+80102f7d:	83 c4 10             	add    $0x10,%esp
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+80102f80:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80102f86:	85 c0                	test   %eax,%eax
+80102f88:	74 f6                	je     80102f80 <main+0xe0>
+  for(c = cpus; c < cpus+ncpu; c++){
+80102f8a:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+80102f91:	00 00 00 
+80102f94:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+80102f9a:	05 80 27 11 80       	add    $0x80112780,%eax
+80102f9f:	39 c3                	cmp    %eax,%ebx
+80102fa1:	72 9d                	jb     80102f40 <main+0xa0>
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+80102fa3:	83 ec 08             	sub    $0x8,%esp
+80102fa6:	68 00 00 00 8e       	push   $0x8e000000
+80102fab:	68 00 00 40 80       	push   $0x80400000
+80102fb0:	e8 ab f4 ff ff       	call   80102460 <kinit2>
+  userinit();      // first user process
+80102fb5:	e8 76 08 00 00       	call   80103830 <userinit>
+  mpmain();        // finish this processor's setup
+80102fba:	e8 81 fe ff ff       	call   80102e40 <mpmain>
+80102fbf:	90                   	nop
+
+80102fc0 <mpsearch1>:
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80102fc0:	55                   	push   %ebp
+80102fc1:	89 e5                	mov    %esp,%ebp
+80102fc3:	57                   	push   %edi
+80102fc4:	56                   	push   %esi
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+80102fc5:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+{
+80102fcb:	53                   	push   %ebx
+  e = addr+len;
+80102fcc:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+{
+80102fcf:	83 ec 0c             	sub    $0xc,%esp
+  for(p = addr; p < e; p += sizeof(struct mp))
+80102fd2:	39 de                	cmp    %ebx,%esi
+80102fd4:	72 10                	jb     80102fe6 <mpsearch1+0x26>
+80102fd6:	eb 50                	jmp    80103028 <mpsearch1+0x68>
+80102fd8:	90                   	nop
+80102fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102fe0:	39 fb                	cmp    %edi,%ebx
+80102fe2:	89 fe                	mov    %edi,%esi
+80102fe4:	76 42                	jbe    80103028 <mpsearch1+0x68>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80102fe6:	83 ec 04             	sub    $0x4,%esp
+80102fe9:	8d 7e 10             	lea    0x10(%esi),%edi
+80102fec:	6a 04                	push   $0x4
+80102fee:	68 98 78 10 80       	push   $0x80107898
+80102ff3:	56                   	push   %esi
+80102ff4:	e8 97 18 00 00       	call   80104890 <memcmp>
+80102ff9:	83 c4 10             	add    $0x10,%esp
+80102ffc:	85 c0                	test   %eax,%eax
+80102ffe:	75 e0                	jne    80102fe0 <mpsearch1+0x20>
+80103000:	89 f1                	mov    %esi,%ecx
+80103002:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    sum += addr[i];
+80103008:	0f b6 11             	movzbl (%ecx),%edx
+8010300b:	83 c1 01             	add    $0x1,%ecx
+8010300e:	01 d0                	add    %edx,%eax
+  for(i=0; i<len; i++)
+80103010:	39 f9                	cmp    %edi,%ecx
+80103012:	75 f4                	jne    80103008 <mpsearch1+0x48>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103014:	84 c0                	test   %al,%al
+80103016:	75 c8                	jne    80102fe0 <mpsearch1+0x20>
+      return (struct mp*)p;
+  return 0;
+}
+80103018:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010301b:	89 f0                	mov    %esi,%eax
+8010301d:	5b                   	pop    %ebx
+8010301e:	5e                   	pop    %esi
+8010301f:	5f                   	pop    %edi
+80103020:	5d                   	pop    %ebp
+80103021:	c3                   	ret    
+80103022:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103028:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010302b:	31 f6                	xor    %esi,%esi
+}
+8010302d:	89 f0                	mov    %esi,%eax
+8010302f:	5b                   	pop    %ebx
+80103030:	5e                   	pop    %esi
+80103031:	5f                   	pop    %edi
+80103032:	5d                   	pop    %ebp
+80103033:	c3                   	ret    
+80103034:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010303a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103040 <mpinit>:
+  return conf;
+}
+
+void
+mpinit(void)
+{
+80103040:	55                   	push   %ebp
+80103041:	89 e5                	mov    %esp,%ebp
+80103043:	57                   	push   %edi
+80103044:	56                   	push   %esi
+80103045:	53                   	push   %ebx
+80103046:	83 ec 1c             	sub    $0x1c,%esp
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80103049:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103050:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+80103057:	c1 e0 08             	shl    $0x8,%eax
+8010305a:	09 d0                	or     %edx,%eax
+8010305c:	c1 e0 04             	shl    $0x4,%eax
+8010305f:	85 c0                	test   %eax,%eax
+80103061:	75 1b                	jne    8010307e <mpinit+0x3e>
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+80103063:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+8010306a:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103071:	c1 e0 08             	shl    $0x8,%eax
+80103074:	09 d0                	or     %edx,%eax
+80103076:	c1 e0 0a             	shl    $0xa,%eax
+    if((mp = mpsearch1(p-1024, 1024)))
+80103079:	2d 00 04 00 00       	sub    $0x400,%eax
+    if((mp = mpsearch1(p, 1024)))
+8010307e:	ba 00 04 00 00       	mov    $0x400,%edx
+80103083:	e8 38 ff ff ff       	call   80102fc0 <mpsearch1>
+80103088:	85 c0                	test   %eax,%eax
+8010308a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010308d:	0f 84 3d 01 00 00    	je     801031d0 <mpinit+0x190>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103093:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103096:	8b 58 04             	mov    0x4(%eax),%ebx
+80103099:	85 db                	test   %ebx,%ebx
+8010309b:	0f 84 4f 01 00 00    	je     801031f0 <mpinit+0x1b0>
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+801030a1:	8d b3 00 00 00 80    	lea    -0x80000000(%ebx),%esi
+  if(memcmp(conf, "PCMP", 4) != 0)
+801030a7:	83 ec 04             	sub    $0x4,%esp
+801030aa:	6a 04                	push   $0x4
+801030ac:	68 b5 78 10 80       	push   $0x801078b5
+801030b1:	56                   	push   %esi
+801030b2:	e8 d9 17 00 00       	call   80104890 <memcmp>
+801030b7:	83 c4 10             	add    $0x10,%esp
+801030ba:	85 c0                	test   %eax,%eax
+801030bc:	0f 85 2e 01 00 00    	jne    801031f0 <mpinit+0x1b0>
+  if(conf->version != 1 && conf->version != 4)
+801030c2:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+801030c9:	3c 01                	cmp    $0x1,%al
+801030cb:	0f 95 c2             	setne  %dl
+801030ce:	3c 04                	cmp    $0x4,%al
+801030d0:	0f 95 c0             	setne  %al
+801030d3:	20 c2                	and    %al,%dl
+801030d5:	0f 85 15 01 00 00    	jne    801031f0 <mpinit+0x1b0>
+  if(sum((uchar*)conf, conf->length) != 0)
+801030db:	0f b7 bb 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edi
+  for(i=0; i<len; i++)
+801030e2:	66 85 ff             	test   %di,%di
+801030e5:	74 1a                	je     80103101 <mpinit+0xc1>
+801030e7:	89 f0                	mov    %esi,%eax
+801030e9:	01 f7                	add    %esi,%edi
+  sum = 0;
+801030eb:	31 d2                	xor    %edx,%edx
+801030ed:	8d 76 00             	lea    0x0(%esi),%esi
+    sum += addr[i];
+801030f0:	0f b6 08             	movzbl (%eax),%ecx
+801030f3:	83 c0 01             	add    $0x1,%eax
+801030f6:	01 ca                	add    %ecx,%edx
+  for(i=0; i<len; i++)
+801030f8:	39 c7                	cmp    %eax,%edi
+801030fa:	75 f4                	jne    801030f0 <mpinit+0xb0>
+801030fc:	84 d2                	test   %dl,%dl
+801030fe:	0f 95 c2             	setne  %dl
+  struct mp *mp;
+  struct mpconf *conf;
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+80103101:	85 f6                	test   %esi,%esi
+80103103:	0f 84 e7 00 00 00    	je     801031f0 <mpinit+0x1b0>
+80103109:	84 d2                	test   %dl,%dl
+8010310b:	0f 85 df 00 00 00    	jne    801031f0 <mpinit+0x1b0>
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+80103111:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+80103117:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+8010311c:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+80103123:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+  ismp = 1;
+80103129:	bb 01 00 00 00       	mov    $0x1,%ebx
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+8010312e:	01 d6                	add    %edx,%esi
+80103130:	39 c6                	cmp    %eax,%esi
+80103132:	76 23                	jbe    80103157 <mpinit+0x117>
+    switch(*p){
+80103134:	0f b6 10             	movzbl (%eax),%edx
+80103137:	80 fa 04             	cmp    $0x4,%dl
+8010313a:	0f 87 ca 00 00 00    	ja     8010320a <mpinit+0x1ca>
+80103140:	ff 24 95 dc 78 10 80 	jmp    *-0x7fef8724(,%edx,4)
+80103147:	89 f6                	mov    %esi,%esi
+80103149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+80103150:	83 c0 08             	add    $0x8,%eax
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103153:	39 c6                	cmp    %eax,%esi
+80103155:	77 dd                	ja     80103134 <mpinit+0xf4>
+    default:
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+80103157:	85 db                	test   %ebx,%ebx
+80103159:	0f 84 9e 00 00 00    	je     801031fd <mpinit+0x1bd>
+    panic("Didn't find a suitable machine");
+
+  if(mp->imcrp){
+8010315f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103162:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
+80103166:	74 15                	je     8010317d <mpinit+0x13d>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103168:	b8 70 00 00 00       	mov    $0x70,%eax
+8010316d:	ba 22 00 00 00       	mov    $0x22,%edx
+80103172:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103173:	ba 23 00 00 00       	mov    $0x23,%edx
+80103178:	ec                   	in     (%dx),%al
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+80103179:	83 c8 01             	or     $0x1,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010317c:	ee                   	out    %al,(%dx)
+  }
+}
+8010317d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103180:	5b                   	pop    %ebx
+80103181:	5e                   	pop    %esi
+80103182:	5f                   	pop    %edi
+80103183:	5d                   	pop    %ebp
+80103184:	c3                   	ret    
+80103185:	8d 76 00             	lea    0x0(%esi),%esi
+      if(ncpu < NCPU) {
+80103188:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
+8010318e:	83 f9 07             	cmp    $0x7,%ecx
+80103191:	7f 19                	jg     801031ac <mpinit+0x16c>
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+80103193:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+80103197:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+        ncpu++;
+8010319d:	83 c1 01             	add    $0x1,%ecx
+801031a0:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+801031a6:	88 97 80 27 11 80    	mov    %dl,-0x7feed880(%edi)
+      p += sizeof(struct mpproc);
+801031ac:	83 c0 14             	add    $0x14,%eax
+      continue;
+801031af:	e9 7c ff ff ff       	jmp    80103130 <mpinit+0xf0>
+801031b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      ioapicid = ioapic->apicno;
+801031b8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+      p += sizeof(struct mpioapic);
+801031bc:	83 c0 08             	add    $0x8,%eax
+      ioapicid = ioapic->apicno;
+801031bf:	88 15 60 27 11 80    	mov    %dl,0x80112760
+      continue;
+801031c5:	e9 66 ff ff ff       	jmp    80103130 <mpinit+0xf0>
+801031ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  return mpsearch1(0xF0000, 0x10000);
+801031d0:	ba 00 00 01 00       	mov    $0x10000,%edx
+801031d5:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+801031da:	e8 e1 fd ff ff       	call   80102fc0 <mpsearch1>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+801031df:	85 c0                	test   %eax,%eax
+  return mpsearch1(0xF0000, 0x10000);
+801031e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+801031e4:	0f 85 a9 fe ff ff    	jne    80103093 <mpinit+0x53>
+801031ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    panic("Expect to run on an SMP");
+801031f0:	83 ec 0c             	sub    $0xc,%esp
+801031f3:	68 9d 78 10 80       	push   $0x8010789d
+801031f8:	e8 93 d1 ff ff       	call   80100390 <panic>
+    panic("Didn't find a suitable machine");
+801031fd:	83 ec 0c             	sub    $0xc,%esp
+80103200:	68 bc 78 10 80       	push   $0x801078bc
+80103205:	e8 86 d1 ff ff       	call   80100390 <panic>
+      ismp = 0;
+8010320a:	31 db                	xor    %ebx,%ebx
+8010320c:	e9 26 ff ff ff       	jmp    80103137 <mpinit+0xf7>
+80103211:	66 90                	xchg   %ax,%ax
+80103213:	66 90                	xchg   %ax,%ax
+80103215:	66 90                	xchg   %ax,%ax
+80103217:	66 90                	xchg   %ax,%ax
+80103219:	66 90                	xchg   %ax,%ax
+8010321b:	66 90                	xchg   %ax,%ax
+8010321d:	66 90                	xchg   %ax,%ax
+8010321f:	90                   	nop
+
+80103220 <picinit>:
+#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
+
+// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
+void
+picinit(void)
+{
+80103220:	55                   	push   %ebp
+80103221:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103226:	ba 21 00 00 00       	mov    $0x21,%edx
+8010322b:	89 e5                	mov    %esp,%ebp
+8010322d:	ee                   	out    %al,(%dx)
+8010322e:	ba a1 00 00 00       	mov    $0xa1,%edx
+80103233:	ee                   	out    %al,(%dx)
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+}
+80103234:	5d                   	pop    %ebp
+80103235:	c3                   	ret    
+80103236:	66 90                	xchg   %ax,%ax
+80103238:	66 90                	xchg   %ax,%ax
+8010323a:	66 90                	xchg   %ax,%ax
+8010323c:	66 90                	xchg   %ax,%ax
+8010323e:	66 90                	xchg   %ax,%ax
+
+80103240 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+80103240:	55                   	push   %ebp
+80103241:	89 e5                	mov    %esp,%ebp
+80103243:	57                   	push   %edi
+80103244:	56                   	push   %esi
+80103245:	53                   	push   %ebx
+80103246:	83 ec 0c             	sub    $0xc,%esp
+80103249:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010324c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+8010324f:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103255:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+8010325b:	e8 20 db ff ff       	call   80100d80 <filealloc>
+80103260:	85 c0                	test   %eax,%eax
+80103262:	89 03                	mov    %eax,(%ebx)
+80103264:	74 22                	je     80103288 <pipealloc+0x48>
+80103266:	e8 15 db ff ff       	call   80100d80 <filealloc>
+8010326b:	85 c0                	test   %eax,%eax
+8010326d:	89 06                	mov    %eax,(%esi)
+8010326f:	74 3f                	je     801032b0 <pipealloc+0x70>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103271:	e8 4a f2 ff ff       	call   801024c0 <kalloc>
+80103276:	85 c0                	test   %eax,%eax
+80103278:	89 c7                	mov    %eax,%edi
+8010327a:	75 54                	jne    801032d0 <pipealloc+0x90>
+
+//PAGEBREAK: 20
+ bad:
+  if(p)
+    kfree((char*)p);
+  if(*f0)
+8010327c:	8b 03                	mov    (%ebx),%eax
+8010327e:	85 c0                	test   %eax,%eax
+80103280:	75 34                	jne    801032b6 <pipealloc+0x76>
+80103282:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    fileclose(*f0);
+  if(*f1)
+80103288:	8b 06                	mov    (%esi),%eax
+8010328a:	85 c0                	test   %eax,%eax
+8010328c:	74 0c                	je     8010329a <pipealloc+0x5a>
+    fileclose(*f1);
+8010328e:	83 ec 0c             	sub    $0xc,%esp
+80103291:	50                   	push   %eax
+80103292:	e8 a9 db ff ff       	call   80100e40 <fileclose>
+80103297:	83 c4 10             	add    $0x10,%esp
+  return -1;
+}
+8010329a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+8010329d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801032a2:	5b                   	pop    %ebx
+801032a3:	5e                   	pop    %esi
+801032a4:	5f                   	pop    %edi
+801032a5:	5d                   	pop    %ebp
+801032a6:	c3                   	ret    
+801032a7:	89 f6                	mov    %esi,%esi
+801032a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  if(*f0)
+801032b0:	8b 03                	mov    (%ebx),%eax
+801032b2:	85 c0                	test   %eax,%eax
+801032b4:	74 e4                	je     8010329a <pipealloc+0x5a>
+    fileclose(*f0);
+801032b6:	83 ec 0c             	sub    $0xc,%esp
+801032b9:	50                   	push   %eax
+801032ba:	e8 81 db ff ff       	call   80100e40 <fileclose>
+  if(*f1)
+801032bf:	8b 06                	mov    (%esi),%eax
+    fileclose(*f0);
+801032c1:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+801032c4:	85 c0                	test   %eax,%eax
+801032c6:	75 c6                	jne    8010328e <pipealloc+0x4e>
+801032c8:	eb d0                	jmp    8010329a <pipealloc+0x5a>
+801032ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  initlock(&p->lock, "pipe");
+801032d0:	83 ec 08             	sub    $0x8,%esp
+  p->readopen = 1;
+801032d3:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+801032da:	00 00 00 
+  p->writeopen = 1;
+801032dd:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+801032e4:	00 00 00 
+  p->nwrite = 0;
+801032e7:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+801032ee:	00 00 00 
+  p->nread = 0;
+801032f1:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+801032f8:	00 00 00 
+  initlock(&p->lock, "pipe");
+801032fb:	68 f0 78 10 80       	push   $0x801078f0
+80103300:	50                   	push   %eax
+80103301:	e8 ea 12 00 00       	call   801045f0 <initlock>
+  (*f0)->type = FD_PIPE;
+80103306:	8b 03                	mov    (%ebx),%eax
+  return 0;
+80103308:	83 c4 10             	add    $0x10,%esp
+  (*f0)->type = FD_PIPE;
+8010330b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+80103311:	8b 03                	mov    (%ebx),%eax
+80103313:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+80103317:	8b 03                	mov    (%ebx),%eax
+80103319:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+8010331d:	8b 03                	mov    (%ebx),%eax
+8010331f:	89 78 0c             	mov    %edi,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+80103322:	8b 06                	mov    (%esi),%eax
+80103324:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+8010332a:	8b 06                	mov    (%esi),%eax
+8010332c:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+80103330:	8b 06                	mov    (%esi),%eax
+80103332:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+80103336:	8b 06                	mov    (%esi),%eax
+80103338:	89 78 0c             	mov    %edi,0xc(%eax)
+}
+8010333b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010333e:	31 c0                	xor    %eax,%eax
+}
+80103340:	5b                   	pop    %ebx
+80103341:	5e                   	pop    %esi
+80103342:	5f                   	pop    %edi
+80103343:	5d                   	pop    %ebp
+80103344:	c3                   	ret    
+80103345:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103350 <pipeclose>:
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+80103350:	55                   	push   %ebp
+80103351:	89 e5                	mov    %esp,%ebp
+80103353:	56                   	push   %esi
+80103354:	53                   	push   %ebx
+80103355:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103358:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&p->lock);
+8010335b:	83 ec 0c             	sub    $0xc,%esp
+8010335e:	53                   	push   %ebx
+8010335f:	e8 cc 13 00 00       	call   80104730 <acquire>
+  if(writable){
+80103364:	83 c4 10             	add    $0x10,%esp
+80103367:	85 f6                	test   %esi,%esi
+80103369:	74 45                	je     801033b0 <pipeclose+0x60>
+    p->writeopen = 0;
+    wakeup(&p->nread);
+8010336b:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80103371:	83 ec 0c             	sub    $0xc,%esp
+    p->writeopen = 0;
+80103374:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010337b:	00 00 00 
+    wakeup(&p->nread);
+8010337e:	50                   	push   %eax
+8010337f:	e8 1c 0c 00 00       	call   80103fa0 <wakeup>
+80103384:	83 c4 10             	add    $0x10,%esp
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+80103387:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+8010338d:	85 d2                	test   %edx,%edx
+8010338f:	75 0a                	jne    8010339b <pipeclose+0x4b>
+80103391:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+80103397:	85 c0                	test   %eax,%eax
+80103399:	74 35                	je     801033d0 <pipeclose+0x80>
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+8010339b:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+8010339e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801033a1:	5b                   	pop    %ebx
+801033a2:	5e                   	pop    %esi
+801033a3:	5d                   	pop    %ebp
+    release(&p->lock);
+801033a4:	e9 47 14 00 00       	jmp    801047f0 <release>
+801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wakeup(&p->nwrite);
+801033b0:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+801033b6:	83 ec 0c             	sub    $0xc,%esp
+    p->readopen = 0;
+801033b9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+801033c0:	00 00 00 
+    wakeup(&p->nwrite);
+801033c3:	50                   	push   %eax
+801033c4:	e8 d7 0b 00 00       	call   80103fa0 <wakeup>
+801033c9:	83 c4 10             	add    $0x10,%esp
+801033cc:	eb b9                	jmp    80103387 <pipeclose+0x37>
+801033ce:	66 90                	xchg   %ax,%ax
+    release(&p->lock);
+801033d0:	83 ec 0c             	sub    $0xc,%esp
+801033d3:	53                   	push   %ebx
+801033d4:	e8 17 14 00 00       	call   801047f0 <release>
+    kfree((char*)p);
+801033d9:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801033dc:	83 c4 10             	add    $0x10,%esp
+}
+801033df:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801033e2:	5b                   	pop    %ebx
+801033e3:	5e                   	pop    %esi
+801033e4:	5d                   	pop    %ebp
+    kfree((char*)p);
+801033e5:	e9 26 ef ff ff       	jmp    80102310 <kfree>
+801033ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801033f0 <pipewrite>:
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+801033f0:	55                   	push   %ebp
+801033f1:	89 e5                	mov    %esp,%ebp
+801033f3:	57                   	push   %edi
+801033f4:	56                   	push   %esi
+801033f5:	53                   	push   %ebx
+801033f6:	83 ec 28             	sub    $0x28,%esp
+801033f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  acquire(&p->lock);
+801033fc:	53                   	push   %ebx
+801033fd:	e8 2e 13 00 00       	call   80104730 <acquire>
+  for(i = 0; i < n; i++){
+80103402:	8b 45 10             	mov    0x10(%ebp),%eax
+80103405:	83 c4 10             	add    $0x10,%esp
+80103408:	85 c0                	test   %eax,%eax
+8010340a:	0f 8e c9 00 00 00    	jle    801034d9 <pipewrite+0xe9>
+80103410:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80103413:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || myproc()->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+80103419:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+8010341f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80103422:	03 4d 10             	add    0x10(%ebp),%ecx
+80103425:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103428:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
+8010342e:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
+80103434:	39 d0                	cmp    %edx,%eax
+80103436:	75 71                	jne    801034a9 <pipewrite+0xb9>
+      if(p->readopen == 0 || myproc()->killed){
+80103438:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+8010343e:	85 c0                	test   %eax,%eax
+80103440:	74 4e                	je     80103490 <pipewrite+0xa0>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103442:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+80103448:	eb 3a                	jmp    80103484 <pipewrite+0x94>
+8010344a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      wakeup(&p->nread);
+80103450:	83 ec 0c             	sub    $0xc,%esp
+80103453:	57                   	push   %edi
+80103454:	e8 47 0b 00 00       	call   80103fa0 <wakeup>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103459:	5a                   	pop    %edx
+8010345a:	59                   	pop    %ecx
+8010345b:	53                   	push   %ebx
+8010345c:	56                   	push   %esi
+8010345d:	e8 7e 09 00 00       	call   80103de0 <sleep>
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103462:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+80103468:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+8010346e:	83 c4 10             	add    $0x10,%esp
+80103471:	05 00 02 00 00       	add    $0x200,%eax
+80103476:	39 c2                	cmp    %eax,%edx
+80103478:	75 36                	jne    801034b0 <pipewrite+0xc0>
+      if(p->readopen == 0 || myproc()->killed){
+8010347a:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80103480:	85 c0                	test   %eax,%eax
+80103482:	74 0c                	je     80103490 <pipewrite+0xa0>
+80103484:	e8 77 03 00 00       	call   80103800 <myproc>
+80103489:	8b 40 24             	mov    0x24(%eax),%eax
+8010348c:	85 c0                	test   %eax,%eax
+8010348e:	74 c0                	je     80103450 <pipewrite+0x60>
+        release(&p->lock);
+80103490:	83 ec 0c             	sub    $0xc,%esp
+80103493:	53                   	push   %ebx
+80103494:	e8 57 13 00 00       	call   801047f0 <release>
+        return -1;
+80103499:	83 c4 10             	add    $0x10,%esp
+8010349c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+801034a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801034a4:	5b                   	pop    %ebx
+801034a5:	5e                   	pop    %esi
+801034a6:	5f                   	pop    %edi
+801034a7:	5d                   	pop    %ebp
+801034a8:	c3                   	ret    
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+801034a9:	89 c2                	mov    %eax,%edx
+801034ab:	90                   	nop
+801034ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+801034b0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+801034b3:	8d 42 01             	lea    0x1(%edx),%eax
+801034b6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+801034bc:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
+801034c2:	83 c6 01             	add    $0x1,%esi
+801034c5:	0f b6 4e ff          	movzbl -0x1(%esi),%ecx
+  for(i = 0; i < n; i++){
+801034c9:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+801034cc:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+801034cf:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
+  for(i = 0; i < n; i++){
+801034d3:	0f 85 4f ff ff ff    	jne    80103428 <pipewrite+0x38>
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+801034d9:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+801034df:	83 ec 0c             	sub    $0xc,%esp
+801034e2:	50                   	push   %eax
+801034e3:	e8 b8 0a 00 00       	call   80103fa0 <wakeup>
+  release(&p->lock);
+801034e8:	89 1c 24             	mov    %ebx,(%esp)
+801034eb:	e8 00 13 00 00       	call   801047f0 <release>
+  return n;
+801034f0:	83 c4 10             	add    $0x10,%esp
+801034f3:	8b 45 10             	mov    0x10(%ebp),%eax
+801034f6:	eb a9                	jmp    801034a1 <pipewrite+0xb1>
+801034f8:	90                   	nop
+801034f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103500 <piperead>:
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+80103500:	55                   	push   %ebp
+80103501:	89 e5                	mov    %esp,%ebp
+80103503:	57                   	push   %edi
+80103504:	56                   	push   %esi
+80103505:	53                   	push   %ebx
+80103506:	83 ec 18             	sub    $0x18,%esp
+80103509:	8b 75 08             	mov    0x8(%ebp),%esi
+8010350c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  int i;
+
+  acquire(&p->lock);
+8010350f:	56                   	push   %esi
+80103510:	e8 1b 12 00 00       	call   80104730 <acquire>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+80103515:	83 c4 10             	add    $0x10,%esp
+80103518:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+8010351e:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+80103524:	75 6a                	jne    80103590 <piperead+0x90>
+80103526:	8b 9e 40 02 00 00    	mov    0x240(%esi),%ebx
+8010352c:	85 db                	test   %ebx,%ebx
+8010352e:	0f 84 c4 00 00 00    	je     801035f8 <piperead+0xf8>
+    if(myproc()->killed){
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+80103534:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+8010353a:	eb 2d                	jmp    80103569 <piperead+0x69>
+8010353c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103540:	83 ec 08             	sub    $0x8,%esp
+80103543:	56                   	push   %esi
+80103544:	53                   	push   %ebx
+80103545:	e8 96 08 00 00       	call   80103de0 <sleep>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+8010354a:	83 c4 10             	add    $0x10,%esp
+8010354d:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+80103553:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+80103559:	75 35                	jne    80103590 <piperead+0x90>
+8010355b:	8b 96 40 02 00 00    	mov    0x240(%esi),%edx
+80103561:	85 d2                	test   %edx,%edx
+80103563:	0f 84 8f 00 00 00    	je     801035f8 <piperead+0xf8>
+    if(myproc()->killed){
+80103569:	e8 92 02 00 00       	call   80103800 <myproc>
+8010356e:	8b 48 24             	mov    0x24(%eax),%ecx
+80103571:	85 c9                	test   %ecx,%ecx
+80103573:	74 cb                	je     80103540 <piperead+0x40>
+      release(&p->lock);
+80103575:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80103578:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+      release(&p->lock);
+8010357d:	56                   	push   %esi
+8010357e:	e8 6d 12 00 00       	call   801047f0 <release>
+      return -1;
+80103583:	83 c4 10             	add    $0x10,%esp
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+  release(&p->lock);
+  return i;
+}
+80103586:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103589:	89 d8                	mov    %ebx,%eax
+8010358b:	5b                   	pop    %ebx
+8010358c:	5e                   	pop    %esi
+8010358d:	5f                   	pop    %edi
+8010358e:	5d                   	pop    %ebp
+8010358f:	c3                   	ret    
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80103590:	8b 45 10             	mov    0x10(%ebp),%eax
+80103593:	85 c0                	test   %eax,%eax
+80103595:	7e 61                	jle    801035f8 <piperead+0xf8>
+    if(p->nread == p->nwrite)
+80103597:	31 db                	xor    %ebx,%ebx
+80103599:	eb 13                	jmp    801035ae <piperead+0xae>
+8010359b:	90                   	nop
+8010359c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801035a0:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+801035a6:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+801035ac:	74 1f                	je     801035cd <piperead+0xcd>
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+801035ae:	8d 41 01             	lea    0x1(%ecx),%eax
+801035b1:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
+801035b7:	89 86 34 02 00 00    	mov    %eax,0x234(%esi)
+801035bd:	0f b6 44 0e 34       	movzbl 0x34(%esi,%ecx,1),%eax
+801035c2:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+801035c5:	83 c3 01             	add    $0x1,%ebx
+801035c8:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+801035cb:	75 d3                	jne    801035a0 <piperead+0xa0>
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+801035cd:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+801035d3:	83 ec 0c             	sub    $0xc,%esp
+801035d6:	50                   	push   %eax
+801035d7:	e8 c4 09 00 00       	call   80103fa0 <wakeup>
+  release(&p->lock);
+801035dc:	89 34 24             	mov    %esi,(%esp)
+801035df:	e8 0c 12 00 00       	call   801047f0 <release>
+  return i;
+801035e4:	83 c4 10             	add    $0x10,%esp
+}
+801035e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801035ea:	89 d8                	mov    %ebx,%eax
+801035ec:	5b                   	pop    %ebx
+801035ed:	5e                   	pop    %esi
+801035ee:	5f                   	pop    %edi
+801035ef:	5d                   	pop    %ebp
+801035f0:	c3                   	ret    
+801035f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801035f8:	31 db                	xor    %ebx,%ebx
+801035fa:	eb d1                	jmp    801035cd <piperead+0xcd>
+801035fc:	66 90                	xchg   %ax,%ax
+801035fe:	66 90                	xchg   %ax,%ax
+
+80103600 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc *
+allocproc(void)
+{
+80103600:	55                   	push   %ebp
+80103601:	89 e5                	mov    %esp,%ebp
+80103603:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103604:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+{
+80103609:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010360c:	68 20 2d 11 80       	push   $0x80112d20
+80103611:	e8 1a 11 00 00       	call   80104730 <acquire>
+80103616:	83 c4 10             	add    $0x10,%esp
+80103619:	eb 17                	jmp    80103632 <allocproc+0x32>
+8010361b:	90                   	nop
+8010361c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103620:	81 c3 88 00 00 00    	add    $0x88,%ebx
+80103626:	81 fb 54 4f 11 80    	cmp    $0x80114f54,%ebx
+8010362c:	0f 83 8e 00 00 00    	jae    801036c0 <allocproc+0xc0>
+    if (p->state == UNUSED)
+80103632:	8b 43 0c             	mov    0xc(%ebx),%eax
+80103635:	85 c0                	test   %eax,%eax
+80103637:	75 e7                	jne    80103620 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+80103639:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+  p->count_contextswitch = 0;
+  p->burst_time = 0;
+  release(&ptable.lock);
+8010363e:	83 ec 0c             	sub    $0xc,%esp
+  p->state = EMBRYO;
+80103641:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->count_contextswitch = 0;
+80103648:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
+  p->burst_time = 0;
+8010364f:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+80103656:	00 00 00 
+  p->pid = nextpid++;
+80103659:	8d 50 01             	lea    0x1(%eax),%edx
+8010365c:	89 43 10             	mov    %eax,0x10(%ebx)
+  release(&ptable.lock);
+8010365f:	68 20 2d 11 80       	push   $0x80112d20
+  p->pid = nextpid++;
+80103664:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+  release(&ptable.lock);
+8010366a:	e8 81 11 00 00       	call   801047f0 <release>
+
+  // Allocate kernel stack.
+  if ((p->kstack = kalloc()) == 0)
+8010366f:	e8 4c ee ff ff       	call   801024c0 <kalloc>
+80103674:	83 c4 10             	add    $0x10,%esp
+80103677:	85 c0                	test   %eax,%eax
+80103679:	89 43 08             	mov    %eax,0x8(%ebx)
+8010367c:	74 5b                	je     801036d9 <allocproc+0xd9>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+8010367e:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint *)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context *)sp;
+  memset(p->context, 0, sizeof *p->context);
+80103684:	83 ec 04             	sub    $0x4,%esp
+  sp -= sizeof *p->context;
+80103687:	05 9c 0f 00 00       	add    $0xf9c,%eax
+  sp -= sizeof *p->tf;
+8010368c:	89 53 18             	mov    %edx,0x18(%ebx)
+  *(uint *)sp = (uint)trapret;
+8010368f:	c7 40 14 fa 5a 10 80 	movl   $0x80105afa,0x14(%eax)
+  p->context = (struct context *)sp;
+80103696:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+80103699:	6a 14                	push   $0x14
+8010369b:	6a 00                	push   $0x0
+8010369d:	50                   	push   %eax
+8010369e:	e8 9d 11 00 00       	call   80104840 <memset>
+  p->context->eip = (uint)forkret;
+801036a3:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+801036a6:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+801036a9:	c7 40 10 f0 36 10 80 	movl   $0x801036f0,0x10(%eax)
+}
+801036b0:	89 d8                	mov    %ebx,%eax
+801036b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801036b5:	c9                   	leave  
+801036b6:	c3                   	ret    
+801036b7:	89 f6                	mov    %esi,%esi
+801036b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  release(&ptable.lock);
+801036c0:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+801036c3:	31 db                	xor    %ebx,%ebx
+  release(&ptable.lock);
+801036c5:	68 20 2d 11 80       	push   $0x80112d20
+801036ca:	e8 21 11 00 00       	call   801047f0 <release>
+}
+801036cf:	89 d8                	mov    %ebx,%eax
+  return 0;
+801036d1:	83 c4 10             	add    $0x10,%esp
+}
+801036d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801036d7:	c9                   	leave  
+801036d8:	c3                   	ret    
+    p->state = UNUSED;
+801036d9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+801036e0:	31 db                	xor    %ebx,%ebx
+801036e2:	eb cc                	jmp    801036b0 <allocproc+0xb0>
+801036e4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801036ea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+801036f0 <forkret>:
+}
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void forkret(void)
+{
+801036f0:	55                   	push   %ebp
+801036f1:	89 e5                	mov    %esp,%ebp
+801036f3:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+801036f6:	68 20 2d 11 80       	push   $0x80112d20
+801036fb:	e8 f0 10 00 00       	call   801047f0 <release>
+
+  if (first)
+80103700:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+80103705:	83 c4 10             	add    $0x10,%esp
+80103708:	85 c0                	test   %eax,%eax
+8010370a:	75 04                	jne    80103710 <forkret+0x20>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+8010370c:	c9                   	leave  
+8010370d:	c3                   	ret    
+8010370e:	66 90                	xchg   %ax,%ax
+    iinit(ROOTDEV);
+80103710:	83 ec 0c             	sub    $0xc,%esp
+    first = 0;
+80103713:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+8010371a:	00 00 00 
+    iinit(ROOTDEV);
+8010371d:	6a 01                	push   $0x1
+8010371f:	e8 5c dd ff ff       	call   80101480 <iinit>
+    initlog(ROOTDEV);
+80103724:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+8010372b:	e8 d0 f3 ff ff       	call   80102b00 <initlog>
+80103730:	83 c4 10             	add    $0x10,%esp
+}
+80103733:	c9                   	leave  
+80103734:	c3                   	ret    
+80103735:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103739:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103740 <pinit>:
+{
+80103740:	55                   	push   %ebp
+80103741:	89 e5                	mov    %esp,%ebp
+80103743:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+80103746:	68 f5 78 10 80       	push   $0x801078f5
+8010374b:	68 20 2d 11 80       	push   $0x80112d20
+80103750:	e8 9b 0e 00 00       	call   801045f0 <initlock>
+}
+80103755:	83 c4 10             	add    $0x10,%esp
+80103758:	c9                   	leave  
+80103759:	c3                   	ret    
+8010375a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103760 <mycpu>:
+{
+80103760:	55                   	push   %ebp
+80103761:	89 e5                	mov    %esp,%ebp
+80103763:	56                   	push   %esi
+80103764:	53                   	push   %ebx
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103765:	9c                   	pushf  
+80103766:	58                   	pop    %eax
+  if (readeflags() & FL_IF)
+80103767:	f6 c4 02             	test   $0x2,%ah
+8010376a:	75 5e                	jne    801037ca <mycpu+0x6a>
+  apicid = lapicid();
+8010376c:	e8 bf ef ff ff       	call   80102730 <lapicid>
+  for (i = 0; i < ncpu; ++i)
+80103771:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
+80103777:	85 f6                	test   %esi,%esi
+80103779:	7e 42                	jle    801037bd <mycpu+0x5d>
+    if (cpus[i].apicid == apicid)
+8010377b:	0f b6 15 80 27 11 80 	movzbl 0x80112780,%edx
+80103782:	39 d0                	cmp    %edx,%eax
+80103784:	74 30                	je     801037b6 <mycpu+0x56>
+80103786:	b9 30 28 11 80       	mov    $0x80112830,%ecx
+  for (i = 0; i < ncpu; ++i)
+8010378b:	31 d2                	xor    %edx,%edx
+8010378d:	8d 76 00             	lea    0x0(%esi),%esi
+80103790:	83 c2 01             	add    $0x1,%edx
+80103793:	39 f2                	cmp    %esi,%edx
+80103795:	74 26                	je     801037bd <mycpu+0x5d>
+    if (cpus[i].apicid == apicid)
+80103797:	0f b6 19             	movzbl (%ecx),%ebx
+8010379a:	81 c1 b0 00 00 00    	add    $0xb0,%ecx
+801037a0:	39 c3                	cmp    %eax,%ebx
+801037a2:	75 ec                	jne    80103790 <mycpu+0x30>
+801037a4:	69 c2 b0 00 00 00    	imul   $0xb0,%edx,%eax
+801037aa:	05 80 27 11 80       	add    $0x80112780,%eax
+}
+801037af:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801037b2:	5b                   	pop    %ebx
+801037b3:	5e                   	pop    %esi
+801037b4:	5d                   	pop    %ebp
+801037b5:	c3                   	ret    
+    if (cpus[i].apicid == apicid)
+801037b6:	b8 80 27 11 80       	mov    $0x80112780,%eax
+      return &cpus[i];
+801037bb:	eb f2                	jmp    801037af <mycpu+0x4f>
+  panic("unknown apicid\n");
+801037bd:	83 ec 0c             	sub    $0xc,%esp
+801037c0:	68 fc 78 10 80       	push   $0x801078fc
+801037c5:	e8 c6 cb ff ff       	call   80100390 <panic>
+    panic("mycpu called with interrupts enabled\n");
+801037ca:	83 ec 0c             	sub    $0xc,%esp
+801037cd:	68 5c 7a 10 80       	push   $0x80107a5c
+801037d2:	e8 b9 cb ff ff       	call   80100390 <panic>
+801037d7:	89 f6                	mov    %esi,%esi
+801037d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801037e0 <cpuid>:
+{
+801037e0:	55                   	push   %ebp
+801037e1:	89 e5                	mov    %esp,%ebp
+801037e3:	83 ec 08             	sub    $0x8,%esp
+  return mycpu() - cpus;
+801037e6:	e8 75 ff ff ff       	call   80103760 <mycpu>
+801037eb:	2d 80 27 11 80       	sub    $0x80112780,%eax
+}
+801037f0:	c9                   	leave  
+  return mycpu() - cpus;
+801037f1:	c1 f8 04             	sar    $0x4,%eax
+801037f4:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+801037fa:	c3                   	ret    
+801037fb:	90                   	nop
+801037fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103800 <myproc>:
+{
+80103800:	55                   	push   %ebp
+80103801:	89 e5                	mov    %esp,%ebp
+80103803:	53                   	push   %ebx
+80103804:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80103807:	e8 54 0e 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+8010380c:	e8 4f ff ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+80103811:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103817:	e8 84 0e 00 00       	call   801046a0 <popcli>
+}
+8010381c:	83 c4 04             	add    $0x4,%esp
+8010381f:	89 d8                	mov    %ebx,%eax
+80103821:	5b                   	pop    %ebx
+80103822:	5d                   	pop    %ebp
+80103823:	c3                   	ret    
+80103824:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010382a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103830 <userinit>:
+{
+80103830:	55                   	push   %ebp
+80103831:	89 e5                	mov    %esp,%ebp
+80103833:	53                   	push   %ebx
+80103834:	83 ec 04             	sub    $0x4,%esp
+  p = allocproc();
+80103837:	e8 c4 fd ff ff       	call   80103600 <allocproc>
+8010383c:	89 c3                	mov    %eax,%ebx
+  initproc = p;
+8010383e:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+  if ((p->pgdir = setupkvm()) == 0)
+80103843:	e8 a8 38 00 00       	call   801070f0 <setupkvm>
+80103848:	85 c0                	test   %eax,%eax
+8010384a:	89 43 04             	mov    %eax,0x4(%ebx)
+8010384d:	0f 84 bd 00 00 00    	je     80103910 <userinit+0xe0>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+80103853:	83 ec 04             	sub    $0x4,%esp
+80103856:	68 2c 00 00 00       	push   $0x2c
+8010385b:	68 60 a4 10 80       	push   $0x8010a460
+80103860:	50                   	push   %eax
+80103861:	e8 6a 35 00 00       	call   80106dd0 <inituvm>
+  memset(p->tf, 0, sizeof(*p->tf));
+80103866:	83 c4 0c             	add    $0xc,%esp
+  p->sz = PGSIZE;
+80103869:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+8010386f:	6a 4c                	push   $0x4c
+80103871:	6a 00                	push   $0x0
+80103873:	ff 73 18             	pushl  0x18(%ebx)
+80103876:	e8 c5 0f 00 00       	call   80104840 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+8010387b:	8b 43 18             	mov    0x18(%ebx),%eax
+8010387e:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80103883:	b9 23 00 00 00       	mov    $0x23,%ecx
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80103888:	83 c4 0c             	add    $0xc,%esp
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+8010388b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+8010388f:	8b 43 18             	mov    0x18(%ebx),%eax
+80103892:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80103896:	8b 43 18             	mov    0x18(%ebx),%eax
+80103899:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+8010389d:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+801038a1:	8b 43 18             	mov    0x18(%ebx),%eax
+801038a4:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+801038a8:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+801038ac:	8b 43 18             	mov    0x18(%ebx),%eax
+801038af:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+801038b6:	8b 43 18             	mov    0x18(%ebx),%eax
+801038b9:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0; // beginning of initcode.S
+801038c0:	8b 43 18             	mov    0x18(%ebx),%eax
+801038c3:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+801038ca:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801038cd:	6a 10                	push   $0x10
+801038cf:	68 25 79 10 80       	push   $0x80107925
+801038d4:	50                   	push   %eax
+801038d5:	e8 46 11 00 00       	call   80104a20 <safestrcpy>
+  p->cwd = namei("/");
+801038da:	c7 04 24 2e 79 10 80 	movl   $0x8010792e,(%esp)
+801038e1:	e8 fa e5 ff ff       	call   80101ee0 <namei>
+801038e6:	89 43 68             	mov    %eax,0x68(%ebx)
+  acquire(&ptable.lock);
+801038e9:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801038f0:	e8 3b 0e 00 00       	call   80104730 <acquire>
+  p->state = RUNNABLE;
+801038f5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+801038fc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103903:	e8 e8 0e 00 00       	call   801047f0 <release>
+}
+80103908:	83 c4 10             	add    $0x10,%esp
+8010390b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010390e:	c9                   	leave  
+8010390f:	c3                   	ret    
+    panic("userinit: out of memory?");
+80103910:	83 ec 0c             	sub    $0xc,%esp
+80103913:	68 0c 79 10 80       	push   $0x8010790c
+80103918:	e8 73 ca ff ff       	call   80100390 <panic>
+8010391d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103920 <growproc>:
+{
+80103920:	55                   	push   %ebp
+80103921:	89 e5                	mov    %esp,%ebp
+80103923:	56                   	push   %esi
+80103924:	53                   	push   %ebx
+80103925:	8b 75 08             	mov    0x8(%ebp),%esi
+  pushcli();
+80103928:	e8 33 0d 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+8010392d:	e8 2e fe ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+80103932:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103938:	e8 63 0d 00 00       	call   801046a0 <popcli>
+  if (n > 0)
+8010393d:	83 fe 00             	cmp    $0x0,%esi
+  sz = curproc->sz;
+80103940:	8b 03                	mov    (%ebx),%eax
+  if (n > 0)
+80103942:	7f 1c                	jg     80103960 <growproc+0x40>
+  else if (n < 0)
+80103944:	75 3a                	jne    80103980 <growproc+0x60>
+  switchuvm(curproc);
+80103946:	83 ec 0c             	sub    $0xc,%esp
+  curproc->sz = sz;
+80103949:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+8010394b:	53                   	push   %ebx
+8010394c:	e8 6f 33 00 00       	call   80106cc0 <switchuvm>
+  return 0;
+80103951:	83 c4 10             	add    $0x10,%esp
+80103954:	31 c0                	xor    %eax,%eax
+}
+80103956:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103959:	5b                   	pop    %ebx
+8010395a:	5e                   	pop    %esi
+8010395b:	5d                   	pop    %ebp
+8010395c:	c3                   	ret    
+8010395d:	8d 76 00             	lea    0x0(%esi),%esi
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103960:	83 ec 04             	sub    $0x4,%esp
+80103963:	01 c6                	add    %eax,%esi
+80103965:	56                   	push   %esi
+80103966:	50                   	push   %eax
+80103967:	ff 73 04             	pushl  0x4(%ebx)
+8010396a:	e8 a1 35 00 00       	call   80106f10 <allocuvm>
+8010396f:	83 c4 10             	add    $0x10,%esp
+80103972:	85 c0                	test   %eax,%eax
+80103974:	75 d0                	jne    80103946 <growproc+0x26>
+      return -1;
+80103976:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010397b:	eb d9                	jmp    80103956 <growproc+0x36>
+8010397d:	8d 76 00             	lea    0x0(%esi),%esi
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103980:	83 ec 04             	sub    $0x4,%esp
+80103983:	01 c6                	add    %eax,%esi
+80103985:	56                   	push   %esi
+80103986:	50                   	push   %eax
+80103987:	ff 73 04             	pushl  0x4(%ebx)
+8010398a:	e8 b1 36 00 00       	call   80107040 <deallocuvm>
+8010398f:	83 c4 10             	add    $0x10,%esp
+80103992:	85 c0                	test   %eax,%eax
+80103994:	75 b0                	jne    80103946 <growproc+0x26>
+80103996:	eb de                	jmp    80103976 <growproc+0x56>
+80103998:	90                   	nop
+80103999:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801039a0 <fork>:
+{
+801039a0:	55                   	push   %ebp
+801039a1:	89 e5                	mov    %esp,%ebp
+801039a3:	57                   	push   %edi
+801039a4:	56                   	push   %esi
+801039a5:	53                   	push   %ebx
+801039a6:	83 ec 1c             	sub    $0x1c,%esp
+  pushcli();
+801039a9:	e8 b2 0c 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+801039ae:	e8 ad fd ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+801039b3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801039b9:	e8 e2 0c 00 00       	call   801046a0 <popcli>
+  if ((np = allocproc()) == 0)
+801039be:	e8 3d fc ff ff       	call   80103600 <allocproc>
+801039c3:	85 c0                	test   %eax,%eax
+801039c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801039c8:	0f 84 b7 00 00 00    	je     80103a85 <fork+0xe5>
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+801039ce:	83 ec 08             	sub    $0x8,%esp
+801039d1:	ff 33                	pushl  (%ebx)
+801039d3:	ff 73 04             	pushl  0x4(%ebx)
+801039d6:	89 c7                	mov    %eax,%edi
+801039d8:	e8 e3 37 00 00       	call   801071c0 <copyuvm>
+801039dd:	83 c4 10             	add    $0x10,%esp
+801039e0:	85 c0                	test   %eax,%eax
+801039e2:	89 47 04             	mov    %eax,0x4(%edi)
+801039e5:	0f 84 a1 00 00 00    	je     80103a8c <fork+0xec>
+  np->sz = curproc->sz;
+801039eb:	8b 03                	mov    (%ebx),%eax
+801039ed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801039f0:	89 01                	mov    %eax,(%ecx)
+  np->parent = curproc;
+801039f2:	89 59 14             	mov    %ebx,0x14(%ecx)
+801039f5:	89 c8                	mov    %ecx,%eax
+  *np->tf = *curproc->tf;
+801039f7:	8b 79 18             	mov    0x18(%ecx),%edi
+801039fa:	8b 73 18             	mov    0x18(%ebx),%esi
+801039fd:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103a02:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  for (i = 0; i < NOFILE; i++)
+80103a04:	31 f6                	xor    %esi,%esi
+  np->tf->eax = 0;
+80103a06:	8b 40 18             	mov    0x18(%eax),%eax
+80103a09:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    if (curproc->ofile[i])
+80103a10:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103a14:	85 c0                	test   %eax,%eax
+80103a16:	74 13                	je     80103a2b <fork+0x8b>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+80103a18:	83 ec 0c             	sub    $0xc,%esp
+80103a1b:	50                   	push   %eax
+80103a1c:	e8 cf d3 ff ff       	call   80100df0 <filedup>
+80103a21:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103a24:	83 c4 10             	add    $0x10,%esp
+80103a27:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+  for (i = 0; i < NOFILE; i++)
+80103a2b:	83 c6 01             	add    $0x1,%esi
+80103a2e:	83 fe 10             	cmp    $0x10,%esi
+80103a31:	75 dd                	jne    80103a10 <fork+0x70>
+  np->cwd = idup(curproc->cwd);
+80103a33:	83 ec 0c             	sub    $0xc,%esp
+80103a36:	ff 73 68             	pushl  0x68(%ebx)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103a39:	83 c3 6c             	add    $0x6c,%ebx
+  np->cwd = idup(curproc->cwd);
+80103a3c:	e8 0f dc ff ff       	call   80101650 <idup>
+80103a41:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103a44:	83 c4 0c             	add    $0xc,%esp
+  np->cwd = idup(curproc->cwd);
+80103a47:	89 47 68             	mov    %eax,0x68(%edi)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103a4a:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103a4d:	6a 10                	push   $0x10
+80103a4f:	53                   	push   %ebx
+80103a50:	50                   	push   %eax
+80103a51:	e8 ca 0f 00 00       	call   80104a20 <safestrcpy>
+  pid = np->pid;
+80103a56:	8b 5f 10             	mov    0x10(%edi),%ebx
+  acquire(&ptable.lock);
+80103a59:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a60:	e8 cb 0c 00 00       	call   80104730 <acquire>
+  np->state = RUNNABLE;
+80103a65:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  release(&ptable.lock);
+80103a6c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a73:	e8 78 0d 00 00       	call   801047f0 <release>
+  return pid;
+80103a78:	83 c4 10             	add    $0x10,%esp
+}
+80103a7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103a7e:	89 d8                	mov    %ebx,%eax
+80103a80:	5b                   	pop    %ebx
+80103a81:	5e                   	pop    %esi
+80103a82:	5f                   	pop    %edi
+80103a83:	5d                   	pop    %ebp
+80103a84:	c3                   	ret    
+    return -1;
+80103a85:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103a8a:	eb ef                	jmp    80103a7b <fork+0xdb>
+    kfree(np->kstack);
+80103a8c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103a8f:	83 ec 0c             	sub    $0xc,%esp
+80103a92:	ff 73 08             	pushl  0x8(%ebx)
+80103a95:	e8 76 e8 ff ff       	call   80102310 <kfree>
+    np->kstack = 0;
+80103a9a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+    np->state = UNUSED;
+80103aa1:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return -1;
+80103aa8:	83 c4 10             	add    $0x10,%esp
+80103aab:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103ab0:	eb c9                	jmp    80103a7b <fork+0xdb>
+80103ab2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ab9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103ac0 <scheduler>:
+{
+80103ac0:	55                   	push   %ebp
+80103ac1:	89 e5                	mov    %esp,%ebp
+80103ac3:	57                   	push   %edi
+80103ac4:	56                   	push   %esi
+80103ac5:	53                   	push   %ebx
+80103ac6:	83 ec 1c             	sub    $0x1c,%esp
+  struct cpu *c = mycpu();
+80103ac9:	e8 92 fc ff ff       	call   80103760 <mycpu>
+  c->proc = 0;
+80103ace:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103ad5:	00 00 00 
+  struct cpu *c = mycpu();
+80103ad8:	89 c3                	mov    %eax,%ebx
+80103ada:	8d 40 04             	lea    0x4(%eax),%eax
+80103add:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  asm volatile("sti");
+80103ae0:	fb                   	sti    
+    acquire(&ptable.lock);
+80103ae1:	83 ec 0c             	sub    $0xc,%esp
+    lowest_bt= 0;
+80103ae4:	31 ff                	xor    %edi,%edi
+    acquire(&ptable.lock);
+80103ae6:	68 20 2d 11 80       	push   $0x80112d20
+80103aeb:	e8 40 0c 00 00       	call   80104730 <acquire>
+80103af0:	83 c4 10             	add    $0x10,%esp
+    int currentMin = __INT_MAX__; // CPU burst times are between 1 and 20.
+80103af3:	b9 ff ff ff 7f       	mov    $0x7fffffff,%ecx
+    for (p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++)
+80103af8:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103afd:	eb 1a                	jmp    80103b19 <scheduler+0x59>
+80103aff:	90                   	nop
+      else if(p1->pid < lowest_bt->pid && p1->burst_time == currentMin)
+80103b00:	8b 77 10             	mov    0x10(%edi),%esi
+80103b03:	39 70 10             	cmp    %esi,0x10(%eax)
+80103b06:	7d 05                	jge    80103b0d <scheduler+0x4d>
+80103b08:	39 ca                	cmp    %ecx,%edx
+80103b0a:	0f 44 f8             	cmove  %eax,%edi
+    for (p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++)
+80103b0d:	05 88 00 00 00       	add    $0x88,%eax
+80103b12:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80103b17:	73 20                	jae    80103b39 <scheduler+0x79>
+      if (p1->state != RUNNABLE)  continue;
+80103b19:	83 78 0c 03          	cmpl   $0x3,0xc(%eax)
+80103b1d:	75 ee                	jne    80103b0d <scheduler+0x4d>
+      if(p1->burst_time < currentMin)
+80103b1f:	8b 90 80 00 00 00    	mov    0x80(%eax),%edx
+80103b25:	39 ca                	cmp    %ecx,%edx
+80103b27:	7d d7                	jge    80103b00 <scheduler+0x40>
+80103b29:	89 c7                	mov    %eax,%edi
+    for (p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++)
+80103b2b:	05 88 00 00 00       	add    $0x88,%eax
+80103b30:	89 d1                	mov    %edx,%ecx
+80103b32:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80103b37:	72 e0                	jb     80103b19 <scheduler+0x59>
+    if (p != 0)
+80103b39:	85 ff                	test   %edi,%edi
+80103b3b:	74 43                	je     80103b80 <scheduler+0xc0>
+      (p->count_contextswitch)++;
+80103b3d:	83 47 7c 01          	addl   $0x1,0x7c(%edi)
+      switchuvm(p);
+80103b41:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = p;
+80103b44:	89 bb ac 00 00 00    	mov    %edi,0xac(%ebx)
+      switchuvm(p);
+80103b4a:	57                   	push   %edi
+80103b4b:	e8 70 31 00 00       	call   80106cc0 <switchuvm>
+      p->state = RUNNING;
+80103b50:	c7 47 0c 04 00 00 00 	movl   $0x4,0xc(%edi)
+      p->cpucounter = 0;
+80103b57:	c7 87 84 00 00 00 00 	movl   $0x0,0x84(%edi)
+80103b5e:	00 00 00 
+      swtch(&(c->scheduler), p->context);
+80103b61:	58                   	pop    %eax
+80103b62:	5a                   	pop    %edx
+80103b63:	ff 77 1c             	pushl  0x1c(%edi)
+80103b66:	ff 75 e4             	pushl  -0x1c(%ebp)
+80103b69:	e8 0d 0f 00 00       	call   80104a7b <swtch>
+      switchkvm();
+80103b6e:	e8 2d 31 00 00       	call   80106ca0 <switchkvm>
+      c->proc = 0;
+80103b73:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%ebx)
+80103b7a:	00 00 00 
+80103b7d:	83 c4 10             	add    $0x10,%esp
+    release(&ptable.lock);
+80103b80:	83 ec 0c             	sub    $0xc,%esp
+80103b83:	68 20 2d 11 80       	push   $0x80112d20
+80103b88:	e8 63 0c 00 00       	call   801047f0 <release>
+  {
+80103b8d:	83 c4 10             	add    $0x10,%esp
+80103b90:	e9 4b ff ff ff       	jmp    80103ae0 <scheduler+0x20>
+80103b95:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103b99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103ba0 <sched>:
+{
+80103ba0:	55                   	push   %ebp
+80103ba1:	89 e5                	mov    %esp,%ebp
+80103ba3:	56                   	push   %esi
+80103ba4:	53                   	push   %ebx
+  pushcli();
+80103ba5:	e8 b6 0a 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+80103baa:	e8 b1 fb ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+80103baf:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103bb5:	e8 e6 0a 00 00       	call   801046a0 <popcli>
+  if (!holding(&ptable.lock))
+80103bba:	83 ec 0c             	sub    $0xc,%esp
+80103bbd:	68 20 2d 11 80       	push   $0x80112d20
+80103bc2:	e8 39 0b 00 00       	call   80104700 <holding>
+80103bc7:	83 c4 10             	add    $0x10,%esp
+80103bca:	85 c0                	test   %eax,%eax
+80103bcc:	74 4f                	je     80103c1d <sched+0x7d>
+  if (mycpu()->ncli != 1)
+80103bce:	e8 8d fb ff ff       	call   80103760 <mycpu>
+80103bd3:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103bda:	75 68                	jne    80103c44 <sched+0xa4>
+  if (p->state == RUNNING)
+80103bdc:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103be0:	74 55                	je     80103c37 <sched+0x97>
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103be2:	9c                   	pushf  
+80103be3:	58                   	pop    %eax
+  if (readeflags() & FL_IF)
+80103be4:	f6 c4 02             	test   $0x2,%ah
+80103be7:	75 41                	jne    80103c2a <sched+0x8a>
+  intena = mycpu()->intena;
+80103be9:	e8 72 fb ff ff       	call   80103760 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80103bee:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+80103bf1:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+80103bf7:	e8 64 fb ff ff       	call   80103760 <mycpu>
+80103bfc:	83 ec 08             	sub    $0x8,%esp
+80103bff:	ff 70 04             	pushl  0x4(%eax)
+80103c02:	53                   	push   %ebx
+80103c03:	e8 73 0e 00 00       	call   80104a7b <swtch>
+  mycpu()->intena = intena;
+80103c08:	e8 53 fb ff ff       	call   80103760 <mycpu>
+}
+80103c0d:	83 c4 10             	add    $0x10,%esp
+  mycpu()->intena = intena;
+80103c10:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+80103c16:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103c19:	5b                   	pop    %ebx
+80103c1a:	5e                   	pop    %esi
+80103c1b:	5d                   	pop    %ebp
+80103c1c:	c3                   	ret    
+    panic("sched ptable.lock");
+80103c1d:	83 ec 0c             	sub    $0xc,%esp
+80103c20:	68 30 79 10 80       	push   $0x80107930
+80103c25:	e8 66 c7 ff ff       	call   80100390 <panic>
+    panic("sched interruptible");
+80103c2a:	83 ec 0c             	sub    $0xc,%esp
+80103c2d:	68 5c 79 10 80       	push   $0x8010795c
+80103c32:	e8 59 c7 ff ff       	call   80100390 <panic>
+    panic("sched running");
+80103c37:	83 ec 0c             	sub    $0xc,%esp
+80103c3a:	68 4e 79 10 80       	push   $0x8010794e
+80103c3f:	e8 4c c7 ff ff       	call   80100390 <panic>
+    panic("sched locks");
+80103c44:	83 ec 0c             	sub    $0xc,%esp
+80103c47:	68 42 79 10 80       	push   $0x80107942
+80103c4c:	e8 3f c7 ff ff       	call   80100390 <panic>
+80103c51:	eb 0d                	jmp    80103c60 <exit>
+80103c53:	90                   	nop
+80103c54:	90                   	nop
+80103c55:	90                   	nop
+80103c56:	90                   	nop
+80103c57:	90                   	nop
+80103c58:	90                   	nop
+80103c59:	90                   	nop
+80103c5a:	90                   	nop
+80103c5b:	90                   	nop
+80103c5c:	90                   	nop
+80103c5d:	90                   	nop
+80103c5e:	90                   	nop
+80103c5f:	90                   	nop
+
+80103c60 <exit>:
+{
+80103c60:	55                   	push   %ebp
+80103c61:	89 e5                	mov    %esp,%ebp
+80103c63:	57                   	push   %edi
+80103c64:	56                   	push   %esi
+80103c65:	53                   	push   %ebx
+80103c66:	83 ec 0c             	sub    $0xc,%esp
+  pushcli();
+80103c69:	e8 f2 09 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+80103c6e:	e8 ed fa ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+80103c73:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103c79:	e8 22 0a 00 00       	call   801046a0 <popcli>
+  if (curproc == initproc)
+80103c7e:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
+80103c84:	8d 5e 28             	lea    0x28(%esi),%ebx
+80103c87:	8d 7e 68             	lea    0x68(%esi),%edi
+80103c8a:	0f 84 f1 00 00 00    	je     80103d81 <exit+0x121>
+    if (curproc->ofile[fd])
+80103c90:	8b 03                	mov    (%ebx),%eax
+80103c92:	85 c0                	test   %eax,%eax
+80103c94:	74 12                	je     80103ca8 <exit+0x48>
+      fileclose(curproc->ofile[fd]);
+80103c96:	83 ec 0c             	sub    $0xc,%esp
+80103c99:	50                   	push   %eax
+80103c9a:	e8 a1 d1 ff ff       	call   80100e40 <fileclose>
+      curproc->ofile[fd] = 0;
+80103c9f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103ca5:	83 c4 10             	add    $0x10,%esp
+80103ca8:	83 c3 04             	add    $0x4,%ebx
+  for (fd = 0; fd < NOFILE; fd++)
+80103cab:	39 fb                	cmp    %edi,%ebx
+80103cad:	75 e1                	jne    80103c90 <exit+0x30>
+  begin_op();
+80103caf:	e8 ec ee ff ff       	call   80102ba0 <begin_op>
+  iput(curproc->cwd);
+80103cb4:	83 ec 0c             	sub    $0xc,%esp
+80103cb7:	ff 76 68             	pushl  0x68(%esi)
+80103cba:	e8 f1 da ff ff       	call   801017b0 <iput>
+  end_op();
+80103cbf:	e8 4c ef ff ff       	call   80102c10 <end_op>
+  curproc->cwd = 0;
+80103cc4:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+  acquire(&ptable.lock);
+80103ccb:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103cd2:	e8 59 0a 00 00       	call   80104730 <acquire>
+  wakeup1(curproc->parent);
+80103cd7:	8b 56 14             	mov    0x14(%esi),%edx
+80103cda:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103cdd:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103ce2:	eb 10                	jmp    80103cf4 <exit+0x94>
+80103ce4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ce8:	05 88 00 00 00       	add    $0x88,%eax
+80103ced:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80103cf2:	73 1e                	jae    80103d12 <exit+0xb2>
+    if (p->state == SLEEPING && p->chan == chan)
+80103cf4:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103cf8:	75 ee                	jne    80103ce8 <exit+0x88>
+80103cfa:	3b 50 20             	cmp    0x20(%eax),%edx
+80103cfd:	75 e9                	jne    80103ce8 <exit+0x88>
+      p->state = RUNNABLE;
+80103cff:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103d06:	05 88 00 00 00       	add    $0x88,%eax
+80103d0b:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80103d10:	72 e2                	jb     80103cf4 <exit+0x94>
+      p->parent = initproc;
+80103d12:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103d18:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103d1d:	eb 0f                	jmp    80103d2e <exit+0xce>
+80103d1f:	90                   	nop
+80103d20:	81 c2 88 00 00 00    	add    $0x88,%edx
+80103d26:	81 fa 54 4f 11 80    	cmp    $0x80114f54,%edx
+80103d2c:	73 3a                	jae    80103d68 <exit+0x108>
+    if (p->parent == curproc)
+80103d2e:	39 72 14             	cmp    %esi,0x14(%edx)
+80103d31:	75 ed                	jne    80103d20 <exit+0xc0>
+      if (p->state == ZOMBIE)
+80103d33:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+      p->parent = initproc;
+80103d37:	89 4a 14             	mov    %ecx,0x14(%edx)
+      if (p->state == ZOMBIE)
+80103d3a:	75 e4                	jne    80103d20 <exit+0xc0>
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103d3c:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103d41:	eb 11                	jmp    80103d54 <exit+0xf4>
+80103d43:	90                   	nop
+80103d44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d48:	05 88 00 00 00       	add    $0x88,%eax
+80103d4d:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80103d52:	73 cc                	jae    80103d20 <exit+0xc0>
+    if (p->state == SLEEPING && p->chan == chan)
+80103d54:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103d58:	75 ee                	jne    80103d48 <exit+0xe8>
+80103d5a:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103d5d:	75 e9                	jne    80103d48 <exit+0xe8>
+      p->state = RUNNABLE;
+80103d5f:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103d66:	eb e0                	jmp    80103d48 <exit+0xe8>
+  curproc->state = ZOMBIE;
+80103d68:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+  sched();
+80103d6f:	e8 2c fe ff ff       	call   80103ba0 <sched>
+  panic("zombie exit");
+80103d74:	83 ec 0c             	sub    $0xc,%esp
+80103d77:	68 7d 79 10 80       	push   $0x8010797d
+80103d7c:	e8 0f c6 ff ff       	call   80100390 <panic>
+    panic("init exiting");
+80103d81:	83 ec 0c             	sub    $0xc,%esp
+80103d84:	68 70 79 10 80       	push   $0x80107970
+80103d89:	e8 02 c6 ff ff       	call   80100390 <panic>
+80103d8e:	66 90                	xchg   %ax,%ax
+
+80103d90 <yield>:
+{
+80103d90:	55                   	push   %ebp
+80103d91:	89 e5                	mov    %esp,%ebp
+80103d93:	53                   	push   %ebx
+80103d94:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock); //DOC: yieldlock
+80103d97:	68 20 2d 11 80       	push   $0x80112d20
+80103d9c:	e8 8f 09 00 00       	call   80104730 <acquire>
+  pushcli();
+80103da1:	e8 ba 08 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+80103da6:	e8 b5 f9 ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+80103dab:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103db1:	e8 ea 08 00 00       	call   801046a0 <popcli>
+  myproc()->state = RUNNABLE;
+80103db6:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  sched();
+80103dbd:	e8 de fd ff ff       	call   80103ba0 <sched>
+  release(&ptable.lock);
+80103dc2:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103dc9:	e8 22 0a 00 00       	call   801047f0 <release>
+}
+80103dce:	83 c4 10             	add    $0x10,%esp
+80103dd1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103dd4:	c9                   	leave  
+80103dd5:	c3                   	ret    
+80103dd6:	8d 76 00             	lea    0x0(%esi),%esi
+80103dd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103de0 <sleep>:
+{
+80103de0:	55                   	push   %ebp
+80103de1:	89 e5                	mov    %esp,%ebp
+80103de3:	57                   	push   %edi
+80103de4:	56                   	push   %esi
+80103de5:	53                   	push   %ebx
+80103de6:	83 ec 0c             	sub    $0xc,%esp
+80103de9:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103dec:	8b 75 0c             	mov    0xc(%ebp),%esi
+  pushcli();
+80103def:	e8 6c 08 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+80103df4:	e8 67 f9 ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+80103df9:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103dff:	e8 9c 08 00 00       	call   801046a0 <popcli>
+  if (p == 0)
+80103e04:	85 db                	test   %ebx,%ebx
+80103e06:	0f 84 87 00 00 00    	je     80103e93 <sleep+0xb3>
+  if (lk == 0)
+80103e0c:	85 f6                	test   %esi,%esi
+80103e0e:	74 76                	je     80103e86 <sleep+0xa6>
+  if (lk != &ptable.lock){                        //DOC: sleeplock0
+80103e10:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
+80103e16:	74 50                	je     80103e68 <sleep+0x88>
+    acquire(&ptable.lock); //DOC: sleeplock1
+80103e18:	83 ec 0c             	sub    $0xc,%esp
+80103e1b:	68 20 2d 11 80       	push   $0x80112d20
+80103e20:	e8 0b 09 00 00       	call   80104730 <acquire>
+    release(lk);
+80103e25:	89 34 24             	mov    %esi,(%esp)
+80103e28:	e8 c3 09 00 00       	call   801047f0 <release>
+  p->chan = chan;
+80103e2d:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80103e30:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80103e37:	e8 64 fd ff ff       	call   80103ba0 <sched>
+  p->chan = 0;
+80103e3c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+    release(&ptable.lock);
+80103e43:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103e4a:	e8 a1 09 00 00       	call   801047f0 <release>
+    acquire(lk);
+80103e4f:	89 75 08             	mov    %esi,0x8(%ebp)
+80103e52:	83 c4 10             	add    $0x10,%esp
+}
+80103e55:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103e58:	5b                   	pop    %ebx
+80103e59:	5e                   	pop    %esi
+80103e5a:	5f                   	pop    %edi
+80103e5b:	5d                   	pop    %ebp
+    acquire(lk);
+80103e5c:	e9 cf 08 00 00       	jmp    80104730 <acquire>
+80103e61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  p->chan = chan;
+80103e68:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80103e6b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80103e72:	e8 29 fd ff ff       	call   80103ba0 <sched>
+  p->chan = 0;
+80103e77:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+80103e7e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103e81:	5b                   	pop    %ebx
+80103e82:	5e                   	pop    %esi
+80103e83:	5f                   	pop    %edi
+80103e84:	5d                   	pop    %ebp
+80103e85:	c3                   	ret    
+    panic("sleep without lk");
+80103e86:	83 ec 0c             	sub    $0xc,%esp
+80103e89:	68 8f 79 10 80       	push   $0x8010798f
+80103e8e:	e8 fd c4 ff ff       	call   80100390 <panic>
+    panic("sleep");
+80103e93:	83 ec 0c             	sub    $0xc,%esp
+80103e96:	68 89 79 10 80       	push   $0x80107989
+80103e9b:	e8 f0 c4 ff ff       	call   80100390 <panic>
+
+80103ea0 <wait>:
+{
+80103ea0:	55                   	push   %ebp
+80103ea1:	89 e5                	mov    %esp,%ebp
+80103ea3:	56                   	push   %esi
+80103ea4:	53                   	push   %ebx
+  pushcli();
+80103ea5:	e8 b6 07 00 00       	call   80104660 <pushcli>
+  c = mycpu();
+80103eaa:	e8 b1 f8 ff ff       	call   80103760 <mycpu>
+  p = c->proc;
+80103eaf:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103eb5:	e8 e6 07 00 00       	call   801046a0 <popcli>
+  acquire(&ptable.lock);
+80103eba:	83 ec 0c             	sub    $0xc,%esp
+80103ebd:	68 20 2d 11 80       	push   $0x80112d20
+80103ec2:	e8 69 08 00 00       	call   80104730 <acquire>
+80103ec7:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+80103eca:	31 c0                	xor    %eax,%eax
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103ecc:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103ed1:	eb 13                	jmp    80103ee6 <wait+0x46>
+80103ed3:	90                   	nop
+80103ed4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ed8:	81 c3 88 00 00 00    	add    $0x88,%ebx
+80103ede:	81 fb 54 4f 11 80    	cmp    $0x80114f54,%ebx
+80103ee4:	73 1e                	jae    80103f04 <wait+0x64>
+      if (p->parent != curproc)
+80103ee6:	39 73 14             	cmp    %esi,0x14(%ebx)
+80103ee9:	75 ed                	jne    80103ed8 <wait+0x38>
+      if (p->state == ZOMBIE)
+80103eeb:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80103eef:	74 37                	je     80103f28 <wait+0x88>
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103ef1:	81 c3 88 00 00 00    	add    $0x88,%ebx
+      havekids = 1;
+80103ef7:	b8 01 00 00 00       	mov    $0x1,%eax
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103efc:	81 fb 54 4f 11 80    	cmp    $0x80114f54,%ebx
+80103f02:	72 e2                	jb     80103ee6 <wait+0x46>
+    if (!havekids || curproc->killed)
+80103f04:	85 c0                	test   %eax,%eax
+80103f06:	74 76                	je     80103f7e <wait+0xde>
+80103f08:	8b 46 24             	mov    0x24(%esi),%eax
+80103f0b:	85 c0                	test   %eax,%eax
+80103f0d:	75 6f                	jne    80103f7e <wait+0xde>
+    sleep(curproc, &ptable.lock); //DOC: wait-sleep
+80103f0f:	83 ec 08             	sub    $0x8,%esp
+80103f12:	68 20 2d 11 80       	push   $0x80112d20
+80103f17:	56                   	push   %esi
+80103f18:	e8 c3 fe ff ff       	call   80103de0 <sleep>
+    havekids = 0;
+80103f1d:	83 c4 10             	add    $0x10,%esp
+80103f20:	eb a8                	jmp    80103eca <wait+0x2a>
+80103f22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        kfree(p->kstack);
+80103f28:	83 ec 0c             	sub    $0xc,%esp
+80103f2b:	ff 73 08             	pushl  0x8(%ebx)
+        pid = p->pid;
+80103f2e:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80103f31:	e8 da e3 ff ff       	call   80102310 <kfree>
+        freevm(p->pgdir);
+80103f36:	5a                   	pop    %edx
+80103f37:	ff 73 04             	pushl  0x4(%ebx)
+        p->kstack = 0;
+80103f3a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80103f41:	e8 2a 31 00 00       	call   80107070 <freevm>
+        release(&ptable.lock);
+80103f46:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+        p->pid = 0;
+80103f4d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80103f54:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+80103f5b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+80103f5f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->state = UNUSED;
+80103f66:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        release(&ptable.lock);
+80103f6d:	e8 7e 08 00 00       	call   801047f0 <release>
+        return pid;
+80103f72:	83 c4 10             	add    $0x10,%esp
+}
+80103f75:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f78:	89 f0                	mov    %esi,%eax
+80103f7a:	5b                   	pop    %ebx
+80103f7b:	5e                   	pop    %esi
+80103f7c:	5d                   	pop    %ebp
+80103f7d:	c3                   	ret    
+      release(&ptable.lock);
+80103f7e:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80103f81:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+80103f86:	68 20 2d 11 80       	push   $0x80112d20
+80103f8b:	e8 60 08 00 00       	call   801047f0 <release>
+      return -1;
+80103f90:	83 c4 10             	add    $0x10,%esp
+80103f93:	eb e0                	jmp    80103f75 <wait+0xd5>
+80103f95:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103f99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103fa0 <wakeup>:
+}
+
+// Wake up all processes sleeping on chan.
+void wakeup(void *chan)
+{
+80103fa0:	55                   	push   %ebp
+80103fa1:	89 e5                	mov    %esp,%ebp
+80103fa3:	53                   	push   %ebx
+80103fa4:	83 ec 10             	sub    $0x10,%esp
+80103fa7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+80103faa:	68 20 2d 11 80       	push   $0x80112d20
+80103faf:	e8 7c 07 00 00       	call   80104730 <acquire>
+80103fb4:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103fb7:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103fbc:	eb 0e                	jmp    80103fcc <wakeup+0x2c>
+80103fbe:	66 90                	xchg   %ax,%ax
+80103fc0:	05 88 00 00 00       	add    $0x88,%eax
+80103fc5:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80103fca:	73 1e                	jae    80103fea <wakeup+0x4a>
+    if (p->state == SLEEPING && p->chan == chan)
+80103fcc:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103fd0:	75 ee                	jne    80103fc0 <wakeup+0x20>
+80103fd2:	3b 58 20             	cmp    0x20(%eax),%ebx
+80103fd5:	75 e9                	jne    80103fc0 <wakeup+0x20>
+      p->state = RUNNABLE;
+80103fd7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103fde:	05 88 00 00 00       	add    $0x88,%eax
+80103fe3:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80103fe8:	72 e2                	jb     80103fcc <wakeup+0x2c>
+  wakeup1(chan);
+  release(&ptable.lock);
+80103fea:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+}
+80103ff1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103ff4:	c9                   	leave  
+  release(&ptable.lock);
+80103ff5:	e9 f6 07 00 00       	jmp    801047f0 <release>
+80103ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104000 <kill>:
+
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int kill(int pid)
+{
+80104000:	55                   	push   %ebp
+80104001:	89 e5                	mov    %esp,%ebp
+80104003:	53                   	push   %ebx
+80104004:	83 ec 10             	sub    $0x10,%esp
+80104007:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+8010400a:	68 20 2d 11 80       	push   $0x80112d20
+8010400f:	e8 1c 07 00 00       	call   80104730 <acquire>
+80104014:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104017:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+8010401c:	eb 0e                	jmp    8010402c <kill+0x2c>
+8010401e:	66 90                	xchg   %ax,%ax
+80104020:	05 88 00 00 00       	add    $0x88,%eax
+80104025:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+8010402a:	73 34                	jae    80104060 <kill+0x60>
+  {
+    if (p->pid == pid)
+8010402c:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010402f:	75 ef                	jne    80104020 <kill+0x20>
+    {
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if (p->state == SLEEPING)
+80104031:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      p->killed = 1;
+80104035:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if (p->state == SLEEPING)
+8010403c:	75 07                	jne    80104045 <kill+0x45>
+        p->state = RUNNABLE;
+8010403e:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+      release(&ptable.lock);
+80104045:	83 ec 0c             	sub    $0xc,%esp
+80104048:	68 20 2d 11 80       	push   $0x80112d20
+8010404d:	e8 9e 07 00 00       	call   801047f0 <release>
+      return 0;
+80104052:	83 c4 10             	add    $0x10,%esp
+80104055:	31 c0                	xor    %eax,%eax
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+80104057:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010405a:	c9                   	leave  
+8010405b:	c3                   	ret    
+8010405c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  release(&ptable.lock);
+80104060:	83 ec 0c             	sub    $0xc,%esp
+80104063:	68 20 2d 11 80       	push   $0x80112d20
+80104068:	e8 83 07 00 00       	call   801047f0 <release>
+  return -1;
+8010406d:	83 c4 10             	add    $0x10,%esp
+80104070:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104075:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104078:	c9                   	leave  
+80104079:	c3                   	ret    
+8010407a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104080 <procdump>:
+//PAGEBREAK: 36
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void procdump(void)
+{
+80104080:	55                   	push   %ebp
+80104081:	89 e5                	mov    %esp,%ebp
+80104083:	57                   	push   %edi
+80104084:	56                   	push   %esi
+80104085:	53                   	push   %ebx
+80104086:	8d 75 e8             	lea    -0x18(%ebp),%esi
+  int i;
+  struct proc *p;
+  char *state;
+  uint pc[10];
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104089:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+{
+8010408e:	83 ec 3c             	sub    $0x3c,%esp
+80104091:	eb 27                	jmp    801040ba <procdump+0x3a>
+80104093:	90                   	nop
+80104094:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+80104098:	83 ec 0c             	sub    $0xc,%esp
+8010409b:	68 d7 7d 10 80       	push   $0x80107dd7
+801040a0:	e8 bb c5 ff ff       	call   80100660 <cprintf>
+801040a5:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801040a8:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801040ae:	81 fb 54 4f 11 80    	cmp    $0x80114f54,%ebx
+801040b4:	0f 83 86 00 00 00    	jae    80104140 <procdump+0xc0>
+    if (p->state == UNUSED)
+801040ba:	8b 43 0c             	mov    0xc(%ebx),%eax
+801040bd:	85 c0                	test   %eax,%eax
+801040bf:	74 e7                	je     801040a8 <procdump+0x28>
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
+801040c1:	83 f8 05             	cmp    $0x5,%eax
+      state = "???";
+801040c4:	ba a0 79 10 80       	mov    $0x801079a0,%edx
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
+801040c9:	77 11                	ja     801040dc <procdump+0x5c>
+801040cb:	8b 14 85 a8 7a 10 80 	mov    -0x7fef8558(,%eax,4),%edx
+      state = "???";
+801040d2:	b8 a0 79 10 80       	mov    $0x801079a0,%eax
+801040d7:	85 d2                	test   %edx,%edx
+801040d9:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+801040dc:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801040df:	50                   	push   %eax
+801040e0:	52                   	push   %edx
+801040e1:	ff 73 10             	pushl  0x10(%ebx)
+801040e4:	68 a4 79 10 80       	push   $0x801079a4
+801040e9:	e8 72 c5 ff ff       	call   80100660 <cprintf>
+    if (p->state == SLEEPING)
+801040ee:	83 c4 10             	add    $0x10,%esp
+801040f1:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
+801040f5:	75 a1                	jne    80104098 <procdump+0x18>
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+801040f7:	8d 45 c0             	lea    -0x40(%ebp),%eax
+801040fa:	83 ec 08             	sub    $0x8,%esp
+801040fd:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104100:	50                   	push   %eax
+80104101:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80104104:	8b 40 0c             	mov    0xc(%eax),%eax
+80104107:	83 c0 08             	add    $0x8,%eax
+8010410a:	50                   	push   %eax
+8010410b:	e8 00 05 00 00       	call   80104610 <getcallerpcs>
+80104110:	83 c4 10             	add    $0x10,%esp
+80104113:	90                   	nop
+80104114:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      for (i = 0; i < 10 && pc[i] != 0; i++)
+80104118:	8b 17                	mov    (%edi),%edx
+8010411a:	85 d2                	test   %edx,%edx
+8010411c:	0f 84 76 ff ff ff    	je     80104098 <procdump+0x18>
+        cprintf(" %p", pc[i]);
+80104122:	83 ec 08             	sub    $0x8,%esp
+80104125:	83 c7 04             	add    $0x4,%edi
+80104128:	52                   	push   %edx
+80104129:	68 e1 73 10 80       	push   $0x801073e1
+8010412e:	e8 2d c5 ff ff       	call   80100660 <cprintf>
+      for (i = 0; i < 10 && pc[i] != 0; i++)
+80104133:	83 c4 10             	add    $0x10,%esp
+80104136:	39 fe                	cmp    %edi,%esi
+80104138:	75 de                	jne    80104118 <procdump+0x98>
+8010413a:	e9 59 ff ff ff       	jmp    80104098 <procdump+0x18>
+8010413f:	90                   	nop
+  }
+}
+80104140:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104143:	5b                   	pop    %ebx
+80104144:	5e                   	pop    %esi
+80104145:	5f                   	pop    %edi
+80104146:	5d                   	pop    %ebp
+80104147:	c3                   	ret    
+80104148:	90                   	nop
+80104149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104150 <getNumProc>:
+
+int getNumProc(void)
+{
+80104150:	55                   	push   %ebp
+80104151:	89 e5                	mov    %esp,%ebp
+80104153:	53                   	push   %ebx
+  struct proc *p;
+  acquire(&ptable.lock);
+  int cnt = 0;        // to count number of processes.
+80104154:	31 db                	xor    %ebx,%ebx
+{
+80104156:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+80104159:	68 20 2d 11 80       	push   $0x80112d20
+8010415e:	e8 cd 05 00 00       	call   80104730 <acquire>
+80104163:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104166:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+8010416b:	90                   	nop
+8010416c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  {
+    if(p->state == UNUSED) continue;
+    cnt++;
+80104170:	83 7a 0c 01          	cmpl   $0x1,0xc(%edx)
+80104174:	83 db ff             	sbb    $0xffffffff,%ebx
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104177:	81 c2 88 00 00 00    	add    $0x88,%edx
+8010417d:	81 fa 54 4f 11 80    	cmp    $0x80114f54,%edx
+80104183:	72 eb                	jb     80104170 <getNumProc+0x20>
+  }
+  release(&ptable.lock);
+80104185:	83 ec 0c             	sub    $0xc,%esp
+80104188:	68 20 2d 11 80       	push   $0x80112d20
+8010418d:	e8 5e 06 00 00       	call   801047f0 <release>
+  return cnt;
+}
+80104192:	89 d8                	mov    %ebx,%eax
+80104194:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104197:	c9                   	leave  
+80104198:	c3                   	ret    
+80104199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801041a0 <getMaxPid>:
+
+int getMaxPid(void)
+{
+801041a0:	55                   	push   %ebp
+801041a1:	89 e5                	mov    %esp,%ebp
+801041a3:	53                   	push   %ebx
+  struct proc *p;
+  acquire(&ptable.lock);
+  int max_pid = -1;
+801041a4:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+{
+801041a9:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+801041ac:	68 20 2d 11 80       	push   $0x80112d20
+801041b1:	e8 7a 05 00 00       	call   80104730 <acquire>
+801041b6:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)              
+801041b9:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+801041be:	66 90                	xchg   %ax,%ax
+801041c0:	8b 42 10             	mov    0x10(%edx),%eax
+801041c3:	39 c3                	cmp    %eax,%ebx
+801041c5:	0f 4c d8             	cmovl  %eax,%ebx
+801041c8:	81 c2 88 00 00 00    	add    $0x88,%edx
+801041ce:	81 fa 54 4f 11 80    	cmp    $0x80114f54,%edx
+801041d4:	72 ea                	jb     801041c0 <getMaxPid+0x20>
+  {
+    if (p->pid > max_pid)       //to calculate max pid
+      max_pid = (p->pid);
+  }
+  release(&ptable.lock);
+801041d6:	83 ec 0c             	sub    $0xc,%esp
+801041d9:	68 20 2d 11 80       	push   $0x80112d20
+801041de:	e8 0d 06 00 00       	call   801047f0 <release>
+  return max_pid;
+}
+801041e3:	89 d8                	mov    %ebx,%eax
+801041e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041e8:	c9                   	leave  
+801041e9:	c3                   	ret    
+801041ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801041f0 <getProcInfo>:
+
+
+int getProcInfo(int pid, struct processInfo *pif)
+{
+801041f0:	55                   	push   %ebp
+801041f1:	89 e5                	mov    %esp,%ebp
+801041f3:	56                   	push   %esi
+801041f4:	53                   	push   %ebx
+801041f5:	8b 75 0c             	mov    0xc(%ebp),%esi
+801041f8:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+  acquire(&ptable.lock);
+801041fb:	83 ec 0c             	sub    $0xc,%esp
+801041fe:	68 20 2d 11 80       	push   $0x80112d20
+80104203:	e8 28 05 00 00       	call   80104730 <acquire>
+80104208:	83 c4 10             	add    $0x10,%esp
+  int flag = -1;
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+8010420b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104210:	eb 12                	jmp    80104224 <getProcInfo+0x34>
+80104212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104218:	05 88 00 00 00       	add    $0x88,%eax
+8010421d:	3d 54 4f 11 80       	cmp    $0x80114f54,%eax
+80104222:	73 34                	jae    80104258 <getProcInfo+0x68>
+  {
+    if (p->pid == pid)        // it it matches the given id
+80104224:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104227:	75 ef                	jne    80104218 <getProcInfo+0x28>
+    {
+      pif->ppid = p->parent->pid;
+80104229:	8b 50 14             	mov    0x14(%eax),%edx
+      pif->numberContextSwitches = p->count_contextswitch;
+      pif->psize = p->sz;
+      flag = 0;
+8010422c:	31 db                	xor    %ebx,%ebx
+      pif->ppid = p->parent->pid;
+8010422e:	8b 52 10             	mov    0x10(%edx),%edx
+80104231:	89 16                	mov    %edx,(%esi)
+      pif->numberContextSwitches = p->count_contextswitch;
+80104233:	8b 50 7c             	mov    0x7c(%eax),%edx
+80104236:	89 56 08             	mov    %edx,0x8(%esi)
+      pif->psize = p->sz;
+80104239:	8b 00                	mov    (%eax),%eax
+8010423b:	89 46 04             	mov    %eax,0x4(%esi)
+      break;
+    }
+  }
+  release(&ptable.lock);
+8010423e:	83 ec 0c             	sub    $0xc,%esp
+80104241:	68 20 2d 11 80       	push   $0x80112d20
+80104246:	e8 a5 05 00 00       	call   801047f0 <release>
+  return flag;
+}
+8010424b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010424e:	89 d8                	mov    %ebx,%eax
+80104250:	5b                   	pop    %ebx
+80104251:	5e                   	pop    %esi
+80104252:	5d                   	pop    %ebp
+80104253:	c3                   	ret    
+80104254:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int flag = -1;
+80104258:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010425d:	eb df                	jmp    8010423e <getProcInfo+0x4e>
+8010425f:	90                   	nop
+
+80104260 <set_burst_time>:
+int set_burst_time(int bt)
+{
+80104260:	55                   	push   %ebp
+80104261:	89 e5                	mov    %esp,%ebp
+80104263:	83 ec 14             	sub    $0x14,%esp
+  int flag = -1;
+  acquire(&ptable.lock);
+80104266:	68 20 2d 11 80       	push   $0x80112d20
+8010426b:	e8 c0 04 00 00       	call   80104730 <acquire>
+  mycpu()->proc->burst_time = bt;       // to set the burst time
+80104270:	e8 eb f4 ff ff       	call   80103760 <mycpu>
+80104275:	8b 55 08             	mov    0x8(%ebp),%edx
+80104278:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+8010427e:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
+  flag = 0;
+  release(&ptable.lock);
+80104284:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010428b:	e8 60 05 00 00       	call   801047f0 <release>
+  yield();
+80104290:	e8 fb fa ff ff       	call   80103d90 <yield>
+  return flag;
+}
+80104295:	31 c0                	xor    %eax,%eax
+80104297:	c9                   	leave  
+80104298:	c3                   	ret    
+80104299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801042a0 <get_burst_time>:
+
+int get_burst_time()
+{
+801042a0:	55                   	push   %ebp
+801042a1:	89 e5                	mov    %esp,%ebp
+801042a3:	53                   	push   %ebx
+801042a4:	83 ec 10             	sub    $0x10,%esp
+  int burstTime = -1;
+  acquire(&ptable.lock);
+801042a7:	68 20 2d 11 80       	push   $0x80112d20
+801042ac:	e8 7f 04 00 00       	call   80104730 <acquire>
+  burstTime = mycpu()->proc->burst_time;
+801042b1:	e8 aa f4 ff ff       	call   80103760 <mycpu>
+801042b6:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+801042bc:	8b 98 80 00 00 00    	mov    0x80(%eax),%ebx
+  release(&ptable.lock);
+801042c2:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801042c9:	e8 22 05 00 00       	call   801047f0 <release>
+  return burstTime;
+}
+801042ce:	89 d8                	mov    %ebx,%eax
+801042d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801042d3:	c9                   	leave  
+801042d4:	c3                   	ret    
+801042d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801042d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801042e0 <process_state>:
+int process_state()
+{
+801042e0:	55                   	push   %ebp
+801042e1:	89 e5                	mov    %esp,%ebp
+801042e3:	53                   	push   %ebx
+801042e4:	83 ec 10             	sub    $0x10,%esp
+  asm volatile("sti");
+801042e7:	fb                   	sti    
+  struct proc *p;
+  sti();
+  acquire(&ptable.lock);
+801042e8:	68 20 2d 11 80       	push   $0x80112d20
+  cprintf("Name \t PID \t State \t Burst_Time \n");
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801042ed:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+  acquire(&ptable.lock);
+801042f2:	e8 39 04 00 00       	call   80104730 <acquire>
+  cprintf("Name \t PID \t State \t Burst_Time \n");
+801042f7:	c7 04 24 84 7a 10 80 	movl   $0x80107a84,(%esp)
+801042fe:	e8 5d c3 ff ff       	call   80100660 <cprintf>
+80104303:	83 c4 10             	add    $0x10,%esp
+80104306:	eb 36                	jmp    8010433e <process_state+0x5e>
+80104308:	90                   	nop
+80104309:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  {
+    if(p->state == ZOMBIE)
+      cprintf("%s \t %d \t ZOMBIE \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == RUNNABLE)
+80104310:	83 f8 03             	cmp    $0x3,%eax
+80104313:	74 73                	je     80104388 <process_state+0xa8>
+      cprintf("%s \t %d \t RUNNABLE \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == EMBRYO)
+80104315:	83 f8 01             	cmp    $0x1,%eax
+80104318:	0f 84 8a 00 00 00    	je     801043a8 <process_state+0xc8>
+      cprintf("%s \t %d \t EMBRYO \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == RUNNING)
+8010431e:	83 f8 04             	cmp    $0x4,%eax
+80104321:	0f 84 a9 00 00 00    	je     801043d0 <process_state+0xf0>
+      cprintf("%s \t %d \t RUNNING \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == SLEEPING)
+80104327:	83 f8 02             	cmp    $0x2,%eax
+8010432a:	0f 84 c0 00 00 00    	je     801043f0 <process_state+0x110>
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104330:	81 c3 88 00 00 00    	add    $0x88,%ebx
+80104336:	81 fb 54 4f 11 80    	cmp    $0x80114f54,%ebx
+8010433c:	73 30                	jae    8010436e <process_state+0x8e>
+    if(p->state == ZOMBIE)
+8010433e:	8b 43 0c             	mov    0xc(%ebx),%eax
+80104341:	83 f8 05             	cmp    $0x5,%eax
+80104344:	75 ca                	jne    80104310 <process_state+0x30>
+      cprintf("%s \t %d \t ZOMBIE \t %d \n ", p->name, p->pid, p->burst_time);
+80104346:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104349:	ff b3 80 00 00 00    	pushl  0x80(%ebx)
+8010434f:	ff 73 10             	pushl  0x10(%ebx)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104352:	81 c3 88 00 00 00    	add    $0x88,%ebx
+      cprintf("%s \t %d \t ZOMBIE \t %d \n ", p->name, p->pid, p->burst_time);
+80104358:	50                   	push   %eax
+80104359:	68 ad 79 10 80       	push   $0x801079ad
+8010435e:	e8 fd c2 ff ff       	call   80100660 <cprintf>
+80104363:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104366:	81 fb 54 4f 11 80    	cmp    $0x80114f54,%ebx
+8010436c:	72 d0                	jb     8010433e <process_state+0x5e>
+      cprintf("%s \t %d \t SLEEPING \t %d \n ", p->name, p->pid, p->burst_time);
+  }
+  release(&ptable.lock);
+8010436e:	83 ec 0c             	sub    $0xc,%esp
+80104371:	68 20 2d 11 80       	push   $0x80112d20
+80104376:	e8 75 04 00 00       	call   801047f0 <release>
+  return 0;
+}
+8010437b:	31 c0                	xor    %eax,%eax
+8010437d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104380:	c9                   	leave  
+80104381:	c3                   	ret    
+80104382:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      cprintf("%s \t %d \t RUNNABLE \t %d \n ", p->name, p->pid, p->burst_time);
+80104388:	8d 43 6c             	lea    0x6c(%ebx),%eax
+8010438b:	ff b3 80 00 00 00    	pushl  0x80(%ebx)
+80104391:	ff 73 10             	pushl  0x10(%ebx)
+80104394:	50                   	push   %eax
+80104395:	68 c6 79 10 80       	push   $0x801079c6
+8010439a:	e8 c1 c2 ff ff       	call   80100660 <cprintf>
+8010439f:	83 c4 10             	add    $0x10,%esp
+801043a2:	eb 8c                	jmp    80104330 <process_state+0x50>
+801043a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      cprintf("%s \t %d \t EMBRYO \t %d \n ", p->name, p->pid, p->burst_time);
+801043a8:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801043ab:	ff b3 80 00 00 00    	pushl  0x80(%ebx)
+801043b1:	ff 73 10             	pushl  0x10(%ebx)
+801043b4:	50                   	push   %eax
+801043b5:	68 e1 79 10 80       	push   $0x801079e1
+801043ba:	e8 a1 c2 ff ff       	call   80100660 <cprintf>
+801043bf:	83 c4 10             	add    $0x10,%esp
+801043c2:	e9 69 ff ff ff       	jmp    80104330 <process_state+0x50>
+801043c7:	89 f6                	mov    %esi,%esi
+801043c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      cprintf("%s \t %d \t RUNNING \t %d \n ", p->name, p->pid, p->burst_time);
+801043d0:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801043d3:	ff b3 80 00 00 00    	pushl  0x80(%ebx)
+801043d9:	ff 73 10             	pushl  0x10(%ebx)
+801043dc:	50                   	push   %eax
+801043dd:	68 fa 79 10 80       	push   $0x801079fa
+801043e2:	e8 79 c2 ff ff       	call   80100660 <cprintf>
+801043e7:	83 c4 10             	add    $0x10,%esp
+801043ea:	e9 41 ff ff ff       	jmp    80104330 <process_state+0x50>
+801043ef:	90                   	nop
+      cprintf("%s \t %d \t SLEEPING \t %d \n ", p->name, p->pid, p->burst_time);
+801043f0:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801043f3:	ff b3 80 00 00 00    	pushl  0x80(%ebx)
+801043f9:	ff 73 10             	pushl  0x10(%ebx)
+801043fc:	50                   	push   %eax
+801043fd:	68 14 7a 10 80       	push   $0x80107a14
+80104402:	e8 59 c2 ff ff       	call   80100660 <cprintf>
+80104407:	83 c4 10             	add    $0x10,%esp
+8010440a:	e9 21 ff ff ff       	jmp    80104330 <process_state+0x50>
+8010440f:	90                   	nop
+
+80104410 <dec_burstTime>:
+
+void dec_burstTime(void)
+{
+80104410:	55                   	push   %ebp
+80104411:	89 e5                	mov    %esp,%ebp
+80104413:	53                   	push   %ebx
+80104414:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104419:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010441c:	68 20 2d 11 80       	push   $0x80112d20
+80104421:	e8 0a 03 00 00       	call   80104730 <acquire>
+  mycpu()->proc->burst_time = mycpu()->proc->burst_time < 0 ? -1 : mycpu()->proc->burst_time - QUANTA;
+80104426:	e8 35 f3 ff ff       	call   80103760 <mycpu>
+8010442b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80104431:	83 c4 10             	add    $0x10,%esp
+80104434:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
+8010443a:	85 c0                	test   %eax,%eax
+8010443c:	78 14                	js     80104452 <dec_burstTime+0x42>
+8010443e:	e8 1d f3 ff ff       	call   80103760 <mycpu>
+80104443:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80104449:	8b 98 80 00 00 00    	mov    0x80(%eax),%ebx
+8010444f:	83 eb 02             	sub    $0x2,%ebx
+80104452:	e8 09 f3 ff ff       	call   80103760 <mycpu>
+80104457:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+  release(&ptable.lock);
+8010445d:	83 ec 0c             	sub    $0xc,%esp
+  mycpu()->proc->burst_time = mycpu()->proc->burst_time < 0 ? -1 : mycpu()->proc->burst_time - QUANTA;
+80104460:	89 98 80 00 00 00    	mov    %ebx,0x80(%eax)
+  release(&ptable.lock);
+80104466:	68 20 2d 11 80       	push   $0x80112d20
+8010446b:	e8 80 03 00 00       	call   801047f0 <release>
+}
+80104470:	83 c4 10             	add    $0x10,%esp
+80104473:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104476:	c9                   	leave  
+80104477:	c3                   	ret    
+80104478:	90                   	nop
+80104479:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104480 <inc_cpucounter>:
+
+int inc_cpucounter(void)
+{
+80104480:	55                   	push   %ebp
+80104481:	89 e5                	mov    %esp,%ebp
+80104483:	53                   	push   %ebx
+80104484:	83 ec 10             	sub    $0x10,%esp
+  int res;
+  acquire(&ptable.lock);
+80104487:	68 20 2d 11 80       	push   $0x80112d20
+8010448c:	e8 9f 02 00 00       	call   80104730 <acquire>
+  res = ++mycpu()->proc->cpucounter;
+80104491:	e8 ca f2 ff ff       	call   80103760 <mycpu>
+80104496:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+8010449c:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
+801044a2:	8d 5a 01             	lea    0x1(%edx),%ebx
+801044a5:	89 98 84 00 00 00    	mov    %ebx,0x84(%eax)
+  release(&ptable.lock);
+801044ab:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801044b2:	e8 39 03 00 00       	call   801047f0 <release>
+  return res;
+801044b7:	89 d8                	mov    %ebx,%eax
+801044b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801044bc:	c9                   	leave  
+801044bd:	c3                   	ret    
+801044be:	66 90                	xchg   %ax,%ax
+
+801044c0 <initsleeplock>:
+#include "spinlock.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+801044c0:	55                   	push   %ebp
+801044c1:	89 e5                	mov    %esp,%ebp
+801044c3:	53                   	push   %ebx
+801044c4:	83 ec 0c             	sub    $0xc,%esp
+801044c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&lk->lk, "sleep lock");
+801044ca:	68 c0 7a 10 80       	push   $0x80107ac0
+801044cf:	8d 43 04             	lea    0x4(%ebx),%eax
+801044d2:	50                   	push   %eax
+801044d3:	e8 18 01 00 00       	call   801045f0 <initlock>
+  lk->name = name;
+801044d8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  lk->locked = 0;
+801044db:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+}
+801044e1:	83 c4 10             	add    $0x10,%esp
+  lk->pid = 0;
+801044e4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  lk->name = name;
+801044eb:	89 43 38             	mov    %eax,0x38(%ebx)
+}
+801044ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801044f1:	c9                   	leave  
+801044f2:	c3                   	ret    
+801044f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801044f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104500 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+80104500:	55                   	push   %ebp
+80104501:	89 e5                	mov    %esp,%ebp
+80104503:	56                   	push   %esi
+80104504:	53                   	push   %ebx
+80104505:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104508:	83 ec 0c             	sub    $0xc,%esp
+8010450b:	8d 73 04             	lea    0x4(%ebx),%esi
+8010450e:	56                   	push   %esi
+8010450f:	e8 1c 02 00 00       	call   80104730 <acquire>
+  while (lk->locked) {
+80104514:	8b 13                	mov    (%ebx),%edx
+80104516:	83 c4 10             	add    $0x10,%esp
+80104519:	85 d2                	test   %edx,%edx
+8010451b:	74 16                	je     80104533 <acquiresleep+0x33>
+8010451d:	8d 76 00             	lea    0x0(%esi),%esi
+    sleep(lk, &lk->lk);
+80104520:	83 ec 08             	sub    $0x8,%esp
+80104523:	56                   	push   %esi
+80104524:	53                   	push   %ebx
+80104525:	e8 b6 f8 ff ff       	call   80103de0 <sleep>
+  while (lk->locked) {
+8010452a:	8b 03                	mov    (%ebx),%eax
+8010452c:	83 c4 10             	add    $0x10,%esp
+8010452f:	85 c0                	test   %eax,%eax
+80104531:	75 ed                	jne    80104520 <acquiresleep+0x20>
+  }
+  lk->locked = 1;
+80104533:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  lk->pid = myproc()->pid;
+80104539:	e8 c2 f2 ff ff       	call   80103800 <myproc>
+8010453e:	8b 40 10             	mov    0x10(%eax),%eax
+80104541:	89 43 3c             	mov    %eax,0x3c(%ebx)
+  release(&lk->lk);
+80104544:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80104547:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010454a:	5b                   	pop    %ebx
+8010454b:	5e                   	pop    %esi
+8010454c:	5d                   	pop    %ebp
+  release(&lk->lk);
+8010454d:	e9 9e 02 00 00       	jmp    801047f0 <release>
+80104552:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104559:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104560 <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+80104560:	55                   	push   %ebp
+80104561:	89 e5                	mov    %esp,%ebp
+80104563:	56                   	push   %esi
+80104564:	53                   	push   %ebx
+80104565:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104568:	83 ec 0c             	sub    $0xc,%esp
+8010456b:	8d 73 04             	lea    0x4(%ebx),%esi
+8010456e:	56                   	push   %esi
+8010456f:	e8 bc 01 00 00       	call   80104730 <acquire>
+  lk->locked = 0;
+80104574:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+8010457a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  wakeup(lk);
+80104581:	89 1c 24             	mov    %ebx,(%esp)
+80104584:	e8 17 fa ff ff       	call   80103fa0 <wakeup>
+  release(&lk->lk);
+80104589:	89 75 08             	mov    %esi,0x8(%ebp)
+8010458c:	83 c4 10             	add    $0x10,%esp
+}
+8010458f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104592:	5b                   	pop    %ebx
+80104593:	5e                   	pop    %esi
+80104594:	5d                   	pop    %ebp
+  release(&lk->lk);
+80104595:	e9 56 02 00 00       	jmp    801047f0 <release>
+8010459a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801045a0 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+801045a0:	55                   	push   %ebp
+801045a1:	89 e5                	mov    %esp,%ebp
+801045a3:	57                   	push   %edi
+801045a4:	56                   	push   %esi
+801045a5:	53                   	push   %ebx
+801045a6:	31 ff                	xor    %edi,%edi
+801045a8:	83 ec 18             	sub    $0x18,%esp
+801045ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int r;
+  
+  acquire(&lk->lk);
+801045ae:	8d 73 04             	lea    0x4(%ebx),%esi
+801045b1:	56                   	push   %esi
+801045b2:	e8 79 01 00 00       	call   80104730 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+801045b7:	8b 03                	mov    (%ebx),%eax
+801045b9:	83 c4 10             	add    $0x10,%esp
+801045bc:	85 c0                	test   %eax,%eax
+801045be:	74 13                	je     801045d3 <holdingsleep+0x33>
+801045c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+801045c3:	e8 38 f2 ff ff       	call   80103800 <myproc>
+801045c8:	39 58 10             	cmp    %ebx,0x10(%eax)
+801045cb:	0f 94 c0             	sete   %al
+801045ce:	0f b6 c0             	movzbl %al,%eax
+801045d1:	89 c7                	mov    %eax,%edi
+  release(&lk->lk);
+801045d3:	83 ec 0c             	sub    $0xc,%esp
+801045d6:	56                   	push   %esi
+801045d7:	e8 14 02 00 00       	call   801047f0 <release>
+  return r;
+}
+801045dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801045df:	89 f8                	mov    %edi,%eax
+801045e1:	5b                   	pop    %ebx
+801045e2:	5e                   	pop    %esi
+801045e3:	5f                   	pop    %edi
+801045e4:	5d                   	pop    %ebp
+801045e5:	c3                   	ret    
+801045e6:	66 90                	xchg   %ax,%ax
+801045e8:	66 90                	xchg   %ax,%ax
+801045ea:	66 90                	xchg   %ax,%ax
+801045ec:	66 90                	xchg   %ax,%ax
+801045ee:	66 90                	xchg   %ax,%ax
+
+801045f0 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+801045f0:	55                   	push   %ebp
+801045f1:	89 e5                	mov    %esp,%ebp
+801045f3:	8b 45 08             	mov    0x8(%ebp),%eax
+  lk->name = name;
+801045f6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  lk->locked = 0;
+801045f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  lk->name = name;
+801045ff:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->cpu = 0;
+80104602:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+80104609:	5d                   	pop    %ebp
+8010460a:	c3                   	ret    
+8010460b:	90                   	nop
+8010460c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104610 <getcallerpcs>:
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+80104610:	55                   	push   %ebp
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+80104611:	31 d2                	xor    %edx,%edx
+{
+80104613:	89 e5                	mov    %esp,%ebp
+80104615:	53                   	push   %ebx
+  ebp = (uint*)v - 2;
+80104616:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80104619:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  ebp = (uint*)v - 2;
+8010461c:	83 e8 08             	sub    $0x8,%eax
+8010461f:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104620:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104626:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010462c:	77 1a                	ja     80104648 <getcallerpcs+0x38>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+8010462e:	8b 58 04             	mov    0x4(%eax),%ebx
+80104631:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+  for(i = 0; i < 10; i++){
+80104634:	83 c2 01             	add    $0x1,%edx
+    ebp = (uint*)ebp[0]; // saved %ebp
+80104637:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+80104639:	83 fa 0a             	cmp    $0xa,%edx
+8010463c:	75 e2                	jne    80104620 <getcallerpcs+0x10>
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+8010463e:	5b                   	pop    %ebx
+8010463f:	5d                   	pop    %ebp
+80104640:	c3                   	ret    
+80104641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104648:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+8010464b:	83 c1 28             	add    $0x28,%ecx
+8010464e:	66 90                	xchg   %ax,%ax
+    pcs[i] = 0;
+80104650:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104656:	83 c0 04             	add    $0x4,%eax
+  for(; i < 10; i++)
+80104659:	39 c1                	cmp    %eax,%ecx
+8010465b:	75 f3                	jne    80104650 <getcallerpcs+0x40>
+}
+8010465d:	5b                   	pop    %ebx
+8010465e:	5d                   	pop    %ebp
+8010465f:	c3                   	ret    
+
+80104660 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+80104660:	55                   	push   %ebp
+80104661:	89 e5                	mov    %esp,%ebp
+80104663:	53                   	push   %ebx
+80104664:	83 ec 04             	sub    $0x4,%esp
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104667:	9c                   	pushf  
+80104668:	5b                   	pop    %ebx
+  asm volatile("cli");
+80104669:	fa                   	cli    
+  int eflags;
+
+  eflags = readeflags();
+  cli();
+  if(mycpu()->ncli == 0)
+8010466a:	e8 f1 f0 ff ff       	call   80103760 <mycpu>
+8010466f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104675:	85 c0                	test   %eax,%eax
+80104677:	75 11                	jne    8010468a <pushcli+0x2a>
+    mycpu()->intena = eflags & FL_IF;
+80104679:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010467f:	e8 dc f0 ff ff       	call   80103760 <mycpu>
+80104684:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+  mycpu()->ncli += 1;
+8010468a:	e8 d1 f0 ff ff       	call   80103760 <mycpu>
+8010468f:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+}
+80104696:	83 c4 04             	add    $0x4,%esp
+80104699:	5b                   	pop    %ebx
+8010469a:	5d                   	pop    %ebp
+8010469b:	c3                   	ret    
+8010469c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801046a0 <popcli>:
+
+void
+popcli(void)
+{
+801046a0:	55                   	push   %ebp
+801046a1:	89 e5                	mov    %esp,%ebp
+801046a3:	83 ec 08             	sub    $0x8,%esp
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801046a6:	9c                   	pushf  
+801046a7:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+801046a8:	f6 c4 02             	test   $0x2,%ah
+801046ab:	75 35                	jne    801046e2 <popcli+0x42>
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+801046ad:	e8 ae f0 ff ff       	call   80103760 <mycpu>
+801046b2:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+801046b9:	78 34                	js     801046ef <popcli+0x4f>
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+801046bb:	e8 a0 f0 ff ff       	call   80103760 <mycpu>
+801046c0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+801046c6:	85 d2                	test   %edx,%edx
+801046c8:	74 06                	je     801046d0 <popcli+0x30>
+    sti();
+}
+801046ca:	c9                   	leave  
+801046cb:	c3                   	ret    
+801046cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+801046d0:	e8 8b f0 ff ff       	call   80103760 <mycpu>
+801046d5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801046db:	85 c0                	test   %eax,%eax
+801046dd:	74 eb                	je     801046ca <popcli+0x2a>
+  asm volatile("sti");
+801046df:	fb                   	sti    
+}
+801046e0:	c9                   	leave  
+801046e1:	c3                   	ret    
+    panic("popcli - interruptible");
+801046e2:	83 ec 0c             	sub    $0xc,%esp
+801046e5:	68 cb 7a 10 80       	push   $0x80107acb
+801046ea:	e8 a1 bc ff ff       	call   80100390 <panic>
+    panic("popcli");
+801046ef:	83 ec 0c             	sub    $0xc,%esp
+801046f2:	68 e2 7a 10 80       	push   $0x80107ae2
+801046f7:	e8 94 bc ff ff       	call   80100390 <panic>
+801046fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104700 <holding>:
+{
+80104700:	55                   	push   %ebp
+80104701:	89 e5                	mov    %esp,%ebp
+80104703:	56                   	push   %esi
+80104704:	53                   	push   %ebx
+80104705:	8b 75 08             	mov    0x8(%ebp),%esi
+80104708:	31 db                	xor    %ebx,%ebx
+  pushcli();
+8010470a:	e8 51 ff ff ff       	call   80104660 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+8010470f:	8b 06                	mov    (%esi),%eax
+80104711:	85 c0                	test   %eax,%eax
+80104713:	74 10                	je     80104725 <holding+0x25>
+80104715:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104718:	e8 43 f0 ff ff       	call   80103760 <mycpu>
+8010471d:	39 c3                	cmp    %eax,%ebx
+8010471f:	0f 94 c3             	sete   %bl
+80104722:	0f b6 db             	movzbl %bl,%ebx
+  popcli();
+80104725:	e8 76 ff ff ff       	call   801046a0 <popcli>
+}
+8010472a:	89 d8                	mov    %ebx,%eax
+8010472c:	5b                   	pop    %ebx
+8010472d:	5e                   	pop    %esi
+8010472e:	5d                   	pop    %ebp
+8010472f:	c3                   	ret    
+
+80104730 <acquire>:
+{
+80104730:	55                   	push   %ebp
+80104731:	89 e5                	mov    %esp,%ebp
+80104733:	56                   	push   %esi
+80104734:	53                   	push   %ebx
+  pushcli(); // disable interrupts to avoid deadlock.
+80104735:	e8 26 ff ff ff       	call   80104660 <pushcli>
+  if(holding(lk))
+8010473a:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010473d:	83 ec 0c             	sub    $0xc,%esp
+80104740:	53                   	push   %ebx
+80104741:	e8 ba ff ff ff       	call   80104700 <holding>
+80104746:	83 c4 10             	add    $0x10,%esp
+80104749:	85 c0                	test   %eax,%eax
+8010474b:	0f 85 83 00 00 00    	jne    801047d4 <acquire+0xa4>
+80104751:	89 c6                	mov    %eax,%esi
+  asm volatile("lock; xchgl %0, %1" :
+80104753:	ba 01 00 00 00       	mov    $0x1,%edx
+80104758:	eb 09                	jmp    80104763 <acquire+0x33>
+8010475a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104760:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104763:	89 d0                	mov    %edx,%eax
+80104765:	f0 87 03             	lock xchg %eax,(%ebx)
+  while(xchg(&lk->locked, 1) != 0)
+80104768:	85 c0                	test   %eax,%eax
+8010476a:	75 f4                	jne    80104760 <acquire+0x30>
+  __sync_synchronize();
+8010476c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  lk->cpu = mycpu();
+80104771:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104774:	e8 e7 ef ff ff       	call   80103760 <mycpu>
+  getcallerpcs(&lk, lk->pcs);
+80104779:	8d 53 0c             	lea    0xc(%ebx),%edx
+  lk->cpu = mycpu();
+8010477c:	89 43 08             	mov    %eax,0x8(%ebx)
+  ebp = (uint*)v - 2;
+8010477f:	89 e8                	mov    %ebp,%eax
+80104781:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104788:	8d 88 00 00 00 80    	lea    -0x80000000(%eax),%ecx
+8010478e:	81 f9 fe ff ff 7f    	cmp    $0x7ffffffe,%ecx
+80104794:	77 1a                	ja     801047b0 <acquire+0x80>
+    pcs[i] = ebp[1];     // saved %eip
+80104796:	8b 48 04             	mov    0x4(%eax),%ecx
+80104799:	89 0c b2             	mov    %ecx,(%edx,%esi,4)
+  for(i = 0; i < 10; i++){
+8010479c:	83 c6 01             	add    $0x1,%esi
+    ebp = (uint*)ebp[0]; // saved %ebp
+8010479f:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+801047a1:	83 fe 0a             	cmp    $0xa,%esi
+801047a4:	75 e2                	jne    80104788 <acquire+0x58>
+}
+801047a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801047a9:	5b                   	pop    %ebx
+801047aa:	5e                   	pop    %esi
+801047ab:	5d                   	pop    %ebp
+801047ac:	c3                   	ret    
+801047ad:	8d 76 00             	lea    0x0(%esi),%esi
+801047b0:	8d 04 b2             	lea    (%edx,%esi,4),%eax
+801047b3:	83 c2 28             	add    $0x28,%edx
+801047b6:	8d 76 00             	lea    0x0(%esi),%esi
+801047b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    pcs[i] = 0;
+801047c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801047c6:	83 c0 04             	add    $0x4,%eax
+  for(; i < 10; i++)
+801047c9:	39 d0                	cmp    %edx,%eax
+801047cb:	75 f3                	jne    801047c0 <acquire+0x90>
+}
+801047cd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801047d0:	5b                   	pop    %ebx
+801047d1:	5e                   	pop    %esi
+801047d2:	5d                   	pop    %ebp
+801047d3:	c3                   	ret    
+    panic("acquire");
+801047d4:	83 ec 0c             	sub    $0xc,%esp
+801047d7:	68 e9 7a 10 80       	push   $0x80107ae9
+801047dc:	e8 af bb ff ff       	call   80100390 <panic>
+801047e1:	eb 0d                	jmp    801047f0 <release>
+801047e3:	90                   	nop
+801047e4:	90                   	nop
+801047e5:	90                   	nop
+801047e6:	90                   	nop
+801047e7:	90                   	nop
+801047e8:	90                   	nop
+801047e9:	90                   	nop
+801047ea:	90                   	nop
+801047eb:	90                   	nop
+801047ec:	90                   	nop
+801047ed:	90                   	nop
+801047ee:	90                   	nop
+801047ef:	90                   	nop
+
+801047f0 <release>:
+{
+801047f0:	55                   	push   %ebp
+801047f1:	89 e5                	mov    %esp,%ebp
+801047f3:	53                   	push   %ebx
+801047f4:	83 ec 10             	sub    $0x10,%esp
+801047f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holding(lk))
+801047fa:	53                   	push   %ebx
+801047fb:	e8 00 ff ff ff       	call   80104700 <holding>
+80104800:	83 c4 10             	add    $0x10,%esp
+80104803:	85 c0                	test   %eax,%eax
+80104805:	74 22                	je     80104829 <release+0x39>
+  lk->pcs[0] = 0;
+80104807:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  lk->cpu = 0;
+8010480e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+  __sync_synchronize();
+80104815:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+8010481a:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+}
+80104820:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104823:	c9                   	leave  
+  popcli();
+80104824:	e9 77 fe ff ff       	jmp    801046a0 <popcli>
+    panic("release");
+80104829:	83 ec 0c             	sub    $0xc,%esp
+8010482c:	68 f1 7a 10 80       	push   $0x80107af1
+80104831:	e8 5a bb ff ff       	call   80100390 <panic>
+80104836:	66 90                	xchg   %ax,%ax
+80104838:	66 90                	xchg   %ax,%ax
+8010483a:	66 90                	xchg   %ax,%ax
+8010483c:	66 90                	xchg   %ax,%ax
+8010483e:	66 90                	xchg   %ax,%ax
+
+80104840 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+80104840:	55                   	push   %ebp
+80104841:	89 e5                	mov    %esp,%ebp
+80104843:	57                   	push   %edi
+80104844:	53                   	push   %ebx
+80104845:	8b 55 08             	mov    0x8(%ebp),%edx
+80104848:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  if ((int)dst%4 == 0 && n%4 == 0){
+8010484b:	f6 c2 03             	test   $0x3,%dl
+8010484e:	75 05                	jne    80104855 <memset+0x15>
+80104850:	f6 c1 03             	test   $0x3,%cl
+80104853:	74 13                	je     80104868 <memset+0x28>
+  asm volatile("cld; rep stosb" :
+80104855:	89 d7                	mov    %edx,%edi
+80104857:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010485a:	fc                   	cld    
+8010485b:	f3 aa                	rep stos %al,%es:(%edi)
+    c &= 0xFF;
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+8010485d:	5b                   	pop    %ebx
+8010485e:	89 d0                	mov    %edx,%eax
+80104860:	5f                   	pop    %edi
+80104861:	5d                   	pop    %ebp
+80104862:	c3                   	ret    
+80104863:	90                   	nop
+80104864:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c &= 0xFF;
+80104868:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+8010486c:	c1 e9 02             	shr    $0x2,%ecx
+8010486f:	89 f8                	mov    %edi,%eax
+80104871:	89 fb                	mov    %edi,%ebx
+80104873:	c1 e0 18             	shl    $0x18,%eax
+80104876:	c1 e3 10             	shl    $0x10,%ebx
+80104879:	09 d8                	or     %ebx,%eax
+8010487b:	09 f8                	or     %edi,%eax
+8010487d:	c1 e7 08             	shl    $0x8,%edi
+80104880:	09 f8                	or     %edi,%eax
+  asm volatile("cld; rep stosl" :
+80104882:	89 d7                	mov    %edx,%edi
+80104884:	fc                   	cld    
+80104885:	f3 ab                	rep stos %eax,%es:(%edi)
+}
+80104887:	5b                   	pop    %ebx
+80104888:	89 d0                	mov    %edx,%eax
+8010488a:	5f                   	pop    %edi
+8010488b:	5d                   	pop    %ebp
+8010488c:	c3                   	ret    
+8010488d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104890 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+80104890:	55                   	push   %ebp
+80104891:	89 e5                	mov    %esp,%ebp
+80104893:	57                   	push   %edi
+80104894:	56                   	push   %esi
+80104895:	53                   	push   %ebx
+80104896:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104899:	8b 75 08             	mov    0x8(%ebp),%esi
+8010489c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+8010489f:	85 db                	test   %ebx,%ebx
+801048a1:	74 29                	je     801048cc <memcmp+0x3c>
+    if(*s1 != *s2)
+801048a3:	0f b6 16             	movzbl (%esi),%edx
+801048a6:	0f b6 0f             	movzbl (%edi),%ecx
+801048a9:	38 d1                	cmp    %dl,%cl
+801048ab:	75 2b                	jne    801048d8 <memcmp+0x48>
+801048ad:	b8 01 00 00 00       	mov    $0x1,%eax
+801048b2:	eb 14                	jmp    801048c8 <memcmp+0x38>
+801048b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801048b8:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+801048bc:	83 c0 01             	add    $0x1,%eax
+801048bf:	0f b6 4c 07 ff       	movzbl -0x1(%edi,%eax,1),%ecx
+801048c4:	38 ca                	cmp    %cl,%dl
+801048c6:	75 10                	jne    801048d8 <memcmp+0x48>
+  while(n-- > 0){
+801048c8:	39 d8                	cmp    %ebx,%eax
+801048ca:	75 ec                	jne    801048b8 <memcmp+0x28>
+      return *s1 - *s2;
+    s1++, s2++;
+  }
+
+  return 0;
+}
+801048cc:	5b                   	pop    %ebx
+  return 0;
+801048cd:	31 c0                	xor    %eax,%eax
+}
+801048cf:	5e                   	pop    %esi
+801048d0:	5f                   	pop    %edi
+801048d1:	5d                   	pop    %ebp
+801048d2:	c3                   	ret    
+801048d3:	90                   	nop
+801048d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      return *s1 - *s2;
+801048d8:	0f b6 c2             	movzbl %dl,%eax
+}
+801048db:	5b                   	pop    %ebx
+      return *s1 - *s2;
+801048dc:	29 c8                	sub    %ecx,%eax
+}
+801048de:	5e                   	pop    %esi
+801048df:	5f                   	pop    %edi
+801048e0:	5d                   	pop    %ebp
+801048e1:	c3                   	ret    
+801048e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801048f0 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+801048f0:	55                   	push   %ebp
+801048f1:	89 e5                	mov    %esp,%ebp
+801048f3:	56                   	push   %esi
+801048f4:	53                   	push   %ebx
+801048f5:	8b 45 08             	mov    0x8(%ebp),%eax
+801048f8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+801048fb:	8b 75 10             	mov    0x10(%ebp),%esi
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+801048fe:	39 c3                	cmp    %eax,%ebx
+80104900:	73 26                	jae    80104928 <memmove+0x38>
+80104902:	8d 0c 33             	lea    (%ebx,%esi,1),%ecx
+80104905:	39 c8                	cmp    %ecx,%eax
+80104907:	73 1f                	jae    80104928 <memmove+0x38>
+    s += n;
+    d += n;
+    while(n-- > 0)
+80104909:	85 f6                	test   %esi,%esi
+8010490b:	8d 56 ff             	lea    -0x1(%esi),%edx
+8010490e:	74 0f                	je     8010491f <memmove+0x2f>
+      *--d = *--s;
+80104910:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+80104914:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    while(n-- > 0)
+80104917:	83 ea 01             	sub    $0x1,%edx
+8010491a:	83 fa ff             	cmp    $0xffffffff,%edx
+8010491d:	75 f1                	jne    80104910 <memmove+0x20>
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+8010491f:	5b                   	pop    %ebx
+80104920:	5e                   	pop    %esi
+80104921:	5d                   	pop    %ebp
+80104922:	c3                   	ret    
+80104923:	90                   	nop
+80104924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(n-- > 0)
+80104928:	31 d2                	xor    %edx,%edx
+8010492a:	85 f6                	test   %esi,%esi
+8010492c:	74 f1                	je     8010491f <memmove+0x2f>
+8010492e:	66 90                	xchg   %ax,%ax
+      *d++ = *s++;
+80104930:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+80104934:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+80104937:	83 c2 01             	add    $0x1,%edx
+    while(n-- > 0)
+8010493a:	39 d6                	cmp    %edx,%esi
+8010493c:	75 f2                	jne    80104930 <memmove+0x40>
+}
+8010493e:	5b                   	pop    %ebx
+8010493f:	5e                   	pop    %esi
+80104940:	5d                   	pop    %ebp
+80104941:	c3                   	ret    
+80104942:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104949:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104950 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+80104950:	55                   	push   %ebp
+80104951:	89 e5                	mov    %esp,%ebp
+  return memmove(dst, src, n);
+}
+80104953:	5d                   	pop    %ebp
+  return memmove(dst, src, n);
+80104954:	eb 9a                	jmp    801048f0 <memmove>
+80104956:	8d 76 00             	lea    0x0(%esi),%esi
+80104959:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104960 <strncmp>:
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+80104960:	55                   	push   %ebp
+80104961:	89 e5                	mov    %esp,%ebp
+80104963:	57                   	push   %edi
+80104964:	56                   	push   %esi
+80104965:	8b 7d 10             	mov    0x10(%ebp),%edi
+80104968:	53                   	push   %ebx
+80104969:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010496c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(n > 0 && *p && *p == *q)
+8010496f:	85 ff                	test   %edi,%edi
+80104971:	74 2f                	je     801049a2 <strncmp+0x42>
+80104973:	0f b6 01             	movzbl (%ecx),%eax
+80104976:	0f b6 1e             	movzbl (%esi),%ebx
+80104979:	84 c0                	test   %al,%al
+8010497b:	74 37                	je     801049b4 <strncmp+0x54>
+8010497d:	38 c3                	cmp    %al,%bl
+8010497f:	75 33                	jne    801049b4 <strncmp+0x54>
+80104981:	01 f7                	add    %esi,%edi
+80104983:	eb 13                	jmp    80104998 <strncmp+0x38>
+80104985:	8d 76 00             	lea    0x0(%esi),%esi
+80104988:	0f b6 01             	movzbl (%ecx),%eax
+8010498b:	84 c0                	test   %al,%al
+8010498d:	74 21                	je     801049b0 <strncmp+0x50>
+8010498f:	0f b6 1a             	movzbl (%edx),%ebx
+80104992:	89 d6                	mov    %edx,%esi
+80104994:	38 d8                	cmp    %bl,%al
+80104996:	75 1c                	jne    801049b4 <strncmp+0x54>
+    n--, p++, q++;
+80104998:	8d 56 01             	lea    0x1(%esi),%edx
+8010499b:	83 c1 01             	add    $0x1,%ecx
+  while(n > 0 && *p && *p == *q)
+8010499e:	39 fa                	cmp    %edi,%edx
+801049a0:	75 e6                	jne    80104988 <strncmp+0x28>
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+}
+801049a2:	5b                   	pop    %ebx
+    return 0;
+801049a3:	31 c0                	xor    %eax,%eax
+}
+801049a5:	5e                   	pop    %esi
+801049a6:	5f                   	pop    %edi
+801049a7:	5d                   	pop    %ebp
+801049a8:	c3                   	ret    
+801049a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049b0:	0f b6 5e 01          	movzbl 0x1(%esi),%ebx
+  return (uchar)*p - (uchar)*q;
+801049b4:	29 d8                	sub    %ebx,%eax
+}
+801049b6:	5b                   	pop    %ebx
+801049b7:	5e                   	pop    %esi
+801049b8:	5f                   	pop    %edi
+801049b9:	5d                   	pop    %ebp
+801049ba:	c3                   	ret    
+801049bb:	90                   	nop
+801049bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801049c0 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+801049c0:	55                   	push   %ebp
+801049c1:	89 e5                	mov    %esp,%ebp
+801049c3:	56                   	push   %esi
+801049c4:	53                   	push   %ebx
+801049c5:	8b 45 08             	mov    0x8(%ebp),%eax
+801049c8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+801049cb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+801049ce:	89 c2                	mov    %eax,%edx
+801049d0:	eb 19                	jmp    801049eb <strncpy+0x2b>
+801049d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801049d8:	83 c3 01             	add    $0x1,%ebx
+801049db:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
+801049df:	83 c2 01             	add    $0x1,%edx
+801049e2:	84 c9                	test   %cl,%cl
+801049e4:	88 4a ff             	mov    %cl,-0x1(%edx)
+801049e7:	74 09                	je     801049f2 <strncpy+0x32>
+801049e9:	89 f1                	mov    %esi,%ecx
+801049eb:	85 c9                	test   %ecx,%ecx
+801049ed:	8d 71 ff             	lea    -0x1(%ecx),%esi
+801049f0:	7f e6                	jg     801049d8 <strncpy+0x18>
+    ;
+  while(n-- > 0)
+801049f2:	31 c9                	xor    %ecx,%ecx
+801049f4:	85 f6                	test   %esi,%esi
+801049f6:	7e 17                	jle    80104a0f <strncpy+0x4f>
+801049f8:	90                   	nop
+801049f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    *s++ = 0;
+80104a00:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
+80104a04:	89 f3                	mov    %esi,%ebx
+80104a06:	83 c1 01             	add    $0x1,%ecx
+80104a09:	29 cb                	sub    %ecx,%ebx
+  while(n-- > 0)
+80104a0b:	85 db                	test   %ebx,%ebx
+80104a0d:	7f f1                	jg     80104a00 <strncpy+0x40>
+  return os;
+}
+80104a0f:	5b                   	pop    %ebx
+80104a10:	5e                   	pop    %esi
+80104a11:	5d                   	pop    %ebp
+80104a12:	c3                   	ret    
+80104a13:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104a20 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+80104a20:	55                   	push   %ebp
+80104a21:	89 e5                	mov    %esp,%ebp
+80104a23:	56                   	push   %esi
+80104a24:	53                   	push   %ebx
+80104a25:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104a28:	8b 45 08             	mov    0x8(%ebp),%eax
+80104a2b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *os;
+
+  os = s;
+  if(n <= 0)
+80104a2e:	85 c9                	test   %ecx,%ecx
+80104a30:	7e 26                	jle    80104a58 <safestrcpy+0x38>
+80104a32:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
+80104a36:	89 c1                	mov    %eax,%ecx
+80104a38:	eb 17                	jmp    80104a51 <safestrcpy+0x31>
+80104a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+80104a40:	83 c2 01             	add    $0x1,%edx
+80104a43:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
+80104a47:	83 c1 01             	add    $0x1,%ecx
+80104a4a:	84 db                	test   %bl,%bl
+80104a4c:	88 59 ff             	mov    %bl,-0x1(%ecx)
+80104a4f:	74 04                	je     80104a55 <safestrcpy+0x35>
+80104a51:	39 f2                	cmp    %esi,%edx
+80104a53:	75 eb                	jne    80104a40 <safestrcpy+0x20>
+    ;
+  *s = 0;
+80104a55:	c6 01 00             	movb   $0x0,(%ecx)
+  return os;
+}
+80104a58:	5b                   	pop    %ebx
+80104a59:	5e                   	pop    %esi
+80104a5a:	5d                   	pop    %ebp
+80104a5b:	c3                   	ret    
+80104a5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104a60 <strlen>:
+
+int
+strlen(const char *s)
+{
+80104a60:	55                   	push   %ebp
+  int n;
+
+  for(n = 0; s[n]; n++)
+80104a61:	31 c0                	xor    %eax,%eax
+{
+80104a63:	89 e5                	mov    %esp,%ebp
+80104a65:	8b 55 08             	mov    0x8(%ebp),%edx
+  for(n = 0; s[n]; n++)
+80104a68:	80 3a 00             	cmpb   $0x0,(%edx)
+80104a6b:	74 0c                	je     80104a79 <strlen+0x19>
+80104a6d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a70:	83 c0 01             	add    $0x1,%eax
+80104a73:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104a77:	75 f7                	jne    80104a70 <strlen+0x10>
+    ;
+  return n;
+}
+80104a79:	5d                   	pop    %ebp
+80104a7a:	c3                   	ret    
+
+80104a7b <swtch>:
+# a struct context, and save its address in *old.
+# Switch stacks to new and pop previously-saved registers.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+80104a7b:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+80104a7f:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-saved registers
+  pushl %ebp
+80104a83:	55                   	push   %ebp
+  pushl %ebx
+80104a84:	53                   	push   %ebx
+  pushl %esi
+80104a85:	56                   	push   %esi
+  pushl %edi
+80104a86:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+80104a87:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+80104a89:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-saved registers
+  popl %edi
+80104a8b:	5f                   	pop    %edi
+  popl %esi
+80104a8c:	5e                   	pop    %esi
+  popl %ebx
+80104a8d:	5b                   	pop    %ebx
+  popl %ebp
+80104a8e:	5d                   	pop    %ebp
+  ret
+80104a8f:	c3                   	ret    
+
+80104a90 <fetchint>:
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+80104a90:	55                   	push   %ebp
+80104a91:	89 e5                	mov    %esp,%ebp
+80104a93:	53                   	push   %ebx
+80104a94:	83 ec 04             	sub    $0x4,%esp
+80104a97:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *curproc = myproc();
+80104a9a:	e8 61 ed ff ff       	call   80103800 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104a9f:	8b 00                	mov    (%eax),%eax
+80104aa1:	39 d8                	cmp    %ebx,%eax
+80104aa3:	76 1b                	jbe    80104ac0 <fetchint+0x30>
+80104aa5:	8d 53 04             	lea    0x4(%ebx),%edx
+80104aa8:	39 d0                	cmp    %edx,%eax
+80104aaa:	72 14                	jb     80104ac0 <fetchint+0x30>
+    return -1;
+  *ip = *(int*)(addr);
+80104aac:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104aaf:	8b 13                	mov    (%ebx),%edx
+80104ab1:	89 10                	mov    %edx,(%eax)
+  return 0;
+80104ab3:	31 c0                	xor    %eax,%eax
+}
+80104ab5:	83 c4 04             	add    $0x4,%esp
+80104ab8:	5b                   	pop    %ebx
+80104ab9:	5d                   	pop    %ebp
+80104aba:	c3                   	ret    
+80104abb:	90                   	nop
+80104abc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104ac0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104ac5:	eb ee                	jmp    80104ab5 <fetchint+0x25>
+80104ac7:	89 f6                	mov    %esi,%esi
+80104ac9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104ad0 <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+80104ad0:	55                   	push   %ebp
+80104ad1:	89 e5                	mov    %esp,%ebp
+80104ad3:	53                   	push   %ebx
+80104ad4:	83 ec 04             	sub    $0x4,%esp
+80104ad7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  char *s, *ep;
+  struct proc *curproc = myproc();
+80104ada:	e8 21 ed ff ff       	call   80103800 <myproc>
+
+  if(addr >= curproc->sz)
+80104adf:	39 18                	cmp    %ebx,(%eax)
+80104ae1:	76 29                	jbe    80104b0c <fetchstr+0x3c>
+    return -1;
+  *pp = (char*)addr;
+80104ae3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104ae6:	89 da                	mov    %ebx,%edx
+80104ae8:	89 19                	mov    %ebx,(%ecx)
+  ep = (char*)curproc->sz;
+80104aea:	8b 00                	mov    (%eax),%eax
+  for(s = *pp; s < ep; s++){
+80104aec:	39 c3                	cmp    %eax,%ebx
+80104aee:	73 1c                	jae    80104b0c <fetchstr+0x3c>
+    if(*s == 0)
+80104af0:	80 3b 00             	cmpb   $0x0,(%ebx)
+80104af3:	75 10                	jne    80104b05 <fetchstr+0x35>
+80104af5:	eb 39                	jmp    80104b30 <fetchstr+0x60>
+80104af7:	89 f6                	mov    %esi,%esi
+80104af9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104b00:	80 3a 00             	cmpb   $0x0,(%edx)
+80104b03:	74 1b                	je     80104b20 <fetchstr+0x50>
+  for(s = *pp; s < ep; s++){
+80104b05:	83 c2 01             	add    $0x1,%edx
+80104b08:	39 d0                	cmp    %edx,%eax
+80104b0a:	77 f4                	ja     80104b00 <fetchstr+0x30>
+    return -1;
+80104b0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+      return s - *pp;
+  }
+  return -1;
+}
+80104b11:	83 c4 04             	add    $0x4,%esp
+80104b14:	5b                   	pop    %ebx
+80104b15:	5d                   	pop    %ebp
+80104b16:	c3                   	ret    
+80104b17:	89 f6                	mov    %esi,%esi
+80104b19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104b20:	83 c4 04             	add    $0x4,%esp
+80104b23:	89 d0                	mov    %edx,%eax
+80104b25:	29 d8                	sub    %ebx,%eax
+80104b27:	5b                   	pop    %ebx
+80104b28:	5d                   	pop    %ebp
+80104b29:	c3                   	ret    
+80104b2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(*s == 0)
+80104b30:	31 c0                	xor    %eax,%eax
+      return s - *pp;
+80104b32:	eb dd                	jmp    80104b11 <fetchstr+0x41>
+80104b34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80104b40 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+80104b40:	55                   	push   %ebp
+80104b41:	89 e5                	mov    %esp,%ebp
+80104b43:	56                   	push   %esi
+80104b44:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104b45:	e8 b6 ec ff ff       	call   80103800 <myproc>
+80104b4a:	8b 40 18             	mov    0x18(%eax),%eax
+80104b4d:	8b 55 08             	mov    0x8(%ebp),%edx
+80104b50:	8b 40 44             	mov    0x44(%eax),%eax
+80104b53:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+80104b56:	e8 a5 ec ff ff       	call   80103800 <myproc>
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104b5b:	8b 00                	mov    (%eax),%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104b5d:	8d 73 04             	lea    0x4(%ebx),%esi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104b60:	39 c6                	cmp    %eax,%esi
+80104b62:	73 1c                	jae    80104b80 <argint+0x40>
+80104b64:	8d 53 08             	lea    0x8(%ebx),%edx
+80104b67:	39 d0                	cmp    %edx,%eax
+80104b69:	72 15                	jb     80104b80 <argint+0x40>
+  *ip = *(int*)(addr);
+80104b6b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104b6e:	8b 53 04             	mov    0x4(%ebx),%edx
+80104b71:	89 10                	mov    %edx,(%eax)
+  return 0;
+80104b73:	31 c0                	xor    %eax,%eax
+}
+80104b75:	5b                   	pop    %ebx
+80104b76:	5e                   	pop    %esi
+80104b77:	5d                   	pop    %ebp
+80104b78:	c3                   	ret    
+80104b79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104b80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104b85:	eb ee                	jmp    80104b75 <argint+0x35>
+80104b87:	89 f6                	mov    %esi,%esi
+80104b89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104b90 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+80104b90:	55                   	push   %ebp
+80104b91:	89 e5                	mov    %esp,%ebp
+80104b93:	56                   	push   %esi
+80104b94:	53                   	push   %ebx
+80104b95:	83 ec 10             	sub    $0x10,%esp
+80104b98:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int i;
+  struct proc *curproc = myproc();
+80104b9b:	e8 60 ec ff ff       	call   80103800 <myproc>
+80104ba0:	89 c6                	mov    %eax,%esi
+ 
+  if(argint(n, &i) < 0)
+80104ba2:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104ba5:	83 ec 08             	sub    $0x8,%esp
+80104ba8:	50                   	push   %eax
+80104ba9:	ff 75 08             	pushl  0x8(%ebp)
+80104bac:	e8 8f ff ff ff       	call   80104b40 <argint>
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+80104bb1:	83 c4 10             	add    $0x10,%esp
+80104bb4:	85 c0                	test   %eax,%eax
+80104bb6:	78 28                	js     80104be0 <argptr+0x50>
+80104bb8:	85 db                	test   %ebx,%ebx
+80104bba:	78 24                	js     80104be0 <argptr+0x50>
+80104bbc:	8b 16                	mov    (%esi),%edx
+80104bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104bc1:	39 c2                	cmp    %eax,%edx
+80104bc3:	76 1b                	jbe    80104be0 <argptr+0x50>
+80104bc5:	01 c3                	add    %eax,%ebx
+80104bc7:	39 da                	cmp    %ebx,%edx
+80104bc9:	72 15                	jb     80104be0 <argptr+0x50>
+    return -1;
+  *pp = (char*)i;
+80104bcb:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104bce:	89 02                	mov    %eax,(%edx)
+  return 0;
+80104bd0:	31 c0                	xor    %eax,%eax
+}
+80104bd2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104bd5:	5b                   	pop    %ebx
+80104bd6:	5e                   	pop    %esi
+80104bd7:	5d                   	pop    %ebp
+80104bd8:	c3                   	ret    
+80104bd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104be0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104be5:	eb eb                	jmp    80104bd2 <argptr+0x42>
+80104be7:	89 f6                	mov    %esi,%esi
+80104be9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104bf0 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+80104bf0:	55                   	push   %ebp
+80104bf1:	89 e5                	mov    %esp,%ebp
+80104bf3:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+  if(argint(n, &addr) < 0)
+80104bf6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104bf9:	50                   	push   %eax
+80104bfa:	ff 75 08             	pushl  0x8(%ebp)
+80104bfd:	e8 3e ff ff ff       	call   80104b40 <argint>
+80104c02:	83 c4 10             	add    $0x10,%esp
+80104c05:	85 c0                	test   %eax,%eax
+80104c07:	78 17                	js     80104c20 <argstr+0x30>
+    return -1;
+  return fetchstr(addr, pp);
+80104c09:	83 ec 08             	sub    $0x8,%esp
+80104c0c:	ff 75 0c             	pushl  0xc(%ebp)
+80104c0f:	ff 75 f4             	pushl  -0xc(%ebp)
+80104c12:	e8 b9 fe ff ff       	call   80104ad0 <fetchstr>
+80104c17:	83 c4 10             	add    $0x10,%esp
+}
+80104c1a:	c9                   	leave  
+80104c1b:	c3                   	ret    
+80104c1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104c20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104c25:	c9                   	leave  
+80104c26:	c3                   	ret    
+80104c27:	89 f6                	mov    %esi,%esi
+80104c29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104c30 <syscall>:
+
+};
+
+void
+syscall(void)
+{
+80104c30:	55                   	push   %ebp
+80104c31:	89 e5                	mov    %esp,%ebp
+80104c33:	53                   	push   %ebx
+80104c34:	83 ec 04             	sub    $0x4,%esp
+  int num;
+  struct proc *curproc = myproc();
+80104c37:	e8 c4 eb ff ff       	call   80103800 <myproc>
+80104c3c:	89 c3                	mov    %eax,%ebx
+
+  num = curproc->tf->eax;
+80104c3e:	8b 40 18             	mov    0x18(%eax),%eax
+80104c41:	8b 40 1c             	mov    0x1c(%eax),%eax
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+80104c44:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104c47:	83 fa 1c             	cmp    $0x1c,%edx
+80104c4a:	77 1c                	ja     80104c68 <syscall+0x38>
+80104c4c:	8b 14 85 20 7b 10 80 	mov    -0x7fef84e0(,%eax,4),%edx
+80104c53:	85 d2                	test   %edx,%edx
+80104c55:	74 11                	je     80104c68 <syscall+0x38>
+    curproc->tf->eax = syscalls[num]();
+80104c57:	ff d2                	call   *%edx
+80104c59:	8b 53 18             	mov    0x18(%ebx),%edx
+80104c5c:	89 42 1c             	mov    %eax,0x1c(%edx)
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+  }
+}
+80104c5f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c62:	c9                   	leave  
+80104c63:	c3                   	ret    
+80104c64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cprintf("%d %s: unknown sys call %d\n",
+80104c68:	50                   	push   %eax
+            curproc->pid, curproc->name, num);
+80104c69:	8d 43 6c             	lea    0x6c(%ebx),%eax
+    cprintf("%d %s: unknown sys call %d\n",
+80104c6c:	50                   	push   %eax
+80104c6d:	ff 73 10             	pushl  0x10(%ebx)
+80104c70:	68 f9 7a 10 80       	push   $0x80107af9
+80104c75:	e8 e6 b9 ff ff       	call   80100660 <cprintf>
+    curproc->tf->eax = -1;
+80104c7a:	8b 43 18             	mov    0x18(%ebx),%eax
+80104c7d:	83 c4 10             	add    $0x10,%esp
+80104c80:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104c87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c8a:	c9                   	leave  
+80104c8b:	c3                   	ret    
+80104c8c:	66 90                	xchg   %ax,%ax
+80104c8e:	66 90                	xchg   %ax,%ax
+
+80104c90 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80104c90:	55                   	push   %ebp
+80104c91:	89 e5                	mov    %esp,%ebp
+80104c93:	57                   	push   %edi
+80104c94:	56                   	push   %esi
+80104c95:	53                   	push   %ebx
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80104c96:	8d 75 da             	lea    -0x26(%ebp),%esi
+{
+80104c99:	83 ec 34             	sub    $0x34,%esp
+80104c9c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80104c9f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  if((dp = nameiparent(path, name)) == 0)
+80104ca2:	56                   	push   %esi
+80104ca3:	50                   	push   %eax
+{
+80104ca4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104ca7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  if((dp = nameiparent(path, name)) == 0)
+80104caa:	e8 51 d2 ff ff       	call   80101f00 <nameiparent>
+80104caf:	83 c4 10             	add    $0x10,%esp
+80104cb2:	85 c0                	test   %eax,%eax
+80104cb4:	0f 84 46 01 00 00    	je     80104e00 <create+0x170>
+    return 0;
+  ilock(dp);
+80104cba:	83 ec 0c             	sub    $0xc,%esp
+80104cbd:	89 c3                	mov    %eax,%ebx
+80104cbf:	50                   	push   %eax
+80104cc0:	e8 bb c9 ff ff       	call   80101680 <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80104cc5:	83 c4 0c             	add    $0xc,%esp
+80104cc8:	6a 00                	push   $0x0
+80104cca:	56                   	push   %esi
+80104ccb:	53                   	push   %ebx
+80104ccc:	e8 df ce ff ff       	call   80101bb0 <dirlookup>
+80104cd1:	83 c4 10             	add    $0x10,%esp
+80104cd4:	85 c0                	test   %eax,%eax
+80104cd6:	89 c7                	mov    %eax,%edi
+80104cd8:	74 36                	je     80104d10 <create+0x80>
+    iunlockput(dp);
+80104cda:	83 ec 0c             	sub    $0xc,%esp
+80104cdd:	53                   	push   %ebx
+80104cde:	e8 2d cc ff ff       	call   80101910 <iunlockput>
+    ilock(ip);
+80104ce3:	89 3c 24             	mov    %edi,(%esp)
+80104ce6:	e8 95 c9 ff ff       	call   80101680 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+80104ceb:	83 c4 10             	add    $0x10,%esp
+80104cee:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104cf3:	0f 85 97 00 00 00    	jne    80104d90 <create+0x100>
+80104cf9:	66 83 7f 50 02       	cmpw   $0x2,0x50(%edi)
+80104cfe:	0f 85 8c 00 00 00    	jne    80104d90 <create+0x100>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+80104d04:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d07:	89 f8                	mov    %edi,%eax
+80104d09:	5b                   	pop    %ebx
+80104d0a:	5e                   	pop    %esi
+80104d0b:	5f                   	pop    %edi
+80104d0c:	5d                   	pop    %ebp
+80104d0d:	c3                   	ret    
+80104d0e:	66 90                	xchg   %ax,%ax
+  if((ip = ialloc(dp->dev, type)) == 0)
+80104d10:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104d14:	83 ec 08             	sub    $0x8,%esp
+80104d17:	50                   	push   %eax
+80104d18:	ff 33                	pushl  (%ebx)
+80104d1a:	e8 f1 c7 ff ff       	call   80101510 <ialloc>
+80104d1f:	83 c4 10             	add    $0x10,%esp
+80104d22:	85 c0                	test   %eax,%eax
+80104d24:	89 c7                	mov    %eax,%edi
+80104d26:	0f 84 e8 00 00 00    	je     80104e14 <create+0x184>
+  ilock(ip);
+80104d2c:	83 ec 0c             	sub    $0xc,%esp
+80104d2f:	50                   	push   %eax
+80104d30:	e8 4b c9 ff ff       	call   80101680 <ilock>
+  ip->major = major;
+80104d35:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104d39:	66 89 47 52          	mov    %ax,0x52(%edi)
+  ip->minor = minor;
+80104d3d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104d41:	66 89 47 54          	mov    %ax,0x54(%edi)
+  ip->nlink = 1;
+80104d45:	b8 01 00 00 00       	mov    $0x1,%eax
+80104d4a:	66 89 47 56          	mov    %ax,0x56(%edi)
+  iupdate(ip);
+80104d4e:	89 3c 24             	mov    %edi,(%esp)
+80104d51:	e8 7a c8 ff ff       	call   801015d0 <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+80104d56:	83 c4 10             	add    $0x10,%esp
+80104d59:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104d5e:	74 50                	je     80104db0 <create+0x120>
+  if(dirlink(dp, name, ip->inum) < 0)
+80104d60:	83 ec 04             	sub    $0x4,%esp
+80104d63:	ff 77 04             	pushl  0x4(%edi)
+80104d66:	56                   	push   %esi
+80104d67:	53                   	push   %ebx
+80104d68:	e8 b3 d0 ff ff       	call   80101e20 <dirlink>
+80104d6d:	83 c4 10             	add    $0x10,%esp
+80104d70:	85 c0                	test   %eax,%eax
+80104d72:	0f 88 8f 00 00 00    	js     80104e07 <create+0x177>
+  iunlockput(dp);
+80104d78:	83 ec 0c             	sub    $0xc,%esp
+80104d7b:	53                   	push   %ebx
+80104d7c:	e8 8f cb ff ff       	call   80101910 <iunlockput>
+  return ip;
+80104d81:	83 c4 10             	add    $0x10,%esp
+}
+80104d84:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d87:	89 f8                	mov    %edi,%eax
+80104d89:	5b                   	pop    %ebx
+80104d8a:	5e                   	pop    %esi
+80104d8b:	5f                   	pop    %edi
+80104d8c:	5d                   	pop    %ebp
+80104d8d:	c3                   	ret    
+80104d8e:	66 90                	xchg   %ax,%ax
+    iunlockput(ip);
+80104d90:	83 ec 0c             	sub    $0xc,%esp
+80104d93:	57                   	push   %edi
+    return 0;
+80104d94:	31 ff                	xor    %edi,%edi
+    iunlockput(ip);
+80104d96:	e8 75 cb ff ff       	call   80101910 <iunlockput>
+    return 0;
+80104d9b:	83 c4 10             	add    $0x10,%esp
+}
+80104d9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104da1:	89 f8                	mov    %edi,%eax
+80104da3:	5b                   	pop    %ebx
+80104da4:	5e                   	pop    %esi
+80104da5:	5f                   	pop    %edi
+80104da6:	5d                   	pop    %ebp
+80104da7:	c3                   	ret    
+80104da8:	90                   	nop
+80104da9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    dp->nlink++;  // for ".."
+80104db0:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+    iupdate(dp);
+80104db5:	83 ec 0c             	sub    $0xc,%esp
+80104db8:	53                   	push   %ebx
+80104db9:	e8 12 c8 ff ff       	call   801015d0 <iupdate>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+80104dbe:	83 c4 0c             	add    $0xc,%esp
+80104dc1:	ff 77 04             	pushl  0x4(%edi)
+80104dc4:	68 b4 7b 10 80       	push   $0x80107bb4
+80104dc9:	57                   	push   %edi
+80104dca:	e8 51 d0 ff ff       	call   80101e20 <dirlink>
+80104dcf:	83 c4 10             	add    $0x10,%esp
+80104dd2:	85 c0                	test   %eax,%eax
+80104dd4:	78 1c                	js     80104df2 <create+0x162>
+80104dd6:	83 ec 04             	sub    $0x4,%esp
+80104dd9:	ff 73 04             	pushl  0x4(%ebx)
+80104ddc:	68 b3 7b 10 80       	push   $0x80107bb3
+80104de1:	57                   	push   %edi
+80104de2:	e8 39 d0 ff ff       	call   80101e20 <dirlink>
+80104de7:	83 c4 10             	add    $0x10,%esp
+80104dea:	85 c0                	test   %eax,%eax
+80104dec:	0f 89 6e ff ff ff    	jns    80104d60 <create+0xd0>
+      panic("create dots");
+80104df2:	83 ec 0c             	sub    $0xc,%esp
+80104df5:	68 a7 7b 10 80       	push   $0x80107ba7
+80104dfa:	e8 91 b5 ff ff       	call   80100390 <panic>
+80104dff:	90                   	nop
+    return 0;
+80104e00:	31 ff                	xor    %edi,%edi
+80104e02:	e9 fd fe ff ff       	jmp    80104d04 <create+0x74>
+    panic("create: dirlink");
+80104e07:	83 ec 0c             	sub    $0xc,%esp
+80104e0a:	68 b6 7b 10 80       	push   $0x80107bb6
+80104e0f:	e8 7c b5 ff ff       	call   80100390 <panic>
+    panic("create: ialloc");
+80104e14:	83 ec 0c             	sub    $0xc,%esp
+80104e17:	68 98 7b 10 80       	push   $0x80107b98
+80104e1c:	e8 6f b5 ff ff       	call   80100390 <panic>
+80104e21:	eb 0d                	jmp    80104e30 <argfd.constprop.0>
+80104e23:	90                   	nop
+80104e24:	90                   	nop
+80104e25:	90                   	nop
+80104e26:	90                   	nop
+80104e27:	90                   	nop
+80104e28:	90                   	nop
+80104e29:	90                   	nop
+80104e2a:	90                   	nop
+80104e2b:	90                   	nop
+80104e2c:	90                   	nop
+80104e2d:	90                   	nop
+80104e2e:	90                   	nop
+80104e2f:	90                   	nop
+
+80104e30 <argfd.constprop.0>:
+argfd(int n, int *pfd, struct file **pf)
+80104e30:	55                   	push   %ebp
+80104e31:	89 e5                	mov    %esp,%ebp
+80104e33:	56                   	push   %esi
+80104e34:	53                   	push   %ebx
+80104e35:	89 c3                	mov    %eax,%ebx
+  if(argint(n, &fd) < 0)
+80104e37:	8d 45 f4             	lea    -0xc(%ebp),%eax
+argfd(int n, int *pfd, struct file **pf)
+80104e3a:	89 d6                	mov    %edx,%esi
+80104e3c:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104e3f:	50                   	push   %eax
+80104e40:	6a 00                	push   $0x0
+80104e42:	e8 f9 fc ff ff       	call   80104b40 <argint>
+80104e47:	83 c4 10             	add    $0x10,%esp
+80104e4a:	85 c0                	test   %eax,%eax
+80104e4c:	78 2a                	js     80104e78 <argfd.constprop.0+0x48>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104e4e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104e52:	77 24                	ja     80104e78 <argfd.constprop.0+0x48>
+80104e54:	e8 a7 e9 ff ff       	call   80103800 <myproc>
+80104e59:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104e5c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80104e60:	85 c0                	test   %eax,%eax
+80104e62:	74 14                	je     80104e78 <argfd.constprop.0+0x48>
+  if(pfd)
+80104e64:	85 db                	test   %ebx,%ebx
+80104e66:	74 02                	je     80104e6a <argfd.constprop.0+0x3a>
+    *pfd = fd;
+80104e68:	89 13                	mov    %edx,(%ebx)
+    *pf = f;
+80104e6a:	89 06                	mov    %eax,(%esi)
+  return 0;
+80104e6c:	31 c0                	xor    %eax,%eax
+}
+80104e6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104e71:	5b                   	pop    %ebx
+80104e72:	5e                   	pop    %esi
+80104e73:	5d                   	pop    %ebp
+80104e74:	c3                   	ret    
+80104e75:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104e78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e7d:	eb ef                	jmp    80104e6e <argfd.constprop.0+0x3e>
+80104e7f:	90                   	nop
+
+80104e80 <sys_dup>:
+{
+80104e80:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0)
+80104e81:	31 c0                	xor    %eax,%eax
+{
+80104e83:	89 e5                	mov    %esp,%ebp
+80104e85:	56                   	push   %esi
+80104e86:	53                   	push   %ebx
+  if(argfd(0, 0, &f) < 0)
+80104e87:	8d 55 f4             	lea    -0xc(%ebp),%edx
+{
+80104e8a:	83 ec 10             	sub    $0x10,%esp
+  if(argfd(0, 0, &f) < 0)
+80104e8d:	e8 9e ff ff ff       	call   80104e30 <argfd.constprop.0>
+80104e92:	85 c0                	test   %eax,%eax
+80104e94:	78 42                	js     80104ed8 <sys_dup+0x58>
+  if((fd=fdalloc(f)) < 0)
+80104e96:	8b 75 f4             	mov    -0xc(%ebp),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+80104e99:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+80104e9b:	e8 60 e9 ff ff       	call   80103800 <myproc>
+80104ea0:	eb 0e                	jmp    80104eb0 <sys_dup+0x30>
+80104ea2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+80104ea8:	83 c3 01             	add    $0x1,%ebx
+80104eab:	83 fb 10             	cmp    $0x10,%ebx
+80104eae:	74 28                	je     80104ed8 <sys_dup+0x58>
+    if(curproc->ofile[fd] == 0){
+80104eb0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80104eb4:	85 d2                	test   %edx,%edx
+80104eb6:	75 f0                	jne    80104ea8 <sys_dup+0x28>
+      curproc->ofile[fd] = f;
+80104eb8:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+  filedup(f);
+80104ebc:	83 ec 0c             	sub    $0xc,%esp
+80104ebf:	ff 75 f4             	pushl  -0xc(%ebp)
+80104ec2:	e8 29 bf ff ff       	call   80100df0 <filedup>
+  return fd;
+80104ec7:	83 c4 10             	add    $0x10,%esp
+}
+80104eca:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ecd:	89 d8                	mov    %ebx,%eax
+80104ecf:	5b                   	pop    %ebx
+80104ed0:	5e                   	pop    %esi
+80104ed1:	5d                   	pop    %ebp
+80104ed2:	c3                   	ret    
+80104ed3:	90                   	nop
+80104ed4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ed8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80104edb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80104ee0:	89 d8                	mov    %ebx,%eax
+80104ee2:	5b                   	pop    %ebx
+80104ee3:	5e                   	pop    %esi
+80104ee4:	5d                   	pop    %ebp
+80104ee5:	c3                   	ret    
+80104ee6:	8d 76 00             	lea    0x0(%esi),%esi
+80104ee9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104ef0 <sys_read>:
+{
+80104ef0:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104ef1:	31 c0                	xor    %eax,%eax
+{
+80104ef3:	89 e5                	mov    %esp,%ebp
+80104ef5:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104ef8:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104efb:	e8 30 ff ff ff       	call   80104e30 <argfd.constprop.0>
+80104f00:	85 c0                	test   %eax,%eax
+80104f02:	78 4c                	js     80104f50 <sys_read+0x60>
+80104f04:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104f07:	83 ec 08             	sub    $0x8,%esp
+80104f0a:	50                   	push   %eax
+80104f0b:	6a 02                	push   $0x2
+80104f0d:	e8 2e fc ff ff       	call   80104b40 <argint>
+80104f12:	83 c4 10             	add    $0x10,%esp
+80104f15:	85 c0                	test   %eax,%eax
+80104f17:	78 37                	js     80104f50 <sys_read+0x60>
+80104f19:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104f1c:	83 ec 04             	sub    $0x4,%esp
+80104f1f:	ff 75 f0             	pushl  -0x10(%ebp)
+80104f22:	50                   	push   %eax
+80104f23:	6a 01                	push   $0x1
+80104f25:	e8 66 fc ff ff       	call   80104b90 <argptr>
+80104f2a:	83 c4 10             	add    $0x10,%esp
+80104f2d:	85 c0                	test   %eax,%eax
+80104f2f:	78 1f                	js     80104f50 <sys_read+0x60>
+  return fileread(f, p, n);
+80104f31:	83 ec 04             	sub    $0x4,%esp
+80104f34:	ff 75 f0             	pushl  -0x10(%ebp)
+80104f37:	ff 75 f4             	pushl  -0xc(%ebp)
+80104f3a:	ff 75 ec             	pushl  -0x14(%ebp)
+80104f3d:	e8 1e c0 ff ff       	call   80100f60 <fileread>
+80104f42:	83 c4 10             	add    $0x10,%esp
+}
+80104f45:	c9                   	leave  
+80104f46:	c3                   	ret    
+80104f47:	89 f6                	mov    %esi,%esi
+80104f49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80104f50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104f55:	c9                   	leave  
+80104f56:	c3                   	ret    
+80104f57:	89 f6                	mov    %esi,%esi
+80104f59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104f60 <sys_write>:
+{
+80104f60:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104f61:	31 c0                	xor    %eax,%eax
+{
+80104f63:	89 e5                	mov    %esp,%ebp
+80104f65:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104f68:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104f6b:	e8 c0 fe ff ff       	call   80104e30 <argfd.constprop.0>
+80104f70:	85 c0                	test   %eax,%eax
+80104f72:	78 4c                	js     80104fc0 <sys_write+0x60>
+80104f74:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104f77:	83 ec 08             	sub    $0x8,%esp
+80104f7a:	50                   	push   %eax
+80104f7b:	6a 02                	push   $0x2
+80104f7d:	e8 be fb ff ff       	call   80104b40 <argint>
+80104f82:	83 c4 10             	add    $0x10,%esp
+80104f85:	85 c0                	test   %eax,%eax
+80104f87:	78 37                	js     80104fc0 <sys_write+0x60>
+80104f89:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104f8c:	83 ec 04             	sub    $0x4,%esp
+80104f8f:	ff 75 f0             	pushl  -0x10(%ebp)
+80104f92:	50                   	push   %eax
+80104f93:	6a 01                	push   $0x1
+80104f95:	e8 f6 fb ff ff       	call   80104b90 <argptr>
+80104f9a:	83 c4 10             	add    $0x10,%esp
+80104f9d:	85 c0                	test   %eax,%eax
+80104f9f:	78 1f                	js     80104fc0 <sys_write+0x60>
+  return filewrite(f, p, n);
+80104fa1:	83 ec 04             	sub    $0x4,%esp
+80104fa4:	ff 75 f0             	pushl  -0x10(%ebp)
+80104fa7:	ff 75 f4             	pushl  -0xc(%ebp)
+80104faa:	ff 75 ec             	pushl  -0x14(%ebp)
+80104fad:	e8 3e c0 ff ff       	call   80100ff0 <filewrite>
+80104fb2:	83 c4 10             	add    $0x10,%esp
+}
+80104fb5:	c9                   	leave  
+80104fb6:	c3                   	ret    
+80104fb7:	89 f6                	mov    %esi,%esi
+80104fb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80104fc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104fc5:	c9                   	leave  
+80104fc6:	c3                   	ret    
+80104fc7:	89 f6                	mov    %esi,%esi
+80104fc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104fd0 <sys_close>:
+{
+80104fd0:	55                   	push   %ebp
+80104fd1:	89 e5                	mov    %esp,%ebp
+80104fd3:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, &fd, &f) < 0)
+80104fd6:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104fd9:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104fdc:	e8 4f fe ff ff       	call   80104e30 <argfd.constprop.0>
+80104fe1:	85 c0                	test   %eax,%eax
+80104fe3:	78 2b                	js     80105010 <sys_close+0x40>
+  myproc()->ofile[fd] = 0;
+80104fe5:	e8 16 e8 ff ff       	call   80103800 <myproc>
+80104fea:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  fileclose(f);
+80104fed:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80104ff0:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80104ff7:	00 
+  fileclose(f);
+80104ff8:	ff 75 f4             	pushl  -0xc(%ebp)
+80104ffb:	e8 40 be ff ff       	call   80100e40 <fileclose>
+  return 0;
+80105000:	83 c4 10             	add    $0x10,%esp
+80105003:	31 c0                	xor    %eax,%eax
+}
+80105005:	c9                   	leave  
+80105006:	c3                   	ret    
+80105007:	89 f6                	mov    %esi,%esi
+80105009:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80105010:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105015:	c9                   	leave  
+80105016:	c3                   	ret    
+80105017:	89 f6                	mov    %esi,%esi
+80105019:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105020 <sys_fstat>:
+{
+80105020:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80105021:	31 c0                	xor    %eax,%eax
+{
+80105023:	89 e5                	mov    %esp,%ebp
+80105025:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80105028:	8d 55 f0             	lea    -0x10(%ebp),%edx
+8010502b:	e8 00 fe ff ff       	call   80104e30 <argfd.constprop.0>
+80105030:	85 c0                	test   %eax,%eax
+80105032:	78 2c                	js     80105060 <sys_fstat+0x40>
+80105034:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105037:	83 ec 04             	sub    $0x4,%esp
+8010503a:	6a 14                	push   $0x14
+8010503c:	50                   	push   %eax
+8010503d:	6a 01                	push   $0x1
+8010503f:	e8 4c fb ff ff       	call   80104b90 <argptr>
+80105044:	83 c4 10             	add    $0x10,%esp
+80105047:	85 c0                	test   %eax,%eax
+80105049:	78 15                	js     80105060 <sys_fstat+0x40>
+  return filestat(f, st);
+8010504b:	83 ec 08             	sub    $0x8,%esp
+8010504e:	ff 75 f4             	pushl  -0xc(%ebp)
+80105051:	ff 75 f0             	pushl  -0x10(%ebp)
+80105054:	e8 b7 be ff ff       	call   80100f10 <filestat>
+80105059:	83 c4 10             	add    $0x10,%esp
+}
+8010505c:	c9                   	leave  
+8010505d:	c3                   	ret    
+8010505e:	66 90                	xchg   %ax,%ax
+    return -1;
+80105060:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105065:	c9                   	leave  
+80105066:	c3                   	ret    
+80105067:	89 f6                	mov    %esi,%esi
+80105069:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105070 <sys_link>:
+{
+80105070:	55                   	push   %ebp
+80105071:	89 e5                	mov    %esp,%ebp
+80105073:	57                   	push   %edi
+80105074:	56                   	push   %esi
+80105075:	53                   	push   %ebx
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80105076:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+{
+80105079:	83 ec 34             	sub    $0x34,%esp
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+8010507c:	50                   	push   %eax
+8010507d:	6a 00                	push   $0x0
+8010507f:	e8 6c fb ff ff       	call   80104bf0 <argstr>
+80105084:	83 c4 10             	add    $0x10,%esp
+80105087:	85 c0                	test   %eax,%eax
+80105089:	0f 88 fb 00 00 00    	js     8010518a <sys_link+0x11a>
+8010508f:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105092:	83 ec 08             	sub    $0x8,%esp
+80105095:	50                   	push   %eax
+80105096:	6a 01                	push   $0x1
+80105098:	e8 53 fb ff ff       	call   80104bf0 <argstr>
+8010509d:	83 c4 10             	add    $0x10,%esp
+801050a0:	85 c0                	test   %eax,%eax
+801050a2:	0f 88 e2 00 00 00    	js     8010518a <sys_link+0x11a>
+  begin_op();
+801050a8:	e8 f3 da ff ff       	call   80102ba0 <begin_op>
+  if((ip = namei(old)) == 0){
+801050ad:	83 ec 0c             	sub    $0xc,%esp
+801050b0:	ff 75 d4             	pushl  -0x2c(%ebp)
+801050b3:	e8 28 ce ff ff       	call   80101ee0 <namei>
+801050b8:	83 c4 10             	add    $0x10,%esp
+801050bb:	85 c0                	test   %eax,%eax
+801050bd:	89 c3                	mov    %eax,%ebx
+801050bf:	0f 84 ea 00 00 00    	je     801051af <sys_link+0x13f>
+  ilock(ip);
+801050c5:	83 ec 0c             	sub    $0xc,%esp
+801050c8:	50                   	push   %eax
+801050c9:	e8 b2 c5 ff ff       	call   80101680 <ilock>
+  if(ip->type == T_DIR){
+801050ce:	83 c4 10             	add    $0x10,%esp
+801050d1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801050d6:	0f 84 bb 00 00 00    	je     80105197 <sys_link+0x127>
+  ip->nlink++;
+801050dc:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+  iupdate(ip);
+801050e1:	83 ec 0c             	sub    $0xc,%esp
+  if((dp = nameiparent(new, name)) == 0)
+801050e4:	8d 7d da             	lea    -0x26(%ebp),%edi
+  iupdate(ip);
+801050e7:	53                   	push   %ebx
+801050e8:	e8 e3 c4 ff ff       	call   801015d0 <iupdate>
+  iunlock(ip);
+801050ed:	89 1c 24             	mov    %ebx,(%esp)
+801050f0:	e8 6b c6 ff ff       	call   80101760 <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+801050f5:	58                   	pop    %eax
+801050f6:	5a                   	pop    %edx
+801050f7:	57                   	push   %edi
+801050f8:	ff 75 d0             	pushl  -0x30(%ebp)
+801050fb:	e8 00 ce ff ff       	call   80101f00 <nameiparent>
+80105100:	83 c4 10             	add    $0x10,%esp
+80105103:	85 c0                	test   %eax,%eax
+80105105:	89 c6                	mov    %eax,%esi
+80105107:	74 5b                	je     80105164 <sys_link+0xf4>
+  ilock(dp);
+80105109:	83 ec 0c             	sub    $0xc,%esp
+8010510c:	50                   	push   %eax
+8010510d:	e8 6e c5 ff ff       	call   80101680 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+80105112:	83 c4 10             	add    $0x10,%esp
+80105115:	8b 03                	mov    (%ebx),%eax
+80105117:	39 06                	cmp    %eax,(%esi)
+80105119:	75 3d                	jne    80105158 <sys_link+0xe8>
+8010511b:	83 ec 04             	sub    $0x4,%esp
+8010511e:	ff 73 04             	pushl  0x4(%ebx)
+80105121:	57                   	push   %edi
+80105122:	56                   	push   %esi
+80105123:	e8 f8 cc ff ff       	call   80101e20 <dirlink>
+80105128:	83 c4 10             	add    $0x10,%esp
+8010512b:	85 c0                	test   %eax,%eax
+8010512d:	78 29                	js     80105158 <sys_link+0xe8>
+  iunlockput(dp);
+8010512f:	83 ec 0c             	sub    $0xc,%esp
+80105132:	56                   	push   %esi
+80105133:	e8 d8 c7 ff ff       	call   80101910 <iunlockput>
+  iput(ip);
+80105138:	89 1c 24             	mov    %ebx,(%esp)
+8010513b:	e8 70 c6 ff ff       	call   801017b0 <iput>
+  end_op();
+80105140:	e8 cb da ff ff       	call   80102c10 <end_op>
+  return 0;
+80105145:	83 c4 10             	add    $0x10,%esp
+80105148:	31 c0                	xor    %eax,%eax
+}
+8010514a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010514d:	5b                   	pop    %ebx
+8010514e:	5e                   	pop    %esi
+8010514f:	5f                   	pop    %edi
+80105150:	5d                   	pop    %ebp
+80105151:	c3                   	ret    
+80105152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iunlockput(dp);
+80105158:	83 ec 0c             	sub    $0xc,%esp
+8010515b:	56                   	push   %esi
+8010515c:	e8 af c7 ff ff       	call   80101910 <iunlockput>
+    goto bad;
+80105161:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+80105164:	83 ec 0c             	sub    $0xc,%esp
+80105167:	53                   	push   %ebx
+80105168:	e8 13 c5 ff ff       	call   80101680 <ilock>
+  ip->nlink--;
+8010516d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80105172:	89 1c 24             	mov    %ebx,(%esp)
+80105175:	e8 56 c4 ff ff       	call   801015d0 <iupdate>
+  iunlockput(ip);
+8010517a:	89 1c 24             	mov    %ebx,(%esp)
+8010517d:	e8 8e c7 ff ff       	call   80101910 <iunlockput>
+  end_op();
+80105182:	e8 89 da ff ff       	call   80102c10 <end_op>
+  return -1;
+80105187:	83 c4 10             	add    $0x10,%esp
+}
+8010518a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+8010518d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105192:	5b                   	pop    %ebx
+80105193:	5e                   	pop    %esi
+80105194:	5f                   	pop    %edi
+80105195:	5d                   	pop    %ebp
+80105196:	c3                   	ret    
+    iunlockput(ip);
+80105197:	83 ec 0c             	sub    $0xc,%esp
+8010519a:	53                   	push   %ebx
+8010519b:	e8 70 c7 ff ff       	call   80101910 <iunlockput>
+    end_op();
+801051a0:	e8 6b da ff ff       	call   80102c10 <end_op>
+    return -1;
+801051a5:	83 c4 10             	add    $0x10,%esp
+801051a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051ad:	eb 9b                	jmp    8010514a <sys_link+0xda>
+    end_op();
+801051af:	e8 5c da ff ff       	call   80102c10 <end_op>
+    return -1;
+801051b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051b9:	eb 8f                	jmp    8010514a <sys_link+0xda>
+801051bb:	90                   	nop
+801051bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801051c0 <sys_unlink>:
+{
+801051c0:	55                   	push   %ebp
+801051c1:	89 e5                	mov    %esp,%ebp
+801051c3:	57                   	push   %edi
+801051c4:	56                   	push   %esi
+801051c5:	53                   	push   %ebx
+  if(argstr(0, &path) < 0)
+801051c6:	8d 45 c0             	lea    -0x40(%ebp),%eax
+{
+801051c9:	83 ec 44             	sub    $0x44,%esp
+  if(argstr(0, &path) < 0)
+801051cc:	50                   	push   %eax
+801051cd:	6a 00                	push   $0x0
+801051cf:	e8 1c fa ff ff       	call   80104bf0 <argstr>
+801051d4:	83 c4 10             	add    $0x10,%esp
+801051d7:	85 c0                	test   %eax,%eax
+801051d9:	0f 88 77 01 00 00    	js     80105356 <sys_unlink+0x196>
+  if((dp = nameiparent(path, name)) == 0){
+801051df:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+  begin_op();
+801051e2:	e8 b9 d9 ff ff       	call   80102ba0 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+801051e7:	83 ec 08             	sub    $0x8,%esp
+801051ea:	53                   	push   %ebx
+801051eb:	ff 75 c0             	pushl  -0x40(%ebp)
+801051ee:	e8 0d cd ff ff       	call   80101f00 <nameiparent>
+801051f3:	83 c4 10             	add    $0x10,%esp
+801051f6:	85 c0                	test   %eax,%eax
+801051f8:	89 c6                	mov    %eax,%esi
+801051fa:	0f 84 60 01 00 00    	je     80105360 <sys_unlink+0x1a0>
+  ilock(dp);
+80105200:	83 ec 0c             	sub    $0xc,%esp
+80105203:	50                   	push   %eax
+80105204:	e8 77 c4 ff ff       	call   80101680 <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+80105209:	58                   	pop    %eax
+8010520a:	5a                   	pop    %edx
+8010520b:	68 b4 7b 10 80       	push   $0x80107bb4
+80105210:	53                   	push   %ebx
+80105211:	e8 7a c9 ff ff       	call   80101b90 <namecmp>
+80105216:	83 c4 10             	add    $0x10,%esp
+80105219:	85 c0                	test   %eax,%eax
+8010521b:	0f 84 03 01 00 00    	je     80105324 <sys_unlink+0x164>
+80105221:	83 ec 08             	sub    $0x8,%esp
+80105224:	68 b3 7b 10 80       	push   $0x80107bb3
+80105229:	53                   	push   %ebx
+8010522a:	e8 61 c9 ff ff       	call   80101b90 <namecmp>
+8010522f:	83 c4 10             	add    $0x10,%esp
+80105232:	85 c0                	test   %eax,%eax
+80105234:	0f 84 ea 00 00 00    	je     80105324 <sys_unlink+0x164>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+8010523a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+8010523d:	83 ec 04             	sub    $0x4,%esp
+80105240:	50                   	push   %eax
+80105241:	53                   	push   %ebx
+80105242:	56                   	push   %esi
+80105243:	e8 68 c9 ff ff       	call   80101bb0 <dirlookup>
+80105248:	83 c4 10             	add    $0x10,%esp
+8010524b:	85 c0                	test   %eax,%eax
+8010524d:	89 c3                	mov    %eax,%ebx
+8010524f:	0f 84 cf 00 00 00    	je     80105324 <sys_unlink+0x164>
+  ilock(ip);
+80105255:	83 ec 0c             	sub    $0xc,%esp
+80105258:	50                   	push   %eax
+80105259:	e8 22 c4 ff ff       	call   80101680 <ilock>
+  if(ip->nlink < 1)
+8010525e:	83 c4 10             	add    $0x10,%esp
+80105261:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80105266:	0f 8e 10 01 00 00    	jle    8010537c <sys_unlink+0x1bc>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+8010526c:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105271:	74 6d                	je     801052e0 <sys_unlink+0x120>
+  memset(&de, 0, sizeof(de));
+80105273:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80105276:	83 ec 04             	sub    $0x4,%esp
+80105279:	6a 10                	push   $0x10
+8010527b:	6a 00                	push   $0x0
+8010527d:	50                   	push   %eax
+8010527e:	e8 bd f5 ff ff       	call   80104840 <memset>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80105283:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80105286:	6a 10                	push   $0x10
+80105288:	ff 75 c4             	pushl  -0x3c(%ebp)
+8010528b:	50                   	push   %eax
+8010528c:	56                   	push   %esi
+8010528d:	e8 ce c7 ff ff       	call   80101a60 <writei>
+80105292:	83 c4 20             	add    $0x20,%esp
+80105295:	83 f8 10             	cmp    $0x10,%eax
+80105298:	0f 85 eb 00 00 00    	jne    80105389 <sys_unlink+0x1c9>
+  if(ip->type == T_DIR){
+8010529e:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801052a3:	0f 84 97 00 00 00    	je     80105340 <sys_unlink+0x180>
+  iunlockput(dp);
+801052a9:	83 ec 0c             	sub    $0xc,%esp
+801052ac:	56                   	push   %esi
+801052ad:	e8 5e c6 ff ff       	call   80101910 <iunlockput>
+  ip->nlink--;
+801052b2:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+801052b7:	89 1c 24             	mov    %ebx,(%esp)
+801052ba:	e8 11 c3 ff ff       	call   801015d0 <iupdate>
+  iunlockput(ip);
+801052bf:	89 1c 24             	mov    %ebx,(%esp)
+801052c2:	e8 49 c6 ff ff       	call   80101910 <iunlockput>
+  end_op();
+801052c7:	e8 44 d9 ff ff       	call   80102c10 <end_op>
+  return 0;
+801052cc:	83 c4 10             	add    $0x10,%esp
+801052cf:	31 c0                	xor    %eax,%eax
+}
+801052d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052d4:	5b                   	pop    %ebx
+801052d5:	5e                   	pop    %esi
+801052d6:	5f                   	pop    %edi
+801052d7:	5d                   	pop    %ebp
+801052d8:	c3                   	ret    
+801052d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+801052e0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+801052e4:	76 8d                	jbe    80105273 <sys_unlink+0xb3>
+801052e6:	bf 20 00 00 00       	mov    $0x20,%edi
+801052eb:	eb 0f                	jmp    801052fc <sys_unlink+0x13c>
+801052ed:	8d 76 00             	lea    0x0(%esi),%esi
+801052f0:	83 c7 10             	add    $0x10,%edi
+801052f3:	3b 7b 58             	cmp    0x58(%ebx),%edi
+801052f6:	0f 83 77 ff ff ff    	jae    80105273 <sys_unlink+0xb3>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801052fc:	8d 45 d8             	lea    -0x28(%ebp),%eax
+801052ff:	6a 10                	push   $0x10
+80105301:	57                   	push   %edi
+80105302:	50                   	push   %eax
+80105303:	53                   	push   %ebx
+80105304:	e8 57 c6 ff ff       	call   80101960 <readi>
+80105309:	83 c4 10             	add    $0x10,%esp
+8010530c:	83 f8 10             	cmp    $0x10,%eax
+8010530f:	75 5e                	jne    8010536f <sys_unlink+0x1af>
+    if(de.inum != 0)
+80105311:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105316:	74 d8                	je     801052f0 <sys_unlink+0x130>
+    iunlockput(ip);
+80105318:	83 ec 0c             	sub    $0xc,%esp
+8010531b:	53                   	push   %ebx
+8010531c:	e8 ef c5 ff ff       	call   80101910 <iunlockput>
+    goto bad;
+80105321:	83 c4 10             	add    $0x10,%esp
+  iunlockput(dp);
+80105324:	83 ec 0c             	sub    $0xc,%esp
+80105327:	56                   	push   %esi
+80105328:	e8 e3 c5 ff ff       	call   80101910 <iunlockput>
+  end_op();
+8010532d:	e8 de d8 ff ff       	call   80102c10 <end_op>
+  return -1;
+80105332:	83 c4 10             	add    $0x10,%esp
+80105335:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010533a:	eb 95                	jmp    801052d1 <sys_unlink+0x111>
+8010533c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    dp->nlink--;
+80105340:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+    iupdate(dp);
+80105345:	83 ec 0c             	sub    $0xc,%esp
+80105348:	56                   	push   %esi
+80105349:	e8 82 c2 ff ff       	call   801015d0 <iupdate>
+8010534e:	83 c4 10             	add    $0x10,%esp
+80105351:	e9 53 ff ff ff       	jmp    801052a9 <sys_unlink+0xe9>
+    return -1;
+80105356:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010535b:	e9 71 ff ff ff       	jmp    801052d1 <sys_unlink+0x111>
+    end_op();
+80105360:	e8 ab d8 ff ff       	call   80102c10 <end_op>
+    return -1;
+80105365:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010536a:	e9 62 ff ff ff       	jmp    801052d1 <sys_unlink+0x111>
+      panic("isdirempty: readi");
+8010536f:	83 ec 0c             	sub    $0xc,%esp
+80105372:	68 d8 7b 10 80       	push   $0x80107bd8
+80105377:	e8 14 b0 ff ff       	call   80100390 <panic>
+    panic("unlink: nlink < 1");
+8010537c:	83 ec 0c             	sub    $0xc,%esp
+8010537f:	68 c6 7b 10 80       	push   $0x80107bc6
+80105384:	e8 07 b0 ff ff       	call   80100390 <panic>
+    panic("unlink: writei");
+80105389:	83 ec 0c             	sub    $0xc,%esp
+8010538c:	68 ea 7b 10 80       	push   $0x80107bea
+80105391:	e8 fa af ff ff       	call   80100390 <panic>
+80105396:	8d 76 00             	lea    0x0(%esi),%esi
+80105399:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801053a0 <sys_open>:
+
+int
+sys_open(void)
+{
+801053a0:	55                   	push   %ebp
+801053a1:	89 e5                	mov    %esp,%ebp
+801053a3:	57                   	push   %edi
+801053a4:	56                   	push   %esi
+801053a5:	53                   	push   %ebx
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+801053a6:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+801053a9:	83 ec 24             	sub    $0x24,%esp
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+801053ac:	50                   	push   %eax
+801053ad:	6a 00                	push   $0x0
+801053af:	e8 3c f8 ff ff       	call   80104bf0 <argstr>
+801053b4:	83 c4 10             	add    $0x10,%esp
+801053b7:	85 c0                	test   %eax,%eax
+801053b9:	0f 88 1d 01 00 00    	js     801054dc <sys_open+0x13c>
+801053bf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801053c2:	83 ec 08             	sub    $0x8,%esp
+801053c5:	50                   	push   %eax
+801053c6:	6a 01                	push   $0x1
+801053c8:	e8 73 f7 ff ff       	call   80104b40 <argint>
+801053cd:	83 c4 10             	add    $0x10,%esp
+801053d0:	85 c0                	test   %eax,%eax
+801053d2:	0f 88 04 01 00 00    	js     801054dc <sys_open+0x13c>
+    return -1;
+
+  begin_op();
+801053d8:	e8 c3 d7 ff ff       	call   80102ba0 <begin_op>
+
+  if(omode & O_CREATE){
+801053dd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+801053e1:	0f 85 a9 00 00 00    	jne    80105490 <sys_open+0xf0>
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+801053e7:	83 ec 0c             	sub    $0xc,%esp
+801053ea:	ff 75 e0             	pushl  -0x20(%ebp)
+801053ed:	e8 ee ca ff ff       	call   80101ee0 <namei>
+801053f2:	83 c4 10             	add    $0x10,%esp
+801053f5:	85 c0                	test   %eax,%eax
+801053f7:	89 c6                	mov    %eax,%esi
+801053f9:	0f 84 b2 00 00 00    	je     801054b1 <sys_open+0x111>
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+801053ff:	83 ec 0c             	sub    $0xc,%esp
+80105402:	50                   	push   %eax
+80105403:	e8 78 c2 ff ff       	call   80101680 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105408:	83 c4 10             	add    $0x10,%esp
+8010540b:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105410:	0f 84 aa 00 00 00    	je     801054c0 <sys_open+0x120>
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+80105416:	e8 65 b9 ff ff       	call   80100d80 <filealloc>
+8010541b:	85 c0                	test   %eax,%eax
+8010541d:	89 c7                	mov    %eax,%edi
+8010541f:	0f 84 a6 00 00 00    	je     801054cb <sys_open+0x12b>
+  struct proc *curproc = myproc();
+80105425:	e8 d6 e3 ff ff       	call   80103800 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+8010542a:	31 db                	xor    %ebx,%ebx
+8010542c:	eb 0e                	jmp    8010543c <sys_open+0x9c>
+8010542e:	66 90                	xchg   %ax,%ax
+80105430:	83 c3 01             	add    $0x1,%ebx
+80105433:	83 fb 10             	cmp    $0x10,%ebx
+80105436:	0f 84 ac 00 00 00    	je     801054e8 <sys_open+0x148>
+    if(curproc->ofile[fd] == 0){
+8010543c:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105440:	85 d2                	test   %edx,%edx
+80105442:	75 ec                	jne    80105430 <sys_open+0x90>
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105444:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+80105447:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+  iunlock(ip);
+8010544b:	56                   	push   %esi
+8010544c:	e8 0f c3 ff ff       	call   80101760 <iunlock>
+  end_op();
+80105451:	e8 ba d7 ff ff       	call   80102c10 <end_op>
+
+  f->type = FD_INODE;
+80105456:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+8010545c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+8010545f:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+80105462:	89 77 10             	mov    %esi,0x10(%edi)
+  f->off = 0;
+80105465:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+  f->readable = !(omode & O_WRONLY);
+8010546c:	89 d0                	mov    %edx,%eax
+8010546e:	f7 d0                	not    %eax
+80105470:	83 e0 01             	and    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80105473:	83 e2 03             	and    $0x3,%edx
+  f->readable = !(omode & O_WRONLY);
+80105476:	88 47 08             	mov    %al,0x8(%edi)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80105479:	0f 95 47 09          	setne  0x9(%edi)
+  return fd;
+}
+8010547d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105480:	89 d8                	mov    %ebx,%eax
+80105482:	5b                   	pop    %ebx
+80105483:	5e                   	pop    %esi
+80105484:	5f                   	pop    %edi
+80105485:	5d                   	pop    %ebp
+80105486:	c3                   	ret    
+80105487:	89 f6                	mov    %esi,%esi
+80105489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    ip = create(path, T_FILE, 0, 0);
+80105490:	83 ec 0c             	sub    $0xc,%esp
+80105493:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105496:	31 c9                	xor    %ecx,%ecx
+80105498:	6a 00                	push   $0x0
+8010549a:	ba 02 00 00 00       	mov    $0x2,%edx
+8010549f:	e8 ec f7 ff ff       	call   80104c90 <create>
+    if(ip == 0){
+801054a4:	83 c4 10             	add    $0x10,%esp
+801054a7:	85 c0                	test   %eax,%eax
+    ip = create(path, T_FILE, 0, 0);
+801054a9:	89 c6                	mov    %eax,%esi
+    if(ip == 0){
+801054ab:	0f 85 65 ff ff ff    	jne    80105416 <sys_open+0x76>
+      end_op();
+801054b1:	e8 5a d7 ff ff       	call   80102c10 <end_op>
+      return -1;
+801054b6:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801054bb:	eb c0                	jmp    8010547d <sys_open+0xdd>
+801054bd:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->type == T_DIR && omode != O_RDONLY){
+801054c0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801054c3:	85 c9                	test   %ecx,%ecx
+801054c5:	0f 84 4b ff ff ff    	je     80105416 <sys_open+0x76>
+    iunlockput(ip);
+801054cb:	83 ec 0c             	sub    $0xc,%esp
+801054ce:	56                   	push   %esi
+801054cf:	e8 3c c4 ff ff       	call   80101910 <iunlockput>
+    end_op();
+801054d4:	e8 37 d7 ff ff       	call   80102c10 <end_op>
+    return -1;
+801054d9:	83 c4 10             	add    $0x10,%esp
+801054dc:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801054e1:	eb 9a                	jmp    8010547d <sys_open+0xdd>
+801054e3:	90                   	nop
+801054e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      fileclose(f);
+801054e8:	83 ec 0c             	sub    $0xc,%esp
+801054eb:	57                   	push   %edi
+801054ec:	e8 4f b9 ff ff       	call   80100e40 <fileclose>
+801054f1:	83 c4 10             	add    $0x10,%esp
+801054f4:	eb d5                	jmp    801054cb <sys_open+0x12b>
+801054f6:	8d 76 00             	lea    0x0(%esi),%esi
+801054f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105500 <sys_mkdir>:
+
+int
+sys_mkdir(void)
+{
+80105500:	55                   	push   %ebp
+80105501:	89 e5                	mov    %esp,%ebp
+80105503:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+80105506:	e8 95 d6 ff ff       	call   80102ba0 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+8010550b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010550e:	83 ec 08             	sub    $0x8,%esp
+80105511:	50                   	push   %eax
+80105512:	6a 00                	push   $0x0
+80105514:	e8 d7 f6 ff ff       	call   80104bf0 <argstr>
+80105519:	83 c4 10             	add    $0x10,%esp
+8010551c:	85 c0                	test   %eax,%eax
+8010551e:	78 30                	js     80105550 <sys_mkdir+0x50>
+80105520:	83 ec 0c             	sub    $0xc,%esp
+80105523:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105526:	31 c9                	xor    %ecx,%ecx
+80105528:	6a 00                	push   $0x0
+8010552a:	ba 01 00 00 00       	mov    $0x1,%edx
+8010552f:	e8 5c f7 ff ff       	call   80104c90 <create>
+80105534:	83 c4 10             	add    $0x10,%esp
+80105537:	85 c0                	test   %eax,%eax
+80105539:	74 15                	je     80105550 <sys_mkdir+0x50>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+8010553b:	83 ec 0c             	sub    $0xc,%esp
+8010553e:	50                   	push   %eax
+8010553f:	e8 cc c3 ff ff       	call   80101910 <iunlockput>
+  end_op();
+80105544:	e8 c7 d6 ff ff       	call   80102c10 <end_op>
+  return 0;
+80105549:	83 c4 10             	add    $0x10,%esp
+8010554c:	31 c0                	xor    %eax,%eax
+}
+8010554e:	c9                   	leave  
+8010554f:	c3                   	ret    
+    end_op();
+80105550:	e8 bb d6 ff ff       	call   80102c10 <end_op>
+    return -1;
+80105555:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010555a:	c9                   	leave  
+8010555b:	c3                   	ret    
+8010555c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105560 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+80105560:	55                   	push   %ebp
+80105561:	89 e5                	mov    %esp,%ebp
+80105563:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+80105566:	e8 35 d6 ff ff       	call   80102ba0 <begin_op>
+  if((argstr(0, &path)) < 0 ||
+8010556b:	8d 45 ec             	lea    -0x14(%ebp),%eax
+8010556e:	83 ec 08             	sub    $0x8,%esp
+80105571:	50                   	push   %eax
+80105572:	6a 00                	push   $0x0
+80105574:	e8 77 f6 ff ff       	call   80104bf0 <argstr>
+80105579:	83 c4 10             	add    $0x10,%esp
+8010557c:	85 c0                	test   %eax,%eax
+8010557e:	78 60                	js     801055e0 <sys_mknod+0x80>
+     argint(1, &major) < 0 ||
+80105580:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105583:	83 ec 08             	sub    $0x8,%esp
+80105586:	50                   	push   %eax
+80105587:	6a 01                	push   $0x1
+80105589:	e8 b2 f5 ff ff       	call   80104b40 <argint>
+  if((argstr(0, &path)) < 0 ||
+8010558e:	83 c4 10             	add    $0x10,%esp
+80105591:	85 c0                	test   %eax,%eax
+80105593:	78 4b                	js     801055e0 <sys_mknod+0x80>
+     argint(2, &minor) < 0 ||
+80105595:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105598:	83 ec 08             	sub    $0x8,%esp
+8010559b:	50                   	push   %eax
+8010559c:	6a 02                	push   $0x2
+8010559e:	e8 9d f5 ff ff       	call   80104b40 <argint>
+     argint(1, &major) < 0 ||
+801055a3:	83 c4 10             	add    $0x10,%esp
+801055a6:	85 c0                	test   %eax,%eax
+801055a8:	78 36                	js     801055e0 <sys_mknod+0x80>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+801055aa:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+     argint(2, &minor) < 0 ||
+801055ae:	83 ec 0c             	sub    $0xc,%esp
+     (ip = create(path, T_DEV, major, minor)) == 0){
+801055b1:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+     argint(2, &minor) < 0 ||
+801055b5:	ba 03 00 00 00       	mov    $0x3,%edx
+801055ba:	50                   	push   %eax
+801055bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801055be:	e8 cd f6 ff ff       	call   80104c90 <create>
+801055c3:	83 c4 10             	add    $0x10,%esp
+801055c6:	85 c0                	test   %eax,%eax
+801055c8:	74 16                	je     801055e0 <sys_mknod+0x80>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+801055ca:	83 ec 0c             	sub    $0xc,%esp
+801055cd:	50                   	push   %eax
+801055ce:	e8 3d c3 ff ff       	call   80101910 <iunlockput>
+  end_op();
+801055d3:	e8 38 d6 ff ff       	call   80102c10 <end_op>
+  return 0;
+801055d8:	83 c4 10             	add    $0x10,%esp
+801055db:	31 c0                	xor    %eax,%eax
+}
+801055dd:	c9                   	leave  
+801055de:	c3                   	ret    
+801055df:	90                   	nop
+    end_op();
+801055e0:	e8 2b d6 ff ff       	call   80102c10 <end_op>
+    return -1;
+801055e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801055ea:	c9                   	leave  
+801055eb:	c3                   	ret    
+801055ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801055f0 <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+801055f0:	55                   	push   %ebp
+801055f1:	89 e5                	mov    %esp,%ebp
+801055f3:	56                   	push   %esi
+801055f4:	53                   	push   %ebx
+801055f5:	83 ec 10             	sub    $0x10,%esp
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+801055f8:	e8 03 e2 ff ff       	call   80103800 <myproc>
+801055fd:	89 c6                	mov    %eax,%esi
+  
+  begin_op();
+801055ff:	e8 9c d5 ff ff       	call   80102ba0 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+80105604:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105607:	83 ec 08             	sub    $0x8,%esp
+8010560a:	50                   	push   %eax
+8010560b:	6a 00                	push   $0x0
+8010560d:	e8 de f5 ff ff       	call   80104bf0 <argstr>
+80105612:	83 c4 10             	add    $0x10,%esp
+80105615:	85 c0                	test   %eax,%eax
+80105617:	78 77                	js     80105690 <sys_chdir+0xa0>
+80105619:	83 ec 0c             	sub    $0xc,%esp
+8010561c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010561f:	e8 bc c8 ff ff       	call   80101ee0 <namei>
+80105624:	83 c4 10             	add    $0x10,%esp
+80105627:	85 c0                	test   %eax,%eax
+80105629:	89 c3                	mov    %eax,%ebx
+8010562b:	74 63                	je     80105690 <sys_chdir+0xa0>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+8010562d:	83 ec 0c             	sub    $0xc,%esp
+80105630:	50                   	push   %eax
+80105631:	e8 4a c0 ff ff       	call   80101680 <ilock>
+  if(ip->type != T_DIR){
+80105636:	83 c4 10             	add    $0x10,%esp
+80105639:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010563e:	75 30                	jne    80105670 <sys_chdir+0x80>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105640:	83 ec 0c             	sub    $0xc,%esp
+80105643:	53                   	push   %ebx
+80105644:	e8 17 c1 ff ff       	call   80101760 <iunlock>
+  iput(curproc->cwd);
+80105649:	58                   	pop    %eax
+8010564a:	ff 76 68             	pushl  0x68(%esi)
+8010564d:	e8 5e c1 ff ff       	call   801017b0 <iput>
+  end_op();
+80105652:	e8 b9 d5 ff ff       	call   80102c10 <end_op>
+  curproc->cwd = ip;
+80105657:	89 5e 68             	mov    %ebx,0x68(%esi)
+  return 0;
+8010565a:	83 c4 10             	add    $0x10,%esp
+8010565d:	31 c0                	xor    %eax,%eax
+}
+8010565f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105662:	5b                   	pop    %ebx
+80105663:	5e                   	pop    %esi
+80105664:	5d                   	pop    %ebp
+80105665:	c3                   	ret    
+80105666:	8d 76 00             	lea    0x0(%esi),%esi
+80105669:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    iunlockput(ip);
+80105670:	83 ec 0c             	sub    $0xc,%esp
+80105673:	53                   	push   %ebx
+80105674:	e8 97 c2 ff ff       	call   80101910 <iunlockput>
+    end_op();
+80105679:	e8 92 d5 ff ff       	call   80102c10 <end_op>
+    return -1;
+8010567e:	83 c4 10             	add    $0x10,%esp
+80105681:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105686:	eb d7                	jmp    8010565f <sys_chdir+0x6f>
+80105688:	90                   	nop
+80105689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    end_op();
+80105690:	e8 7b d5 ff ff       	call   80102c10 <end_op>
+    return -1;
+80105695:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010569a:	eb c3                	jmp    8010565f <sys_chdir+0x6f>
+8010569c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801056a0 <sys_exec>:
+
+int
+sys_exec(void)
+{
+801056a0:	55                   	push   %ebp
+801056a1:	89 e5                	mov    %esp,%ebp
+801056a3:	57                   	push   %edi
+801056a4:	56                   	push   %esi
+801056a5:	53                   	push   %ebx
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+801056a6:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+{
+801056ac:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+801056b2:	50                   	push   %eax
+801056b3:	6a 00                	push   $0x0
+801056b5:	e8 36 f5 ff ff       	call   80104bf0 <argstr>
+801056ba:	83 c4 10             	add    $0x10,%esp
+801056bd:	85 c0                	test   %eax,%eax
+801056bf:	0f 88 87 00 00 00    	js     8010574c <sys_exec+0xac>
+801056c5:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+801056cb:	83 ec 08             	sub    $0x8,%esp
+801056ce:	50                   	push   %eax
+801056cf:	6a 01                	push   $0x1
+801056d1:	e8 6a f4 ff ff       	call   80104b40 <argint>
+801056d6:	83 c4 10             	add    $0x10,%esp
+801056d9:	85 c0                	test   %eax,%eax
+801056db:	78 6f                	js     8010574c <sys_exec+0xac>
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+801056dd:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+801056e3:	83 ec 04             	sub    $0x4,%esp
+  for(i=0;; i++){
+801056e6:	31 db                	xor    %ebx,%ebx
+  memset(argv, 0, sizeof(argv));
+801056e8:	68 80 00 00 00       	push   $0x80
+801056ed:	6a 00                	push   $0x0
+801056ef:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+801056f5:	50                   	push   %eax
+801056f6:	e8 45 f1 ff ff       	call   80104840 <memset>
+801056fb:	83 c4 10             	add    $0x10,%esp
+801056fe:	eb 2c                	jmp    8010572c <sys_exec+0x8c>
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+      return -1;
+    if(uarg == 0){
+80105700:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105706:	85 c0                	test   %eax,%eax
+80105708:	74 56                	je     80105760 <sys_exec+0xc0>
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+8010570a:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105710:	83 ec 08             	sub    $0x8,%esp
+80105713:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+80105716:	52                   	push   %edx
+80105717:	50                   	push   %eax
+80105718:	e8 b3 f3 ff ff       	call   80104ad0 <fetchstr>
+8010571d:	83 c4 10             	add    $0x10,%esp
+80105720:	85 c0                	test   %eax,%eax
+80105722:	78 28                	js     8010574c <sys_exec+0xac>
+  for(i=0;; i++){
+80105724:	83 c3 01             	add    $0x1,%ebx
+    if(i >= NELEM(argv))
+80105727:	83 fb 20             	cmp    $0x20,%ebx
+8010572a:	74 20                	je     8010574c <sys_exec+0xac>
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+8010572c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+80105732:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80105739:	83 ec 08             	sub    $0x8,%esp
+8010573c:	57                   	push   %edi
+8010573d:	01 f0                	add    %esi,%eax
+8010573f:	50                   	push   %eax
+80105740:	e8 4b f3 ff ff       	call   80104a90 <fetchint>
+80105745:	83 c4 10             	add    $0x10,%esp
+80105748:	85 c0                	test   %eax,%eax
+8010574a:	79 b4                	jns    80105700 <sys_exec+0x60>
+      return -1;
+  }
+  return exec(path, argv);
+}
+8010574c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+8010574f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105754:	5b                   	pop    %ebx
+80105755:	5e                   	pop    %esi
+80105756:	5f                   	pop    %edi
+80105757:	5d                   	pop    %ebp
+80105758:	c3                   	ret    
+80105759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return exec(path, argv);
+80105760:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105766:	83 ec 08             	sub    $0x8,%esp
+      argv[i] = 0;
+80105769:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105770:	00 00 00 00 
+  return exec(path, argv);
+80105774:	50                   	push   %eax
+80105775:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+8010577b:	e8 90 b2 ff ff       	call   80100a10 <exec>
+80105780:	83 c4 10             	add    $0x10,%esp
+}
+80105783:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105786:	5b                   	pop    %ebx
+80105787:	5e                   	pop    %esi
+80105788:	5f                   	pop    %edi
+80105789:	5d                   	pop    %ebp
+8010578a:	c3                   	ret    
+8010578b:	90                   	nop
+8010578c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105790 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+80105790:	55                   	push   %ebp
+80105791:	89 e5                	mov    %esp,%ebp
+80105793:	57                   	push   %edi
+80105794:	56                   	push   %esi
+80105795:	53                   	push   %ebx
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80105796:	8d 45 dc             	lea    -0x24(%ebp),%eax
+{
+80105799:	83 ec 20             	sub    $0x20,%esp
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+8010579c:	6a 08                	push   $0x8
+8010579e:	50                   	push   %eax
+8010579f:	6a 00                	push   $0x0
+801057a1:	e8 ea f3 ff ff       	call   80104b90 <argptr>
+801057a6:	83 c4 10             	add    $0x10,%esp
+801057a9:	85 c0                	test   %eax,%eax
+801057ab:	0f 88 ae 00 00 00    	js     8010585f <sys_pipe+0xcf>
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+801057b1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801057b4:	83 ec 08             	sub    $0x8,%esp
+801057b7:	50                   	push   %eax
+801057b8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801057bb:	50                   	push   %eax
+801057bc:	e8 7f da ff ff       	call   80103240 <pipealloc>
+801057c1:	83 c4 10             	add    $0x10,%esp
+801057c4:	85 c0                	test   %eax,%eax
+801057c6:	0f 88 93 00 00 00    	js     8010585f <sys_pipe+0xcf>
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+801057cc:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(fd = 0; fd < NOFILE; fd++){
+801057cf:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+801057d1:	e8 2a e0 ff ff       	call   80103800 <myproc>
+801057d6:	eb 10                	jmp    801057e8 <sys_pipe+0x58>
+801057d8:	90                   	nop
+801057d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+801057e0:	83 c3 01             	add    $0x1,%ebx
+801057e3:	83 fb 10             	cmp    $0x10,%ebx
+801057e6:	74 60                	je     80105848 <sys_pipe+0xb8>
+    if(curproc->ofile[fd] == 0){
+801057e8:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+801057ec:	85 f6                	test   %esi,%esi
+801057ee:	75 f0                	jne    801057e0 <sys_pipe+0x50>
+      curproc->ofile[fd] = f;
+801057f0:	8d 73 08             	lea    0x8(%ebx),%esi
+801057f3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+801057f7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  struct proc *curproc = myproc();
+801057fa:	e8 01 e0 ff ff       	call   80103800 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801057ff:	31 d2                	xor    %edx,%edx
+80105801:	eb 0d                	jmp    80105810 <sys_pipe+0x80>
+80105803:	90                   	nop
+80105804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105808:	83 c2 01             	add    $0x1,%edx
+8010580b:	83 fa 10             	cmp    $0x10,%edx
+8010580e:	74 28                	je     80105838 <sys_pipe+0xa8>
+    if(curproc->ofile[fd] == 0){
+80105810:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+80105814:	85 c9                	test   %ecx,%ecx
+80105816:	75 f0                	jne    80105808 <sys_pipe+0x78>
+      curproc->ofile[fd] = f;
+80105818:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+8010581c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010581f:	89 18                	mov    %ebx,(%eax)
+  fd[1] = fd1;
+80105821:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105824:	89 50 04             	mov    %edx,0x4(%eax)
+  return 0;
+80105827:	31 c0                	xor    %eax,%eax
+}
+80105829:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010582c:	5b                   	pop    %ebx
+8010582d:	5e                   	pop    %esi
+8010582e:	5f                   	pop    %edi
+8010582f:	5d                   	pop    %ebp
+80105830:	c3                   	ret    
+80105831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      myproc()->ofile[fd0] = 0;
+80105838:	e8 c3 df ff ff       	call   80103800 <myproc>
+8010583d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80105844:	00 
+80105845:	8d 76 00             	lea    0x0(%esi),%esi
+    fileclose(rf);
+80105848:	83 ec 0c             	sub    $0xc,%esp
+8010584b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010584e:	e8 ed b5 ff ff       	call   80100e40 <fileclose>
+    fileclose(wf);
+80105853:	58                   	pop    %eax
+80105854:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105857:	e8 e4 b5 ff ff       	call   80100e40 <fileclose>
+    return -1;
+8010585c:	83 c4 10             	add    $0x10,%esp
+8010585f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105864:	eb c3                	jmp    80105829 <sys_pipe+0x99>
+80105866:	66 90                	xchg   %ax,%ax
+80105868:	66 90                	xchg   %ax,%ax
+8010586a:	66 90                	xchg   %ax,%ax
+8010586c:	66 90                	xchg   %ax,%ax
+8010586e:	66 90                	xchg   %ax,%ax
+
+80105870 <sys_fork>:
+#include "mmu.h"
+#include "proc.h"
+
+int
+sys_fork(void)
+{
+80105870:	55                   	push   %ebp
+80105871:	89 e5                	mov    %esp,%ebp
+  return fork();
+}
+80105873:	5d                   	pop    %ebp
+  return fork();
+80105874:	e9 27 e1 ff ff       	jmp    801039a0 <fork>
+80105879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105880 <sys_exit>:
+
+int
+sys_exit(void)
+{
+80105880:	55                   	push   %ebp
+80105881:	89 e5                	mov    %esp,%ebp
+80105883:	83 ec 08             	sub    $0x8,%esp
+  exit();
+80105886:	e8 d5 e3 ff ff       	call   80103c60 <exit>
+  return 0;  // not reached
+}
+8010588b:	31 c0                	xor    %eax,%eax
+8010588d:	c9                   	leave  
+8010588e:	c3                   	ret    
+8010588f:	90                   	nop
+
+80105890 <sys_wait>:
+
+int
+sys_wait(void)
+{
+80105890:	55                   	push   %ebp
+80105891:	89 e5                	mov    %esp,%ebp
+  return wait();
+}
+80105893:	5d                   	pop    %ebp
+  return wait();
+80105894:	e9 07 e6 ff ff       	jmp    80103ea0 <wait>
+80105899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801058a0 <sys_kill>:
+
+int
+sys_kill(void)
+{
+801058a0:	55                   	push   %ebp
+801058a1:	89 e5                	mov    %esp,%ebp
+801058a3:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+801058a6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801058a9:	50                   	push   %eax
+801058aa:	6a 00                	push   $0x0
+801058ac:	e8 8f f2 ff ff       	call   80104b40 <argint>
+801058b1:	83 c4 10             	add    $0x10,%esp
+801058b4:	85 c0                	test   %eax,%eax
+801058b6:	78 18                	js     801058d0 <sys_kill+0x30>
+    return -1;
+  return kill(pid);
+801058b8:	83 ec 0c             	sub    $0xc,%esp
+801058bb:	ff 75 f4             	pushl  -0xc(%ebp)
+801058be:	e8 3d e7 ff ff       	call   80104000 <kill>
+801058c3:	83 c4 10             	add    $0x10,%esp
+}
+801058c6:	c9                   	leave  
+801058c7:	c3                   	ret    
+801058c8:	90                   	nop
+801058c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+801058d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801058d5:	c9                   	leave  
+801058d6:	c3                   	ret    
+801058d7:	89 f6                	mov    %esi,%esi
+801058d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801058e0 <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+801058e0:	55                   	push   %ebp
+801058e1:	89 e5                	mov    %esp,%ebp
+801058e3:	83 ec 08             	sub    $0x8,%esp
+  return myproc()->pid;
+801058e6:	e8 15 df ff ff       	call   80103800 <myproc>
+801058eb:	8b 40 10             	mov    0x10(%eax),%eax
+}
+801058ee:	c9                   	leave  
+801058ef:	c3                   	ret    
+
+801058f0 <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+801058f0:	55                   	push   %ebp
+801058f1:	89 e5                	mov    %esp,%ebp
+801058f3:	53                   	push   %ebx
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+801058f4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+801058f7:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+801058fa:	50                   	push   %eax
+801058fb:	6a 00                	push   $0x0
+801058fd:	e8 3e f2 ff ff       	call   80104b40 <argint>
+80105902:	83 c4 10             	add    $0x10,%esp
+80105905:	85 c0                	test   %eax,%eax
+80105907:	78 27                	js     80105930 <sys_sbrk+0x40>
+    return -1;
+  addr = myproc()->sz;
+80105909:	e8 f2 de ff ff       	call   80103800 <myproc>
+  if(growproc(n) < 0)
+8010590e:	83 ec 0c             	sub    $0xc,%esp
+  addr = myproc()->sz;
+80105911:	8b 18                	mov    (%eax),%ebx
+  if(growproc(n) < 0)
+80105913:	ff 75 f4             	pushl  -0xc(%ebp)
+80105916:	e8 05 e0 ff ff       	call   80103920 <growproc>
+8010591b:	83 c4 10             	add    $0x10,%esp
+8010591e:	85 c0                	test   %eax,%eax
+80105920:	78 0e                	js     80105930 <sys_sbrk+0x40>
+    return -1;
+  return addr;
+}
+80105922:	89 d8                	mov    %ebx,%eax
+80105924:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105927:	c9                   	leave  
+80105928:	c3                   	ret    
+80105929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105930:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105935:	eb eb                	jmp    80105922 <sys_sbrk+0x32>
+80105937:	89 f6                	mov    %esi,%esi
+80105939:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105940 <sys_sleep>:
+
+int
+sys_sleep(void)
+{
+80105940:	55                   	push   %ebp
+80105941:	89 e5                	mov    %esp,%ebp
+80105943:	53                   	push   %ebx
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+80105944:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80105947:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+8010594a:	50                   	push   %eax
+8010594b:	6a 00                	push   $0x0
+8010594d:	e8 ee f1 ff ff       	call   80104b40 <argint>
+80105952:	83 c4 10             	add    $0x10,%esp
+80105955:	85 c0                	test   %eax,%eax
+80105957:	0f 88 8a 00 00 00    	js     801059e7 <sys_sleep+0xa7>
+    return -1;
+  acquire(&tickslock);
+8010595d:	83 ec 0c             	sub    $0xc,%esp
+80105960:	68 60 4f 11 80       	push   $0x80114f60
+80105965:	e8 c6 ed ff ff       	call   80104730 <acquire>
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+8010596a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010596d:	83 c4 10             	add    $0x10,%esp
+  ticks0 = ticks;
+80105970:	8b 1d a0 57 11 80    	mov    0x801157a0,%ebx
+  while(ticks - ticks0 < n){
+80105976:	85 d2                	test   %edx,%edx
+80105978:	75 27                	jne    801059a1 <sys_sleep+0x61>
+8010597a:	eb 54                	jmp    801059d0 <sys_sleep+0x90>
+8010597c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+80105980:	83 ec 08             	sub    $0x8,%esp
+80105983:	68 60 4f 11 80       	push   $0x80114f60
+80105988:	68 a0 57 11 80       	push   $0x801157a0
+8010598d:	e8 4e e4 ff ff       	call   80103de0 <sleep>
+  while(ticks - ticks0 < n){
+80105992:	a1 a0 57 11 80       	mov    0x801157a0,%eax
+80105997:	83 c4 10             	add    $0x10,%esp
+8010599a:	29 d8                	sub    %ebx,%eax
+8010599c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010599f:	73 2f                	jae    801059d0 <sys_sleep+0x90>
+    if(myproc()->killed){
+801059a1:	e8 5a de ff ff       	call   80103800 <myproc>
+801059a6:	8b 40 24             	mov    0x24(%eax),%eax
+801059a9:	85 c0                	test   %eax,%eax
+801059ab:	74 d3                	je     80105980 <sys_sleep+0x40>
+      release(&tickslock);
+801059ad:	83 ec 0c             	sub    $0xc,%esp
+801059b0:	68 60 4f 11 80       	push   $0x80114f60
+801059b5:	e8 36 ee ff ff       	call   801047f0 <release>
+      return -1;
+801059ba:	83 c4 10             	add    $0x10,%esp
+801059bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  release(&tickslock);
+  return 0;
+}
+801059c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801059c5:	c9                   	leave  
+801059c6:	c3                   	ret    
+801059c7:	89 f6                	mov    %esi,%esi
+801059c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  release(&tickslock);
+801059d0:	83 ec 0c             	sub    $0xc,%esp
+801059d3:	68 60 4f 11 80       	push   $0x80114f60
+801059d8:	e8 13 ee ff ff       	call   801047f0 <release>
+  return 0;
+801059dd:	83 c4 10             	add    $0x10,%esp
+801059e0:	31 c0                	xor    %eax,%eax
+}
+801059e2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801059e5:	c9                   	leave  
+801059e6:	c3                   	ret    
+    return -1;
+801059e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059ec:	eb f4                	jmp    801059e2 <sys_sleep+0xa2>
+801059ee:	66 90                	xchg   %ax,%ax
+
+801059f0 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+801059f0:	55                   	push   %ebp
+801059f1:	89 e5                	mov    %esp,%ebp
+801059f3:	53                   	push   %ebx
+801059f4:	83 ec 10             	sub    $0x10,%esp
+  uint xticks;
+
+  acquire(&tickslock);
+801059f7:	68 60 4f 11 80       	push   $0x80114f60
+801059fc:	e8 2f ed ff ff       	call   80104730 <acquire>
+  xticks = ticks;
+80105a01:	8b 1d a0 57 11 80    	mov    0x801157a0,%ebx
+  release(&tickslock);
+80105a07:	c7 04 24 60 4f 11 80 	movl   $0x80114f60,(%esp)
+80105a0e:	e8 dd ed ff ff       	call   801047f0 <release>
+  return xticks;
+}
+80105a13:	89 d8                	mov    %ebx,%eax
+80105a15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105a18:	c9                   	leave  
+80105a19:	c3                   	ret    
+80105a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105a20 <sys_getMaxPid>:
+
+// get max PID amongst the PIDs of all currently active processes in the system.
+int sys_getMaxPid(void){
+80105a20:	55                   	push   %ebp
+80105a21:	89 e5                	mov    %esp,%ebp
+  return getMaxPid();      // call getMaxPid function
+}
+80105a23:	5d                   	pop    %ebp
+  return getMaxPid();      // call getMaxPid function
+80105a24:	e9 77 e7 ff ff       	jmp    801041a0 <getMaxPid>
+80105a29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105a30 <sys_getNumProc>:
+
+// get number of active processes in the system
+int sys_getNumProc(void){
+80105a30:	55                   	push   %ebp
+80105a31:	89 e5                	mov    %esp,%ebp
+    return getNumProc();    // call getNumProc function
+}
+80105a33:	5d                   	pop    %ebp
+    return getNumProc();    // call getNumProc function
+80105a34:	e9 17 e7 ff ff       	jmp    80104150 <getNumProc>
+80105a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105a40 <sys_getProcInfo>:
+
+// gives info of the process
+int sys_getProcInfo(void){
+80105a40:	55                   	push   %ebp
+80105a41:	89 e5                	mov    %esp,%ebp
+80105a43:	83 ec 1c             	sub    $0x1c,%esp
+  int pid;
+  struct processInfo *pif;
+  int sz1 = sizeof(pid);
+  int sz2 = sizeof(pif);
+  argptr(0, (void *)&pid, sz1);        
+80105a46:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105a49:	6a 04                	push   $0x4
+80105a4b:	50                   	push   %eax
+80105a4c:	6a 00                	push   $0x0
+80105a4e:	e8 3d f1 ff ff       	call   80104b90 <argptr>
+  argptr(1, (void *)&pif, sz2); 
+80105a53:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a56:	83 c4 0c             	add    $0xc,%esp
+80105a59:	6a 04                	push   $0x4
+80105a5b:	50                   	push   %eax
+80105a5c:	6a 01                	push   $0x1
+80105a5e:	e8 2d f1 ff ff       	call   80104b90 <argptr>
+  return getProcInfo(pid, pif);     // call getProcInfo function
+80105a63:	58                   	pop    %eax
+80105a64:	5a                   	pop    %edx
+80105a65:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a68:	ff 75 f0             	pushl  -0x10(%ebp)
+80105a6b:	e8 80 e7 ff ff       	call   801041f0 <getProcInfo>
+}
+80105a70:	c9                   	leave  
+80105a71:	c3                   	ret    
+80105a72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105a80 <sys_set_burst_time>:
+
+// set burst time of a process
+int sys_set_burst_time(void)
+{
+80105a80:	55                   	push   %ebp
+80105a81:	89 e5                	mov    %esp,%ebp
+80105a83:	83 ec 1c             	sub    $0x1c,%esp
+  int n;
+  int sz = sizeof(n);
+  argptr(0, (void *)&n, sz);
+80105a86:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a89:	6a 04                	push   $0x4
+80105a8b:	50                   	push   %eax
+80105a8c:	6a 00                	push   $0x0
+80105a8e:	e8 fd f0 ff ff       	call   80104b90 <argptr>
+  return set_burst_time(n);       // call set_burst_time function
+80105a93:	58                   	pop    %eax
+80105a94:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a97:	e8 c4 e7 ff ff       	call   80104260 <set_burst_time>
+}
+80105a9c:	c9                   	leave  
+80105a9d:	c3                   	ret    
+80105a9e:	66 90                	xchg   %ax,%ax
+
+80105aa0 <sys_get_burst_time>:
+
+// get burst time of a process
+int sys_get_burst_time(void){
+80105aa0:	55                   	push   %ebp
+80105aa1:	89 e5                	mov    %esp,%ebp
+  return get_burst_time();        // call get_burst_time function
+}
+80105aa3:	5d                   	pop    %ebp
+  return get_burst_time();        // call get_burst_time function
+80105aa4:	e9 f7 e7 ff ff       	jmp    801042a0 <get_burst_time>
+80105aa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105ab0 <sys_process_state>:
+
+// get the state of the process
+int sys_process_state(void){
+80105ab0:	55                   	push   %ebp
+80105ab1:	89 e5                	mov    %esp,%ebp
+  return process_state();         // call process_state function
+}
+80105ab3:	5d                   	pop    %ebp
+  return process_state();         // call process_state function
+80105ab4:	e9 27 e8 ff ff       	jmp    801042e0 <process_state>
+80105ab9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105ac0 <sys_inc_cpucounter>:
+
+int sys_inc_cpucounter(void)
+{
+80105ac0:	55                   	push   %ebp
+80105ac1:	89 e5                	mov    %esp,%ebp
+  return inc_cpucounter();
+}
+80105ac3:	5d                   	pop    %ebp
+  return inc_cpucounter();
+80105ac4:	e9 b7 e9 ff ff       	jmp    80104480 <inc_cpucounter>
+80105ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105ad0 <sys_dec_burstTime>:
+
+int sys_dec_burstTime(void)
+{
+80105ad0:	55                   	push   %ebp
+80105ad1:	89 e5                	mov    %esp,%ebp
+80105ad3:	83 ec 08             	sub    $0x8,%esp
+  dec_burstTime();
+80105ad6:	e8 35 e9 ff ff       	call   80104410 <dec_burstTime>
+  return 29;
+80105adb:	b8 1d 00 00 00       	mov    $0x1d,%eax
+80105ae0:	c9                   	leave  
+80105ae1:	c3                   	ret    
+
+80105ae2 <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+80105ae2:	1e                   	push   %ds
+  pushl %es
+80105ae3:	06                   	push   %es
+  pushl %fs
+80105ae4:	0f a0                	push   %fs
+  pushl %gs
+80105ae6:	0f a8                	push   %gs
+  pushal
+80105ae8:	60                   	pusha  
+  
+  # Set up data segments.
+  movw $(SEG_KDATA<<3), %ax
+80105ae9:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+80105aed:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+80105aef:	8e c0                	mov    %eax,%es
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+80105af1:	54                   	push   %esp
+  call trap
+80105af2:	e8 c9 00 00 00       	call   80105bc0 <trap>
+  addl $4, %esp
+80105af7:	83 c4 04             	add    $0x4,%esp
+
+80105afa <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+80105afa:	61                   	popa   
+  popl %gs
+80105afb:	0f a9                	pop    %gs
+  popl %fs
+80105afd:	0f a1                	pop    %fs
+  popl %es
+80105aff:	07                   	pop    %es
+  popl %ds
+80105b00:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+80105b01:	83 c4 08             	add    $0x8,%esp
+  iret
+80105b04:	cf                   	iret   
+80105b05:	66 90                	xchg   %ax,%ax
+80105b07:	66 90                	xchg   %ax,%ax
+80105b09:	66 90                	xchg   %ax,%ax
+80105b0b:	66 90                	xchg   %ax,%ax
+80105b0d:	66 90                	xchg   %ax,%ax
+80105b0f:	90                   	nop
+
+80105b10 <tvinit>:
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+80105b10:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+80105b11:	31 c0                	xor    %eax,%eax
+{
+80105b13:	89 e5                	mov    %esp,%ebp
+80105b15:	83 ec 08             	sub    $0x8,%esp
+80105b18:	90                   	nop
+80105b19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+80105b20:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105b27:	c7 04 c5 a2 4f 11 80 	movl   $0x8e000008,-0x7feeb05e(,%eax,8)
+80105b2e:	08 00 00 8e 
+80105b32:	66 89 14 c5 a0 4f 11 	mov    %dx,-0x7feeb060(,%eax,8)
+80105b39:	80 
+80105b3a:	c1 ea 10             	shr    $0x10,%edx
+80105b3d:	66 89 14 c5 a6 4f 11 	mov    %dx,-0x7feeb05a(,%eax,8)
+80105b44:	80 
+  for(i = 0; i < 256; i++)
+80105b45:	83 c0 01             	add    $0x1,%eax
+80105b48:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105b4d:	75 d1                	jne    80105b20 <tvinit+0x10>
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80105b4f:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+
+  initlock(&tickslock, "time");
+80105b54:	83 ec 08             	sub    $0x8,%esp
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80105b57:	c7 05 a2 51 11 80 08 	movl   $0xef000008,0x801151a2
+80105b5e:	00 00 ef 
+  initlock(&tickslock, "time");
+80105b61:	68 f9 7b 10 80       	push   $0x80107bf9
+80105b66:	68 60 4f 11 80       	push   $0x80114f60
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80105b6b:	66 a3 a0 51 11 80    	mov    %ax,0x801151a0
+80105b71:	c1 e8 10             	shr    $0x10,%eax
+80105b74:	66 a3 a6 51 11 80    	mov    %ax,0x801151a6
+  initlock(&tickslock, "time");
+80105b7a:	e8 71 ea ff ff       	call   801045f0 <initlock>
+}
+80105b7f:	83 c4 10             	add    $0x10,%esp
+80105b82:	c9                   	leave  
+80105b83:	c3                   	ret    
+80105b84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105b8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80105b90 <idtinit>:
+
+void
+idtinit(void)
+{
+80105b90:	55                   	push   %ebp
+  pd[0] = size-1;
+80105b91:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105b96:	89 e5                	mov    %esp,%ebp
+80105b98:	83 ec 10             	sub    $0x10,%esp
+80105b9b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+80105b9f:	b8 a0 4f 11 80       	mov    $0x80114fa0,%eax
+80105ba4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+80105ba8:	c1 e8 10             	shr    $0x10,%eax
+80105bab:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+  asm volatile("lidt (%0)" : : "r" (pd));
+80105baf:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105bb2:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+80105bb5:	c9                   	leave  
+80105bb6:	c3                   	ret    
+80105bb7:	89 f6                	mov    %esi,%esi
+80105bb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105bc0 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80105bc0:	55                   	push   %ebp
+80105bc1:	89 e5                	mov    %esp,%ebp
+80105bc3:	57                   	push   %edi
+80105bc4:	56                   	push   %esi
+80105bc5:	53                   	push   %ebx
+80105bc6:	83 ec 1c             	sub    $0x1c,%esp
+80105bc9:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if(tf->trapno == T_SYSCALL){
+80105bcc:	8b 47 30             	mov    0x30(%edi),%eax
+80105bcf:	83 f8 40             	cmp    $0x40,%eax
+80105bd2:	0f 84 f0 00 00 00    	je     80105cc8 <trap+0x108>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+80105bd8:	83 e8 20             	sub    $0x20,%eax
+80105bdb:	83 f8 1f             	cmp    $0x1f,%eax
+80105bde:	77 10                	ja     80105bf0 <trap+0x30>
+80105be0:	ff 24 85 a0 7c 10 80 	jmp    *-0x7fef8360(,%eax,4)
+80105be7:	89 f6                	mov    %esi,%esi
+80105be9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    lapiceoi();
+    break;
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+80105bf0:	e8 0b dc ff ff       	call   80103800 <myproc>
+80105bf5:	85 c0                	test   %eax,%eax
+80105bf7:	8b 5f 38             	mov    0x38(%edi),%ebx
+80105bfa:	0f 84 34 02 00 00    	je     80105e34 <trap+0x274>
+80105c00:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
+80105c04:	0f 84 2a 02 00 00    	je     80105e34 <trap+0x274>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80105c0a:	0f 20 d1             	mov    %cr2,%ecx
+80105c0d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c10:	e8 cb db ff ff       	call   801037e0 <cpuid>
+80105c15:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105c18:	8b 47 34             	mov    0x34(%edi),%eax
+80105c1b:	8b 77 30             	mov    0x30(%edi),%esi
+80105c1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+80105c21:	e8 da db ff ff       	call   80103800 <myproc>
+80105c26:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105c29:	e8 d2 db ff ff       	call   80103800 <myproc>
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c2e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105c31:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105c34:	51                   	push   %ecx
+80105c35:	53                   	push   %ebx
+80105c36:	52                   	push   %edx
+            myproc()->pid, myproc()->name, tf->trapno,
+80105c37:	8b 55 e0             	mov    -0x20(%ebp),%edx
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c3a:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105c3d:	56                   	push   %esi
+            myproc()->pid, myproc()->name, tf->trapno,
+80105c3e:	83 c2 6c             	add    $0x6c,%edx
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c41:	52                   	push   %edx
+80105c42:	ff 70 10             	pushl  0x10(%eax)
+80105c45:	68 5c 7c 10 80       	push   $0x80107c5c
+80105c4a:	e8 11 aa ff ff       	call   80100660 <cprintf>
+            tf->err, cpuid(), tf->eip, rcr2());
+    myproc()->killed = 1;
+80105c4f:	83 c4 20             	add    $0x20,%esp
+80105c52:	e8 a9 db ff ff       	call   80103800 <myproc>
+80105c57:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105c5e:	e8 9d db ff ff       	call   80103800 <myproc>
+80105c63:	85 c0                	test   %eax,%eax
+80105c65:	74 1d                	je     80105c84 <trap+0xc4>
+80105c67:	e8 94 db ff ff       	call   80103800 <myproc>
+80105c6c:	8b 50 24             	mov    0x24(%eax),%edx
+80105c6f:	85 d2                	test   %edx,%edx
+80105c71:	74 11                	je     80105c84 <trap+0xc4>
+80105c73:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80105c77:	83 e0 03             	and    $0x3,%eax
+80105c7a:	66 83 f8 03          	cmp    $0x3,%ax
+80105c7e:	0f 84 6c 01 00 00    	je     80105df0 <trap+0x230>
+    exit();
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER && inc_cpucounter() == QUANTA)
+80105c84:	e8 77 db ff ff       	call   80103800 <myproc>
+80105c89:	85 c0                	test   %eax,%eax
+80105c8b:	74 0b                	je     80105c98 <trap+0xd8>
+80105c8d:	e8 6e db ff ff       	call   80103800 <myproc>
+80105c92:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105c96:	74 68                	je     80105d00 <trap+0x140>
+    yield();
+  }
+    
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105c98:	e8 63 db ff ff       	call   80103800 <myproc>
+80105c9d:	85 c0                	test   %eax,%eax
+80105c9f:	74 19                	je     80105cba <trap+0xfa>
+80105ca1:	e8 5a db ff ff       	call   80103800 <myproc>
+80105ca6:	8b 40 24             	mov    0x24(%eax),%eax
+80105ca9:	85 c0                	test   %eax,%eax
+80105cab:	74 0d                	je     80105cba <trap+0xfa>
+80105cad:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80105cb1:	83 e0 03             	and    $0x3,%eax
+80105cb4:	66 83 f8 03          	cmp    $0x3,%ax
+80105cb8:	74 37                	je     80105cf1 <trap+0x131>
+    exit();
+}
+80105cba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105cbd:	5b                   	pop    %ebx
+80105cbe:	5e                   	pop    %esi
+80105cbf:	5f                   	pop    %edi
+80105cc0:	5d                   	pop    %ebp
+80105cc1:	c3                   	ret    
+80105cc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(myproc()->killed)
+80105cc8:	e8 33 db ff ff       	call   80103800 <myproc>
+80105ccd:	8b 58 24             	mov    0x24(%eax),%ebx
+80105cd0:	85 db                	test   %ebx,%ebx
+80105cd2:	0f 85 08 01 00 00    	jne    80105de0 <trap+0x220>
+    myproc()->tf = tf;
+80105cd8:	e8 23 db ff ff       	call   80103800 <myproc>
+80105cdd:	89 78 18             	mov    %edi,0x18(%eax)
+    syscall();
+80105ce0:	e8 4b ef ff ff       	call   80104c30 <syscall>
+    if(myproc()->killed)
+80105ce5:	e8 16 db ff ff       	call   80103800 <myproc>
+80105cea:	8b 48 24             	mov    0x24(%eax),%ecx
+80105ced:	85 c9                	test   %ecx,%ecx
+80105cef:	74 c9                	je     80105cba <trap+0xfa>
+}
+80105cf1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105cf4:	5b                   	pop    %ebx
+80105cf5:	5e                   	pop    %esi
+80105cf6:	5f                   	pop    %edi
+80105cf7:	5d                   	pop    %ebp
+      exit();
+80105cf8:	e9 63 df ff ff       	jmp    80103c60 <exit>
+80105cfd:	8d 76 00             	lea    0x0(%esi),%esi
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER && inc_cpucounter() == QUANTA)
+80105d00:	83 7f 30 20          	cmpl   $0x20,0x30(%edi)
+80105d04:	75 92                	jne    80105c98 <trap+0xd8>
+80105d06:	e8 75 e7 ff ff       	call   80104480 <inc_cpucounter>
+80105d0b:	83 f8 02             	cmp    $0x2,%eax
+80105d0e:	75 88                	jne    80105c98 <trap+0xd8>
+    dec_burstTime();
+80105d10:	e8 fb e6 ff ff       	call   80104410 <dec_burstTime>
+    myproc()->cpucounter=0;
+80105d15:	e8 e6 da ff ff       	call   80103800 <myproc>
+80105d1a:	c7 80 84 00 00 00 00 	movl   $0x0,0x84(%eax)
+80105d21:	00 00 00 
+    yield();
+80105d24:	e8 67 e0 ff ff       	call   80103d90 <yield>
+80105d29:	e9 6a ff ff ff       	jmp    80105c98 <trap+0xd8>
+80105d2e:	66 90                	xchg   %ax,%ax
+    if(cpuid() == 0){
+80105d30:	e8 ab da ff ff       	call   801037e0 <cpuid>
+80105d35:	85 c0                	test   %eax,%eax
+80105d37:	0f 84 c3 00 00 00    	je     80105e00 <trap+0x240>
+    lapiceoi();
+80105d3d:	e8 0e ca ff ff       	call   80102750 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105d42:	e8 b9 da ff ff       	call   80103800 <myproc>
+80105d47:	85 c0                	test   %eax,%eax
+80105d49:	0f 85 18 ff ff ff    	jne    80105c67 <trap+0xa7>
+80105d4f:	e9 30 ff ff ff       	jmp    80105c84 <trap+0xc4>
+80105d54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    kbdintr();
+80105d58:	e8 b3 c8 ff ff       	call   80102610 <kbdintr>
+    lapiceoi();
+80105d5d:	e8 ee c9 ff ff       	call   80102750 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105d62:	e8 99 da ff ff       	call   80103800 <myproc>
+80105d67:	85 c0                	test   %eax,%eax
+80105d69:	0f 85 f8 fe ff ff    	jne    80105c67 <trap+0xa7>
+80105d6f:	e9 10 ff ff ff       	jmp    80105c84 <trap+0xc4>
+80105d74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    uartintr();
+80105d78:	e8 53 02 00 00       	call   80105fd0 <uartintr>
+    lapiceoi();
+80105d7d:	e8 ce c9 ff ff       	call   80102750 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105d82:	e8 79 da ff ff       	call   80103800 <myproc>
+80105d87:	85 c0                	test   %eax,%eax
+80105d89:	0f 85 d8 fe ff ff    	jne    80105c67 <trap+0xa7>
+80105d8f:	e9 f0 fe ff ff       	jmp    80105c84 <trap+0xc4>
+80105d94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80105d98:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
+80105d9c:	8b 77 38             	mov    0x38(%edi),%esi
+80105d9f:	e8 3c da ff ff       	call   801037e0 <cpuid>
+80105da4:	56                   	push   %esi
+80105da5:	53                   	push   %ebx
+80105da6:	50                   	push   %eax
+80105da7:	68 04 7c 10 80       	push   $0x80107c04
+80105dac:	e8 af a8 ff ff       	call   80100660 <cprintf>
+    lapiceoi();
+80105db1:	e8 9a c9 ff ff       	call   80102750 <lapiceoi>
+    break;
+80105db6:	83 c4 10             	add    $0x10,%esp
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105db9:	e8 42 da ff ff       	call   80103800 <myproc>
+80105dbe:	85 c0                	test   %eax,%eax
+80105dc0:	0f 85 a1 fe ff ff    	jne    80105c67 <trap+0xa7>
+80105dc6:	e9 b9 fe ff ff       	jmp    80105c84 <trap+0xc4>
+80105dcb:	90                   	nop
+80105dcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ideintr();
+80105dd0:	e8 ab c2 ff ff       	call   80102080 <ideintr>
+80105dd5:	e9 63 ff ff ff       	jmp    80105d3d <trap+0x17d>
+80105dda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      exit();
+80105de0:	e8 7b de ff ff       	call   80103c60 <exit>
+80105de5:	e9 ee fe ff ff       	jmp    80105cd8 <trap+0x118>
+80105dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+80105df0:	e8 6b de ff ff       	call   80103c60 <exit>
+80105df5:	e9 8a fe ff ff       	jmp    80105c84 <trap+0xc4>
+80105dfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      acquire(&tickslock);
+80105e00:	83 ec 0c             	sub    $0xc,%esp
+80105e03:	68 60 4f 11 80       	push   $0x80114f60
+80105e08:	e8 23 e9 ff ff       	call   80104730 <acquire>
+      wakeup(&ticks);
+80105e0d:	c7 04 24 a0 57 11 80 	movl   $0x801157a0,(%esp)
+      ticks++;
+80105e14:	83 05 a0 57 11 80 01 	addl   $0x1,0x801157a0
+      wakeup(&ticks);
+80105e1b:	e8 80 e1 ff ff       	call   80103fa0 <wakeup>
+      release(&tickslock);
+80105e20:	c7 04 24 60 4f 11 80 	movl   $0x80114f60,(%esp)
+80105e27:	e8 c4 e9 ff ff       	call   801047f0 <release>
+80105e2c:	83 c4 10             	add    $0x10,%esp
+80105e2f:	e9 09 ff ff ff       	jmp    80105d3d <trap+0x17d>
+80105e34:	0f 20 d6             	mov    %cr2,%esi
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+80105e37:	e8 a4 d9 ff ff       	call   801037e0 <cpuid>
+80105e3c:	83 ec 0c             	sub    $0xc,%esp
+80105e3f:	56                   	push   %esi
+80105e40:	53                   	push   %ebx
+80105e41:	50                   	push   %eax
+80105e42:	ff 77 30             	pushl  0x30(%edi)
+80105e45:	68 28 7c 10 80       	push   $0x80107c28
+80105e4a:	e8 11 a8 ff ff       	call   80100660 <cprintf>
+      panic("trap");
+80105e4f:	83 c4 14             	add    $0x14,%esp
+80105e52:	68 fe 7b 10 80       	push   $0x80107bfe
+80105e57:	e8 34 a5 ff ff       	call   80100390 <panic>
+80105e5c:	66 90                	xchg   %ax,%ax
+80105e5e:	66 90                	xchg   %ax,%ax
+
+80105e60 <uartgetc>:
+}
+
+static int
+uartgetc(void)
+{
+  if(!uart)
+80105e60:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+{
+80105e65:	55                   	push   %ebp
+80105e66:	89 e5                	mov    %esp,%ebp
+  if(!uart)
+80105e68:	85 c0                	test   %eax,%eax
+80105e6a:	74 1c                	je     80105e88 <uartgetc+0x28>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105e6c:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105e71:	ec                   	in     (%dx),%al
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+80105e72:	a8 01                	test   $0x1,%al
+80105e74:	74 12                	je     80105e88 <uartgetc+0x28>
+80105e76:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105e7b:	ec                   	in     (%dx),%al
+    return -1;
+  return inb(COM1+0);
+80105e7c:	0f b6 c0             	movzbl %al,%eax
+}
+80105e7f:	5d                   	pop    %ebp
+80105e80:	c3                   	ret    
+80105e81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105e88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105e8d:	5d                   	pop    %ebp
+80105e8e:	c3                   	ret    
+80105e8f:	90                   	nop
+
+80105e90 <uartputc.part.0>:
+uartputc(int c)
+80105e90:	55                   	push   %ebp
+80105e91:	89 e5                	mov    %esp,%ebp
+80105e93:	57                   	push   %edi
+80105e94:	56                   	push   %esi
+80105e95:	53                   	push   %ebx
+80105e96:	89 c7                	mov    %eax,%edi
+80105e98:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105e9d:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105ea2:	83 ec 0c             	sub    $0xc,%esp
+80105ea5:	eb 1b                	jmp    80105ec2 <uartputc.part.0+0x32>
+80105ea7:	89 f6                	mov    %esi,%esi
+80105ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    microdelay(10);
+80105eb0:	83 ec 0c             	sub    $0xc,%esp
+80105eb3:	6a 0a                	push   $0xa
+80105eb5:	e8 b6 c8 ff ff       	call   80102770 <microdelay>
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80105eba:	83 c4 10             	add    $0x10,%esp
+80105ebd:	83 eb 01             	sub    $0x1,%ebx
+80105ec0:	74 07                	je     80105ec9 <uartputc.part.0+0x39>
+80105ec2:	89 f2                	mov    %esi,%edx
+80105ec4:	ec                   	in     (%dx),%al
+80105ec5:	a8 20                	test   $0x20,%al
+80105ec7:	74 e7                	je     80105eb0 <uartputc.part.0+0x20>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80105ec9:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105ece:	89 f8                	mov    %edi,%eax
+80105ed0:	ee                   	out    %al,(%dx)
+}
+80105ed1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ed4:	5b                   	pop    %ebx
+80105ed5:	5e                   	pop    %esi
+80105ed6:	5f                   	pop    %edi
+80105ed7:	5d                   	pop    %ebp
+80105ed8:	c3                   	ret    
+80105ed9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105ee0 <uartinit>:
+{
+80105ee0:	55                   	push   %ebp
+80105ee1:	31 c9                	xor    %ecx,%ecx
+80105ee3:	89 c8                	mov    %ecx,%eax
+80105ee5:	89 e5                	mov    %esp,%ebp
+80105ee7:	57                   	push   %edi
+80105ee8:	56                   	push   %esi
+80105ee9:	53                   	push   %ebx
+80105eea:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80105eef:	89 da                	mov    %ebx,%edx
+80105ef1:	83 ec 0c             	sub    $0xc,%esp
+80105ef4:	ee                   	out    %al,(%dx)
+80105ef5:	bf fb 03 00 00       	mov    $0x3fb,%edi
+80105efa:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105eff:	89 fa                	mov    %edi,%edx
+80105f01:	ee                   	out    %al,(%dx)
+80105f02:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105f07:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f0c:	ee                   	out    %al,(%dx)
+80105f0d:	be f9 03 00 00       	mov    $0x3f9,%esi
+80105f12:	89 c8                	mov    %ecx,%eax
+80105f14:	89 f2                	mov    %esi,%edx
+80105f16:	ee                   	out    %al,(%dx)
+80105f17:	b8 03 00 00 00       	mov    $0x3,%eax
+80105f1c:	89 fa                	mov    %edi,%edx
+80105f1e:	ee                   	out    %al,(%dx)
+80105f1f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105f24:	89 c8                	mov    %ecx,%eax
+80105f26:	ee                   	out    %al,(%dx)
+80105f27:	b8 01 00 00 00       	mov    $0x1,%eax
+80105f2c:	89 f2                	mov    %esi,%edx
+80105f2e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105f2f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105f34:	ec                   	in     (%dx),%al
+  if(inb(COM1+5) == 0xFF)
+80105f35:	3c ff                	cmp    $0xff,%al
+80105f37:	74 5a                	je     80105f93 <uartinit+0xb3>
+  uart = 1;
+80105f39:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80105f40:	00 00 00 
+80105f43:	89 da                	mov    %ebx,%edx
+80105f45:	ec                   	in     (%dx),%al
+80105f46:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f4b:	ec                   	in     (%dx),%al
+  ioapicenable(IRQ_COM1, 0);
+80105f4c:	83 ec 08             	sub    $0x8,%esp
+  for(p="xv6...\n"; *p; p++)
+80105f4f:	bb 20 7d 10 80       	mov    $0x80107d20,%ebx
+  ioapicenable(IRQ_COM1, 0);
+80105f54:	6a 00                	push   $0x0
+80105f56:	6a 04                	push   $0x4
+80105f58:	e8 73 c3 ff ff       	call   801022d0 <ioapicenable>
+80105f5d:	83 c4 10             	add    $0x10,%esp
+  for(p="xv6...\n"; *p; p++)
+80105f60:	b8 78 00 00 00       	mov    $0x78,%eax
+80105f65:	eb 13                	jmp    80105f7a <uartinit+0x9a>
+80105f67:	89 f6                	mov    %esi,%esi
+80105f69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105f70:	83 c3 01             	add    $0x1,%ebx
+80105f73:	0f be 03             	movsbl (%ebx),%eax
+80105f76:	84 c0                	test   %al,%al
+80105f78:	74 19                	je     80105f93 <uartinit+0xb3>
+  if(!uart)
+80105f7a:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80105f80:	85 d2                	test   %edx,%edx
+80105f82:	74 ec                	je     80105f70 <uartinit+0x90>
+  for(p="xv6...\n"; *p; p++)
+80105f84:	83 c3 01             	add    $0x1,%ebx
+80105f87:	e8 04 ff ff ff       	call   80105e90 <uartputc.part.0>
+80105f8c:	0f be 03             	movsbl (%ebx),%eax
+80105f8f:	84 c0                	test   %al,%al
+80105f91:	75 e7                	jne    80105f7a <uartinit+0x9a>
+}
+80105f93:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105f96:	5b                   	pop    %ebx
+80105f97:	5e                   	pop    %esi
+80105f98:	5f                   	pop    %edi
+80105f99:	5d                   	pop    %ebp
+80105f9a:	c3                   	ret    
+80105f9b:	90                   	nop
+80105f9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105fa0 <uartputc>:
+  if(!uart)
+80105fa0:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+{
+80105fa6:	55                   	push   %ebp
+80105fa7:	89 e5                	mov    %esp,%ebp
+  if(!uart)
+80105fa9:	85 d2                	test   %edx,%edx
+{
+80105fab:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(!uart)
+80105fae:	74 10                	je     80105fc0 <uartputc+0x20>
+}
+80105fb0:	5d                   	pop    %ebp
+80105fb1:	e9 da fe ff ff       	jmp    80105e90 <uartputc.part.0>
+80105fb6:	8d 76 00             	lea    0x0(%esi),%esi
+80105fb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105fc0:	5d                   	pop    %ebp
+80105fc1:	c3                   	ret    
+80105fc2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105fc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105fd0 <uartintr>:
+
+void
+uartintr(void)
+{
+80105fd0:	55                   	push   %ebp
+80105fd1:	89 e5                	mov    %esp,%ebp
+80105fd3:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(uartgetc);
+80105fd6:	68 60 5e 10 80       	push   $0x80105e60
+80105fdb:	e8 30 a8 ff ff       	call   80100810 <consoleintr>
+}
+80105fe0:	83 c4 10             	add    $0x10,%esp
+80105fe3:	c9                   	leave  
+80105fe4:	c3                   	ret    
+
+80105fe5 <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+80105fe5:	6a 00                	push   $0x0
+  pushl $0
+80105fe7:	6a 00                	push   $0x0
+  jmp alltraps
+80105fe9:	e9 f4 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80105fee <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+80105fee:	6a 00                	push   $0x0
+  pushl $1
+80105ff0:	6a 01                	push   $0x1
+  jmp alltraps
+80105ff2:	e9 eb fa ff ff       	jmp    80105ae2 <alltraps>
+
+80105ff7 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+80105ff7:	6a 00                	push   $0x0
+  pushl $2
+80105ff9:	6a 02                	push   $0x2
+  jmp alltraps
+80105ffb:	e9 e2 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106000 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+80106000:	6a 00                	push   $0x0
+  pushl $3
+80106002:	6a 03                	push   $0x3
+  jmp alltraps
+80106004:	e9 d9 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106009 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+80106009:	6a 00                	push   $0x0
+  pushl $4
+8010600b:	6a 04                	push   $0x4
+  jmp alltraps
+8010600d:	e9 d0 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106012 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80106012:	6a 00                	push   $0x0
+  pushl $5
+80106014:	6a 05                	push   $0x5
+  jmp alltraps
+80106016:	e9 c7 fa ff ff       	jmp    80105ae2 <alltraps>
+
+8010601b <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+8010601b:	6a 00                	push   $0x0
+  pushl $6
+8010601d:	6a 06                	push   $0x6
+  jmp alltraps
+8010601f:	e9 be fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106024 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80106024:	6a 00                	push   $0x0
+  pushl $7
+80106026:	6a 07                	push   $0x7
+  jmp alltraps
+80106028:	e9 b5 fa ff ff       	jmp    80105ae2 <alltraps>
+
+8010602d <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+8010602d:	6a 08                	push   $0x8
+  jmp alltraps
+8010602f:	e9 ae fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106034 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80106034:	6a 00                	push   $0x0
+  pushl $9
+80106036:	6a 09                	push   $0x9
+  jmp alltraps
+80106038:	e9 a5 fa ff ff       	jmp    80105ae2 <alltraps>
+
+8010603d <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+8010603d:	6a 0a                	push   $0xa
+  jmp alltraps
+8010603f:	e9 9e fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106044 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80106044:	6a 0b                	push   $0xb
+  jmp alltraps
+80106046:	e9 97 fa ff ff       	jmp    80105ae2 <alltraps>
+
+8010604b <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+8010604b:	6a 0c                	push   $0xc
+  jmp alltraps
+8010604d:	e9 90 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106052 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80106052:	6a 0d                	push   $0xd
+  jmp alltraps
+80106054:	e9 89 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106059 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+80106059:	6a 0e                	push   $0xe
+  jmp alltraps
+8010605b:	e9 82 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106060 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80106060:	6a 00                	push   $0x0
+  pushl $15
+80106062:	6a 0f                	push   $0xf
+  jmp alltraps
+80106064:	e9 79 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106069 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+80106069:	6a 00                	push   $0x0
+  pushl $16
+8010606b:	6a 10                	push   $0x10
+  jmp alltraps
+8010606d:	e9 70 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106072 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+80106072:	6a 11                	push   $0x11
+  jmp alltraps
+80106074:	e9 69 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106079 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+80106079:	6a 00                	push   $0x0
+  pushl $18
+8010607b:	6a 12                	push   $0x12
+  jmp alltraps
+8010607d:	e9 60 fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106082 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+80106082:	6a 00                	push   $0x0
+  pushl $19
+80106084:	6a 13                	push   $0x13
+  jmp alltraps
+80106086:	e9 57 fa ff ff       	jmp    80105ae2 <alltraps>
+
+8010608b <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+8010608b:	6a 00                	push   $0x0
+  pushl $20
+8010608d:	6a 14                	push   $0x14
+  jmp alltraps
+8010608f:	e9 4e fa ff ff       	jmp    80105ae2 <alltraps>
+
+80106094 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+80106094:	6a 00                	push   $0x0
+  pushl $21
+80106096:	6a 15                	push   $0x15
+  jmp alltraps
+80106098:	e9 45 fa ff ff       	jmp    80105ae2 <alltraps>
+
+8010609d <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+8010609d:	6a 00                	push   $0x0
+  pushl $22
+8010609f:	6a 16                	push   $0x16
+  jmp alltraps
+801060a1:	e9 3c fa ff ff       	jmp    80105ae2 <alltraps>
+
+801060a6 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+801060a6:	6a 00                	push   $0x0
+  pushl $23
+801060a8:	6a 17                	push   $0x17
+  jmp alltraps
+801060aa:	e9 33 fa ff ff       	jmp    80105ae2 <alltraps>
+
+801060af <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+801060af:	6a 00                	push   $0x0
+  pushl $24
+801060b1:	6a 18                	push   $0x18
+  jmp alltraps
+801060b3:	e9 2a fa ff ff       	jmp    80105ae2 <alltraps>
+
+801060b8 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+801060b8:	6a 00                	push   $0x0
+  pushl $25
+801060ba:	6a 19                	push   $0x19
+  jmp alltraps
+801060bc:	e9 21 fa ff ff       	jmp    80105ae2 <alltraps>
+
+801060c1 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+801060c1:	6a 00                	push   $0x0
+  pushl $26
+801060c3:	6a 1a                	push   $0x1a
+  jmp alltraps
+801060c5:	e9 18 fa ff ff       	jmp    80105ae2 <alltraps>
+
+801060ca <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+801060ca:	6a 00                	push   $0x0
+  pushl $27
+801060cc:	6a 1b                	push   $0x1b
+  jmp alltraps
+801060ce:	e9 0f fa ff ff       	jmp    80105ae2 <alltraps>
+
+801060d3 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+801060d3:	6a 00                	push   $0x0
+  pushl $28
+801060d5:	6a 1c                	push   $0x1c
+  jmp alltraps
+801060d7:	e9 06 fa ff ff       	jmp    80105ae2 <alltraps>
+
+801060dc <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+801060dc:	6a 00                	push   $0x0
+  pushl $29
+801060de:	6a 1d                	push   $0x1d
+  jmp alltraps
+801060e0:	e9 fd f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801060e5 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+801060e5:	6a 00                	push   $0x0
+  pushl $30
+801060e7:	6a 1e                	push   $0x1e
+  jmp alltraps
+801060e9:	e9 f4 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801060ee <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+801060ee:	6a 00                	push   $0x0
+  pushl $31
+801060f0:	6a 1f                	push   $0x1f
+  jmp alltraps
+801060f2:	e9 eb f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801060f7 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+801060f7:	6a 00                	push   $0x0
+  pushl $32
+801060f9:	6a 20                	push   $0x20
+  jmp alltraps
+801060fb:	e9 e2 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106100 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+80106100:	6a 00                	push   $0x0
+  pushl $33
+80106102:	6a 21                	push   $0x21
+  jmp alltraps
+80106104:	e9 d9 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106109 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+80106109:	6a 00                	push   $0x0
+  pushl $34
+8010610b:	6a 22                	push   $0x22
+  jmp alltraps
+8010610d:	e9 d0 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106112 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80106112:	6a 00                	push   $0x0
+  pushl $35
+80106114:	6a 23                	push   $0x23
+  jmp alltraps
+80106116:	e9 c7 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+8010611b <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+8010611b:	6a 00                	push   $0x0
+  pushl $36
+8010611d:	6a 24                	push   $0x24
+  jmp alltraps
+8010611f:	e9 be f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106124 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80106124:	6a 00                	push   $0x0
+  pushl $37
+80106126:	6a 25                	push   $0x25
+  jmp alltraps
+80106128:	e9 b5 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+8010612d <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+8010612d:	6a 00                	push   $0x0
+  pushl $38
+8010612f:	6a 26                	push   $0x26
+  jmp alltraps
+80106131:	e9 ac f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106136 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+80106136:	6a 00                	push   $0x0
+  pushl $39
+80106138:	6a 27                	push   $0x27
+  jmp alltraps
+8010613a:	e9 a3 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+8010613f <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+8010613f:	6a 00                	push   $0x0
+  pushl $40
+80106141:	6a 28                	push   $0x28
+  jmp alltraps
+80106143:	e9 9a f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106148 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+80106148:	6a 00                	push   $0x0
+  pushl $41
+8010614a:	6a 29                	push   $0x29
+  jmp alltraps
+8010614c:	e9 91 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106151 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80106151:	6a 00                	push   $0x0
+  pushl $42
+80106153:	6a 2a                	push   $0x2a
+  jmp alltraps
+80106155:	e9 88 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+8010615a <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+8010615a:	6a 00                	push   $0x0
+  pushl $43
+8010615c:	6a 2b                	push   $0x2b
+  jmp alltraps
+8010615e:	e9 7f f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106163 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80106163:	6a 00                	push   $0x0
+  pushl $44
+80106165:	6a 2c                	push   $0x2c
+  jmp alltraps
+80106167:	e9 76 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+8010616c <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+8010616c:	6a 00                	push   $0x0
+  pushl $45
+8010616e:	6a 2d                	push   $0x2d
+  jmp alltraps
+80106170:	e9 6d f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106175 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+80106175:	6a 00                	push   $0x0
+  pushl $46
+80106177:	6a 2e                	push   $0x2e
+  jmp alltraps
+80106179:	e9 64 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+8010617e <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+8010617e:	6a 00                	push   $0x0
+  pushl $47
+80106180:	6a 2f                	push   $0x2f
+  jmp alltraps
+80106182:	e9 5b f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106187 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+80106187:	6a 00                	push   $0x0
+  pushl $48
+80106189:	6a 30                	push   $0x30
+  jmp alltraps
+8010618b:	e9 52 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106190 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+80106190:	6a 00                	push   $0x0
+  pushl $49
+80106192:	6a 31                	push   $0x31
+  jmp alltraps
+80106194:	e9 49 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+80106199 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+80106199:	6a 00                	push   $0x0
+  pushl $50
+8010619b:	6a 32                	push   $0x32
+  jmp alltraps
+8010619d:	e9 40 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061a2 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+801061a2:	6a 00                	push   $0x0
+  pushl $51
+801061a4:	6a 33                	push   $0x33
+  jmp alltraps
+801061a6:	e9 37 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061ab <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+801061ab:	6a 00                	push   $0x0
+  pushl $52
+801061ad:	6a 34                	push   $0x34
+  jmp alltraps
+801061af:	e9 2e f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061b4 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+801061b4:	6a 00                	push   $0x0
+  pushl $53
+801061b6:	6a 35                	push   $0x35
+  jmp alltraps
+801061b8:	e9 25 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061bd <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+801061bd:	6a 00                	push   $0x0
+  pushl $54
+801061bf:	6a 36                	push   $0x36
+  jmp alltraps
+801061c1:	e9 1c f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061c6 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+801061c6:	6a 00                	push   $0x0
+  pushl $55
+801061c8:	6a 37                	push   $0x37
+  jmp alltraps
+801061ca:	e9 13 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061cf <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+801061cf:	6a 00                	push   $0x0
+  pushl $56
+801061d1:	6a 38                	push   $0x38
+  jmp alltraps
+801061d3:	e9 0a f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061d8 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+801061d8:	6a 00                	push   $0x0
+  pushl $57
+801061da:	6a 39                	push   $0x39
+  jmp alltraps
+801061dc:	e9 01 f9 ff ff       	jmp    80105ae2 <alltraps>
+
+801061e1 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+801061e1:	6a 00                	push   $0x0
+  pushl $58
+801061e3:	6a 3a                	push   $0x3a
+  jmp alltraps
+801061e5:	e9 f8 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801061ea <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+801061ea:	6a 00                	push   $0x0
+  pushl $59
+801061ec:	6a 3b                	push   $0x3b
+  jmp alltraps
+801061ee:	e9 ef f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801061f3 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+801061f3:	6a 00                	push   $0x0
+  pushl $60
+801061f5:	6a 3c                	push   $0x3c
+  jmp alltraps
+801061f7:	e9 e6 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801061fc <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+801061fc:	6a 00                	push   $0x0
+  pushl $61
+801061fe:	6a 3d                	push   $0x3d
+  jmp alltraps
+80106200:	e9 dd f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106205 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+80106205:	6a 00                	push   $0x0
+  pushl $62
+80106207:	6a 3e                	push   $0x3e
+  jmp alltraps
+80106209:	e9 d4 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+8010620e <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+8010620e:	6a 00                	push   $0x0
+  pushl $63
+80106210:	6a 3f                	push   $0x3f
+  jmp alltraps
+80106212:	e9 cb f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106217 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+80106217:	6a 00                	push   $0x0
+  pushl $64
+80106219:	6a 40                	push   $0x40
+  jmp alltraps
+8010621b:	e9 c2 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106220 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80106220:	6a 00                	push   $0x0
+  pushl $65
+80106222:	6a 41                	push   $0x41
+  jmp alltraps
+80106224:	e9 b9 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106229 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+80106229:	6a 00                	push   $0x0
+  pushl $66
+8010622b:	6a 42                	push   $0x42
+  jmp alltraps
+8010622d:	e9 b0 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106232 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80106232:	6a 00                	push   $0x0
+  pushl $67
+80106234:	6a 43                	push   $0x43
+  jmp alltraps
+80106236:	e9 a7 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+8010623b <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+8010623b:	6a 00                	push   $0x0
+  pushl $68
+8010623d:	6a 44                	push   $0x44
+  jmp alltraps
+8010623f:	e9 9e f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106244 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80106244:	6a 00                	push   $0x0
+  pushl $69
+80106246:	6a 45                	push   $0x45
+  jmp alltraps
+80106248:	e9 95 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+8010624d <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+8010624d:	6a 00                	push   $0x0
+  pushl $70
+8010624f:	6a 46                	push   $0x46
+  jmp alltraps
+80106251:	e9 8c f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106256 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+80106256:	6a 00                	push   $0x0
+  pushl $71
+80106258:	6a 47                	push   $0x47
+  jmp alltraps
+8010625a:	e9 83 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+8010625f <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+8010625f:	6a 00                	push   $0x0
+  pushl $72
+80106261:	6a 48                	push   $0x48
+  jmp alltraps
+80106263:	e9 7a f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106268 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+80106268:	6a 00                	push   $0x0
+  pushl $73
+8010626a:	6a 49                	push   $0x49
+  jmp alltraps
+8010626c:	e9 71 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106271 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+80106271:	6a 00                	push   $0x0
+  pushl $74
+80106273:	6a 4a                	push   $0x4a
+  jmp alltraps
+80106275:	e9 68 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+8010627a <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+8010627a:	6a 00                	push   $0x0
+  pushl $75
+8010627c:	6a 4b                	push   $0x4b
+  jmp alltraps
+8010627e:	e9 5f f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106283 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+80106283:	6a 00                	push   $0x0
+  pushl $76
+80106285:	6a 4c                	push   $0x4c
+  jmp alltraps
+80106287:	e9 56 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+8010628c <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+8010628c:	6a 00                	push   $0x0
+  pushl $77
+8010628e:	6a 4d                	push   $0x4d
+  jmp alltraps
+80106290:	e9 4d f8 ff ff       	jmp    80105ae2 <alltraps>
+
+80106295 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+80106295:	6a 00                	push   $0x0
+  pushl $78
+80106297:	6a 4e                	push   $0x4e
+  jmp alltraps
+80106299:	e9 44 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+8010629e <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+8010629e:	6a 00                	push   $0x0
+  pushl $79
+801062a0:	6a 4f                	push   $0x4f
+  jmp alltraps
+801062a2:	e9 3b f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801062a7 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+801062a7:	6a 00                	push   $0x0
+  pushl $80
+801062a9:	6a 50                	push   $0x50
+  jmp alltraps
+801062ab:	e9 32 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801062b0 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+801062b0:	6a 00                	push   $0x0
+  pushl $81
+801062b2:	6a 51                	push   $0x51
+  jmp alltraps
+801062b4:	e9 29 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801062b9 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+801062b9:	6a 00                	push   $0x0
+  pushl $82
+801062bb:	6a 52                	push   $0x52
+  jmp alltraps
+801062bd:	e9 20 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801062c2 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+801062c2:	6a 00                	push   $0x0
+  pushl $83
+801062c4:	6a 53                	push   $0x53
+  jmp alltraps
+801062c6:	e9 17 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801062cb <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+801062cb:	6a 00                	push   $0x0
+  pushl $84
+801062cd:	6a 54                	push   $0x54
+  jmp alltraps
+801062cf:	e9 0e f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801062d4 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+801062d4:	6a 00                	push   $0x0
+  pushl $85
+801062d6:	6a 55                	push   $0x55
+  jmp alltraps
+801062d8:	e9 05 f8 ff ff       	jmp    80105ae2 <alltraps>
+
+801062dd <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+801062dd:	6a 00                	push   $0x0
+  pushl $86
+801062df:	6a 56                	push   $0x56
+  jmp alltraps
+801062e1:	e9 fc f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801062e6 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+801062e6:	6a 00                	push   $0x0
+  pushl $87
+801062e8:	6a 57                	push   $0x57
+  jmp alltraps
+801062ea:	e9 f3 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801062ef <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+801062ef:	6a 00                	push   $0x0
+  pushl $88
+801062f1:	6a 58                	push   $0x58
+  jmp alltraps
+801062f3:	e9 ea f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801062f8 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+801062f8:	6a 00                	push   $0x0
+  pushl $89
+801062fa:	6a 59                	push   $0x59
+  jmp alltraps
+801062fc:	e9 e1 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106301 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+80106301:	6a 00                	push   $0x0
+  pushl $90
+80106303:	6a 5a                	push   $0x5a
+  jmp alltraps
+80106305:	e9 d8 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+8010630a <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+8010630a:	6a 00                	push   $0x0
+  pushl $91
+8010630c:	6a 5b                	push   $0x5b
+  jmp alltraps
+8010630e:	e9 cf f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106313 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+80106313:	6a 00                	push   $0x0
+  pushl $92
+80106315:	6a 5c                	push   $0x5c
+  jmp alltraps
+80106317:	e9 c6 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+8010631c <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+8010631c:	6a 00                	push   $0x0
+  pushl $93
+8010631e:	6a 5d                	push   $0x5d
+  jmp alltraps
+80106320:	e9 bd f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106325 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+80106325:	6a 00                	push   $0x0
+  pushl $94
+80106327:	6a 5e                	push   $0x5e
+  jmp alltraps
+80106329:	e9 b4 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+8010632e <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+8010632e:	6a 00                	push   $0x0
+  pushl $95
+80106330:	6a 5f                	push   $0x5f
+  jmp alltraps
+80106332:	e9 ab f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106337 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+80106337:	6a 00                	push   $0x0
+  pushl $96
+80106339:	6a 60                	push   $0x60
+  jmp alltraps
+8010633b:	e9 a2 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106340 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80106340:	6a 00                	push   $0x0
+  pushl $97
+80106342:	6a 61                	push   $0x61
+  jmp alltraps
+80106344:	e9 99 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106349 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+80106349:	6a 00                	push   $0x0
+  pushl $98
+8010634b:	6a 62                	push   $0x62
+  jmp alltraps
+8010634d:	e9 90 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106352 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80106352:	6a 00                	push   $0x0
+  pushl $99
+80106354:	6a 63                	push   $0x63
+  jmp alltraps
+80106356:	e9 87 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+8010635b <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+8010635b:	6a 00                	push   $0x0
+  pushl $100
+8010635d:	6a 64                	push   $0x64
+  jmp alltraps
+8010635f:	e9 7e f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106364 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80106364:	6a 00                	push   $0x0
+  pushl $101
+80106366:	6a 65                	push   $0x65
+  jmp alltraps
+80106368:	e9 75 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+8010636d <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+8010636d:	6a 00                	push   $0x0
+  pushl $102
+8010636f:	6a 66                	push   $0x66
+  jmp alltraps
+80106371:	e9 6c f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106376 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+80106376:	6a 00                	push   $0x0
+  pushl $103
+80106378:	6a 67                	push   $0x67
+  jmp alltraps
+8010637a:	e9 63 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+8010637f <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+8010637f:	6a 00                	push   $0x0
+  pushl $104
+80106381:	6a 68                	push   $0x68
+  jmp alltraps
+80106383:	e9 5a f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106388 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+80106388:	6a 00                	push   $0x0
+  pushl $105
+8010638a:	6a 69                	push   $0x69
+  jmp alltraps
+8010638c:	e9 51 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+80106391 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+80106391:	6a 00                	push   $0x0
+  pushl $106
+80106393:	6a 6a                	push   $0x6a
+  jmp alltraps
+80106395:	e9 48 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+8010639a <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+8010639a:	6a 00                	push   $0x0
+  pushl $107
+8010639c:	6a 6b                	push   $0x6b
+  jmp alltraps
+8010639e:	e9 3f f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063a3 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+801063a3:	6a 00                	push   $0x0
+  pushl $108
+801063a5:	6a 6c                	push   $0x6c
+  jmp alltraps
+801063a7:	e9 36 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063ac <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+801063ac:	6a 00                	push   $0x0
+  pushl $109
+801063ae:	6a 6d                	push   $0x6d
+  jmp alltraps
+801063b0:	e9 2d f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063b5 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+801063b5:	6a 00                	push   $0x0
+  pushl $110
+801063b7:	6a 6e                	push   $0x6e
+  jmp alltraps
+801063b9:	e9 24 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063be <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+801063be:	6a 00                	push   $0x0
+  pushl $111
+801063c0:	6a 6f                	push   $0x6f
+  jmp alltraps
+801063c2:	e9 1b f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063c7 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+801063c7:	6a 00                	push   $0x0
+  pushl $112
+801063c9:	6a 70                	push   $0x70
+  jmp alltraps
+801063cb:	e9 12 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063d0 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+801063d0:	6a 00                	push   $0x0
+  pushl $113
+801063d2:	6a 71                	push   $0x71
+  jmp alltraps
+801063d4:	e9 09 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063d9 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+801063d9:	6a 00                	push   $0x0
+  pushl $114
+801063db:	6a 72                	push   $0x72
+  jmp alltraps
+801063dd:	e9 00 f7 ff ff       	jmp    80105ae2 <alltraps>
+
+801063e2 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+801063e2:	6a 00                	push   $0x0
+  pushl $115
+801063e4:	6a 73                	push   $0x73
+  jmp alltraps
+801063e6:	e9 f7 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801063eb <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+801063eb:	6a 00                	push   $0x0
+  pushl $116
+801063ed:	6a 74                	push   $0x74
+  jmp alltraps
+801063ef:	e9 ee f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801063f4 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+801063f4:	6a 00                	push   $0x0
+  pushl $117
+801063f6:	6a 75                	push   $0x75
+  jmp alltraps
+801063f8:	e9 e5 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801063fd <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+801063fd:	6a 00                	push   $0x0
+  pushl $118
+801063ff:	6a 76                	push   $0x76
+  jmp alltraps
+80106401:	e9 dc f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106406 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+80106406:	6a 00                	push   $0x0
+  pushl $119
+80106408:	6a 77                	push   $0x77
+  jmp alltraps
+8010640a:	e9 d3 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+8010640f <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+8010640f:	6a 00                	push   $0x0
+  pushl $120
+80106411:	6a 78                	push   $0x78
+  jmp alltraps
+80106413:	e9 ca f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106418 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+80106418:	6a 00                	push   $0x0
+  pushl $121
+8010641a:	6a 79                	push   $0x79
+  jmp alltraps
+8010641c:	e9 c1 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106421 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+80106421:	6a 00                	push   $0x0
+  pushl $122
+80106423:	6a 7a                	push   $0x7a
+  jmp alltraps
+80106425:	e9 b8 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+8010642a <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+8010642a:	6a 00                	push   $0x0
+  pushl $123
+8010642c:	6a 7b                	push   $0x7b
+  jmp alltraps
+8010642e:	e9 af f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106433 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+80106433:	6a 00                	push   $0x0
+  pushl $124
+80106435:	6a 7c                	push   $0x7c
+  jmp alltraps
+80106437:	e9 a6 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+8010643c <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+8010643c:	6a 00                	push   $0x0
+  pushl $125
+8010643e:	6a 7d                	push   $0x7d
+  jmp alltraps
+80106440:	e9 9d f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106445 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+80106445:	6a 00                	push   $0x0
+  pushl $126
+80106447:	6a 7e                	push   $0x7e
+  jmp alltraps
+80106449:	e9 94 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+8010644e <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+8010644e:	6a 00                	push   $0x0
+  pushl $127
+80106450:	6a 7f                	push   $0x7f
+  jmp alltraps
+80106452:	e9 8b f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106457 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+80106457:	6a 00                	push   $0x0
+  pushl $128
+80106459:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+8010645e:	e9 7f f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106463 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+80106463:	6a 00                	push   $0x0
+  pushl $129
+80106465:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+8010646a:	e9 73 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+8010646f <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+8010646f:	6a 00                	push   $0x0
+  pushl $130
+80106471:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+80106476:	e9 67 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+8010647b <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+8010647b:	6a 00                	push   $0x0
+  pushl $131
+8010647d:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+80106482:	e9 5b f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106487 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+80106487:	6a 00                	push   $0x0
+  pushl $132
+80106489:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+8010648e:	e9 4f f6 ff ff       	jmp    80105ae2 <alltraps>
+
+80106493 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+80106493:	6a 00                	push   $0x0
+  pushl $133
+80106495:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+8010649a:	e9 43 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+8010649f <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+8010649f:	6a 00                	push   $0x0
+  pushl $134
+801064a1:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+801064a6:	e9 37 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801064ab <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+801064ab:	6a 00                	push   $0x0
+  pushl $135
+801064ad:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+801064b2:	e9 2b f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801064b7 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+801064b7:	6a 00                	push   $0x0
+  pushl $136
+801064b9:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+801064be:	e9 1f f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801064c3 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+801064c3:	6a 00                	push   $0x0
+  pushl $137
+801064c5:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+801064ca:	e9 13 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801064cf <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+801064cf:	6a 00                	push   $0x0
+  pushl $138
+801064d1:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+801064d6:	e9 07 f6 ff ff       	jmp    80105ae2 <alltraps>
+
+801064db <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+801064db:	6a 00                	push   $0x0
+  pushl $139
+801064dd:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+801064e2:	e9 fb f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801064e7 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+801064e7:	6a 00                	push   $0x0
+  pushl $140
+801064e9:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+801064ee:	e9 ef f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801064f3 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+801064f3:	6a 00                	push   $0x0
+  pushl $141
+801064f5:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+801064fa:	e9 e3 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801064ff <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+801064ff:	6a 00                	push   $0x0
+  pushl $142
+80106501:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+80106506:	e9 d7 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+8010650b <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+8010650b:	6a 00                	push   $0x0
+  pushl $143
+8010650d:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+80106512:	e9 cb f5 ff ff       	jmp    80105ae2 <alltraps>
+
+80106517 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+80106517:	6a 00                	push   $0x0
+  pushl $144
+80106519:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+8010651e:	e9 bf f5 ff ff       	jmp    80105ae2 <alltraps>
+
+80106523 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+80106523:	6a 00                	push   $0x0
+  pushl $145
+80106525:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+8010652a:	e9 b3 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+8010652f <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+8010652f:	6a 00                	push   $0x0
+  pushl $146
+80106531:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+80106536:	e9 a7 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+8010653b <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+8010653b:	6a 00                	push   $0x0
+  pushl $147
+8010653d:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80106542:	e9 9b f5 ff ff       	jmp    80105ae2 <alltraps>
+
+80106547 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+80106547:	6a 00                	push   $0x0
+  pushl $148
+80106549:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+8010654e:	e9 8f f5 ff ff       	jmp    80105ae2 <alltraps>
+
+80106553 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80106553:	6a 00                	push   $0x0
+  pushl $149
+80106555:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+8010655a:	e9 83 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+8010655f <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+8010655f:	6a 00                	push   $0x0
+  pushl $150
+80106561:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+80106566:	e9 77 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+8010656b <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+8010656b:	6a 00                	push   $0x0
+  pushl $151
+8010656d:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+80106572:	e9 6b f5 ff ff       	jmp    80105ae2 <alltraps>
+
+80106577 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+80106577:	6a 00                	push   $0x0
+  pushl $152
+80106579:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+8010657e:	e9 5f f5 ff ff       	jmp    80105ae2 <alltraps>
+
+80106583 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+80106583:	6a 00                	push   $0x0
+  pushl $153
+80106585:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+8010658a:	e9 53 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+8010658f <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+8010658f:	6a 00                	push   $0x0
+  pushl $154
+80106591:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+80106596:	e9 47 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+8010659b <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+8010659b:	6a 00                	push   $0x0
+  pushl $155
+8010659d:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+801065a2:	e9 3b f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801065a7 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+801065a7:	6a 00                	push   $0x0
+  pushl $156
+801065a9:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+801065ae:	e9 2f f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801065b3 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+801065b3:	6a 00                	push   $0x0
+  pushl $157
+801065b5:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+801065ba:	e9 23 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801065bf <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+801065bf:	6a 00                	push   $0x0
+  pushl $158
+801065c1:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+801065c6:	e9 17 f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801065cb <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+801065cb:	6a 00                	push   $0x0
+  pushl $159
+801065cd:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+801065d2:	e9 0b f5 ff ff       	jmp    80105ae2 <alltraps>
+
+801065d7 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+801065d7:	6a 00                	push   $0x0
+  pushl $160
+801065d9:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+801065de:	e9 ff f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801065e3 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+801065e3:	6a 00                	push   $0x0
+  pushl $161
+801065e5:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+801065ea:	e9 f3 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801065ef <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+801065ef:	6a 00                	push   $0x0
+  pushl $162
+801065f1:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+801065f6:	e9 e7 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801065fb <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+801065fb:	6a 00                	push   $0x0
+  pushl $163
+801065fd:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+80106602:	e9 db f4 ff ff       	jmp    80105ae2 <alltraps>
+
+80106607 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+80106607:	6a 00                	push   $0x0
+  pushl $164
+80106609:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+8010660e:	e9 cf f4 ff ff       	jmp    80105ae2 <alltraps>
+
+80106613 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+80106613:	6a 00                	push   $0x0
+  pushl $165
+80106615:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+8010661a:	e9 c3 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+8010661f <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+8010661f:	6a 00                	push   $0x0
+  pushl $166
+80106621:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+80106626:	e9 b7 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+8010662b <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+8010662b:	6a 00                	push   $0x0
+  pushl $167
+8010662d:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+80106632:	e9 ab f4 ff ff       	jmp    80105ae2 <alltraps>
+
+80106637 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+80106637:	6a 00                	push   $0x0
+  pushl $168
+80106639:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+8010663e:	e9 9f f4 ff ff       	jmp    80105ae2 <alltraps>
+
+80106643 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80106643:	6a 00                	push   $0x0
+  pushl $169
+80106645:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+8010664a:	e9 93 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+8010664f <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+8010664f:	6a 00                	push   $0x0
+  pushl $170
+80106651:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+80106656:	e9 87 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+8010665b <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+8010665b:	6a 00                	push   $0x0
+  pushl $171
+8010665d:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+80106662:	e9 7b f4 ff ff       	jmp    80105ae2 <alltraps>
+
+80106667 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+80106667:	6a 00                	push   $0x0
+  pushl $172
+80106669:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+8010666e:	e9 6f f4 ff ff       	jmp    80105ae2 <alltraps>
+
+80106673 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+80106673:	6a 00                	push   $0x0
+  pushl $173
+80106675:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+8010667a:	e9 63 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+8010667f <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+8010667f:	6a 00                	push   $0x0
+  pushl $174
+80106681:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+80106686:	e9 57 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+8010668b <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+8010668b:	6a 00                	push   $0x0
+  pushl $175
+8010668d:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+80106692:	e9 4b f4 ff ff       	jmp    80105ae2 <alltraps>
+
+80106697 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+80106697:	6a 00                	push   $0x0
+  pushl $176
+80106699:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+8010669e:	e9 3f f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801066a3 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+801066a3:	6a 00                	push   $0x0
+  pushl $177
+801066a5:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+801066aa:	e9 33 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801066af <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+801066af:	6a 00                	push   $0x0
+  pushl $178
+801066b1:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+801066b6:	e9 27 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801066bb <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+801066bb:	6a 00                	push   $0x0
+  pushl $179
+801066bd:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+801066c2:	e9 1b f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801066c7 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+801066c7:	6a 00                	push   $0x0
+  pushl $180
+801066c9:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+801066ce:	e9 0f f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801066d3 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+801066d3:	6a 00                	push   $0x0
+  pushl $181
+801066d5:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+801066da:	e9 03 f4 ff ff       	jmp    80105ae2 <alltraps>
+
+801066df <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+801066df:	6a 00                	push   $0x0
+  pushl $182
+801066e1:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+801066e6:	e9 f7 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+801066eb <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+801066eb:	6a 00                	push   $0x0
+  pushl $183
+801066ed:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+801066f2:	e9 eb f3 ff ff       	jmp    80105ae2 <alltraps>
+
+801066f7 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+801066f7:	6a 00                	push   $0x0
+  pushl $184
+801066f9:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+801066fe:	e9 df f3 ff ff       	jmp    80105ae2 <alltraps>
+
+80106703 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+80106703:	6a 00                	push   $0x0
+  pushl $185
+80106705:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+8010670a:	e9 d3 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+8010670f <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+8010670f:	6a 00                	push   $0x0
+  pushl $186
+80106711:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+80106716:	e9 c7 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+8010671b <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+8010671b:	6a 00                	push   $0x0
+  pushl $187
+8010671d:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+80106722:	e9 bb f3 ff ff       	jmp    80105ae2 <alltraps>
+
+80106727 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+80106727:	6a 00                	push   $0x0
+  pushl $188
+80106729:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+8010672e:	e9 af f3 ff ff       	jmp    80105ae2 <alltraps>
+
+80106733 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+80106733:	6a 00                	push   $0x0
+  pushl $189
+80106735:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+8010673a:	e9 a3 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+8010673f <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+8010673f:	6a 00                	push   $0x0
+  pushl $190
+80106741:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+80106746:	e9 97 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+8010674b <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+8010674b:	6a 00                	push   $0x0
+  pushl $191
+8010674d:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80106752:	e9 8b f3 ff ff       	jmp    80105ae2 <alltraps>
+
+80106757 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+80106757:	6a 00                	push   $0x0
+  pushl $192
+80106759:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+8010675e:	e9 7f f3 ff ff       	jmp    80105ae2 <alltraps>
+
+80106763 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+80106763:	6a 00                	push   $0x0
+  pushl $193
+80106765:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+8010676a:	e9 73 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+8010676f <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+8010676f:	6a 00                	push   $0x0
+  pushl $194
+80106771:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+80106776:	e9 67 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+8010677b <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+8010677b:	6a 00                	push   $0x0
+  pushl $195
+8010677d:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+80106782:	e9 5b f3 ff ff       	jmp    80105ae2 <alltraps>
+
+80106787 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+80106787:	6a 00                	push   $0x0
+  pushl $196
+80106789:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+8010678e:	e9 4f f3 ff ff       	jmp    80105ae2 <alltraps>
+
+80106793 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+80106793:	6a 00                	push   $0x0
+  pushl $197
+80106795:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+8010679a:	e9 43 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+8010679f <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+8010679f:	6a 00                	push   $0x0
+  pushl $198
+801067a1:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+801067a6:	e9 37 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+801067ab <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+801067ab:	6a 00                	push   $0x0
+  pushl $199
+801067ad:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+801067b2:	e9 2b f3 ff ff       	jmp    80105ae2 <alltraps>
+
+801067b7 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+801067b7:	6a 00                	push   $0x0
+  pushl $200
+801067b9:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+801067be:	e9 1f f3 ff ff       	jmp    80105ae2 <alltraps>
+
+801067c3 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+801067c3:	6a 00                	push   $0x0
+  pushl $201
+801067c5:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+801067ca:	e9 13 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+801067cf <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+801067cf:	6a 00                	push   $0x0
+  pushl $202
+801067d1:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+801067d6:	e9 07 f3 ff ff       	jmp    80105ae2 <alltraps>
+
+801067db <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+801067db:	6a 00                	push   $0x0
+  pushl $203
+801067dd:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+801067e2:	e9 fb f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801067e7 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+801067e7:	6a 00                	push   $0x0
+  pushl $204
+801067e9:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+801067ee:	e9 ef f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801067f3 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+801067f3:	6a 00                	push   $0x0
+  pushl $205
+801067f5:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+801067fa:	e9 e3 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801067ff <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+801067ff:	6a 00                	push   $0x0
+  pushl $206
+80106801:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+80106806:	e9 d7 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+8010680b <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+8010680b:	6a 00                	push   $0x0
+  pushl $207
+8010680d:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+80106812:	e9 cb f2 ff ff       	jmp    80105ae2 <alltraps>
+
+80106817 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+80106817:	6a 00                	push   $0x0
+  pushl $208
+80106819:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+8010681e:	e9 bf f2 ff ff       	jmp    80105ae2 <alltraps>
+
+80106823 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+80106823:	6a 00                	push   $0x0
+  pushl $209
+80106825:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+8010682a:	e9 b3 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+8010682f <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+8010682f:	6a 00                	push   $0x0
+  pushl $210
+80106831:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+80106836:	e9 a7 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+8010683b <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+8010683b:	6a 00                	push   $0x0
+  pushl $211
+8010683d:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80106842:	e9 9b f2 ff ff       	jmp    80105ae2 <alltraps>
+
+80106847 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+80106847:	6a 00                	push   $0x0
+  pushl $212
+80106849:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+8010684e:	e9 8f f2 ff ff       	jmp    80105ae2 <alltraps>
+
+80106853 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80106853:	6a 00                	push   $0x0
+  pushl $213
+80106855:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+8010685a:	e9 83 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+8010685f <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+8010685f:	6a 00                	push   $0x0
+  pushl $214
+80106861:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+80106866:	e9 77 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+8010686b <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+8010686b:	6a 00                	push   $0x0
+  pushl $215
+8010686d:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+80106872:	e9 6b f2 ff ff       	jmp    80105ae2 <alltraps>
+
+80106877 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+80106877:	6a 00                	push   $0x0
+  pushl $216
+80106879:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+8010687e:	e9 5f f2 ff ff       	jmp    80105ae2 <alltraps>
+
+80106883 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+80106883:	6a 00                	push   $0x0
+  pushl $217
+80106885:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+8010688a:	e9 53 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+8010688f <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+8010688f:	6a 00                	push   $0x0
+  pushl $218
+80106891:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+80106896:	e9 47 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+8010689b <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+8010689b:	6a 00                	push   $0x0
+  pushl $219
+8010689d:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+801068a2:	e9 3b f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801068a7 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+801068a7:	6a 00                	push   $0x0
+  pushl $220
+801068a9:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+801068ae:	e9 2f f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801068b3 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+801068b3:	6a 00                	push   $0x0
+  pushl $221
+801068b5:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+801068ba:	e9 23 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801068bf <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+801068bf:	6a 00                	push   $0x0
+  pushl $222
+801068c1:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+801068c6:	e9 17 f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801068cb <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+801068cb:	6a 00                	push   $0x0
+  pushl $223
+801068cd:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+801068d2:	e9 0b f2 ff ff       	jmp    80105ae2 <alltraps>
+
+801068d7 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+801068d7:	6a 00                	push   $0x0
+  pushl $224
+801068d9:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+801068de:	e9 ff f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801068e3 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+801068e3:	6a 00                	push   $0x0
+  pushl $225
+801068e5:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+801068ea:	e9 f3 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801068ef <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+801068ef:	6a 00                	push   $0x0
+  pushl $226
+801068f1:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+801068f6:	e9 e7 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801068fb <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+801068fb:	6a 00                	push   $0x0
+  pushl $227
+801068fd:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+80106902:	e9 db f1 ff ff       	jmp    80105ae2 <alltraps>
+
+80106907 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+80106907:	6a 00                	push   $0x0
+  pushl $228
+80106909:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+8010690e:	e9 cf f1 ff ff       	jmp    80105ae2 <alltraps>
+
+80106913 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+80106913:	6a 00                	push   $0x0
+  pushl $229
+80106915:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+8010691a:	e9 c3 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+8010691f <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+8010691f:	6a 00                	push   $0x0
+  pushl $230
+80106921:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+80106926:	e9 b7 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+8010692b <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+8010692b:	6a 00                	push   $0x0
+  pushl $231
+8010692d:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+80106932:	e9 ab f1 ff ff       	jmp    80105ae2 <alltraps>
+
+80106937 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+80106937:	6a 00                	push   $0x0
+  pushl $232
+80106939:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+8010693e:	e9 9f f1 ff ff       	jmp    80105ae2 <alltraps>
+
+80106943 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80106943:	6a 00                	push   $0x0
+  pushl $233
+80106945:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+8010694a:	e9 93 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+8010694f <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+8010694f:	6a 00                	push   $0x0
+  pushl $234
+80106951:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+80106956:	e9 87 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+8010695b <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+8010695b:	6a 00                	push   $0x0
+  pushl $235
+8010695d:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+80106962:	e9 7b f1 ff ff       	jmp    80105ae2 <alltraps>
+
+80106967 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+80106967:	6a 00                	push   $0x0
+  pushl $236
+80106969:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+8010696e:	e9 6f f1 ff ff       	jmp    80105ae2 <alltraps>
+
+80106973 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+80106973:	6a 00                	push   $0x0
+  pushl $237
+80106975:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+8010697a:	e9 63 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+8010697f <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+8010697f:	6a 00                	push   $0x0
+  pushl $238
+80106981:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+80106986:	e9 57 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+8010698b <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+8010698b:	6a 00                	push   $0x0
+  pushl $239
+8010698d:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+80106992:	e9 4b f1 ff ff       	jmp    80105ae2 <alltraps>
+
+80106997 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+80106997:	6a 00                	push   $0x0
+  pushl $240
+80106999:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+8010699e:	e9 3f f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801069a3 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+801069a3:	6a 00                	push   $0x0
+  pushl $241
+801069a5:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+801069aa:	e9 33 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801069af <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+801069af:	6a 00                	push   $0x0
+  pushl $242
+801069b1:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+801069b6:	e9 27 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801069bb <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+801069bb:	6a 00                	push   $0x0
+  pushl $243
+801069bd:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+801069c2:	e9 1b f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801069c7 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+801069c7:	6a 00                	push   $0x0
+  pushl $244
+801069c9:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+801069ce:	e9 0f f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801069d3 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+801069d3:	6a 00                	push   $0x0
+  pushl $245
+801069d5:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+801069da:	e9 03 f1 ff ff       	jmp    80105ae2 <alltraps>
+
+801069df <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+801069df:	6a 00                	push   $0x0
+  pushl $246
+801069e1:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+801069e6:	e9 f7 f0 ff ff       	jmp    80105ae2 <alltraps>
+
+801069eb <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+801069eb:	6a 00                	push   $0x0
+  pushl $247
+801069ed:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+801069f2:	e9 eb f0 ff ff       	jmp    80105ae2 <alltraps>
+
+801069f7 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+801069f7:	6a 00                	push   $0x0
+  pushl $248
+801069f9:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+801069fe:	e9 df f0 ff ff       	jmp    80105ae2 <alltraps>
+
+80106a03 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+80106a03:	6a 00                	push   $0x0
+  pushl $249
+80106a05:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+80106a0a:	e9 d3 f0 ff ff       	jmp    80105ae2 <alltraps>
+
+80106a0f <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+80106a0f:	6a 00                	push   $0x0
+  pushl $250
+80106a11:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+80106a16:	e9 c7 f0 ff ff       	jmp    80105ae2 <alltraps>
+
+80106a1b <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+80106a1b:	6a 00                	push   $0x0
+  pushl $251
+80106a1d:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+80106a22:	e9 bb f0 ff ff       	jmp    80105ae2 <alltraps>
+
+80106a27 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+80106a27:	6a 00                	push   $0x0
+  pushl $252
+80106a29:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+80106a2e:	e9 af f0 ff ff       	jmp    80105ae2 <alltraps>
+
+80106a33 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+80106a33:	6a 00                	push   $0x0
+  pushl $253
+80106a35:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+80106a3a:	e9 a3 f0 ff ff       	jmp    80105ae2 <alltraps>
+
+80106a3f <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+80106a3f:	6a 00                	push   $0x0
+  pushl $254
+80106a41:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+80106a46:	e9 97 f0 ff ff       	jmp    80105ae2 <alltraps>
+
+80106a4b <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+80106a4b:	6a 00                	push   $0x0
+  pushl $255
+80106a4d:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80106a52:	e9 8b f0 ff ff       	jmp    80105ae2 <alltraps>
+80106a57:	66 90                	xchg   %ax,%ax
+80106a59:	66 90                	xchg   %ax,%ax
+80106a5b:	66 90                	xchg   %ax,%ax
+80106a5d:	66 90                	xchg   %ax,%ax
+80106a5f:	90                   	nop
+
+80106a60 <walkpgdir>:
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+80106a60:	55                   	push   %ebp
+80106a61:	89 e5                	mov    %esp,%ebp
+80106a63:	57                   	push   %edi
+80106a64:	56                   	push   %esi
+80106a65:	53                   	push   %ebx
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+80106a66:	89 d3                	mov    %edx,%ebx
+{
+80106a68:	89 d7                	mov    %edx,%edi
+  pde = &pgdir[PDX(va)];
+80106a6a:	c1 eb 16             	shr    $0x16,%ebx
+80106a6d:	8d 34 98             	lea    (%eax,%ebx,4),%esi
+{
+80106a70:	83 ec 0c             	sub    $0xc,%esp
+  if(*pde & PTE_P){
+80106a73:	8b 06                	mov    (%esi),%eax
+80106a75:	a8 01                	test   $0x1,%al
+80106a77:	74 27                	je     80106aa0 <walkpgdir+0x40>
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106a79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106a7e:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+80106a84:	c1 ef 0a             	shr    $0xa,%edi
+}
+80106a87:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return &pgtab[PTX(va)];
+80106a8a:	89 fa                	mov    %edi,%edx
+80106a8c:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106a92:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+}
+80106a95:	5b                   	pop    %ebx
+80106a96:	5e                   	pop    %esi
+80106a97:	5f                   	pop    %edi
+80106a98:	5d                   	pop    %ebp
+80106a99:	c3                   	ret    
+80106a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+80106aa0:	85 c9                	test   %ecx,%ecx
+80106aa2:	74 2c                	je     80106ad0 <walkpgdir+0x70>
+80106aa4:	e8 17 ba ff ff       	call   801024c0 <kalloc>
+80106aa9:	85 c0                	test   %eax,%eax
+80106aab:	89 c3                	mov    %eax,%ebx
+80106aad:	74 21                	je     80106ad0 <walkpgdir+0x70>
+    memset(pgtab, 0, PGSIZE);
+80106aaf:	83 ec 04             	sub    $0x4,%esp
+80106ab2:	68 00 10 00 00       	push   $0x1000
+80106ab7:	6a 00                	push   $0x0
+80106ab9:	50                   	push   %eax
+80106aba:	e8 81 dd ff ff       	call   80104840 <memset>
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+80106abf:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106ac5:	83 c4 10             	add    $0x10,%esp
+80106ac8:	83 c8 07             	or     $0x7,%eax
+80106acb:	89 06                	mov    %eax,(%esi)
+80106acd:	eb b5                	jmp    80106a84 <walkpgdir+0x24>
+80106acf:	90                   	nop
+}
+80106ad0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 0;
+80106ad3:	31 c0                	xor    %eax,%eax
+}
+80106ad5:	5b                   	pop    %ebx
+80106ad6:	5e                   	pop    %esi
+80106ad7:	5f                   	pop    %edi
+80106ad8:	5d                   	pop    %ebp
+80106ad9:	c3                   	ret    
+80106ada:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106ae0 <mappages>:
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+80106ae0:	55                   	push   %ebp
+80106ae1:	89 e5                	mov    %esp,%ebp
+80106ae3:	57                   	push   %edi
+80106ae4:	56                   	push   %esi
+80106ae5:	53                   	push   %ebx
+  char *a, *last;
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+80106ae6:	89 d3                	mov    %edx,%ebx
+80106ae8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+{
+80106aee:	83 ec 1c             	sub    $0x1c,%esp
+80106af1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80106af4:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106af8:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106afb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106b00:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+80106b03:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106b06:	29 df                	sub    %ebx,%edi
+80106b08:	83 c8 01             	or     $0x1,%eax
+80106b0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106b0e:	eb 15                	jmp    80106b25 <mappages+0x45>
+    if(*pte & PTE_P)
+80106b10:	f6 00 01             	testb  $0x1,(%eax)
+80106b13:	75 45                	jne    80106b5a <mappages+0x7a>
+    *pte = pa | perm | PTE_P;
+80106b15:	0b 75 dc             	or     -0x24(%ebp),%esi
+    if(a == last)
+80106b18:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
+    *pte = pa | perm | PTE_P;
+80106b1b:	89 30                	mov    %esi,(%eax)
+    if(a == last)
+80106b1d:	74 31                	je     80106b50 <mappages+0x70>
+      break;
+    a += PGSIZE;
+80106b1f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+80106b25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106b28:	b9 01 00 00 00       	mov    $0x1,%ecx
+80106b2d:	89 da                	mov    %ebx,%edx
+80106b2f:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
+80106b32:	e8 29 ff ff ff       	call   80106a60 <walkpgdir>
+80106b37:	85 c0                	test   %eax,%eax
+80106b39:	75 d5                	jne    80106b10 <mappages+0x30>
+    pa += PGSIZE;
+  }
+  return 0;
+}
+80106b3b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106b3e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106b43:	5b                   	pop    %ebx
+80106b44:	5e                   	pop    %esi
+80106b45:	5f                   	pop    %edi
+80106b46:	5d                   	pop    %ebp
+80106b47:	c3                   	ret    
+80106b48:	90                   	nop
+80106b49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b50:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106b53:	31 c0                	xor    %eax,%eax
+}
+80106b55:	5b                   	pop    %ebx
+80106b56:	5e                   	pop    %esi
+80106b57:	5f                   	pop    %edi
+80106b58:	5d                   	pop    %ebp
+80106b59:	c3                   	ret    
+      panic("remap");
+80106b5a:	83 ec 0c             	sub    $0xc,%esp
+80106b5d:	68 28 7d 10 80       	push   $0x80107d28
+80106b62:	e8 29 98 ff ff       	call   80100390 <panic>
+80106b67:	89 f6                	mov    %esi,%esi
+80106b69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106b70 <deallocuvm.part.0>:
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106b70:	55                   	push   %ebp
+80106b71:	89 e5                	mov    %esp,%ebp
+80106b73:	57                   	push   %edi
+80106b74:	56                   	push   %esi
+80106b75:	53                   	push   %ebx
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+80106b76:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106b7c:	89 c7                	mov    %eax,%edi
+  a = PGROUNDUP(newsz);
+80106b7e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106b84:	83 ec 1c             	sub    $0x1c,%esp
+80106b87:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+80106b8a:	39 d3                	cmp    %edx,%ebx
+80106b8c:	73 66                	jae    80106bf4 <deallocuvm.part.0+0x84>
+80106b8e:	89 d6                	mov    %edx,%esi
+80106b90:	eb 3d                	jmp    80106bcf <deallocuvm.part.0+0x5f>
+80106b92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    pte = walkpgdir(pgdir, (char*)a, 0);
+    if(!pte)
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+    else if((*pte & PTE_P) != 0){
+80106b98:	8b 10                	mov    (%eax),%edx
+80106b9a:	f6 c2 01             	test   $0x1,%dl
+80106b9d:	74 26                	je     80106bc5 <deallocuvm.part.0+0x55>
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+80106b9f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106ba5:	74 58                	je     80106bff <deallocuvm.part.0+0x8f>
+        panic("kfree");
+      char *v = P2V(pa);
+      kfree(v);
+80106ba7:	83 ec 0c             	sub    $0xc,%esp
+      char *v = P2V(pa);
+80106baa:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80106bb0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+      kfree(v);
+80106bb3:	52                   	push   %edx
+80106bb4:	e8 57 b7 ff ff       	call   80102310 <kfree>
+      *pte = 0;
+80106bb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106bbc:	83 c4 10             	add    $0x10,%esp
+80106bbf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; a  < oldsz; a += PGSIZE){
+80106bc5:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106bcb:	39 f3                	cmp    %esi,%ebx
+80106bcd:	73 25                	jae    80106bf4 <deallocuvm.part.0+0x84>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+80106bcf:	31 c9                	xor    %ecx,%ecx
+80106bd1:	89 da                	mov    %ebx,%edx
+80106bd3:	89 f8                	mov    %edi,%eax
+80106bd5:	e8 86 fe ff ff       	call   80106a60 <walkpgdir>
+    if(!pte)
+80106bda:	85 c0                	test   %eax,%eax
+80106bdc:	75 ba                	jne    80106b98 <deallocuvm.part.0+0x28>
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+80106bde:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
+80106be4:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
+  for(; a  < oldsz; a += PGSIZE){
+80106bea:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106bf0:	39 f3                	cmp    %esi,%ebx
+80106bf2:	72 db                	jb     80106bcf <deallocuvm.part.0+0x5f>
+    }
+  }
+  return newsz;
+}
+80106bf4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106bf7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106bfa:	5b                   	pop    %ebx
+80106bfb:	5e                   	pop    %esi
+80106bfc:	5f                   	pop    %edi
+80106bfd:	5d                   	pop    %ebp
+80106bfe:	c3                   	ret    
+        panic("kfree");
+80106bff:	83 ec 0c             	sub    $0xc,%esp
+80106c02:	68 06 76 10 80       	push   $0x80107606
+80106c07:	e8 84 97 ff ff       	call   80100390 <panic>
+80106c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106c10 <seginit>:
+{
+80106c10:	55                   	push   %ebp
+80106c11:	89 e5                	mov    %esp,%ebp
+80106c13:	83 ec 18             	sub    $0x18,%esp
+  c = &cpus[cpuid()];
+80106c16:	e8 c5 cb ff ff       	call   801037e0 <cpuid>
+80106c1b:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+  pd[0] = size-1;
+80106c21:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106c26:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+80106c2a:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
+80106c31:	ff 00 00 
+80106c34:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
+80106c3b:	9a cf 00 
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+80106c3e:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
+80106c45:	ff 00 00 
+80106c48:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
+80106c4f:	92 cf 00 
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80106c52:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
+80106c59:	ff 00 00 
+80106c5c:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
+80106c63:	fa cf 00 
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+80106c66:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
+80106c6d:	ff 00 00 
+80106c70:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
+80106c77:	f2 cf 00 
+  lgdt(c->gdt, sizeof(c->gdt));
+80106c7a:	05 f0 27 11 80       	add    $0x801127f0,%eax
+  pd[1] = (uint)p;
+80106c7f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+  pd[2] = (uint)p >> 16;
+80106c83:	c1 e8 10             	shr    $0x10,%eax
+80106c86:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+  asm volatile("lgdt (%0)" : : "r" (pd));
+80106c8a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80106c8d:	0f 01 10             	lgdtl  (%eax)
+}
+80106c90:	c9                   	leave  
+80106c91:	c3                   	ret    
+80106c92:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106ca0 <switchkvm>:
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106ca0:	a1 a4 57 11 80       	mov    0x801157a4,%eax
+{
+80106ca5:	55                   	push   %ebp
+80106ca6:	89 e5                	mov    %esp,%ebp
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106ca8:	05 00 00 00 80       	add    $0x80000000,%eax
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106cad:	0f 22 d8             	mov    %eax,%cr3
+}
+80106cb0:	5d                   	pop    %ebp
+80106cb1:	c3                   	ret    
+80106cb2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106cc0 <switchuvm>:
+{
+80106cc0:	55                   	push   %ebp
+80106cc1:	89 e5                	mov    %esp,%ebp
+80106cc3:	57                   	push   %edi
+80106cc4:	56                   	push   %esi
+80106cc5:	53                   	push   %ebx
+80106cc6:	83 ec 1c             	sub    $0x1c,%esp
+80106cc9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(p == 0)
+80106ccc:	85 db                	test   %ebx,%ebx
+80106cce:	0f 84 cb 00 00 00    	je     80106d9f <switchuvm+0xdf>
+  if(p->kstack == 0)
+80106cd4:	8b 43 08             	mov    0x8(%ebx),%eax
+80106cd7:	85 c0                	test   %eax,%eax
+80106cd9:	0f 84 da 00 00 00    	je     80106db9 <switchuvm+0xf9>
+  if(p->pgdir == 0)
+80106cdf:	8b 43 04             	mov    0x4(%ebx),%eax
+80106ce2:	85 c0                	test   %eax,%eax
+80106ce4:	0f 84 c2 00 00 00    	je     80106dac <switchuvm+0xec>
+  pushcli();
+80106cea:	e8 71 d9 ff ff       	call   80104660 <pushcli>
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80106cef:	e8 6c ca ff ff       	call   80103760 <mycpu>
+80106cf4:	89 c6                	mov    %eax,%esi
+80106cf6:	e8 65 ca ff ff       	call   80103760 <mycpu>
+80106cfb:	89 c7                	mov    %eax,%edi
+80106cfd:	e8 5e ca ff ff       	call   80103760 <mycpu>
+80106d02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106d05:	83 c7 08             	add    $0x8,%edi
+80106d08:	e8 53 ca ff ff       	call   80103760 <mycpu>
+80106d0d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106d10:	83 c0 08             	add    $0x8,%eax
+80106d13:	ba 67 00 00 00       	mov    $0x67,%edx
+80106d18:	c1 e8 18             	shr    $0x18,%eax
+80106d1b:	66 89 96 98 00 00 00 	mov    %dx,0x98(%esi)
+80106d22:	66 89 be 9a 00 00 00 	mov    %di,0x9a(%esi)
+80106d29:	88 86 9f 00 00 00    	mov    %al,0x9f(%esi)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106d2f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80106d34:	83 c1 08             	add    $0x8,%ecx
+80106d37:	c1 e9 10             	shr    $0x10,%ecx
+80106d3a:	88 8e 9c 00 00 00    	mov    %cl,0x9c(%esi)
+80106d40:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106d45:	66 89 8e 9d 00 00 00 	mov    %cx,0x9d(%esi)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80106d4c:	be 10 00 00 00       	mov    $0x10,%esi
+  mycpu()->gdt[SEG_TSS].s = 0;
+80106d51:	e8 0a ca ff ff       	call   80103760 <mycpu>
+80106d56:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80106d5d:	e8 fe c9 ff ff       	call   80103760 <mycpu>
+80106d62:	66 89 70 10          	mov    %si,0x10(%eax)
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+80106d66:	8b 73 08             	mov    0x8(%ebx),%esi
+80106d69:	e8 f2 c9 ff ff       	call   80103760 <mycpu>
+80106d6e:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106d74:	89 70 0c             	mov    %esi,0xc(%eax)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106d77:	e8 e4 c9 ff ff       	call   80103760 <mycpu>
+80106d7c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+  asm volatile("ltr %0" : : "r" (sel));
+80106d80:	b8 28 00 00 00       	mov    $0x28,%eax
+80106d85:	0f 00 d8             	ltr    %ax
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+80106d88:	8b 43 04             	mov    0x4(%ebx),%eax
+80106d8b:	05 00 00 00 80       	add    $0x80000000,%eax
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106d90:	0f 22 d8             	mov    %eax,%cr3
+}
+80106d93:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d96:	5b                   	pop    %ebx
+80106d97:	5e                   	pop    %esi
+80106d98:	5f                   	pop    %edi
+80106d99:	5d                   	pop    %ebp
+  popcli();
+80106d9a:	e9 01 d9 ff ff       	jmp    801046a0 <popcli>
+    panic("switchuvm: no process");
+80106d9f:	83 ec 0c             	sub    $0xc,%esp
+80106da2:	68 2e 7d 10 80       	push   $0x80107d2e
+80106da7:	e8 e4 95 ff ff       	call   80100390 <panic>
+    panic("switchuvm: no pgdir");
+80106dac:	83 ec 0c             	sub    $0xc,%esp
+80106daf:	68 59 7d 10 80       	push   $0x80107d59
+80106db4:	e8 d7 95 ff ff       	call   80100390 <panic>
+    panic("switchuvm: no kstack");
+80106db9:	83 ec 0c             	sub    $0xc,%esp
+80106dbc:	68 44 7d 10 80       	push   $0x80107d44
+80106dc1:	e8 ca 95 ff ff       	call   80100390 <panic>
+80106dc6:	8d 76 00             	lea    0x0(%esi),%esi
+80106dc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106dd0 <inituvm>:
+{
+80106dd0:	55                   	push   %ebp
+80106dd1:	89 e5                	mov    %esp,%ebp
+80106dd3:	57                   	push   %edi
+80106dd4:	56                   	push   %esi
+80106dd5:	53                   	push   %ebx
+80106dd6:	83 ec 1c             	sub    $0x1c,%esp
+80106dd9:	8b 75 10             	mov    0x10(%ebp),%esi
+80106ddc:	8b 45 08             	mov    0x8(%ebp),%eax
+80106ddf:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(sz >= PGSIZE)
+80106de2:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+{
+80106de8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(sz >= PGSIZE)
+80106deb:	77 49                	ja     80106e36 <inituvm+0x66>
+  mem = kalloc();
+80106ded:	e8 ce b6 ff ff       	call   801024c0 <kalloc>
+  memset(mem, 0, PGSIZE);
+80106df2:	83 ec 04             	sub    $0x4,%esp
+  mem = kalloc();
+80106df5:	89 c3                	mov    %eax,%ebx
+  memset(mem, 0, PGSIZE);
+80106df7:	68 00 10 00 00       	push   $0x1000
+80106dfc:	6a 00                	push   $0x0
+80106dfe:	50                   	push   %eax
+80106dff:	e8 3c da ff ff       	call   80104840 <memset>
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+80106e04:	58                   	pop    %eax
+80106e05:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106e0b:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106e10:	5a                   	pop    %edx
+80106e11:	6a 06                	push   $0x6
+80106e13:	50                   	push   %eax
+80106e14:	31 d2                	xor    %edx,%edx
+80106e16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106e19:	e8 c2 fc ff ff       	call   80106ae0 <mappages>
+  memmove(mem, init, sz);
+80106e1e:	89 75 10             	mov    %esi,0x10(%ebp)
+80106e21:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80106e24:	83 c4 10             	add    $0x10,%esp
+80106e27:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80106e2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e2d:	5b                   	pop    %ebx
+80106e2e:	5e                   	pop    %esi
+80106e2f:	5f                   	pop    %edi
+80106e30:	5d                   	pop    %ebp
+  memmove(mem, init, sz);
+80106e31:	e9 ba da ff ff       	jmp    801048f0 <memmove>
+    panic("inituvm: more than a page");
+80106e36:	83 ec 0c             	sub    $0xc,%esp
+80106e39:	68 6d 7d 10 80       	push   $0x80107d6d
+80106e3e:	e8 4d 95 ff ff       	call   80100390 <panic>
+80106e43:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106e49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106e50 <loaduvm>:
+{
+80106e50:	55                   	push   %ebp
+80106e51:	89 e5                	mov    %esp,%ebp
+80106e53:	57                   	push   %edi
+80106e54:	56                   	push   %esi
+80106e55:	53                   	push   %ebx
+80106e56:	83 ec 0c             	sub    $0xc,%esp
+  if((uint) addr % PGSIZE != 0)
+80106e59:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
+80106e60:	0f 85 91 00 00 00    	jne    80106ef7 <loaduvm+0xa7>
+  for(i = 0; i < sz; i += PGSIZE){
+80106e66:	8b 75 18             	mov    0x18(%ebp),%esi
+80106e69:	31 db                	xor    %ebx,%ebx
+80106e6b:	85 f6                	test   %esi,%esi
+80106e6d:	75 1a                	jne    80106e89 <loaduvm+0x39>
+80106e6f:	eb 6f                	jmp    80106ee0 <loaduvm+0x90>
+80106e71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e78:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106e7e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
+80106e84:	39 5d 18             	cmp    %ebx,0x18(%ebp)
+80106e87:	76 57                	jbe    80106ee0 <loaduvm+0x90>
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80106e89:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e8f:	31 c9                	xor    %ecx,%ecx
+80106e91:	01 da                	add    %ebx,%edx
+80106e93:	e8 c8 fb ff ff       	call   80106a60 <walkpgdir>
+80106e98:	85 c0                	test   %eax,%eax
+80106e9a:	74 4e                	je     80106eea <loaduvm+0x9a>
+    pa = PTE_ADDR(*pte);
+80106e9c:	8b 00                	mov    (%eax),%eax
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106e9e:	8b 4d 14             	mov    0x14(%ebp),%ecx
+    if(sz - i < PGSIZE)
+80106ea1:	bf 00 10 00 00       	mov    $0x1000,%edi
+    pa = PTE_ADDR(*pte);
+80106ea6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    if(sz - i < PGSIZE)
+80106eab:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106eb1:	0f 46 fe             	cmovbe %esi,%edi
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106eb4:	01 d9                	add    %ebx,%ecx
+80106eb6:	05 00 00 00 80       	add    $0x80000000,%eax
+80106ebb:	57                   	push   %edi
+80106ebc:	51                   	push   %ecx
+80106ebd:	50                   	push   %eax
+80106ebe:	ff 75 10             	pushl  0x10(%ebp)
+80106ec1:	e8 9a aa ff ff       	call   80101960 <readi>
+80106ec6:	83 c4 10             	add    $0x10,%esp
+80106ec9:	39 f8                	cmp    %edi,%eax
+80106ecb:	74 ab                	je     80106e78 <loaduvm+0x28>
+}
+80106ecd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106ed0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106ed5:	5b                   	pop    %ebx
+80106ed6:	5e                   	pop    %esi
+80106ed7:	5f                   	pop    %edi
+80106ed8:	5d                   	pop    %ebp
+80106ed9:	c3                   	ret    
+80106eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106ee0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106ee3:	31 c0                	xor    %eax,%eax
+}
+80106ee5:	5b                   	pop    %ebx
+80106ee6:	5e                   	pop    %esi
+80106ee7:	5f                   	pop    %edi
+80106ee8:	5d                   	pop    %ebp
+80106ee9:	c3                   	ret    
+      panic("loaduvm: address should exist");
+80106eea:	83 ec 0c             	sub    $0xc,%esp
+80106eed:	68 87 7d 10 80       	push   $0x80107d87
+80106ef2:	e8 99 94 ff ff       	call   80100390 <panic>
+    panic("loaduvm: addr must be page aligned");
+80106ef7:	83 ec 0c             	sub    $0xc,%esp
+80106efa:	68 28 7e 10 80       	push   $0x80107e28
+80106eff:	e8 8c 94 ff ff       	call   80100390 <panic>
+80106f04:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106f0a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80106f10 <allocuvm>:
+{
+80106f10:	55                   	push   %ebp
+80106f11:	89 e5                	mov    %esp,%ebp
+80106f13:	57                   	push   %edi
+80106f14:	56                   	push   %esi
+80106f15:	53                   	push   %ebx
+80106f16:	83 ec 1c             	sub    $0x1c,%esp
+  if(newsz >= KERNBASE)
+80106f19:	8b 7d 10             	mov    0x10(%ebp),%edi
+80106f1c:	85 ff                	test   %edi,%edi
+80106f1e:	0f 88 8e 00 00 00    	js     80106fb2 <allocuvm+0xa2>
+  if(newsz < oldsz)
+80106f24:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106f27:	0f 82 93 00 00 00    	jb     80106fc0 <allocuvm+0xb0>
+  a = PGROUNDUP(oldsz);
+80106f2d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106f30:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80106f36:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; a < newsz; a += PGSIZE){
+80106f3c:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+80106f3f:	0f 86 7e 00 00 00    	jbe    80106fc3 <allocuvm+0xb3>
+80106f45:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80106f48:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106f4b:	eb 42                	jmp    80106f8f <allocuvm+0x7f>
+80106f4d:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(mem, 0, PGSIZE);
+80106f50:	83 ec 04             	sub    $0x4,%esp
+80106f53:	68 00 10 00 00       	push   $0x1000
+80106f58:	6a 00                	push   $0x0
+80106f5a:	50                   	push   %eax
+80106f5b:	e8 e0 d8 ff ff       	call   80104840 <memset>
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+80106f60:	58                   	pop    %eax
+80106f61:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106f67:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106f6c:	5a                   	pop    %edx
+80106f6d:	6a 06                	push   $0x6
+80106f6f:	50                   	push   %eax
+80106f70:	89 da                	mov    %ebx,%edx
+80106f72:	89 f8                	mov    %edi,%eax
+80106f74:	e8 67 fb ff ff       	call   80106ae0 <mappages>
+80106f79:	83 c4 10             	add    $0x10,%esp
+80106f7c:	85 c0                	test   %eax,%eax
+80106f7e:	78 50                	js     80106fd0 <allocuvm+0xc0>
+  for(; a < newsz; a += PGSIZE){
+80106f80:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106f86:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+80106f89:	0f 86 81 00 00 00    	jbe    80107010 <allocuvm+0x100>
+    mem = kalloc();
+80106f8f:	e8 2c b5 ff ff       	call   801024c0 <kalloc>
+    if(mem == 0){
+80106f94:	85 c0                	test   %eax,%eax
+    mem = kalloc();
+80106f96:	89 c6                	mov    %eax,%esi
+    if(mem == 0){
+80106f98:	75 b6                	jne    80106f50 <allocuvm+0x40>
+      cprintf("allocuvm out of memory\n");
+80106f9a:	83 ec 0c             	sub    $0xc,%esp
+80106f9d:	68 a5 7d 10 80       	push   $0x80107da5
+80106fa2:	e8 b9 96 ff ff       	call   80100660 <cprintf>
+  if(newsz >= oldsz)
+80106fa7:	83 c4 10             	add    $0x10,%esp
+80106faa:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106fad:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106fb0:	77 6e                	ja     80107020 <allocuvm+0x110>
+}
+80106fb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80106fb5:	31 ff                	xor    %edi,%edi
+}
+80106fb7:	89 f8                	mov    %edi,%eax
+80106fb9:	5b                   	pop    %ebx
+80106fba:	5e                   	pop    %esi
+80106fbb:	5f                   	pop    %edi
+80106fbc:	5d                   	pop    %ebp
+80106fbd:	c3                   	ret    
+80106fbe:	66 90                	xchg   %ax,%ax
+    return oldsz;
+80106fc0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+}
+80106fc3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fc6:	89 f8                	mov    %edi,%eax
+80106fc8:	5b                   	pop    %ebx
+80106fc9:	5e                   	pop    %esi
+80106fca:	5f                   	pop    %edi
+80106fcb:	5d                   	pop    %ebp
+80106fcc:	c3                   	ret    
+80106fcd:	8d 76 00             	lea    0x0(%esi),%esi
+      cprintf("allocuvm out of memory (2)\n");
+80106fd0:	83 ec 0c             	sub    $0xc,%esp
+80106fd3:	68 bd 7d 10 80       	push   $0x80107dbd
+80106fd8:	e8 83 96 ff ff       	call   80100660 <cprintf>
+  if(newsz >= oldsz)
+80106fdd:	83 c4 10             	add    $0x10,%esp
+80106fe0:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106fe3:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106fe6:	76 0d                	jbe    80106ff5 <allocuvm+0xe5>
+80106fe8:	89 c1                	mov    %eax,%ecx
+80106fea:	8b 55 10             	mov    0x10(%ebp),%edx
+80106fed:	8b 45 08             	mov    0x8(%ebp),%eax
+80106ff0:	e8 7b fb ff ff       	call   80106b70 <deallocuvm.part.0>
+      kfree(mem);
+80106ff5:	83 ec 0c             	sub    $0xc,%esp
+      return 0;
+80106ff8:	31 ff                	xor    %edi,%edi
+      kfree(mem);
+80106ffa:	56                   	push   %esi
+80106ffb:	e8 10 b3 ff ff       	call   80102310 <kfree>
+      return 0;
+80107000:	83 c4 10             	add    $0x10,%esp
+}
+80107003:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107006:	89 f8                	mov    %edi,%eax
+80107008:	5b                   	pop    %ebx
+80107009:	5e                   	pop    %esi
+8010700a:	5f                   	pop    %edi
+8010700b:	5d                   	pop    %ebp
+8010700c:	c3                   	ret    
+8010700d:	8d 76 00             	lea    0x0(%esi),%esi
+80107010:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80107013:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107016:	5b                   	pop    %ebx
+80107017:	89 f8                	mov    %edi,%eax
+80107019:	5e                   	pop    %esi
+8010701a:	5f                   	pop    %edi
+8010701b:	5d                   	pop    %ebp
+8010701c:	c3                   	ret    
+8010701d:	8d 76 00             	lea    0x0(%esi),%esi
+80107020:	89 c1                	mov    %eax,%ecx
+80107022:	8b 55 10             	mov    0x10(%ebp),%edx
+80107025:	8b 45 08             	mov    0x8(%ebp),%eax
+      return 0;
+80107028:	31 ff                	xor    %edi,%edi
+8010702a:	e8 41 fb ff ff       	call   80106b70 <deallocuvm.part.0>
+8010702f:	eb 92                	jmp    80106fc3 <allocuvm+0xb3>
+80107031:	eb 0d                	jmp    80107040 <deallocuvm>
+80107033:	90                   	nop
+80107034:	90                   	nop
+80107035:	90                   	nop
+80107036:	90                   	nop
+80107037:	90                   	nop
+80107038:	90                   	nop
+80107039:	90                   	nop
+8010703a:	90                   	nop
+8010703b:	90                   	nop
+8010703c:	90                   	nop
+8010703d:	90                   	nop
+8010703e:	90                   	nop
+8010703f:	90                   	nop
+
+80107040 <deallocuvm>:
+{
+80107040:	55                   	push   %ebp
+80107041:	89 e5                	mov    %esp,%ebp
+80107043:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107046:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80107049:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(newsz >= oldsz)
+8010704c:	39 d1                	cmp    %edx,%ecx
+8010704e:	73 10                	jae    80107060 <deallocuvm+0x20>
+}
+80107050:	5d                   	pop    %ebp
+80107051:	e9 1a fb ff ff       	jmp    80106b70 <deallocuvm.part.0>
+80107056:	8d 76 00             	lea    0x0(%esi),%esi
+80107059:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80107060:	89 d0                	mov    %edx,%eax
+80107062:	5d                   	pop    %ebp
+80107063:	c3                   	ret    
+80107064:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010706a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80107070 <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+80107070:	55                   	push   %ebp
+80107071:	89 e5                	mov    %esp,%ebp
+80107073:	57                   	push   %edi
+80107074:	56                   	push   %esi
+80107075:	53                   	push   %ebx
+80107076:	83 ec 0c             	sub    $0xc,%esp
+80107079:	8b 75 08             	mov    0x8(%ebp),%esi
+  uint i;
+
+  if(pgdir == 0)
+8010707c:	85 f6                	test   %esi,%esi
+8010707e:	74 59                	je     801070d9 <freevm+0x69>
+80107080:	31 c9                	xor    %ecx,%ecx
+80107082:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80107087:	89 f0                	mov    %esi,%eax
+80107089:	e8 e2 fa ff ff       	call   80106b70 <deallocuvm.part.0>
+8010708e:	89 f3                	mov    %esi,%ebx
+80107090:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80107096:	eb 0f                	jmp    801070a7 <freevm+0x37>
+80107098:	90                   	nop
+80107099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070a0:	83 c3 04             	add    $0x4,%ebx
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+801070a3:	39 fb                	cmp    %edi,%ebx
+801070a5:	74 23                	je     801070ca <freevm+0x5a>
+    if(pgdir[i] & PTE_P){
+801070a7:	8b 03                	mov    (%ebx),%eax
+801070a9:	a8 01                	test   $0x1,%al
+801070ab:	74 f3                	je     801070a0 <freevm+0x30>
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+801070ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+      kfree(v);
+801070b2:	83 ec 0c             	sub    $0xc,%esp
+801070b5:	83 c3 04             	add    $0x4,%ebx
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+801070b8:	05 00 00 00 80       	add    $0x80000000,%eax
+      kfree(v);
+801070bd:	50                   	push   %eax
+801070be:	e8 4d b2 ff ff       	call   80102310 <kfree>
+801070c3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+801070c6:	39 fb                	cmp    %edi,%ebx
+801070c8:	75 dd                	jne    801070a7 <freevm+0x37>
+    }
+  }
+  kfree((char*)pgdir);
+801070ca:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+801070cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070d0:	5b                   	pop    %ebx
+801070d1:	5e                   	pop    %esi
+801070d2:	5f                   	pop    %edi
+801070d3:	5d                   	pop    %ebp
+  kfree((char*)pgdir);
+801070d4:	e9 37 b2 ff ff       	jmp    80102310 <kfree>
+    panic("freevm: no pgdir");
+801070d9:	83 ec 0c             	sub    $0xc,%esp
+801070dc:	68 d9 7d 10 80       	push   $0x80107dd9
+801070e1:	e8 aa 92 ff ff       	call   80100390 <panic>
+801070e6:	8d 76 00             	lea    0x0(%esi),%esi
+801070e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801070f0 <setupkvm>:
+{
+801070f0:	55                   	push   %ebp
+801070f1:	89 e5                	mov    %esp,%ebp
+801070f3:	56                   	push   %esi
+801070f4:	53                   	push   %ebx
+  if((pgdir = (pde_t*)kalloc()) == 0)
+801070f5:	e8 c6 b3 ff ff       	call   801024c0 <kalloc>
+801070fa:	85 c0                	test   %eax,%eax
+801070fc:	89 c6                	mov    %eax,%esi
+801070fe:	74 42                	je     80107142 <setupkvm+0x52>
+  memset(pgdir, 0, PGSIZE);
+80107100:	83 ec 04             	sub    $0x4,%esp
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80107103:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+  memset(pgdir, 0, PGSIZE);
+80107108:	68 00 10 00 00       	push   $0x1000
+8010710d:	6a 00                	push   $0x0
+8010710f:	50                   	push   %eax
+80107110:	e8 2b d7 ff ff       	call   80104840 <memset>
+80107115:	83 c4 10             	add    $0x10,%esp
+                (uint)k->phys_start, k->perm) < 0) {
+80107118:	8b 43 04             	mov    0x4(%ebx),%eax
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+8010711b:	8b 4b 08             	mov    0x8(%ebx),%ecx
+8010711e:	83 ec 08             	sub    $0x8,%esp
+80107121:	8b 13                	mov    (%ebx),%edx
+80107123:	ff 73 0c             	pushl  0xc(%ebx)
+80107126:	50                   	push   %eax
+80107127:	29 c1                	sub    %eax,%ecx
+80107129:	89 f0                	mov    %esi,%eax
+8010712b:	e8 b0 f9 ff ff       	call   80106ae0 <mappages>
+80107130:	83 c4 10             	add    $0x10,%esp
+80107133:	85 c0                	test   %eax,%eax
+80107135:	78 19                	js     80107150 <setupkvm+0x60>
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80107137:	83 c3 10             	add    $0x10,%ebx
+8010713a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80107140:	75 d6                	jne    80107118 <setupkvm+0x28>
+}
+80107142:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107145:	89 f0                	mov    %esi,%eax
+80107147:	5b                   	pop    %ebx
+80107148:	5e                   	pop    %esi
+80107149:	5d                   	pop    %ebp
+8010714a:	c3                   	ret    
+8010714b:	90                   	nop
+8010714c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      freevm(pgdir);
+80107150:	83 ec 0c             	sub    $0xc,%esp
+80107153:	56                   	push   %esi
+      return 0;
+80107154:	31 f6                	xor    %esi,%esi
+      freevm(pgdir);
+80107156:	e8 15 ff ff ff       	call   80107070 <freevm>
+      return 0;
+8010715b:	83 c4 10             	add    $0x10,%esp
+}
+8010715e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107161:	89 f0                	mov    %esi,%eax
+80107163:	5b                   	pop    %ebx
+80107164:	5e                   	pop    %esi
+80107165:	5d                   	pop    %ebp
+80107166:	c3                   	ret    
+80107167:	89 f6                	mov    %esi,%esi
+80107169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107170 <kvmalloc>:
+{
+80107170:	55                   	push   %ebp
+80107171:	89 e5                	mov    %esp,%ebp
+80107173:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+80107176:	e8 75 ff ff ff       	call   801070f0 <setupkvm>
+8010717b:	a3 a4 57 11 80       	mov    %eax,0x801157a4
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80107180:	05 00 00 00 80       	add    $0x80000000,%eax
+80107185:	0f 22 d8             	mov    %eax,%cr3
+}
+80107188:	c9                   	leave  
+80107189:	c3                   	ret    
+8010718a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107190 <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+80107190:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80107191:	31 c9                	xor    %ecx,%ecx
+{
+80107193:	89 e5                	mov    %esp,%ebp
+80107195:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+80107198:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010719b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010719e:	e8 bd f8 ff ff       	call   80106a60 <walkpgdir>
+  if(pte == 0)
+801071a3:	85 c0                	test   %eax,%eax
+801071a5:	74 05                	je     801071ac <clearpteu+0x1c>
+    panic("clearpteu");
+  *pte &= ~PTE_U;
+801071a7:	83 20 fb             	andl   $0xfffffffb,(%eax)
+}
+801071aa:	c9                   	leave  
+801071ab:	c3                   	ret    
+    panic("clearpteu");
+801071ac:	83 ec 0c             	sub    $0xc,%esp
+801071af:	68 ea 7d 10 80       	push   $0x80107dea
+801071b4:	e8 d7 91 ff ff       	call   80100390 <panic>
+801071b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801071c0 <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+801071c0:	55                   	push   %ebp
+801071c1:	89 e5                	mov    %esp,%ebp
+801071c3:	57                   	push   %edi
+801071c4:	56                   	push   %esi
+801071c5:	53                   	push   %ebx
+801071c6:	83 ec 1c             	sub    $0x1c,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+801071c9:	e8 22 ff ff ff       	call   801070f0 <setupkvm>
+801071ce:	85 c0                	test   %eax,%eax
+801071d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801071d3:	0f 84 9f 00 00 00    	je     80107278 <copyuvm+0xb8>
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+801071d9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801071dc:	85 c9                	test   %ecx,%ecx
+801071de:	0f 84 94 00 00 00    	je     80107278 <copyuvm+0xb8>
+801071e4:	31 ff                	xor    %edi,%edi
+801071e6:	eb 4a                	jmp    80107232 <copyuvm+0x72>
+801071e8:	90                   	nop
+801071e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+801071f0:	83 ec 04             	sub    $0x4,%esp
+801071f3:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+801071f9:	68 00 10 00 00       	push   $0x1000
+801071fe:	53                   	push   %ebx
+801071ff:	50                   	push   %eax
+80107200:	e8 eb d6 ff ff       	call   801048f0 <memmove>
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+80107205:	58                   	pop    %eax
+80107206:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+8010720c:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107211:	5a                   	pop    %edx
+80107212:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107215:	50                   	push   %eax
+80107216:	89 fa                	mov    %edi,%edx
+80107218:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010721b:	e8 c0 f8 ff ff       	call   80106ae0 <mappages>
+80107220:	83 c4 10             	add    $0x10,%esp
+80107223:	85 c0                	test   %eax,%eax
+80107225:	78 61                	js     80107288 <copyuvm+0xc8>
+  for(i = 0; i < sz; i += PGSIZE){
+80107227:	81 c7 00 10 00 00    	add    $0x1000,%edi
+8010722d:	39 7d 0c             	cmp    %edi,0xc(%ebp)
+80107230:	76 46                	jbe    80107278 <copyuvm+0xb8>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+80107232:	8b 45 08             	mov    0x8(%ebp),%eax
+80107235:	31 c9                	xor    %ecx,%ecx
+80107237:	89 fa                	mov    %edi,%edx
+80107239:	e8 22 f8 ff ff       	call   80106a60 <walkpgdir>
+8010723e:	85 c0                	test   %eax,%eax
+80107240:	74 61                	je     801072a3 <copyuvm+0xe3>
+    if(!(*pte & PTE_P))
+80107242:	8b 00                	mov    (%eax),%eax
+80107244:	a8 01                	test   $0x1,%al
+80107246:	74 4e                	je     80107296 <copyuvm+0xd6>
+    pa = PTE_ADDR(*pte);
+80107248:	89 c3                	mov    %eax,%ebx
+    flags = PTE_FLAGS(*pte);
+8010724a:	25 ff 0f 00 00       	and    $0xfff,%eax
+    pa = PTE_ADDR(*pte);
+8010724f:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+    flags = PTE_FLAGS(*pte);
+80107255:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if((mem = kalloc()) == 0)
+80107258:	e8 63 b2 ff ff       	call   801024c0 <kalloc>
+8010725d:	85 c0                	test   %eax,%eax
+8010725f:	89 c6                	mov    %eax,%esi
+80107261:	75 8d                	jne    801071f0 <copyuvm+0x30>
+    }
+  }
+  return d;
+
+bad:
+  freevm(d);
+80107263:	83 ec 0c             	sub    $0xc,%esp
+80107266:	ff 75 e0             	pushl  -0x20(%ebp)
+80107269:	e8 02 fe ff ff       	call   80107070 <freevm>
+  return 0;
+8010726e:	83 c4 10             	add    $0x10,%esp
+80107271:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+}
+80107278:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010727b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010727e:	5b                   	pop    %ebx
+8010727f:	5e                   	pop    %esi
+80107280:	5f                   	pop    %edi
+80107281:	5d                   	pop    %ebp
+80107282:	c3                   	ret    
+80107283:	90                   	nop
+80107284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      kfree(mem);
+80107288:	83 ec 0c             	sub    $0xc,%esp
+8010728b:	56                   	push   %esi
+8010728c:	e8 7f b0 ff ff       	call   80102310 <kfree>
+      goto bad;
+80107291:	83 c4 10             	add    $0x10,%esp
+80107294:	eb cd                	jmp    80107263 <copyuvm+0xa3>
+      panic("copyuvm: page not present");
+80107296:	83 ec 0c             	sub    $0xc,%esp
+80107299:	68 0e 7e 10 80       	push   $0x80107e0e
+8010729e:	e8 ed 90 ff ff       	call   80100390 <panic>
+      panic("copyuvm: pte should exist");
+801072a3:	83 ec 0c             	sub    $0xc,%esp
+801072a6:	68 f4 7d 10 80       	push   $0x80107df4
+801072ab:	e8 e0 90 ff ff       	call   80100390 <panic>
+
+801072b0 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+801072b0:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+801072b1:	31 c9                	xor    %ecx,%ecx
+{
+801072b3:	89 e5                	mov    %esp,%ebp
+801072b5:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+801072b8:	8b 55 0c             	mov    0xc(%ebp),%edx
+801072bb:	8b 45 08             	mov    0x8(%ebp),%eax
+801072be:	e8 9d f7 ff ff       	call   80106a60 <walkpgdir>
+  if((*pte & PTE_P) == 0)
+801072c3:	8b 00                	mov    (%eax),%eax
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+}
+801072c5:	c9                   	leave  
+  if((*pte & PTE_U) == 0)
+801072c6:	89 c2                	mov    %eax,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+801072c8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((*pte & PTE_U) == 0)
+801072cd:	83 e2 05             	and    $0x5,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+801072d0:	05 00 00 00 80       	add    $0x80000000,%eax
+801072d5:	83 fa 05             	cmp    $0x5,%edx
+801072d8:	ba 00 00 00 00       	mov    $0x0,%edx
+801072dd:	0f 45 c2             	cmovne %edx,%eax
+}
+801072e0:	c3                   	ret    
+801072e1:	eb 0d                	jmp    801072f0 <copyout>
+801072e3:	90                   	nop
+801072e4:	90                   	nop
+801072e5:	90                   	nop
+801072e6:	90                   	nop
+801072e7:	90                   	nop
+801072e8:	90                   	nop
+801072e9:	90                   	nop
+801072ea:	90                   	nop
+801072eb:	90                   	nop
+801072ec:	90                   	nop
+801072ed:	90                   	nop
+801072ee:	90                   	nop
+801072ef:	90                   	nop
+
+801072f0 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+801072f0:	55                   	push   %ebp
+801072f1:	89 e5                	mov    %esp,%ebp
+801072f3:	57                   	push   %edi
+801072f4:	56                   	push   %esi
+801072f5:	53                   	push   %ebx
+801072f6:	83 ec 1c             	sub    $0x1c,%esp
+801072f9:	8b 5d 14             	mov    0x14(%ebp),%ebx
+801072fc:	8b 55 0c             	mov    0xc(%ebp),%edx
+801072ff:	8b 7d 10             	mov    0x10(%ebp),%edi
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80107302:	85 db                	test   %ebx,%ebx
+80107304:	75 40                	jne    80107346 <copyout+0x56>
+80107306:	eb 70                	jmp    80107378 <copyout+0x88>
+80107308:	90                   	nop
+80107309:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (va - va0);
+80107310:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107313:	89 f1                	mov    %esi,%ecx
+80107315:	29 d1                	sub    %edx,%ecx
+80107317:	81 c1 00 10 00 00    	add    $0x1000,%ecx
+8010731d:	39 d9                	cmp    %ebx,%ecx
+8010731f:	0f 47 cb             	cmova  %ebx,%ecx
+    if(n > len)
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+80107322:	29 f2                	sub    %esi,%edx
+80107324:	83 ec 04             	sub    $0x4,%esp
+80107327:	01 d0                	add    %edx,%eax
+80107329:	51                   	push   %ecx
+8010732a:	57                   	push   %edi
+8010732b:	50                   	push   %eax
+8010732c:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+8010732f:	e8 bc d5 ff ff       	call   801048f0 <memmove>
+    len -= n;
+    buf += n;
+80107334:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+  while(len > 0){
+80107337:	83 c4 10             	add    $0x10,%esp
+    va = va0 + PGSIZE;
+8010733a:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    buf += n;
+80107340:	01 cf                	add    %ecx,%edi
+  while(len > 0){
+80107342:	29 cb                	sub    %ecx,%ebx
+80107344:	74 32                	je     80107378 <copyout+0x88>
+    va0 = (uint)PGROUNDDOWN(va);
+80107346:	89 d6                	mov    %edx,%esi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80107348:	83 ec 08             	sub    $0x8,%esp
+    va0 = (uint)PGROUNDDOWN(va);
+8010734b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+8010734e:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80107354:	56                   	push   %esi
+80107355:	ff 75 08             	pushl  0x8(%ebp)
+80107358:	e8 53 ff ff ff       	call   801072b0 <uva2ka>
+    if(pa0 == 0)
+8010735d:	83 c4 10             	add    $0x10,%esp
+80107360:	85 c0                	test   %eax,%eax
+80107362:	75 ac                	jne    80107310 <copyout+0x20>
+  }
+  return 0;
+}
+80107364:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80107367:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010736c:	5b                   	pop    %ebx
+8010736d:	5e                   	pop    %esi
+8010736e:	5f                   	pop    %edi
+8010736f:	5d                   	pop    %ebp
+80107370:	c3                   	ret    
+80107371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107378:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010737b:	31 c0                	xor    %eax,%eax
+}
+8010737d:	5b                   	pop    %ebx
+8010737e:	5e                   	pop    %esi
+8010737f:	5f                   	pop    %edi
+80107380:	5d                   	pop    %ebp
+80107381:	c3                   	ret    
diff -ruN xv6org/kernel.sym xv6mhybrid/kernel.sym
--- xv6org/kernel.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/kernel.sym	2020-10-15 19:52:19.055698565 +0530
@@ -0,0 +1,532 @@
+80100000 .text
+801073a0 .rodata
+80108000 .data
+8010a520 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 .comment
+00000000 bio.c
+00000000 console.c
+8010a520 cons
+8010a558 panicked
+80100410 consputc
+80100580 printint
+80107410 digits.1551
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+80101110 bfree
+80101180 balloc
+80101290 iget
+80101360 bmap
+80101c60 namex
+00000000 ide.c
+80101f20 idestart
+8010a580 idelock
+8010a560 havedisk1
+8010a564 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kbd.c
+8010a5b4 shift.1389
+80107740 shiftcode
+80107640 togglecode
+80107620 charcode.1390
+80108200 normalmap
+80108100 shiftmap
+80108000 ctlmap
+00000000 lapic.c
+00000000 log.c
+80102a00 install_trans
+80102aa0 write_head
+00000000 main.c
+80102e40 mpmain
+80102e80 mpenter
+00000000 mp.c
+80102fc0 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+80103600 allocproc
+8010a000 first.1599
+8010a5b8 initproc
+80107aa8 states.1625
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+80107b20 syscalls
+00000000 sysfile.c
+80104c90 create
+80104e30 argfd.constprop.0
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80105e60 uartgetc
+8010a5bc uart
+80105e90 uartputc.part.0
+00000000 vm.c
+80106a60 walkpgdir
+80106ae0 mappages
+80106b70 deallocuvm.part.0
+8010a420 kmap
+80100270 consoleread
+801069af vector242
+80106406 vector119
+8010000c entry
+801062e6 vector87
+801062dd vector86
+80104a20 safestrcpy
+80104fd0 sys_close
+80106a1b vector251
+8010630a vector91
+80106100 vector33
+801065ef vector162
+80103d90 yield
+80112680 log
+80112640 kmem
+80106853 vector213
+801063a3 vector108
+80105ee0 uartinit
+8010615a vector43
+80102750 lapiceoi
+80106613 vector165
+80106703 vector185
+80102220 ioapicinit
+801063e2 vector115
+80100f60 fileread
+80106421 vector122
+801058f0 sys_sbrk
+80112760 ioapicid
+801065a7 vector156
+801069d3 vector245
+80112634 ioapic
+80106733 vector189
+80106024 vector7
+801061fc vector61
+801060af vector24
+801063be vector111
+801067b7 vector200
+80106232 vector67
+80105a20 sys_getMaxPid
+801064cf vector138
+80106271 vector74
+80103ba0 sched
+801048f0 memmove
+801061d8 vector57
+80104c30 syscall
+8010685f vector214
+80106352 vector99
+801037e0 cpuid
+80101a60 writei
+801064f3 vector141
+80105870 sys_fork
+8010b5c0 bcache
+80106667 vector172
+801069a3 vector241
+80104610 getcallerpcs
+80105500 sys_mkdir
+80106a33 vector253
+80106000 vector3
+80105ff7 vector2
+80101b90 namecmp
+801068fb vector227
+8010682f vector210
+80104bf0 argstr
+801068d7 vector224
+80106148 vector41
+80100660 cprintf
+80100df0 filedup
+80101ee0 namei
+80106094 vector21
+80100040 binit
+801066a3 vector177
+801063fd vector118
+8010624d vector70
+80106244 vector69
+80106973 vector237
+80106217 vector64
+801060ca vector27
+80106487 vector132
+8010670f vector186
+80104ef0 sys_read
+80106883 vector217
+80104a90 fetchint
+801070f0 setupkvm
+80104950 memcpy
+80107070 freevm
+80105fee vector1
+801066af vector178
+8010612d vector38
+80102310 kfree
+8010697f vector238
+80103760 mycpu
+801017b0 iput
+80106493 vector133
+80106268 vector73
+80106517 vector144
+80105ac0 sys_inc_cpucounter
+80106a3f vector254
+80101440 readsb
+8010a004 nextpid
+80106364 vector101
+8010683b vector211
+80103040 mpinit
+8010667f vector174
+801069bb vector243
+80100d60 fileinit
+80105a80 sys_set_burst_time
+801045f0 initlock
+80106457 vector128
+801072f0 copyout
+801062b0 vector81
+80103de0 sleep
+801042a0 get_burst_time
+80102770 microdelay
+80106052 vector13
+801061a2 vector51
+80106069 vector16
+8010ff20 input
+80106997 vector240
+801061bd vector54
+80106082 vector19
+80106313 vector92
+801069c7 vector244
+80101930 stati
+801064e7 vector140
+801058a0 sys_kill
+8010616c vector45
+8010629e vector79
+80103350 pipeclose
+80106913 vector229
+801065bf vector158
+80105020 sys_fstat
+80100600 consolewrite
+80106136 vector39
+80106637 vector168
+80105ab0 sys_process_state
+80102c10 end_op
+80106112 vector35
+801063d0 vector113
+801023a0 freerange
+8010643c vector125
+80106f10 allocuvm
+80105afa trapret
+80106877 vector216
+8010620e vector63
+801060c1 vector26
+80106763 vector193
+80102630 lapicinit
+80106787 vector196
+80106823 vector209
+80106009 vector4
+8010664f vector170
+8010a5c0 stack
+801064b7 vector136
+8010603d vector10
+801067ff vector206
+80101760 iunlock
+80105940 sys_sleep
+80106a4b vector255
+801066d3 vector181
+801061ea vector59
+801062d4 vector85
+801062cb vector84
+801066eb vector183
+801065cb vector159
+80106847 vector212
+80105070 sys_link
+8010617e vector47
+80106907 vector228
+80106151 vector42
+801063d9 vector114
+80105ad0 sys_dec_burstTime
+801072b0 uva2ka
+8010668b vector175
+8010650b vector143
+80100d80 filealloc
+80103fa0 wakeup
+8010646f vector130
+801069df vector246
+80106034 vector9
+801064ff vector142
+8010635b vector100
+801067c3 vector201
+80107190 clearpteu
+80103800 myproc
+80105b10 tvinit
+80105aa0 sys_get_burst_time
+801061f3 vector60
+801060a6 vector23
+80101650 idup
+80106967 vector236
+80102610 kbdintr
+801053a0 sys_open
+8010692b vector231
+80106229 vector66
+801060dc vector29
+80101960 readi
+801064ab vector135
+80100810 consoleintr
+80104000 kill
+8010628c vector77
+80101510 ialloc
+801066c7 vector180
+801042e0 process_state
+801157a4 kpgdir
+80106817 vector208
+80102810 cmostime
+80105fd0 uartintr
+80106349 vector98
+80106340 vector97
+80106697 vector176
+8010676f vector194
+801060f7 vector32
+80105a40 sys_getProcInfo
+801157a8 end
+801067ab vector199
+8010647b vector131
+80104410 dec_burstTime
+80106a27 vector252
+80100ff0 filewrite
+80105fe5 vector0
+80104b40 argint
+80100a10 exec
+80106523 vector145
+80104f60 sys_write
+801047f0 release
+80104ad0 fetchstr
+8010639a vector107
+8010613f vector40
+80103ea0 wait
+8010636d vector102
+80109000 entrypgdir
+0010000c _start
+801061cf vector56
+8010623b vector68
+8010601b vector6
+8010a48c _binary_initcode_end
+80100000 multiboot_header
+80106463 vector129
+80104480 inc_cpucounter
+80103ac0 scheduler
+80101bb0 dirlookup
+80106793 vector197
+80100e40 fileclose
+80102ba0 begin_op
+80106577 vector152
+80107170 kvmalloc
+8010691f vector230
+80104960 strncmp
+80106124 vector37
+801067f3 vector205
+801065e3 vector161
+80114f60 tickslock
+801033f0 pipewrite
+801049c0 strncpy
+80106256 vector71
+801071c0 copyuvm
+8010ffc0 ftable
+801065d7 vector160
+80104b90 argptr
+8010686b vector215
+801065b3 vector157
+80104e80 sys_dup
+801063c7 vector112
+80100390 panic
+801036f0 forkret
+801066df vector182
+8010604b vector12
+80104890 memcmp
+80102530 kbdgetc
+801063ac vector109
+8010608b vector20
+801039a0 fork
+801061b4 vector53
+80106079 vector18
+0000008a _binary_entryother_size
+80112780 cpus
+80104560 releasesleep
+8010632e vector95
+80104700 holding
+801109c0 sb
+80104730 acquire
+801068ef vector226
+80101f00 nameiparent
+80106190 vector49
+80106163 vector44
+8011267c lapic
+80106295 vector78
+80105ae2 alltraps
+80106673 vector173
+801063f4 vector117
+801062b9 vector82
+801068bf vector222
+80105a30 sys_getNumProc
+8010602d vector8
+80106553 vector149
+801015d0 iupdate
+80108000 data
+80104840 memset
+80106937 vector232
+80102ea0 main
+80106ca0 switchkvm
+80106391 vector106
+801068a7 vector220
+80106301 vector90
+801065fb vector163
+8010694f vector234
+80102d70 log_write
+80104500 acquiresleep
+801051c0 sys_unlink
+80106205 vector62
+801060b8 vector25
+8010679f vector198
+80104260 set_burst_time
+8010640f vector120
+8010a48c _binary_entryother_start
+801023f0 kinit1
+80106199 vector50
+80106060 vector15
+8010656b vector151
+801062c2 vector83
+801062f8 vector89
+801062ef vector88
+80105bc0 trap
+801059f0 sys_uptime
+801066bb vector179
+80106109 vector34
+80106175 vector46
+8010649f vector134
+801068cb vector223
+80114fa0 idt
+8010688f vector218
+80103740 pinit
+80107040 deallocuvm
+801068e3 vector225
+80102730 lapicid
+8010671b vector187
+80103920 growproc
+801045a0 holdingsleep
+801041a0 getMaxPid
+80112d00 ncpu
+801060e5 vector30
+80103830 userinit
+801000d0 bread
+8010644e vector127
+80103500 piperead
+801157a0 ticks
+80106757 vector192
+8010661f vector166
+801009c0 consoleinit
+80106283 vector76
+8010627a vector75
+80102080 ideintr
+8010677b vector195
+8010655f vector150
+801061e1 vector58
+801069f7 vector248
+8010642a vector123
+80106337 vector96
+801060ee vector31
+801067db vector203
+801064db vector139
+80106583 vector153
+80106607 vector164
+80104080 procdump
+80106418 vector121
+80105fa0 uartputc
+80106012 vector5
+8010662b vector167
+8010659b vector155
+80104150 getNumProc
+80106a03 vector249
+801001e0 brelse
+801041f0 getProcInfo
+80106a0f vector250
+80106433 vector124
+801063b5 vector110
+801067e7 vector204
+80101680 ilock
+801056a0 sys_exec
+801064c3 vector137
+8010a460 _binary_initcode_start
+80104a7b swtch
+801069eb vector247
+8010609d vector22
+801067cf vector202
+80106c10 seginit
+80101910 iunlockput
+8010625f vector72
+801061c6 vector55
+80106445 vector126
+80106220 vector65
+801060d3 vector28
+8010a516 _binary_entryother_end
+80106643 vector169
+801001a0 bwrite
+80106943 vector233
+80105b90 idtinit
+80103c60 exit
+80105890 sys_wait
+80105880 sys_exit
+80101e20 dirlink
+0000002c _binary_initcode_size
+8010653b vector147
+801044c0 initsleeplock
+80102000 ideinit
+80106e50 loaduvm
+8010637f vector104
+801063eb vector116
+80112d20 ptable
+801022d0 ioapicenable
+801046a0 popcli
+8010a008 vectors
+801061ab vector52
+80106072 vector17
+801066f7 vector184
+80104a60 strlen
+80105790 sys_pipe
+80101480 iinit
+80103220 picinit
+8010680b vector207
+80106dd0 inituvm
+8010673f vector190
+8010698b vector239
+80106325 vector94
+8010631c vector93
+80102b00 initlog
+80106727 vector188
+80106187 vector48
+80102120 iderw
+8010689b vector219
+80106547 vector148
+801068b3 vector221
+801024c0 kalloc
+80110960 devsw
+801058e0 sys_getpid
+801062a7 vector80
+8010665b vector171
+8010658f vector154
+8010611b vector36
+80103240 pipealloc
+8010695b vector235
+80106388 vector105
+801055f0 sys_chdir
+801109e0 icache
+8010652f vector146
+8010674b vector191
+80106376 vector103
+80105560 sys_mknod
+80102780 lapicstartap
+80106cc0 switchuvm
+80104660 pushcli
+80102460 kinit2
+80106044 vector11
+80106059 vector14
+80100f10 filestat
Binary files xv6org/_kill and xv6mhybrid/_kill differ
diff -ruN xv6org/kill.asm xv6mhybrid/kill.asm
--- xv6org/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/kill.asm	2020-10-15 19:50:34.561716335 +0530
@@ -0,0 +1,1214 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 2c                	jle    49 <main+0x49>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	90                   	nop
+  24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 33                	pushl  (%ebx)
+  2d:	83 c3 04             	add    $0x4,%ebx
+  30:	e8 0b 02 00 00       	call   240 <atoi>
+  35:	89 04 24             	mov    %eax,(%esp)
+  38:	e8 a5 02 00 00       	call   2e2 <kill>
+  for(i=1; i<argc; i++)
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	39 f3                	cmp    %esi,%ebx
+  42:	75 e4                	jne    28 <main+0x28>
+  exit();
+  44:	e8 69 02 00 00       	call   2b2 <exit>
+    printf(2, "usage: kill pid...\n");
+  49:	50                   	push   %eax
+  4a:	50                   	push   %eax
+  4b:	68 98 07 00 00       	push   $0x798
+  50:	6a 02                	push   $0x2
+  52:	e8 e9 03 00 00       	call   440 <printf>
+    exit();
+  57:	e8 56 02 00 00       	call   2b2 <exit>
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 45 08             	mov    0x8(%ebp),%eax
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	0f b6 19             	movzbl (%ecx),%ebx
+  a0:	84 c0                	test   %al,%al
+  a2:	75 1c                	jne    c0 <strcmp+0x30>
+  a4:	eb 2a                	jmp    d0 <strcmp+0x40>
+  a6:	8d 76 00             	lea    0x0(%esi),%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  b0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  b6:	83 c1 01             	add    $0x1,%ecx
+  b9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  bc:	84 c0                	test   %al,%al
+  be:	74 10                	je     d0 <strcmp+0x40>
+  c0:	38 d8                	cmp    %bl,%al
+  c2:	74 ec                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c4:	29 d8                	sub    %ebx,%eax
+}
+  c6:	5b                   	pop    %ebx
+  c7:	5d                   	pop    %ebp
+  c8:	c3                   	ret    
+  c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	89 f6                	mov    %esi,%esi
+  d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 100:	31 c0                	xor    %eax,%eax
+}
+ 102:	5d                   	pop    %ebp
+ 103:	c3                   	ret    
+ 104:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 10a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+    if(*s == c)
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d9                	mov    %ebx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+ 175:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 176:	31 f6                	xor    %esi,%esi
+ 178:	89 f3                	mov    %esi,%ebx
+{
+ 17a:	83 ec 1c             	sub    $0x1c,%esp
+ 17d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 180:	eb 2f                	jmp    1b1 <gets+0x41>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 188:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 18b:	83 ec 04             	sub    $0x4,%esp
+ 18e:	6a 01                	push   $0x1
+ 190:	50                   	push   %eax
+ 191:	6a 00                	push   $0x0
+ 193:	e8 32 01 00 00       	call   2ca <read>
+    if(cc < 1)
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	85 c0                	test   %eax,%eax
+ 19d:	7e 1c                	jle    1bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 19f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a3:	83 c7 01             	add    $0x1,%edi
+ 1a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1a9:	3c 0a                	cmp    $0xa,%al
+ 1ab:	74 23                	je     1d0 <gets+0x60>
+ 1ad:	3c 0d                	cmp    $0xd,%al
+ 1af:	74 1f                	je     1d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1b1:	83 c3 01             	add    $0x1,%ebx
+ 1b4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b7:	89 fe                	mov    %edi,%esi
+ 1b9:	7c cd                	jl     188 <gets+0x18>
+ 1bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c6:	5b                   	pop    %ebx
+ 1c7:	5e                   	pop    %esi
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	90                   	nop
+ 1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	01 de                	add    %ebx,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5e                   	pop    %esi
+ 1e2:	5f                   	pop    %edi
+ 1e3:	5d                   	pop    %ebp
+ 1e4:	c3                   	ret    
+ 1e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 f0 00 00 00       	call   2f2 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f3 00 00 00       	call   30a <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 b9 00 00 00       	call   2da <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	89 f6                	mov    %esi,%esi
+ 239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d 76 00             	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 260:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 263:	83 c1 01             	add    $0x1,%ecx
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	90                   	nop
+ 279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+ 285:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 288:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 db                	test   %ebx,%ebx
+ 290:	7e 14                	jle    2a6 <memmove+0x26>
+ 292:	31 d2                	xor    %edx,%edx
+ 294:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 298:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 29c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 29f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2a2:	39 d3                	cmp    %edx,%ebx
+ 2a4:	75 f2                	jne    298 <memmove+0x18>
+  return vdst;
+}
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+
+000002aa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2aa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <exit>:
+SYSCALL(exit)
+ 2b2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <wait>:
+SYSCALL(wait)
+ 2ba:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <pipe>:
+SYSCALL(pipe)
+ 2c2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <read>:
+SYSCALL(read)
+ 2ca:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <write>:
+SYSCALL(write)
+ 2d2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <close>:
+SYSCALL(close)
+ 2da:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <kill>:
+SYSCALL(kill)
+ 2e2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <exec>:
+SYSCALL(exec)
+ 2ea:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <open>:
+SYSCALL(open)
+ 2f2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <mknod>:
+SYSCALL(mknod)
+ 2fa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <unlink>:
+SYSCALL(unlink)
+ 302:	b8 12 00 00 00       	mov    $0x12,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <fstat>:
+SYSCALL(fstat)
+ 30a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <link>:
+SYSCALL(link)
+ 312:	b8 13 00 00 00       	mov    $0x13,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mkdir>:
+SYSCALL(mkdir)
+ 31a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <chdir>:
+SYSCALL(chdir)
+ 322:	b8 09 00 00 00       	mov    $0x9,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <dup>:
+SYSCALL(dup)
+ 32a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getpid>:
+SYSCALL(getpid)
+ 332:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <sbrk>:
+SYSCALL(sbrk)
+ 33a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <sleep>:
+SYSCALL(sleep)
+ 342:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <uptime>:
+SYSCALL(uptime)
+ 34a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getNumProc>:
+SYSCALL(getNumProc)
+ 352:	b8 16 00 00 00       	mov    $0x16,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 35a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 362:	b8 18 00 00 00       	mov    $0x18,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 36a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 372:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <process_state>:
+SYSCALL(process_state)
+ 37a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 382:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <inc_cpucounter>:
+ 38a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+ 392:	66 90                	xchg   %ax,%ax
+ 394:	66 90                	xchg   %ax,%ax
+ 396:	66 90                	xchg   %ax,%ax
+ 398:	66 90                	xchg   %ax,%ax
+ 39a:	66 90                	xchg   %ax,%ax
+ 39c:	66 90                	xchg   %ax,%ax
+ 39e:	66 90                	xchg   %ax,%ax
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3a9:	85 d2                	test   %edx,%edx
+{
+ 3ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ae:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3b0:	79 76                	jns    428 <printint+0x88>
+ 3b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3b6:	74 70                	je     428 <printint+0x88>
+    x = -xx;
+ 3b8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c1:	31 f6                	xor    %esi,%esi
+ 3c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3c6:	eb 0a                	jmp    3d2 <printint+0x32>
+ 3c8:	90                   	nop
+ 3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 fe                	mov    %edi,%esi
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3d7:	f7 f1                	div    %ecx
+ 3d9:	0f b6 92 b4 07 00 00 	movzbl 0x7b4(%edx),%edx
+  }while((x /= base) != 0);
+ 3e0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3e5:	75 e9                	jne    3d0 <printint+0x30>
+  if(neg)
+ 3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ea:	85 c0                	test   %eax,%eax
+ 3ec:	74 08                	je     3f6 <printint+0x56>
+    buf[i++] = '-';
+ 3ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3f3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 400:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 403:	83 ec 04             	sub    $0x4,%esp
+ 406:	83 ee 01             	sub    $0x1,%esi
+ 409:	6a 01                	push   $0x1
+ 40b:	53                   	push   %ebx
+ 40c:	57                   	push   %edi
+ 40d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 410:	e8 bd fe ff ff       	call   2d2 <write>
+
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 42f:	eb 90                	jmp    3c1 <printint+0x21>
+ 431:	eb 0d                	jmp    440 <printf>
+ 433:	90                   	nop
+ 434:	90                   	nop
+ 435:	90                   	nop
+ 436:	90                   	nop
+ 437:	90                   	nop
+ 438:	90                   	nop
+ 439:	90                   	nop
+ 43a:	90                   	nop
+ 43b:	90                   	nop
+ 43c:	90                   	nop
+ 43d:	90                   	nop
+ 43e:	90                   	nop
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 449:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 44c:	0f b6 1e             	movzbl (%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	0f 84 b3 00 00 00    	je     50a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 457:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 45d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 45f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 462:	eb 2f                	jmp    493 <printf+0x53>
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	0f 84 a7 00 00 00    	je     518 <printf+0xd8>
+  write(fd, &c, 1);
+ 471:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 474:	83 ec 04             	sub    $0x4,%esp
+ 477:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 47a:	6a 01                	push   $0x1
+ 47c:	50                   	push   %eax
+ 47d:	ff 75 08             	pushl  0x8(%ebp)
+ 480:	e8 4d fe ff ff       	call   2d2 <write>
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 48b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 48f:	84 db                	test   %bl,%bl
+ 491:	74 77                	je     50a <printf+0xca>
+    if(state == 0){
+ 493:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 495:	0f be cb             	movsbl %bl,%ecx
+ 498:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 49b:	74 cb                	je     468 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 49d:	83 ff 25             	cmp    $0x25,%edi
+ 4a0:	75 e6                	jne    488 <printf+0x48>
+      if(c == 'd'){
+ 4a2:	83 f8 64             	cmp    $0x64,%eax
+ 4a5:	0f 84 05 01 00 00    	je     5b0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4b1:	83 f9 70             	cmp    $0x70,%ecx
+ 4b4:	74 72                	je     528 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b6:	83 f8 73             	cmp    $0x73,%eax
+ 4b9:	0f 84 99 00 00 00    	je     558 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4bf:	83 f8 63             	cmp    $0x63,%eax
+ 4c2:	0f 84 08 01 00 00    	je     5d0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c8:	83 f8 25             	cmp    $0x25,%eax
+ 4cb:	0f 84 ef 00 00 00    	je     5c0 <printf+0x180>
+  write(fd, &c, 1);
+ 4d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4d4:	83 ec 04             	sub    $0x4,%esp
+ 4d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4db:	6a 01                	push   $0x1
+ 4dd:	50                   	push   %eax
+ 4de:	ff 75 08             	pushl  0x8(%ebp)
+ 4e1:	e8 ec fd ff ff       	call   2d2 <write>
+ 4e6:	83 c4 0c             	add    $0xc,%esp
+ 4e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ef:	6a 01                	push   $0x1
+ 4f1:	50                   	push   %eax
+ 4f2:	ff 75 08             	pushl  0x8(%ebp)
+ 4f5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4f8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4fa:	e8 d3 fd ff ff       	call   2d2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 503:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 506:	84 db                	test   %bl,%bl
+ 508:	75 89                	jne    493 <printf+0x53>
+    }
+  }
+}
+ 50a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50d:	5b                   	pop    %ebx
+ 50e:	5e                   	pop    %esi
+ 50f:	5f                   	pop    %edi
+ 510:	5d                   	pop    %ebp
+ 511:	c3                   	ret    
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 518:	bf 25 00 00 00       	mov    $0x25,%edi
+ 51d:	e9 66 ff ff ff       	jmp    488 <printf+0x48>
+ 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 528:	83 ec 0c             	sub    $0xc,%esp
+ 52b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 530:	6a 00                	push   $0x0
+ 532:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 535:	8b 45 08             	mov    0x8(%ebp),%eax
+ 538:	8b 17                	mov    (%edi),%edx
+ 53a:	e8 61 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 53f:	89 f8                	mov    %edi,%eax
+ 541:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 544:	31 ff                	xor    %edi,%edi
+        ap++;
+ 546:	83 c0 04             	add    $0x4,%eax
+ 549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 54c:	e9 37 ff ff ff       	jmp    488 <printf+0x48>
+ 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 558:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 55b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 55d:	83 c0 04             	add    $0x4,%eax
+ 560:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 563:	85 c9                	test   %ecx,%ecx
+ 565:	0f 84 8e 00 00 00    	je     5f9 <printf+0x1b9>
+        while(*s != 0){
+ 56b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 56e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 570:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 572:	84 c0                	test   %al,%al
+ 574:	0f 84 0e ff ff ff    	je     488 <printf+0x48>
+ 57a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 57d:	89 de                	mov    %ebx,%esi
+ 57f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 582:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 585:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 588:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 58b:	83 c6 01             	add    $0x1,%esi
+ 58e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 591:	6a 01                	push   $0x1
+ 593:	57                   	push   %edi
+ 594:	53                   	push   %ebx
+ 595:	e8 38 fd ff ff       	call   2d2 <write>
+        while(*s != 0){
+ 59a:	0f b6 06             	movzbl (%esi),%eax
+ 59d:	83 c4 10             	add    $0x10,%esp
+ 5a0:	84 c0                	test   %al,%al
+ 5a2:	75 e4                	jne    588 <printf+0x148>
+ 5a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5a7:	31 ff                	xor    %edi,%edi
+ 5a9:	e9 da fe ff ff       	jmp    488 <printf+0x48>
+ 5ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	e9 73 ff ff ff       	jmp    532 <printf+0xf2>
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+ 5c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	e9 21 ff ff ff       	jmp    4f1 <printf+0xb1>
+        putc(fd, *ap);
+ 5d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5d6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5d8:	6a 01                	push   $0x1
+        ap++;
+ 5da:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5e3:	50                   	push   %eax
+ 5e4:	ff 75 08             	pushl  0x8(%ebp)
+ 5e7:	e8 e6 fc ff ff       	call   2d2 <write>
+        ap++;
+ 5ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5ef:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5f2:	31 ff                	xor    %edi,%edi
+ 5f4:	e9 8f fe ff ff       	jmp    488 <printf+0x48>
+          s = "(null)";
+ 5f9:	bb ac 07 00 00       	mov    $0x7ac,%ebx
+        while(*s != 0){
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	e9 72 ff ff ff       	jmp    57a <printf+0x13a>
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 611:	a1 60 0a 00 00       	mov    0xa60,%eax
+{
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 628:	39 c8                	cmp    %ecx,%eax
+ 62a:	8b 10                	mov    (%eax),%edx
+ 62c:	73 32                	jae    660 <free+0x50>
+ 62e:	39 d1                	cmp    %edx,%ecx
+ 630:	72 04                	jb     636 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 632:	39 d0                	cmp    %edx,%eax
+ 634:	72 32                	jb     668 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63c:	39 fa                	cmp    %edi,%edx
+ 63e:	74 30                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 643:	8b 50 04             	mov    0x4(%eax),%edx
+ 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 649:	39 f1                	cmp    %esi,%ecx
+ 64b:	74 3a                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 64f:	a3 60 0a 00 00       	mov    %eax,0xa60
+}
+ 654:	5b                   	pop    %ebx
+ 655:	5e                   	pop    %esi
+ 656:	5f                   	pop    %edi
+ 657:	5d                   	pop    %ebp
+ 658:	c3                   	ret    
+ 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 04                	jb     668 <free+0x58>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	72 ce                	jb     636 <free+0x26>
+{
+ 668:	89 d0                	mov    %edx,%eax
+ 66a:	eb bc                	jmp    628 <free+0x18>
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 c6                	jne    64d <free+0x3d>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 60 0a 00 00       	mov    %eax,0xa60
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ac:	8b 15 60 0a 00 00    	mov    0xa60,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6b5:	c1 ef 03             	shr    $0x3,%edi
+ 6b8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6bb:	85 d2                	test   %edx,%edx
+ 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
+ 6c3:	8b 02                	mov    (%edx),%eax
+ 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6c8:	39 cf                	cmp    %ecx,%edi
+ 6ca:	76 6c                	jbe    738 <malloc+0x98>
+ 6cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6e1:	eb 0e                	jmp    6f1 <malloc+0x51>
+ 6e3:	90                   	nop
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ed:	39 f9                	cmp    %edi,%ecx
+ 6ef:	73 47                	jae    738 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 05 60 0a 00 00    	cmp    %eax,0xa60
+ 6f7:	89 c2                	mov    %eax,%edx
+ 6f9:	75 ed                	jne    6e8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	56                   	push   %esi
+ 6ff:	e8 36 fc ff ff       	call   33a <sbrk>
+  if(p == (char*)-1)
+ 704:	83 c4 10             	add    $0x10,%esp
+ 707:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 70a:	74 1c                	je     728 <malloc+0x88>
+  hp->s.size = nu;
+ 70c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70f:	83 ec 0c             	sub    $0xc,%esp
+ 712:	83 c0 08             	add    $0x8,%eax
+ 715:	50                   	push   %eax
+ 716:	e8 f5 fe ff ff       	call   610 <free>
+  return freep;
+ 71b:	8b 15 60 0a 00 00    	mov    0xa60,%edx
+      if((p = morecore(nunits)) == 0)
+ 721:	83 c4 10             	add    $0x10,%esp
+ 724:	85 d2                	test   %edx,%edx
+ 726:	75 c0                	jne    6e8 <malloc+0x48>
+        return 0;
+  }
+}
+ 728:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 72b:	31 c0                	xor    %eax,%eax
+}
+ 72d:	5b                   	pop    %ebx
+ 72e:	5e                   	pop    %esi
+ 72f:	5f                   	pop    %edi
+ 730:	5d                   	pop    %ebp
+ 731:	c3                   	ret    
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	74 54                	je     790 <malloc+0xf0>
+        p->s.size -= nunits;
+ 73c:	29 f9                	sub    %edi,%ecx
+ 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 744:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 747:	89 15 60 0a 00 00    	mov    %edx,0xa60
+}
+ 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 750:	83 c0 08             	add    $0x8,%eax
+}
+ 753:	5b                   	pop    %ebx
+ 754:	5e                   	pop    %esi
+ 755:	5f                   	pop    %edi
+ 756:	5d                   	pop    %ebp
+ 757:	c3                   	ret    
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 60 0a 00 00 64 	movl   $0xa64,0xa60
+ 767:	0a 00 00 
+ 76a:	c7 05 64 0a 00 00 64 	movl   $0xa64,0xa64
+ 771:	0a 00 00 
+    base.s.size = 0;
+ 774:	b8 64 0a 00 00       	mov    $0xa64,%eax
+ 779:	c7 05 68 0a 00 00 00 	movl   $0x0,0xa68
+ 780:	00 00 00 
+ 783:	e9 44 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 788:	90                   	nop
+ 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b1                	jmp    747 <malloc+0xa7>
diff -ruN xv6org/kill.d xv6mhybrid/kill.d
--- xv6org/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/kill.d	2020-10-15 19:50:34.409726242 +0530
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/kill.o and xv6mhybrid/kill.o differ
diff -ruN xv6org/kill.sym xv6mhybrid/kill.sym
--- xv6org/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/kill.sym	2020-10-15 19:50:34.569715813 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000798 .rodata
+000007c8 .eh_frame
+00000a60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007b4 digits.1056
+00000000 umalloc.c
+00000a60 freep
+00000a64 base
+00000060 strcpy
+00000440 printf
+00000280 memmove
+000002fa mknod
+00000170 gets
+00000332 getpid
+000006a0 malloc
+00000342 sleep
+00000372 get_burst_time
+000002c2 pipe
+000002d2 write
+0000030a fstat
+000002e2 kill
+0000037a process_state
+00000322 chdir
+00000382 dec_burstTime
+000002ea exec
+000002ba wait
+0000038a inc_cpucounter
+000002ca read
+00000302 unlink
+000002aa fork
+0000033a sbrk
+0000034a uptime
+00000a60 __bss_start
+00000110 memset
+00000000 main
+0000036a set_burst_time
+00000090 strcmp
+0000032a dup
+0000035a getMaxPid
+00000352 getNumProc
+00000362 getProcInfo
+000001f0 stat
+00000a60 _edata
+00000a6c _end
+00000312 link
+000002b2 exit
+00000240 atoi
+000000e0 strlen
+000002f2 open
+00000130 strchr
+0000031a mkdir
+000002da close
+00000610 free
diff -ruN xv6org/lapic.d xv6mhybrid/lapic.d
--- xv6org/lapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/lapic.d	2020-10-15 19:50:36.281604602 +0530
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files xv6org/lapic.o and xv6mhybrid/lapic.o differ
Binary files xv6org/_ln and xv6mhybrid/_ln differ
diff -ruN xv6org/ln.asm xv6mhybrid/ln.asm
--- xv6org/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ln.asm	2020-10-15 19:50:34.693707731 +0530
@@ -0,0 +1,1212 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  if(argc != 3){
+   7:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+   a:	ff 71 fc             	pushl  -0x4(%ecx)
+   d:	55                   	push   %ebp
+   e:	89 e5                	mov    %esp,%ebp
+  10:	53                   	push   %ebx
+  11:	51                   	push   %ecx
+  12:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  15:	74 13                	je     2a <main+0x2a>
+    printf(2, "Usage: ln old new\n");
+  17:	52                   	push   %edx
+  18:	52                   	push   %edx
+  19:	68 98 07 00 00       	push   $0x798
+  1e:	6a 02                	push   $0x2
+  20:	e8 1b 04 00 00       	call   440 <printf>
+    exit();
+  25:	e8 88 02 00 00       	call   2b2 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2a:	50                   	push   %eax
+  2b:	50                   	push   %eax
+  2c:	ff 73 08             	pushl  0x8(%ebx)
+  2f:	ff 73 04             	pushl  0x4(%ebx)
+  32:	e8 db 02 00 00       	call   312 <link>
+  37:	83 c4 10             	add    $0x10,%esp
+  3a:	85 c0                	test   %eax,%eax
+  3c:	78 05                	js     43 <main+0x43>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  3e:	e8 6f 02 00 00       	call   2b2 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  43:	ff 73 08             	pushl  0x8(%ebx)
+  46:	ff 73 04             	pushl  0x4(%ebx)
+  49:	68 ab 07 00 00       	push   $0x7ab
+  4e:	6a 02                	push   $0x2
+  50:	e8 eb 03 00 00       	call   440 <printf>
+  55:	83 c4 10             	add    $0x10,%esp
+  58:	eb e4                	jmp    3e <main+0x3e>
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 45 08             	mov    0x8(%ebp),%eax
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	0f b6 19             	movzbl (%ecx),%ebx
+  a0:	84 c0                	test   %al,%al
+  a2:	75 1c                	jne    c0 <strcmp+0x30>
+  a4:	eb 2a                	jmp    d0 <strcmp+0x40>
+  a6:	8d 76 00             	lea    0x0(%esi),%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  b0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  b6:	83 c1 01             	add    $0x1,%ecx
+  b9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  bc:	84 c0                	test   %al,%al
+  be:	74 10                	je     d0 <strcmp+0x40>
+  c0:	38 d8                	cmp    %bl,%al
+  c2:	74 ec                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c4:	29 d8                	sub    %ebx,%eax
+}
+  c6:	5b                   	pop    %ebx
+  c7:	5d                   	pop    %ebp
+  c8:	c3                   	ret    
+  c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	89 f6                	mov    %esi,%esi
+  d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 100:	31 c0                	xor    %eax,%eax
+}
+ 102:	5d                   	pop    %ebp
+ 103:	c3                   	ret    
+ 104:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 10a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+    if(*s == c)
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d9                	mov    %ebx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+ 175:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 176:	31 f6                	xor    %esi,%esi
+ 178:	89 f3                	mov    %esi,%ebx
+{
+ 17a:	83 ec 1c             	sub    $0x1c,%esp
+ 17d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 180:	eb 2f                	jmp    1b1 <gets+0x41>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 188:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 18b:	83 ec 04             	sub    $0x4,%esp
+ 18e:	6a 01                	push   $0x1
+ 190:	50                   	push   %eax
+ 191:	6a 00                	push   $0x0
+ 193:	e8 32 01 00 00       	call   2ca <read>
+    if(cc < 1)
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	85 c0                	test   %eax,%eax
+ 19d:	7e 1c                	jle    1bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 19f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a3:	83 c7 01             	add    $0x1,%edi
+ 1a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1a9:	3c 0a                	cmp    $0xa,%al
+ 1ab:	74 23                	je     1d0 <gets+0x60>
+ 1ad:	3c 0d                	cmp    $0xd,%al
+ 1af:	74 1f                	je     1d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1b1:	83 c3 01             	add    $0x1,%ebx
+ 1b4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b7:	89 fe                	mov    %edi,%esi
+ 1b9:	7c cd                	jl     188 <gets+0x18>
+ 1bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c6:	5b                   	pop    %ebx
+ 1c7:	5e                   	pop    %esi
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	90                   	nop
+ 1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	01 de                	add    %ebx,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5e                   	pop    %esi
+ 1e2:	5f                   	pop    %edi
+ 1e3:	5d                   	pop    %ebp
+ 1e4:	c3                   	ret    
+ 1e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 f0 00 00 00       	call   2f2 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f3 00 00 00       	call   30a <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 b9 00 00 00       	call   2da <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	89 f6                	mov    %esi,%esi
+ 239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d 76 00             	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 260:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 263:	83 c1 01             	add    $0x1,%ecx
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	90                   	nop
+ 279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+ 285:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 288:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 db                	test   %ebx,%ebx
+ 290:	7e 14                	jle    2a6 <memmove+0x26>
+ 292:	31 d2                	xor    %edx,%edx
+ 294:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 298:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 29c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 29f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2a2:	39 d3                	cmp    %edx,%ebx
+ 2a4:	75 f2                	jne    298 <memmove+0x18>
+  return vdst;
+}
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+
+000002aa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2aa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <exit>:
+SYSCALL(exit)
+ 2b2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <wait>:
+SYSCALL(wait)
+ 2ba:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <pipe>:
+SYSCALL(pipe)
+ 2c2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <read>:
+SYSCALL(read)
+ 2ca:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <write>:
+SYSCALL(write)
+ 2d2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <close>:
+SYSCALL(close)
+ 2da:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <kill>:
+SYSCALL(kill)
+ 2e2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <exec>:
+SYSCALL(exec)
+ 2ea:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <open>:
+SYSCALL(open)
+ 2f2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <mknod>:
+SYSCALL(mknod)
+ 2fa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <unlink>:
+SYSCALL(unlink)
+ 302:	b8 12 00 00 00       	mov    $0x12,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <fstat>:
+SYSCALL(fstat)
+ 30a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <link>:
+SYSCALL(link)
+ 312:	b8 13 00 00 00       	mov    $0x13,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mkdir>:
+SYSCALL(mkdir)
+ 31a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <chdir>:
+SYSCALL(chdir)
+ 322:	b8 09 00 00 00       	mov    $0x9,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <dup>:
+SYSCALL(dup)
+ 32a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getpid>:
+SYSCALL(getpid)
+ 332:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <sbrk>:
+SYSCALL(sbrk)
+ 33a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <sleep>:
+SYSCALL(sleep)
+ 342:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <uptime>:
+SYSCALL(uptime)
+ 34a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getNumProc>:
+SYSCALL(getNumProc)
+ 352:	b8 16 00 00 00       	mov    $0x16,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 35a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 362:	b8 18 00 00 00       	mov    $0x18,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 36a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 372:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <process_state>:
+SYSCALL(process_state)
+ 37a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 382:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <inc_cpucounter>:
+ 38a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+ 392:	66 90                	xchg   %ax,%ax
+ 394:	66 90                	xchg   %ax,%ax
+ 396:	66 90                	xchg   %ax,%ax
+ 398:	66 90                	xchg   %ax,%ax
+ 39a:	66 90                	xchg   %ax,%ax
+ 39c:	66 90                	xchg   %ax,%ax
+ 39e:	66 90                	xchg   %ax,%ax
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3a9:	85 d2                	test   %edx,%edx
+{
+ 3ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ae:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3b0:	79 76                	jns    428 <printint+0x88>
+ 3b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3b6:	74 70                	je     428 <printint+0x88>
+    x = -xx;
+ 3b8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c1:	31 f6                	xor    %esi,%esi
+ 3c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3c6:	eb 0a                	jmp    3d2 <printint+0x32>
+ 3c8:	90                   	nop
+ 3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 fe                	mov    %edi,%esi
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3d7:	f7 f1                	div    %ecx
+ 3d9:	0f b6 92 c8 07 00 00 	movzbl 0x7c8(%edx),%edx
+  }while((x /= base) != 0);
+ 3e0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3e5:	75 e9                	jne    3d0 <printint+0x30>
+  if(neg)
+ 3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ea:	85 c0                	test   %eax,%eax
+ 3ec:	74 08                	je     3f6 <printint+0x56>
+    buf[i++] = '-';
+ 3ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3f3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 400:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 403:	83 ec 04             	sub    $0x4,%esp
+ 406:	83 ee 01             	sub    $0x1,%esi
+ 409:	6a 01                	push   $0x1
+ 40b:	53                   	push   %ebx
+ 40c:	57                   	push   %edi
+ 40d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 410:	e8 bd fe ff ff       	call   2d2 <write>
+
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 42f:	eb 90                	jmp    3c1 <printint+0x21>
+ 431:	eb 0d                	jmp    440 <printf>
+ 433:	90                   	nop
+ 434:	90                   	nop
+ 435:	90                   	nop
+ 436:	90                   	nop
+ 437:	90                   	nop
+ 438:	90                   	nop
+ 439:	90                   	nop
+ 43a:	90                   	nop
+ 43b:	90                   	nop
+ 43c:	90                   	nop
+ 43d:	90                   	nop
+ 43e:	90                   	nop
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 449:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 44c:	0f b6 1e             	movzbl (%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	0f 84 b3 00 00 00    	je     50a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 457:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 45d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 45f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 462:	eb 2f                	jmp    493 <printf+0x53>
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	0f 84 a7 00 00 00    	je     518 <printf+0xd8>
+  write(fd, &c, 1);
+ 471:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 474:	83 ec 04             	sub    $0x4,%esp
+ 477:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 47a:	6a 01                	push   $0x1
+ 47c:	50                   	push   %eax
+ 47d:	ff 75 08             	pushl  0x8(%ebp)
+ 480:	e8 4d fe ff ff       	call   2d2 <write>
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 48b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 48f:	84 db                	test   %bl,%bl
+ 491:	74 77                	je     50a <printf+0xca>
+    if(state == 0){
+ 493:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 495:	0f be cb             	movsbl %bl,%ecx
+ 498:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 49b:	74 cb                	je     468 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 49d:	83 ff 25             	cmp    $0x25,%edi
+ 4a0:	75 e6                	jne    488 <printf+0x48>
+      if(c == 'd'){
+ 4a2:	83 f8 64             	cmp    $0x64,%eax
+ 4a5:	0f 84 05 01 00 00    	je     5b0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4b1:	83 f9 70             	cmp    $0x70,%ecx
+ 4b4:	74 72                	je     528 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b6:	83 f8 73             	cmp    $0x73,%eax
+ 4b9:	0f 84 99 00 00 00    	je     558 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4bf:	83 f8 63             	cmp    $0x63,%eax
+ 4c2:	0f 84 08 01 00 00    	je     5d0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c8:	83 f8 25             	cmp    $0x25,%eax
+ 4cb:	0f 84 ef 00 00 00    	je     5c0 <printf+0x180>
+  write(fd, &c, 1);
+ 4d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4d4:	83 ec 04             	sub    $0x4,%esp
+ 4d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4db:	6a 01                	push   $0x1
+ 4dd:	50                   	push   %eax
+ 4de:	ff 75 08             	pushl  0x8(%ebp)
+ 4e1:	e8 ec fd ff ff       	call   2d2 <write>
+ 4e6:	83 c4 0c             	add    $0xc,%esp
+ 4e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ef:	6a 01                	push   $0x1
+ 4f1:	50                   	push   %eax
+ 4f2:	ff 75 08             	pushl  0x8(%ebp)
+ 4f5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4f8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4fa:	e8 d3 fd ff ff       	call   2d2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 503:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 506:	84 db                	test   %bl,%bl
+ 508:	75 89                	jne    493 <printf+0x53>
+    }
+  }
+}
+ 50a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50d:	5b                   	pop    %ebx
+ 50e:	5e                   	pop    %esi
+ 50f:	5f                   	pop    %edi
+ 510:	5d                   	pop    %ebp
+ 511:	c3                   	ret    
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 518:	bf 25 00 00 00       	mov    $0x25,%edi
+ 51d:	e9 66 ff ff ff       	jmp    488 <printf+0x48>
+ 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 528:	83 ec 0c             	sub    $0xc,%esp
+ 52b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 530:	6a 00                	push   $0x0
+ 532:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 535:	8b 45 08             	mov    0x8(%ebp),%eax
+ 538:	8b 17                	mov    (%edi),%edx
+ 53a:	e8 61 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 53f:	89 f8                	mov    %edi,%eax
+ 541:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 544:	31 ff                	xor    %edi,%edi
+        ap++;
+ 546:	83 c0 04             	add    $0x4,%eax
+ 549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 54c:	e9 37 ff ff ff       	jmp    488 <printf+0x48>
+ 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 558:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 55b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 55d:	83 c0 04             	add    $0x4,%eax
+ 560:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 563:	85 c9                	test   %ecx,%ecx
+ 565:	0f 84 8e 00 00 00    	je     5f9 <printf+0x1b9>
+        while(*s != 0){
+ 56b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 56e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 570:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 572:	84 c0                	test   %al,%al
+ 574:	0f 84 0e ff ff ff    	je     488 <printf+0x48>
+ 57a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 57d:	89 de                	mov    %ebx,%esi
+ 57f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 582:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 585:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 588:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 58b:	83 c6 01             	add    $0x1,%esi
+ 58e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 591:	6a 01                	push   $0x1
+ 593:	57                   	push   %edi
+ 594:	53                   	push   %ebx
+ 595:	e8 38 fd ff ff       	call   2d2 <write>
+        while(*s != 0){
+ 59a:	0f b6 06             	movzbl (%esi),%eax
+ 59d:	83 c4 10             	add    $0x10,%esp
+ 5a0:	84 c0                	test   %al,%al
+ 5a2:	75 e4                	jne    588 <printf+0x148>
+ 5a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5a7:	31 ff                	xor    %edi,%edi
+ 5a9:	e9 da fe ff ff       	jmp    488 <printf+0x48>
+ 5ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	e9 73 ff ff ff       	jmp    532 <printf+0xf2>
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+ 5c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	e9 21 ff ff ff       	jmp    4f1 <printf+0xb1>
+        putc(fd, *ap);
+ 5d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5d6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5d8:	6a 01                	push   $0x1
+        ap++;
+ 5da:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5e3:	50                   	push   %eax
+ 5e4:	ff 75 08             	pushl  0x8(%ebp)
+ 5e7:	e8 e6 fc ff ff       	call   2d2 <write>
+        ap++;
+ 5ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5ef:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5f2:	31 ff                	xor    %edi,%edi
+ 5f4:	e9 8f fe ff ff       	jmp    488 <printf+0x48>
+          s = "(null)";
+ 5f9:	bb bf 07 00 00       	mov    $0x7bf,%ebx
+        while(*s != 0){
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	e9 72 ff ff ff       	jmp    57a <printf+0x13a>
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 611:	a1 70 0a 00 00       	mov    0xa70,%eax
+{
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 628:	39 c8                	cmp    %ecx,%eax
+ 62a:	8b 10                	mov    (%eax),%edx
+ 62c:	73 32                	jae    660 <free+0x50>
+ 62e:	39 d1                	cmp    %edx,%ecx
+ 630:	72 04                	jb     636 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 632:	39 d0                	cmp    %edx,%eax
+ 634:	72 32                	jb     668 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63c:	39 fa                	cmp    %edi,%edx
+ 63e:	74 30                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 643:	8b 50 04             	mov    0x4(%eax),%edx
+ 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 649:	39 f1                	cmp    %esi,%ecx
+ 64b:	74 3a                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 64f:	a3 70 0a 00 00       	mov    %eax,0xa70
+}
+ 654:	5b                   	pop    %ebx
+ 655:	5e                   	pop    %esi
+ 656:	5f                   	pop    %edi
+ 657:	5d                   	pop    %ebp
+ 658:	c3                   	ret    
+ 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 04                	jb     668 <free+0x58>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	72 ce                	jb     636 <free+0x26>
+{
+ 668:	89 d0                	mov    %edx,%eax
+ 66a:	eb bc                	jmp    628 <free+0x18>
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 c6                	jne    64d <free+0x3d>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 70 0a 00 00       	mov    %eax,0xa70
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ac:	8b 15 70 0a 00 00    	mov    0xa70,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6b5:	c1 ef 03             	shr    $0x3,%edi
+ 6b8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6bb:	85 d2                	test   %edx,%edx
+ 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
+ 6c3:	8b 02                	mov    (%edx),%eax
+ 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6c8:	39 cf                	cmp    %ecx,%edi
+ 6ca:	76 6c                	jbe    738 <malloc+0x98>
+ 6cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6e1:	eb 0e                	jmp    6f1 <malloc+0x51>
+ 6e3:	90                   	nop
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ed:	39 f9                	cmp    %edi,%ecx
+ 6ef:	73 47                	jae    738 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 05 70 0a 00 00    	cmp    %eax,0xa70
+ 6f7:	89 c2                	mov    %eax,%edx
+ 6f9:	75 ed                	jne    6e8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	56                   	push   %esi
+ 6ff:	e8 36 fc ff ff       	call   33a <sbrk>
+  if(p == (char*)-1)
+ 704:	83 c4 10             	add    $0x10,%esp
+ 707:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 70a:	74 1c                	je     728 <malloc+0x88>
+  hp->s.size = nu;
+ 70c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70f:	83 ec 0c             	sub    $0xc,%esp
+ 712:	83 c0 08             	add    $0x8,%eax
+ 715:	50                   	push   %eax
+ 716:	e8 f5 fe ff ff       	call   610 <free>
+  return freep;
+ 71b:	8b 15 70 0a 00 00    	mov    0xa70,%edx
+      if((p = morecore(nunits)) == 0)
+ 721:	83 c4 10             	add    $0x10,%esp
+ 724:	85 d2                	test   %edx,%edx
+ 726:	75 c0                	jne    6e8 <malloc+0x48>
+        return 0;
+  }
+}
+ 728:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 72b:	31 c0                	xor    %eax,%eax
+}
+ 72d:	5b                   	pop    %ebx
+ 72e:	5e                   	pop    %esi
+ 72f:	5f                   	pop    %edi
+ 730:	5d                   	pop    %ebp
+ 731:	c3                   	ret    
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	74 54                	je     790 <malloc+0xf0>
+        p->s.size -= nunits;
+ 73c:	29 f9                	sub    %edi,%ecx
+ 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 744:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 747:	89 15 70 0a 00 00    	mov    %edx,0xa70
+}
+ 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 750:	83 c0 08             	add    $0x8,%eax
+}
+ 753:	5b                   	pop    %ebx
+ 754:	5e                   	pop    %esi
+ 755:	5f                   	pop    %edi
+ 756:	5d                   	pop    %ebp
+ 757:	c3                   	ret    
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 70 0a 00 00 74 	movl   $0xa74,0xa70
+ 767:	0a 00 00 
+ 76a:	c7 05 74 0a 00 00 74 	movl   $0xa74,0xa74
+ 771:	0a 00 00 
+    base.s.size = 0;
+ 774:	b8 74 0a 00 00       	mov    $0xa74,%eax
+ 779:	c7 05 78 0a 00 00 00 	movl   $0x0,0xa78
+ 780:	00 00 00 
+ 783:	e9 44 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 788:	90                   	nop
+ 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b1                	jmp    747 <malloc+0xa7>
diff -ruN xv6org/ln.d xv6mhybrid/ln.d
--- xv6org/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ln.d	2020-10-15 19:50:34.593714249 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/ln.o and xv6mhybrid/ln.o differ
diff -ruN xv6org/ln.sym xv6mhybrid/ln.sym
--- xv6org/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ln.sym	2020-10-15 19:50:34.705706949 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000798 .rodata
+000007dc .eh_frame
+00000a70 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007c8 digits.1056
+00000000 umalloc.c
+00000a70 freep
+00000a74 base
+00000060 strcpy
+00000440 printf
+00000280 memmove
+000002fa mknod
+00000170 gets
+00000332 getpid
+000006a0 malloc
+00000342 sleep
+00000372 get_burst_time
+000002c2 pipe
+000002d2 write
+0000030a fstat
+000002e2 kill
+0000037a process_state
+00000322 chdir
+00000382 dec_burstTime
+000002ea exec
+000002ba wait
+0000038a inc_cpucounter
+000002ca read
+00000302 unlink
+000002aa fork
+0000033a sbrk
+0000034a uptime
+00000a70 __bss_start
+00000110 memset
+00000000 main
+0000036a set_burst_time
+00000090 strcmp
+0000032a dup
+0000035a getMaxPid
+00000352 getNumProc
+00000362 getProcInfo
+000001f0 stat
+00000a70 _edata
+00000a7c _end
+00000312 link
+000002b2 exit
+00000240 atoi
+000000e0 strlen
+000002f2 open
+00000130 strchr
+0000031a mkdir
+000002da close
+00000610 free
diff -ruN xv6org/log.d xv6mhybrid/log.d
--- xv6org/log.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/log.d	2020-10-15 19:50:36.325601752 +0530
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6org/log.o and xv6mhybrid/log.o differ
Binary files xv6org/_ls and xv6mhybrid/_ls differ
diff -ruN xv6org/ls.asm xv6mhybrid/ls.asm
--- xv6org/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ls.asm	2020-10-15 19:50:34.841698085 +0530
@@ -0,0 +1,1492 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 24                	jle    41 <main+0x41>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	90                   	nop
+  24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 33                	pushl  (%ebx)
+  2d:	83 c3 04             	add    $0x4,%ebx
+  30:	e8 cb 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  35:	83 c4 10             	add    $0x10,%esp
+  38:	39 f3                	cmp    %esi,%ebx
+  3a:	75 ec                	jne    28 <main+0x28>
+  exit();
+  3c:	e8 41 05 00 00       	call   582 <exit>
+    ls(".");
+  41:	83 ec 0c             	sub    $0xc,%esp
+  44:	68 b0 0a 00 00       	push   $0xab0
+  49:	e8 b2 00 00 00       	call   100 <ls>
+    exit();
+  4e:	e8 2f 05 00 00       	call   582 <exit>
+  53:	66 90                	xchg   %ax,%ax
+  55:	66 90                	xchg   %ax,%ax
+  57:	66 90                	xchg   %ax,%ax
+  59:	66 90                	xchg   %ax,%ax
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <fmtname>:
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  68:	83 ec 0c             	sub    $0xc,%esp
+  6b:	53                   	push   %ebx
+  6c:	e8 3f 03 00 00       	call   3b0 <strlen>
+  71:	83 c4 10             	add    $0x10,%esp
+  74:	01 d8                	add    %ebx,%eax
+  76:	73 0f                	jae    87 <fmtname+0x27>
+  78:	eb 12                	jmp    8c <fmtname+0x2c>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	83 e8 01             	sub    $0x1,%eax
+  83:	39 c3                	cmp    %eax,%ebx
+  85:	77 05                	ja     8c <fmtname+0x2c>
+  87:	80 38 2f             	cmpb   $0x2f,(%eax)
+  8a:	75 f4                	jne    80 <fmtname+0x20>
+  p++;
+  8c:	8d 58 01             	lea    0x1(%eax),%ebx
+  if(strlen(p) >= DIRSIZ)
+  8f:	83 ec 0c             	sub    $0xc,%esp
+  92:	53                   	push   %ebx
+  93:	e8 18 03 00 00       	call   3b0 <strlen>
+  98:	83 c4 10             	add    $0x10,%esp
+  9b:	83 f8 0d             	cmp    $0xd,%eax
+  9e:	77 4a                	ja     ea <fmtname+0x8a>
+  memmove(buf, p, strlen(p));
+  a0:	83 ec 0c             	sub    $0xc,%esp
+  a3:	53                   	push   %ebx
+  a4:	e8 07 03 00 00       	call   3b0 <strlen>
+  a9:	83 c4 0c             	add    $0xc,%esp
+  ac:	50                   	push   %eax
+  ad:	53                   	push   %ebx
+  ae:	68 dc 0d 00 00       	push   $0xddc
+  b3:	e8 98 04 00 00       	call   550 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  b8:	89 1c 24             	mov    %ebx,(%esp)
+  bb:	e8 f0 02 00 00       	call   3b0 <strlen>
+  c0:	89 1c 24             	mov    %ebx,(%esp)
+  c3:	89 c6                	mov    %eax,%esi
+  return buf;
+  c5:	bb dc 0d 00 00       	mov    $0xddc,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	e8 e1 02 00 00       	call   3b0 <strlen>
+  cf:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d4:	83 c4 0c             	add    $0xc,%esp
+  d7:	05 dc 0d 00 00       	add    $0xddc,%eax
+  dc:	29 f2                	sub    %esi,%edx
+  de:	52                   	push   %edx
+  df:	6a 20                	push   $0x20
+  e1:	50                   	push   %eax
+  e2:	e8 f9 02 00 00       	call   3e0 <memset>
+  return buf;
+  e7:	83 c4 10             	add    $0x10,%esp
+}
+  ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ed:	89 d8                	mov    %ebx,%eax
+  ef:	5b                   	pop    %ebx
+  f0:	5e                   	pop    %esi
+  f1:	5d                   	pop    %ebp
+  f2:	c3                   	ret    
+  f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <ls>:
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	56                   	push   %esi
+ 105:	53                   	push   %ebx
+ 106:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 10c:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 10f:	6a 00                	push   $0x0
+ 111:	57                   	push   %edi
+ 112:	e8 ab 04 00 00       	call   5c2 <open>
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	85 c0                	test   %eax,%eax
+ 11c:	78 52                	js     170 <ls+0x70>
+  if(fstat(fd, &st) < 0){
+ 11e:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 124:	83 ec 08             	sub    $0x8,%esp
+ 127:	89 c3                	mov    %eax,%ebx
+ 129:	56                   	push   %esi
+ 12a:	50                   	push   %eax
+ 12b:	e8 aa 04 00 00       	call   5da <fstat>
+ 130:	83 c4 10             	add    $0x10,%esp
+ 133:	85 c0                	test   %eax,%eax
+ 135:	0f 88 c5 00 00 00    	js     200 <ls+0x100>
+  switch(st.type){
+ 13b:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 142:	66 83 f8 01          	cmp    $0x1,%ax
+ 146:	0f 84 84 00 00 00    	je     1d0 <ls+0xd0>
+ 14c:	66 83 f8 02          	cmp    $0x2,%ax
+ 150:	74 3e                	je     190 <ls+0x90>
+  close(fd);
+ 152:	83 ec 0c             	sub    $0xc,%esp
+ 155:	53                   	push   %ebx
+ 156:	e8 4f 04 00 00       	call   5aa <close>
+ 15b:	83 c4 10             	add    $0x10,%esp
+}
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+ 166:	8d 76 00             	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "ls: cannot open %s\n", path);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	57                   	push   %edi
+ 174:	68 68 0a 00 00       	push   $0xa68
+ 179:	6a 02                	push   $0x2
+ 17b:	e8 90 05 00 00       	call   710 <printf>
+    return;
+ 180:	83 c4 10             	add    $0x10,%esp
+}
+ 183:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 186:	5b                   	pop    %ebx
+ 187:	5e                   	pop    %esi
+ 188:	5f                   	pop    %edi
+ 189:	5d                   	pop    %ebp
+ 18a:	c3                   	ret    
+ 18b:	90                   	nop
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 190:	83 ec 0c             	sub    $0xc,%esp
+ 193:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 199:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 19f:	57                   	push   %edi
+ 1a0:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 1a6:	e8 b5 fe ff ff       	call   60 <fmtname>
+ 1ab:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 1b1:	59                   	pop    %ecx
+ 1b2:	5f                   	pop    %edi
+ 1b3:	52                   	push   %edx
+ 1b4:	56                   	push   %esi
+ 1b5:	6a 02                	push   $0x2
+ 1b7:	50                   	push   %eax
+ 1b8:	68 90 0a 00 00       	push   $0xa90
+ 1bd:	6a 01                	push   $0x1
+ 1bf:	e8 4c 05 00 00       	call   710 <printf>
+    break;
+ 1c4:	83 c4 20             	add    $0x20,%esp
+ 1c7:	eb 89                	jmp    152 <ls+0x52>
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1d0:	83 ec 0c             	sub    $0xc,%esp
+ 1d3:	57                   	push   %edi
+ 1d4:	e8 d7 01 00 00       	call   3b0 <strlen>
+ 1d9:	83 c0 10             	add    $0x10,%eax
+ 1dc:	83 c4 10             	add    $0x10,%esp
+ 1df:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1e4:	76 42                	jbe    228 <ls+0x128>
+      printf(1, "ls: path too long\n");
+ 1e6:	83 ec 08             	sub    $0x8,%esp
+ 1e9:	68 9d 0a 00 00       	push   $0xa9d
+ 1ee:	6a 01                	push   $0x1
+ 1f0:	e8 1b 05 00 00       	call   710 <printf>
+      break;
+ 1f5:	83 c4 10             	add    $0x10,%esp
+ 1f8:	e9 55 ff ff ff       	jmp    152 <ls+0x52>
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot stat %s\n", path);
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	57                   	push   %edi
+ 204:	68 7c 0a 00 00       	push   $0xa7c
+ 209:	6a 02                	push   $0x2
+ 20b:	e8 00 05 00 00       	call   710 <printf>
+    close(fd);
+ 210:	89 1c 24             	mov    %ebx,(%esp)
+ 213:	e8 92 03 00 00       	call   5aa <close>
+    return;
+ 218:	83 c4 10             	add    $0x10,%esp
+}
+ 21b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 21e:	5b                   	pop    %ebx
+ 21f:	5e                   	pop    %esi
+ 220:	5f                   	pop    %edi
+ 221:	5d                   	pop    %ebp
+ 222:	c3                   	ret    
+ 223:	90                   	nop
+ 224:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    strcpy(buf, path);
+ 228:	83 ec 08             	sub    $0x8,%esp
+ 22b:	57                   	push   %edi
+ 22c:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 232:	57                   	push   %edi
+ 233:	e8 f8 00 00 00       	call   330 <strcpy>
+    p = buf+strlen(buf);
+ 238:	89 3c 24             	mov    %edi,(%esp)
+ 23b:	e8 70 01 00 00       	call   3b0 <strlen>
+ 240:	01 f8                	add    %edi,%eax
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 242:	83 c4 10             	add    $0x10,%esp
+    *p++ = '/';
+ 245:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 248:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 24e:	c6 00 2f             	movb   $0x2f,(%eax)
+ 251:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 257:	89 f6                	mov    %esi,%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 260:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 266:	83 ec 04             	sub    $0x4,%esp
+ 269:	6a 10                	push   $0x10
+ 26b:	50                   	push   %eax
+ 26c:	53                   	push   %ebx
+ 26d:	e8 28 03 00 00       	call   59a <read>
+ 272:	83 c4 10             	add    $0x10,%esp
+ 275:	83 f8 10             	cmp    $0x10,%eax
+ 278:	0f 85 d4 fe ff ff    	jne    152 <ls+0x52>
+      if(de.inum == 0)
+ 27e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 285:	00 
+ 286:	74 d8                	je     260 <ls+0x160>
+      memmove(p, de.name, DIRSIZ);
+ 288:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 28e:	83 ec 04             	sub    $0x4,%esp
+ 291:	6a 0e                	push   $0xe
+ 293:	50                   	push   %eax
+ 294:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 29a:	e8 b1 02 00 00       	call   550 <memmove>
+      p[DIRSIZ] = 0;
+ 29f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 2a5:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 2a9:	58                   	pop    %eax
+ 2aa:	5a                   	pop    %edx
+ 2ab:	56                   	push   %esi
+ 2ac:	57                   	push   %edi
+ 2ad:	e8 0e 02 00 00       	call   4c0 <stat>
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 5f                	js     318 <ls+0x218>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 2b9:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 2c0:	83 ec 0c             	sub    $0xc,%esp
+ 2c3:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 2c9:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 2cf:	57                   	push   %edi
+ 2d0:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 2d6:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 2dc:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 2e2:	e8 79 fd ff ff       	call   60 <fmtname>
+ 2e7:	5a                   	pop    %edx
+ 2e8:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 2ee:	59                   	pop    %ecx
+ 2ef:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 2f5:	51                   	push   %ecx
+ 2f6:	52                   	push   %edx
+ 2f7:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2fd:	50                   	push   %eax
+ 2fe:	68 90 0a 00 00       	push   $0xa90
+ 303:	6a 01                	push   $0x1
+ 305:	e8 06 04 00 00       	call   710 <printf>
+ 30a:	83 c4 20             	add    $0x20,%esp
+ 30d:	e9 4e ff ff ff       	jmp    260 <ls+0x160>
+ 312:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printf(1, "ls: cannot stat %s\n", buf);
+ 318:	83 ec 04             	sub    $0x4,%esp
+ 31b:	57                   	push   %edi
+ 31c:	68 7c 0a 00 00       	push   $0xa7c
+ 321:	6a 01                	push   $0x1
+ 323:	e8 e8 03 00 00       	call   710 <printf>
+        continue;
+ 328:	83 c4 10             	add    $0x10,%esp
+ 32b:	e9 30 ff ff ff       	jmp    260 <ls+0x160>
+
+00000330 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 45 08             	mov    0x8(%ebp),%eax
+ 337:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 33a:	89 c2                	mov    %eax,%edx
+ 33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 340:	83 c1 01             	add    $0x1,%ecx
+ 343:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 347:	83 c2 01             	add    $0x1,%edx
+ 34a:	84 db                	test   %bl,%bl
+ 34c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 34f:	75 ef                	jne    340 <strcpy+0x10>
+    ;
+  return os;
+}
+ 351:	5b                   	pop    %ebx
+ 352:	5d                   	pop    %ebp
+ 353:	c3                   	ret    
+ 354:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 35a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000360 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
+ 367:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 36a:	0f b6 02             	movzbl (%edx),%eax
+ 36d:	0f b6 19             	movzbl (%ecx),%ebx
+ 370:	84 c0                	test   %al,%al
+ 372:	75 1c                	jne    390 <strcmp+0x30>
+ 374:	eb 2a                	jmp    3a0 <strcmp+0x40>
+ 376:	8d 76 00             	lea    0x0(%esi),%esi
+ 379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 380:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 383:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 386:	83 c1 01             	add    $0x1,%ecx
+ 389:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 38c:	84 c0                	test   %al,%al
+ 38e:	74 10                	je     3a0 <strcmp+0x40>
+ 390:	38 d8                	cmp    %bl,%al
+ 392:	74 ec                	je     380 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 394:	29 d8                	sub    %ebx,%eax
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5d                   	pop    %ebp
+ 398:	c3                   	ret    
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3a2:	29 d8                	sub    %ebx,%eax
+}
+ 3a4:	5b                   	pop    %ebx
+ 3a5:	5d                   	pop    %ebp
+ 3a6:	c3                   	ret    
+ 3a7:	89 f6                	mov    %esi,%esi
+ 3a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3b6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3b9:	74 15                	je     3d0 <strlen+0x20>
+ 3bb:	31 d2                	xor    %edx,%edx
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c0:	83 c2 01             	add    $0x1,%edx
+ 3c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3c7:	89 d0                	mov    %edx,%eax
+ 3c9:	75 f5                	jne    3c0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3cb:	5d                   	pop    %ebp
+ 3cc:	c3                   	ret    
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 3d0:	31 c0                	xor    %eax,%eax
+}
+ 3d2:	5d                   	pop    %ebp
+ 3d3:	c3                   	ret    
+ 3d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000003e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3ed:	89 d7                	mov    %edx,%edi
+ 3ef:	fc                   	cld    
+ 3f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 3f2:	89 d0                	mov    %edx,%eax
+ 3f4:	5f                   	pop    %edi
+ 3f5:	5d                   	pop    %ebp
+ 3f6:	c3                   	ret    
+ 3f7:	89 f6                	mov    %esi,%esi
+ 3f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000400 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	53                   	push   %ebx
+ 404:	8b 45 08             	mov    0x8(%ebp),%eax
+ 407:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 40a:	0f b6 10             	movzbl (%eax),%edx
+ 40d:	84 d2                	test   %dl,%dl
+ 40f:	74 1d                	je     42e <strchr+0x2e>
+    if(*s == c)
+ 411:	38 d3                	cmp    %dl,%bl
+ 413:	89 d9                	mov    %ebx,%ecx
+ 415:	75 0d                	jne    424 <strchr+0x24>
+ 417:	eb 17                	jmp    430 <strchr+0x30>
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 420:	38 ca                	cmp    %cl,%dl
+ 422:	74 0c                	je     430 <strchr+0x30>
+  for(; *s; s++)
+ 424:	83 c0 01             	add    $0x1,%eax
+ 427:	0f b6 10             	movzbl (%eax),%edx
+ 42a:	84 d2                	test   %dl,%dl
+ 42c:	75 f2                	jne    420 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 42e:	31 c0                	xor    %eax,%eax
+}
+ 430:	5b                   	pop    %ebx
+ 431:	5d                   	pop    %ebp
+ 432:	c3                   	ret    
+ 433:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000440 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 446:	31 f6                	xor    %esi,%esi
+ 448:	89 f3                	mov    %esi,%ebx
+{
+ 44a:	83 ec 1c             	sub    $0x1c,%esp
+ 44d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 450:	eb 2f                	jmp    481 <gets+0x41>
+ 452:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 458:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 45b:	83 ec 04             	sub    $0x4,%esp
+ 45e:	6a 01                	push   $0x1
+ 460:	50                   	push   %eax
+ 461:	6a 00                	push   $0x0
+ 463:	e8 32 01 00 00       	call   59a <read>
+    if(cc < 1)
+ 468:	83 c4 10             	add    $0x10,%esp
+ 46b:	85 c0                	test   %eax,%eax
+ 46d:	7e 1c                	jle    48b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 46f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 473:	83 c7 01             	add    $0x1,%edi
+ 476:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 479:	3c 0a                	cmp    $0xa,%al
+ 47b:	74 23                	je     4a0 <gets+0x60>
+ 47d:	3c 0d                	cmp    $0xd,%al
+ 47f:	74 1f                	je     4a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 481:	83 c3 01             	add    $0x1,%ebx
+ 484:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 487:	89 fe                	mov    %edi,%esi
+ 489:	7c cd                	jl     458 <gets+0x18>
+ 48b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 48d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 490:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 493:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 496:	5b                   	pop    %ebx
+ 497:	5e                   	pop    %esi
+ 498:	5f                   	pop    %edi
+ 499:	5d                   	pop    %ebp
+ 49a:	c3                   	ret    
+ 49b:	90                   	nop
+ 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4a6:	01 de                	add    %ebx,%esi
+ 4a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b0:	5b                   	pop    %ebx
+ 4b1:	5e                   	pop    %esi
+ 4b2:	5f                   	pop    %edi
+ 4b3:	5d                   	pop    %ebp
+ 4b4:	c3                   	ret    
+ 4b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000004c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	56                   	push   %esi
+ 4c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4c5:	83 ec 08             	sub    $0x8,%esp
+ 4c8:	6a 00                	push   $0x0
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 f0 00 00 00       	call   5c2 <open>
+  if(fd < 0)
+ 4d2:	83 c4 10             	add    $0x10,%esp
+ 4d5:	85 c0                	test   %eax,%eax
+ 4d7:	78 27                	js     500 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4d9:	83 ec 08             	sub    $0x8,%esp
+ 4dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4df:	89 c3                	mov    %eax,%ebx
+ 4e1:	50                   	push   %eax
+ 4e2:	e8 f3 00 00 00       	call   5da <fstat>
+  close(fd);
+ 4e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4ec:	e8 b9 00 00 00       	call   5aa <close>
+  return r;
+ 4f1:	83 c4 10             	add    $0x10,%esp
+}
+ 4f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4f7:	89 f0                	mov    %esi,%eax
+ 4f9:	5b                   	pop    %ebx
+ 4fa:	5e                   	pop    %esi
+ 4fb:	5d                   	pop    %ebp
+ 4fc:	c3                   	ret    
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 500:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 505:	eb ed                	jmp    4f4 <stat+0x34>
+ 507:	89 f6                	mov    %esi,%esi
+ 509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000510 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	53                   	push   %ebx
+ 514:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 517:	0f be 11             	movsbl (%ecx),%edx
+ 51a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 51d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 51f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 524:	77 1f                	ja     545 <atoi+0x35>
+ 526:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 530:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 533:	83 c1 01             	add    $0x1,%ecx
+ 536:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 53a:	0f be 11             	movsbl (%ecx),%edx
+ 53d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 540:	80 fb 09             	cmp    $0x9,%bl
+ 543:	76 eb                	jbe    530 <atoi+0x20>
+  return n;
+}
+ 545:	5b                   	pop    %ebx
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	90                   	nop
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000550 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	56                   	push   %esi
+ 554:	53                   	push   %ebx
+ 555:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 558:	8b 45 08             	mov    0x8(%ebp),%eax
+ 55b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 55e:	85 db                	test   %ebx,%ebx
+ 560:	7e 14                	jle    576 <memmove+0x26>
+ 562:	31 d2                	xor    %edx,%edx
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 568:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 56c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 56f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 572:	39 d3                	cmp    %edx,%ebx
+ 574:	75 f2                	jne    568 <memmove+0x18>
+  return vdst;
+}
+ 576:	5b                   	pop    %ebx
+ 577:	5e                   	pop    %esi
+ 578:	5d                   	pop    %ebp
+ 579:	c3                   	ret    
+
+0000057a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 57a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <exit>:
+SYSCALL(exit)
+ 582:	b8 02 00 00 00       	mov    $0x2,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <wait>:
+SYSCALL(wait)
+ 58a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <pipe>:
+SYSCALL(pipe)
+ 592:	b8 04 00 00 00       	mov    $0x4,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <read>:
+SYSCALL(read)
+ 59a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <write>:
+SYSCALL(write)
+ 5a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <close>:
+SYSCALL(close)
+ 5aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <kill>:
+SYSCALL(kill)
+ 5b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <exec>:
+SYSCALL(exec)
+ 5ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <open>:
+SYSCALL(open)
+ 5c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <mknod>:
+SYSCALL(mknod)
+ 5ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <unlink>:
+SYSCALL(unlink)
+ 5d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <fstat>:
+SYSCALL(fstat)
+ 5da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+
+000005e2 <link>:
+SYSCALL(link)
+ 5e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5e7:	cd 40                	int    $0x40
+ 5e9:	c3                   	ret    
+
+000005ea <mkdir>:
+SYSCALL(mkdir)
+ 5ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5ef:	cd 40                	int    $0x40
+ 5f1:	c3                   	ret    
+
+000005f2 <chdir>:
+SYSCALL(chdir)
+ 5f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5f7:	cd 40                	int    $0x40
+ 5f9:	c3                   	ret    
+
+000005fa <dup>:
+SYSCALL(dup)
+ 5fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <getpid>:
+SYSCALL(getpid)
+ 602:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+
+0000060a <sbrk>:
+SYSCALL(sbrk)
+ 60a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 60f:	cd 40                	int    $0x40
+ 611:	c3                   	ret    
+
+00000612 <sleep>:
+SYSCALL(sleep)
+ 612:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 617:	cd 40                	int    $0x40
+ 619:	c3                   	ret    
+
+0000061a <uptime>:
+SYSCALL(uptime)
+ 61a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 61f:	cd 40                	int    $0x40
+ 621:	c3                   	ret    
+
+00000622 <getNumProc>:
+SYSCALL(getNumProc)
+ 622:	b8 16 00 00 00       	mov    $0x16,%eax
+ 627:	cd 40                	int    $0x40
+ 629:	c3                   	ret    
+
+0000062a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 62a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 62f:	cd 40                	int    $0x40
+ 631:	c3                   	ret    
+
+00000632 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 632:	b8 18 00 00 00       	mov    $0x18,%eax
+ 637:	cd 40                	int    $0x40
+ 639:	c3                   	ret    
+
+0000063a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 63a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 63f:	cd 40                	int    $0x40
+ 641:	c3                   	ret    
+
+00000642 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 642:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 647:	cd 40                	int    $0x40
+ 649:	c3                   	ret    
+
+0000064a <process_state>:
+SYSCALL(process_state)
+ 64a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 64f:	cd 40                	int    $0x40
+ 651:	c3                   	ret    
+
+00000652 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 652:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 657:	cd 40                	int    $0x40
+ 659:	c3                   	ret    
+
+0000065a <inc_cpucounter>:
+ 65a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 65f:	cd 40                	int    $0x40
+ 661:	c3                   	ret    
+ 662:	66 90                	xchg   %ax,%ax
+ 664:	66 90                	xchg   %ax,%ax
+ 666:	66 90                	xchg   %ax,%ax
+ 668:	66 90                	xchg   %ax,%ax
+ 66a:	66 90                	xchg   %ax,%ax
+ 66c:	66 90                	xchg   %ax,%ax
+ 66e:	66 90                	xchg   %ax,%ax
+
+00000670 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 679:	85 d2                	test   %edx,%edx
+{
+ 67b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 67e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 680:	79 76                	jns    6f8 <printint+0x88>
+ 682:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 686:	74 70                	je     6f8 <printint+0x88>
+    x = -xx;
+ 688:	f7 d8                	neg    %eax
+    neg = 1;
+ 68a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 691:	31 f6                	xor    %esi,%esi
+ 693:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 696:	eb 0a                	jmp    6a2 <printint+0x32>
+ 698:	90                   	nop
+ 699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	89 fe                	mov    %edi,%esi
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 6a7:	f7 f1                	div    %ecx
+ 6a9:	0f b6 92 bc 0a 00 00 	movzbl 0xabc(%edx),%edx
+  }while((x /= base) != 0);
+ 6b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 6b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 6b5:	75 e9                	jne    6a0 <printint+0x30>
+  if(neg)
+ 6b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 6ba:	85 c0                	test   %eax,%eax
+ 6bc:	74 08                	je     6c6 <printint+0x56>
+    buf[i++] = '-';
+ 6be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 6c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 6c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 6ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 6d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 6d3:	83 ec 04             	sub    $0x4,%esp
+ 6d6:	83 ee 01             	sub    $0x1,%esi
+ 6d9:	6a 01                	push   $0x1
+ 6db:	53                   	push   %ebx
+ 6dc:	57                   	push   %edi
+ 6dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6e0:	e8 bd fe ff ff       	call   5a2 <write>
+
+  while(--i >= 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6ff:	eb 90                	jmp    691 <printint+0x21>
+ 701:	eb 0d                	jmp    710 <printf>
+ 703:	90                   	nop
+ 704:	90                   	nop
+ 705:	90                   	nop
+ 706:	90                   	nop
+ 707:	90                   	nop
+ 708:	90                   	nop
+ 709:	90                   	nop
+ 70a:	90                   	nop
+ 70b:	90                   	nop
+ 70c:	90                   	nop
+ 70d:	90                   	nop
+ 70e:	90                   	nop
+ 70f:	90                   	nop
+
+00000710 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 719:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 71c:	0f b6 1e             	movzbl (%esi),%ebx
+ 71f:	84 db                	test   %bl,%bl
+ 721:	0f 84 b3 00 00 00    	je     7da <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 727:	8d 45 10             	lea    0x10(%ebp),%eax
+ 72a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 72d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 72f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 732:	eb 2f                	jmp    763 <printf+0x53>
+ 734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 738:	83 f8 25             	cmp    $0x25,%eax
+ 73b:	0f 84 a7 00 00 00    	je     7e8 <printf+0xd8>
+  write(fd, &c, 1);
+ 741:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 744:	83 ec 04             	sub    $0x4,%esp
+ 747:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 74a:	6a 01                	push   $0x1
+ 74c:	50                   	push   %eax
+ 74d:	ff 75 08             	pushl  0x8(%ebp)
+ 750:	e8 4d fe ff ff       	call   5a2 <write>
+ 755:	83 c4 10             	add    $0x10,%esp
+ 758:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 75b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 75f:	84 db                	test   %bl,%bl
+ 761:	74 77                	je     7da <printf+0xca>
+    if(state == 0){
+ 763:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 765:	0f be cb             	movsbl %bl,%ecx
+ 768:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 76b:	74 cb                	je     738 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 76d:	83 ff 25             	cmp    $0x25,%edi
+ 770:	75 e6                	jne    758 <printf+0x48>
+      if(c == 'd'){
+ 772:	83 f8 64             	cmp    $0x64,%eax
+ 775:	0f 84 05 01 00 00    	je     880 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 77b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 781:	83 f9 70             	cmp    $0x70,%ecx
+ 784:	74 72                	je     7f8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 786:	83 f8 73             	cmp    $0x73,%eax
+ 789:	0f 84 99 00 00 00    	je     828 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 78f:	83 f8 63             	cmp    $0x63,%eax
+ 792:	0f 84 08 01 00 00    	je     8a0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 798:	83 f8 25             	cmp    $0x25,%eax
+ 79b:	0f 84 ef 00 00 00    	je     890 <printf+0x180>
+  write(fd, &c, 1);
+ 7a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 7a4:	83 ec 04             	sub    $0x4,%esp
+ 7a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7ab:	6a 01                	push   $0x1
+ 7ad:	50                   	push   %eax
+ 7ae:	ff 75 08             	pushl  0x8(%ebp)
+ 7b1:	e8 ec fd ff ff       	call   5a2 <write>
+ 7b6:	83 c4 0c             	add    $0xc,%esp
+ 7b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 7bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 7bf:	6a 01                	push   $0x1
+ 7c1:	50                   	push   %eax
+ 7c2:	ff 75 08             	pushl  0x8(%ebp)
+ 7c5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7c8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 7ca:	e8 d3 fd ff ff       	call   5a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 7cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 7d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 7d6:	84 db                	test   %bl,%bl
+ 7d8:	75 89                	jne    763 <printf+0x53>
+    }
+  }
+}
+ 7da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7dd:	5b                   	pop    %ebx
+ 7de:	5e                   	pop    %esi
+ 7df:	5f                   	pop    %edi
+ 7e0:	5d                   	pop    %ebp
+ 7e1:	c3                   	ret    
+ 7e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 7e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 7ed:	e9 66 ff ff ff       	jmp    758 <printf+0x48>
+ 7f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 7f8:	83 ec 0c             	sub    $0xc,%esp
+ 7fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 800:	6a 00                	push   $0x0
+ 802:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 805:	8b 45 08             	mov    0x8(%ebp),%eax
+ 808:	8b 17                	mov    (%edi),%edx
+ 80a:	e8 61 fe ff ff       	call   670 <printint>
+        ap++;
+ 80f:	89 f8                	mov    %edi,%eax
+ 811:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 814:	31 ff                	xor    %edi,%edi
+        ap++;
+ 816:	83 c0 04             	add    $0x4,%eax
+ 819:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 81c:	e9 37 ff ff ff       	jmp    758 <printf+0x48>
+ 821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 828:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 82b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 82d:	83 c0 04             	add    $0x4,%eax
+ 830:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 833:	85 c9                	test   %ecx,%ecx
+ 835:	0f 84 8e 00 00 00    	je     8c9 <printf+0x1b9>
+        while(*s != 0){
+ 83b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 83e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 840:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 842:	84 c0                	test   %al,%al
+ 844:	0f 84 0e ff ff ff    	je     758 <printf+0x48>
+ 84a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 84d:	89 de                	mov    %ebx,%esi
+ 84f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 852:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 855:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 858:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 85b:	83 c6 01             	add    $0x1,%esi
+ 85e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 861:	6a 01                	push   $0x1
+ 863:	57                   	push   %edi
+ 864:	53                   	push   %ebx
+ 865:	e8 38 fd ff ff       	call   5a2 <write>
+        while(*s != 0){
+ 86a:	0f b6 06             	movzbl (%esi),%eax
+ 86d:	83 c4 10             	add    $0x10,%esp
+ 870:	84 c0                	test   %al,%al
+ 872:	75 e4                	jne    858 <printf+0x148>
+ 874:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 877:	31 ff                	xor    %edi,%edi
+ 879:	e9 da fe ff ff       	jmp    758 <printf+0x48>
+ 87e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 880:	83 ec 0c             	sub    $0xc,%esp
+ 883:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 888:	6a 01                	push   $0x1
+ 88a:	e9 73 ff ff ff       	jmp    802 <printf+0xf2>
+ 88f:	90                   	nop
+  write(fd, &c, 1);
+ 890:	83 ec 04             	sub    $0x4,%esp
+ 893:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 896:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 899:	6a 01                	push   $0x1
+ 89b:	e9 21 ff ff ff       	jmp    7c1 <printf+0xb1>
+        putc(fd, *ap);
+ 8a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 8a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 8a6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 8a8:	6a 01                	push   $0x1
+        ap++;
+ 8aa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 8ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 8b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 8b3:	50                   	push   %eax
+ 8b4:	ff 75 08             	pushl  0x8(%ebp)
+ 8b7:	e8 e6 fc ff ff       	call   5a2 <write>
+        ap++;
+ 8bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 8bf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 8c2:	31 ff                	xor    %edi,%edi
+ 8c4:	e9 8f fe ff ff       	jmp    758 <printf+0x48>
+          s = "(null)";
+ 8c9:	bb b2 0a 00 00       	mov    $0xab2,%ebx
+        while(*s != 0){
+ 8ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8d3:	e9 72 ff ff ff       	jmp    84a <printf+0x13a>
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e1:	a1 ec 0d 00 00       	mov    0xdec,%eax
+{
+ 8e6:	89 e5                	mov    %esp,%ebp
+ 8e8:	57                   	push   %edi
+ 8e9:	56                   	push   %esi
+ 8ea:	53                   	push   %ebx
+ 8eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 8ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f8:	39 c8                	cmp    %ecx,%eax
+ 8fa:	8b 10                	mov    (%eax),%edx
+ 8fc:	73 32                	jae    930 <free+0x50>
+ 8fe:	39 d1                	cmp    %edx,%ecx
+ 900:	72 04                	jb     906 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 902:	39 d0                	cmp    %edx,%eax
+ 904:	72 32                	jb     938 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 906:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 909:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90c:	39 fa                	cmp    %edi,%edx
+ 90e:	74 30                	je     940 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 910:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 913:	8b 50 04             	mov    0x4(%eax),%edx
+ 916:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 919:	39 f1                	cmp    %esi,%ecx
+ 91b:	74 3a                	je     957 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 91d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 91f:	a3 ec 0d 00 00       	mov    %eax,0xdec
+}
+ 924:	5b                   	pop    %ebx
+ 925:	5e                   	pop    %esi
+ 926:	5f                   	pop    %edi
+ 927:	5d                   	pop    %ebp
+ 928:	c3                   	ret    
+ 929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 930:	39 d0                	cmp    %edx,%eax
+ 932:	72 04                	jb     938 <free+0x58>
+ 934:	39 d1                	cmp    %edx,%ecx
+ 936:	72 ce                	jb     906 <free+0x26>
+{
+ 938:	89 d0                	mov    %edx,%eax
+ 93a:	eb bc                	jmp    8f8 <free+0x18>
+ 93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 940:	03 72 04             	add    0x4(%edx),%esi
+ 943:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 946:	8b 10                	mov    (%eax),%edx
+ 948:	8b 12                	mov    (%edx),%edx
+ 94a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 94d:	8b 50 04             	mov    0x4(%eax),%edx
+ 950:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 953:	39 f1                	cmp    %esi,%ecx
+ 955:	75 c6                	jne    91d <free+0x3d>
+    p->s.size += bp->s.size;
+ 957:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 95a:	a3 ec 0d 00 00       	mov    %eax,0xdec
+    p->s.size += bp->s.size;
+ 95f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 962:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 965:	89 10                	mov    %edx,(%eax)
+}
+ 967:	5b                   	pop    %ebx
+ 968:	5e                   	pop    %esi
+ 969:	5f                   	pop    %edi
+ 96a:	5d                   	pop    %ebp
+ 96b:	c3                   	ret    
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 979:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 97c:	8b 15 ec 0d 00 00    	mov    0xdec,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 982:	8d 78 07             	lea    0x7(%eax),%edi
+ 985:	c1 ef 03             	shr    $0x3,%edi
+ 988:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 98b:	85 d2                	test   %edx,%edx
+ 98d:	0f 84 9d 00 00 00    	je     a30 <malloc+0xc0>
+ 993:	8b 02                	mov    (%edx),%eax
+ 995:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 998:	39 cf                	cmp    %ecx,%edi
+ 99a:	76 6c                	jbe    a08 <malloc+0x98>
+ 99c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 9a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9a7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 9b1:	eb 0e                	jmp    9c1 <malloc+0x51>
+ 9b3:	90                   	nop
+ 9b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 9ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bd:	39 f9                	cmp    %edi,%ecx
+ 9bf:	73 47                	jae    a08 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9c1:	39 05 ec 0d 00 00    	cmp    %eax,0xdec
+ 9c7:	89 c2                	mov    %eax,%edx
+ 9c9:	75 ed                	jne    9b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 9cb:	83 ec 0c             	sub    $0xc,%esp
+ 9ce:	56                   	push   %esi
+ 9cf:	e8 36 fc ff ff       	call   60a <sbrk>
+  if(p == (char*)-1)
+ 9d4:	83 c4 10             	add    $0x10,%esp
+ 9d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9da:	74 1c                	je     9f8 <malloc+0x88>
+  hp->s.size = nu;
+ 9dc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9df:	83 ec 0c             	sub    $0xc,%esp
+ 9e2:	83 c0 08             	add    $0x8,%eax
+ 9e5:	50                   	push   %eax
+ 9e6:	e8 f5 fe ff ff       	call   8e0 <free>
+  return freep;
+ 9eb:	8b 15 ec 0d 00 00    	mov    0xdec,%edx
+      if((p = morecore(nunits)) == 0)
+ 9f1:	83 c4 10             	add    $0x10,%esp
+ 9f4:	85 d2                	test   %edx,%edx
+ 9f6:	75 c0                	jne    9b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 9f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9fb:	31 c0                	xor    %eax,%eax
+}
+ 9fd:	5b                   	pop    %ebx
+ 9fe:	5e                   	pop    %esi
+ 9ff:	5f                   	pop    %edi
+ a00:	5d                   	pop    %ebp
+ a01:	c3                   	ret    
+ a02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ a08:	39 cf                	cmp    %ecx,%edi
+ a0a:	74 54                	je     a60 <malloc+0xf0>
+        p->s.size -= nunits;
+ a0c:	29 f9                	sub    %edi,%ecx
+ a0e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ a11:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ a14:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ a17:	89 15 ec 0d 00 00    	mov    %edx,0xdec
+}
+ a1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a20:	83 c0 08             	add    $0x8,%eax
+}
+ a23:	5b                   	pop    %ebx
+ a24:	5e                   	pop    %esi
+ a25:	5f                   	pop    %edi
+ a26:	5d                   	pop    %ebp
+ a27:	c3                   	ret    
+ a28:	90                   	nop
+ a29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ a30:	c7 05 ec 0d 00 00 f0 	movl   $0xdf0,0xdec
+ a37:	0d 00 00 
+ a3a:	c7 05 f0 0d 00 00 f0 	movl   $0xdf0,0xdf0
+ a41:	0d 00 00 
+    base.s.size = 0;
+ a44:	b8 f0 0d 00 00       	mov    $0xdf0,%eax
+ a49:	c7 05 f4 0d 00 00 00 	movl   $0x0,0xdf4
+ a50:	00 00 00 
+ a53:	e9 44 ff ff ff       	jmp    99c <malloc+0x2c>
+ a58:	90                   	nop
+ a59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ a60:	8b 08                	mov    (%eax),%ecx
+ a62:	89 0a                	mov    %ecx,(%edx)
+ a64:	eb b1                	jmp    a17 <malloc+0xa7>
diff -ruN xv6org/ls.d xv6mhybrid/ls.d
--- xv6org/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ls.d	2020-10-15 19:50:34.749704081 +0530
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files xv6org/ls.o and xv6mhybrid/ls.o differ
diff -ruN xv6org/ls.sym xv6mhybrid/ls.sym
--- xv6org/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ls.sym	2020-10-15 19:50:34.845697824 +0530
@@ -0,0 +1,68 @@
+00000000 .text
+00000a68 .rodata
+00000ad0 .eh_frame
+00000ddc .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+00000ddc buf.1067
+00000000 ulib.c
+00000000 printf.c
+00000670 printint
+00000abc digits.1056
+00000000 umalloc.c
+00000dec freep
+00000df0 base
+00000330 strcpy
+00000060 fmtname
+00000710 printf
+00000550 memmove
+000005ca mknod
+00000440 gets
+00000602 getpid
+00000970 malloc
+00000612 sleep
+00000642 get_burst_time
+00000592 pipe
+000005a2 write
+000005da fstat
+000005b2 kill
+0000064a process_state
+000005f2 chdir
+00000652 dec_burstTime
+000005ba exec
+0000058a wait
+0000065a inc_cpucounter
+0000059a read
+000005d2 unlink
+0000057a fork
+0000060a sbrk
+0000061a uptime
+00000ddc __bss_start
+000003e0 memset
+00000000 main
+0000063a set_burst_time
+00000360 strcmp
+000005fa dup
+0000062a getMaxPid
+00000622 getNumProc
+00000632 getProcInfo
+000004c0 stat
+00000ddc _edata
+00000df8 _end
+000005e2 link
+00000100 ls
+00000582 exit
+00000510 atoi
+000003b0 strlen
+000005c2 open
+00000400 strchr
+000005ea mkdir
+000005aa close
+000008e0 free
diff -ruN xv6org/main.d xv6mhybrid/main.d
--- xv6org/main.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/main.d	2020-10-15 19:50:36.349600197 +0530
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files xv6org/main.o and xv6mhybrid/main.o differ
diff -ruN xv6org/Makefile xv6mhybrid/Makefile
--- xv6org/Makefile	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/Makefile	2020-10-15 15:19:37.519090000 +0530
@@ -51,7 +51,7 @@
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,13 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_printMaxPid\
+	_printNumProc\
+	_printProcInfo\
+	_testBurstTime\
+	_process_state\
+	_test_scheduler\
+	_test_sched\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +224,7 @@
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -248,11 +255,12 @@
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	mkfs.c ulib.c user.h cat.c echo.c grep.c kill.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c forktest.c printMaxPid.c printNumProc.c printProcInfo.c testBurstTime.c process_state.c test_scheduler.c test_sched\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
+	
 
 dist:
 	rm -rf dist
Binary files xv6org/_mkdir and xv6mhybrid/_mkdir differ
diff -ruN xv6org/mkdir.asm xv6mhybrid/mkdir.asm
--- xv6org/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/mkdir.asm	2020-10-15 19:50:34.961690263 +0530
@@ -0,0 +1,1234 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bf 01 00 00 00       	mov    $0x1,%edi
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d 76 00             	lea    0x0(%esi),%esi
+  29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 00 03 00 00       	call   33a <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 82 02 00 00       	call   2d2 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 cf 07 00 00       	push   $0x7cf
+  58:	6a 02                	push   $0x2
+  5a:	e8 01 04 00 00       	call   460 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 b8 07 00 00       	push   $0x7b8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ee 03 00 00       	call   460 <printf>
+    exit();
+  72:	e8 5b 02 00 00       	call   2d2 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	0f b6 19             	movzbl (%ecx),%ebx
+  c0:	84 c0                	test   %al,%al
+  c2:	75 1c                	jne    e0 <strcmp+0x30>
+  c4:	eb 2a                	jmp    f0 <strcmp+0x40>
+  c6:	8d 76 00             	lea    0x0(%esi),%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	83 c1 01             	add    $0x1,%ecx
+  d9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  dc:	84 c0                	test   %al,%al
+  de:	74 10                	je     f0 <strcmp+0x40>
+  e0:	38 d8                	cmp    %bl,%al
+  e2:	74 ec                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e4:	29 d8                	sub    %ebx,%eax
+}
+  e6:	5b                   	pop    %ebx
+  e7:	5d                   	pop    %ebp
+  e8:	c3                   	ret    
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 120:	31 c0                	xor    %eax,%eax
+}
+ 122:	5d                   	pop    %ebp
+ 123:	c3                   	ret    
+ 124:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 12a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+ 198:	89 f3                	mov    %esi,%ebx
+{
+ 19a:	83 ec 1c             	sub    $0x1c,%esp
+ 19d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a0:	eb 2f                	jmp    1d1 <gets+0x41>
+ 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1ab:	83 ec 04             	sub    $0x4,%esp
+ 1ae:	6a 01                	push   $0x1
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 32 01 00 00       	call   2ea <read>
+    if(cc < 1)
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	85 c0                	test   %eax,%eax
+ 1bd:	7e 1c                	jle    1db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c3:	83 c7 01             	add    $0x1,%edi
+ 1c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c9:	3c 0a                	cmp    $0xa,%al
+ 1cb:	74 23                	je     1f0 <gets+0x60>
+ 1cd:	3c 0d                	cmp    $0xd,%al
+ 1cf:	74 1f                	je     1f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1d1:	83 c3 01             	add    $0x1,%ebx
+ 1d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d7:	89 fe                	mov    %edi,%esi
+ 1d9:	7c cd                	jl     1a8 <gets+0x18>
+ 1db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5e                   	pop    %esi
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	90                   	nop
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	01 de                	add    %ebx,%esi
+ 1f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 200:	5b                   	pop    %ebx
+ 201:	5e                   	pop    %esi
+ 202:	5f                   	pop    %edi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	pushl  0x8(%ebp)
+ 21d:	e8 f0 00 00 00       	call   312 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	pushl  0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f3 00 00 00       	call   32a <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 b9 00 00 00       	call   2fa <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	89 f6                	mov    %esi,%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 11             	movsbl (%ecx),%edx
+ 26a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 26d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 26f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 274:	77 1f                	ja     295 <atoi+0x35>
+ 276:	8d 76 00             	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 280:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 283:	83 c1 01             	add    $0x1,%ecx
+ 286:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 11             	movsbl (%ecx),%edx
+ 28d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	5b                   	pop    %ebx
+ 296:	5d                   	pop    %ebp
+ 297:	c3                   	ret    
+ 298:	90                   	nop
+ 299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+ 2a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 db                	test   %ebx,%ebx
+ 2b0:	7e 14                	jle    2c6 <memmove+0x26>
+ 2b2:	31 d2                	xor    %edx,%edx
+ 2b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2bf:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2c2:	39 d3                	cmp    %edx,%ebx
+ 2c4:	75 f2                	jne    2b8 <memmove+0x18>
+  return vdst;
+}
+ 2c6:	5b                   	pop    %ebx
+ 2c7:	5e                   	pop    %esi
+ 2c8:	5d                   	pop    %ebp
+ 2c9:	c3                   	ret    
+
+000002ca <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <exit>:
+SYSCALL(exit)
+ 2d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <wait>:
+SYSCALL(wait)
+ 2da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <pipe>:
+SYSCALL(pipe)
+ 2e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <read>:
+SYSCALL(read)
+ 2ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <write>:
+SYSCALL(write)
+ 2f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <close>:
+SYSCALL(close)
+ 2fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <kill>:
+SYSCALL(kill)
+ 302:	b8 06 00 00 00       	mov    $0x6,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <exec>:
+SYSCALL(exec)
+ 30a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <open>:
+SYSCALL(open)
+ 312:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mknod>:
+SYSCALL(mknod)
+ 31a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <unlink>:
+SYSCALL(unlink)
+ 322:	b8 12 00 00 00       	mov    $0x12,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <fstat>:
+SYSCALL(fstat)
+ 32a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <link>:
+SYSCALL(link)
+ 332:	b8 13 00 00 00       	mov    $0x13,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <mkdir>:
+SYSCALL(mkdir)
+ 33a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <chdir>:
+SYSCALL(chdir)
+ 342:	b8 09 00 00 00       	mov    $0x9,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <dup>:
+SYSCALL(dup)
+ 34a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getpid>:
+SYSCALL(getpid)
+ 352:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <sbrk>:
+SYSCALL(sbrk)
+ 35a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <sleep>:
+SYSCALL(sleep)
+ 362:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <uptime>:
+SYSCALL(uptime)
+ 36a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <getNumProc>:
+SYSCALL(getNumProc)
+ 372:	b8 16 00 00 00       	mov    $0x16,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 382:	b8 18 00 00 00       	mov    $0x18,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 392:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <process_state>:
+SYSCALL(process_state)
+ 39a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 3a2:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <inc_cpucounter>:
+ 3aa:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+ 3b2:	66 90                	xchg   %ax,%ax
+ 3b4:	66 90                	xchg   %ax,%ax
+ 3b6:	66 90                	xchg   %ax,%ax
+ 3b8:	66 90                	xchg   %ax,%ax
+ 3ba:	66 90                	xchg   %ax,%ax
+ 3bc:	66 90                	xchg   %ax,%ax
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3c9:	85 d2                	test   %edx,%edx
+{
+ 3cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ce:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3d0:	79 76                	jns    448 <printint+0x88>
+ 3d2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3d6:	74 70                	je     448 <printint+0x88>
+    x = -xx;
+ 3d8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3da:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e1:	31 f6                	xor    %esi,%esi
+ 3e3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3e6:	eb 0a                	jmp    3f2 <printint+0x32>
+ 3e8:	90                   	nop
+ 3e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 fe                	mov    %edi,%esi
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3f7:	f7 f1                	div    %ecx
+ 3f9:	0f b6 92 f4 07 00 00 	movzbl 0x7f4(%edx),%edx
+  }while((x /= base) != 0);
+ 400:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 402:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 405:	75 e9                	jne    3f0 <printint+0x30>
+  if(neg)
+ 407:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 40a:	85 c0                	test   %eax,%eax
+ 40c:	74 08                	je     416 <printint+0x56>
+    buf[i++] = '-';
+ 40e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 413:	8d 7e 02             	lea    0x2(%esi),%edi
+ 416:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 41a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+ 420:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 423:	83 ec 04             	sub    $0x4,%esp
+ 426:	83 ee 01             	sub    $0x1,%esi
+ 429:	6a 01                	push   $0x1
+ 42b:	53                   	push   %ebx
+ 42c:	57                   	push   %edi
+ 42d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 430:	e8 bd fe ff ff       	call   2f2 <write>
+
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 44f:	eb 90                	jmp    3e1 <printint+0x21>
+ 451:	eb 0d                	jmp    460 <printf>
+ 453:	90                   	nop
+ 454:	90                   	nop
+ 455:	90                   	nop
+ 456:	90                   	nop
+ 457:	90                   	nop
+ 458:	90                   	nop
+ 459:	90                   	nop
+ 45a:	90                   	nop
+ 45b:	90                   	nop
+ 45c:	90                   	nop
+ 45d:	90                   	nop
+ 45e:	90                   	nop
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 469:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 46c:	0f b6 1e             	movzbl (%esi),%ebx
+ 46f:	84 db                	test   %bl,%bl
+ 471:	0f 84 b3 00 00 00    	je     52a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 477:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 47d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 47f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 482:	eb 2f                	jmp    4b3 <printf+0x53>
+ 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	0f 84 a7 00 00 00    	je     538 <printf+0xd8>
+  write(fd, &c, 1);
+ 491:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 494:	83 ec 04             	sub    $0x4,%esp
+ 497:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 49a:	6a 01                	push   $0x1
+ 49c:	50                   	push   %eax
+ 49d:	ff 75 08             	pushl  0x8(%ebp)
+ 4a0:	e8 4d fe ff ff       	call   2f2 <write>
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4ab:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4af:	84 db                	test   %bl,%bl
+ 4b1:	74 77                	je     52a <printf+0xca>
+    if(state == 0){
+ 4b3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4b5:	0f be cb             	movsbl %bl,%ecx
+ 4b8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4bb:	74 cb                	je     488 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4bd:	83 ff 25             	cmp    $0x25,%edi
+ 4c0:	75 e6                	jne    4a8 <printf+0x48>
+      if(c == 'd'){
+ 4c2:	83 f8 64             	cmp    $0x64,%eax
+ 4c5:	0f 84 05 01 00 00    	je     5d0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4cb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4d1:	83 f9 70             	cmp    $0x70,%ecx
+ 4d4:	74 72                	je     548 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d6:	83 f8 73             	cmp    $0x73,%eax
+ 4d9:	0f 84 99 00 00 00    	je     578 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4df:	83 f8 63             	cmp    $0x63,%eax
+ 4e2:	0f 84 08 01 00 00    	je     5f0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	0f 84 ef 00 00 00    	je     5e0 <printf+0x180>
+  write(fd, &c, 1);
+ 4f1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4f4:	83 ec 04             	sub    $0x4,%esp
+ 4f7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4fb:	6a 01                	push   $0x1
+ 4fd:	50                   	push   %eax
+ 4fe:	ff 75 08             	pushl  0x8(%ebp)
+ 501:	e8 ec fd ff ff       	call   2f2 <write>
+ 506:	83 c4 0c             	add    $0xc,%esp
+ 509:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 50c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 50f:	6a 01                	push   $0x1
+ 511:	50                   	push   %eax
+ 512:	ff 75 08             	pushl  0x8(%ebp)
+ 515:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 518:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 51a:	e8 d3 fd ff ff       	call   2f2 <write>
+  for(i = 0; fmt[i]; i++){
+ 51f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 523:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 526:	84 db                	test   %bl,%bl
+ 528:	75 89                	jne    4b3 <printf+0x53>
+    }
+  }
+}
+ 52a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 52d:	5b                   	pop    %ebx
+ 52e:	5e                   	pop    %esi
+ 52f:	5f                   	pop    %edi
+ 530:	5d                   	pop    %ebp
+ 531:	c3                   	ret    
+ 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 538:	bf 25 00 00 00       	mov    $0x25,%edi
+ 53d:	e9 66 ff ff ff       	jmp    4a8 <printf+0x48>
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 548:	83 ec 0c             	sub    $0xc,%esp
+ 54b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 550:	6a 00                	push   $0x0
+ 552:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 555:	8b 45 08             	mov    0x8(%ebp),%eax
+ 558:	8b 17                	mov    (%edi),%edx
+ 55a:	e8 61 fe ff ff       	call   3c0 <printint>
+        ap++;
+ 55f:	89 f8                	mov    %edi,%eax
+ 561:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 564:	31 ff                	xor    %edi,%edi
+        ap++;
+ 566:	83 c0 04             	add    $0x4,%eax
+ 569:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 56c:	e9 37 ff ff ff       	jmp    4a8 <printf+0x48>
+ 571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 578:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 57b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 57d:	83 c0 04             	add    $0x4,%eax
+ 580:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 583:	85 c9                	test   %ecx,%ecx
+ 585:	0f 84 8e 00 00 00    	je     619 <printf+0x1b9>
+        while(*s != 0){
+ 58b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 58e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 590:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 592:	84 c0                	test   %al,%al
+ 594:	0f 84 0e ff ff ff    	je     4a8 <printf+0x48>
+ 59a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 59d:	89 de                	mov    %ebx,%esi
+ 59f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5a5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5a8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5ab:	83 c6 01             	add    $0x1,%esi
+ 5ae:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5b1:	6a 01                	push   $0x1
+ 5b3:	57                   	push   %edi
+ 5b4:	53                   	push   %ebx
+ 5b5:	e8 38 fd ff ff       	call   2f2 <write>
+        while(*s != 0){
+ 5ba:	0f b6 06             	movzbl (%esi),%eax
+ 5bd:	83 c4 10             	add    $0x10,%esp
+ 5c0:	84 c0                	test   %al,%al
+ 5c2:	75 e4                	jne    5a8 <printf+0x148>
+ 5c4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5c7:	31 ff                	xor    %edi,%edi
+ 5c9:	e9 da fe ff ff       	jmp    4a8 <printf+0x48>
+ 5ce:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5d8:	6a 01                	push   $0x1
+ 5da:	e9 73 ff ff ff       	jmp    552 <printf+0xf2>
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5e3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5e6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	e9 21 ff ff ff       	jmp    511 <printf+0xb1>
+        putc(fd, *ap);
+ 5f0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+        ap++;
+ 5fa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5fd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 600:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 603:	50                   	push   %eax
+ 604:	ff 75 08             	pushl  0x8(%ebp)
+ 607:	e8 e6 fc ff ff       	call   2f2 <write>
+        ap++;
+ 60c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 60f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 612:	31 ff                	xor    %edi,%edi
+ 614:	e9 8f fe ff ff       	jmp    4a8 <printf+0x48>
+          s = "(null)";
+ 619:	bb eb 07 00 00       	mov    $0x7eb,%ebx
+        while(*s != 0){
+ 61e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 623:	e9 72 ff ff ff       	jmp    59a <printf+0x13a>
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 631:	a1 a4 0a 00 00       	mov    0xaa4,%eax
+{
+ 636:	89 e5                	mov    %esp,%ebp
+ 638:	57                   	push   %edi
+ 639:	56                   	push   %esi
+ 63a:	53                   	push   %ebx
+ 63b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 63e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 648:	39 c8                	cmp    %ecx,%eax
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	73 32                	jae    680 <free+0x50>
+ 64e:	39 d1                	cmp    %edx,%ecx
+ 650:	72 04                	jb     656 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 652:	39 d0                	cmp    %edx,%eax
+ 654:	72 32                	jb     688 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 656:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 659:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65c:	39 fa                	cmp    %edi,%edx
+ 65e:	74 30                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 660:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 663:	8b 50 04             	mov    0x4(%eax),%edx
+ 666:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 669:	39 f1                	cmp    %esi,%ecx
+ 66b:	74 3a                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 66f:	a3 a4 0a 00 00       	mov    %eax,0xaa4
+}
+ 674:	5b                   	pop    %ebx
+ 675:	5e                   	pop    %esi
+ 676:	5f                   	pop    %edi
+ 677:	5d                   	pop    %ebp
+ 678:	c3                   	ret    
+ 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 680:	39 d0                	cmp    %edx,%eax
+ 682:	72 04                	jb     688 <free+0x58>
+ 684:	39 d1                	cmp    %edx,%ecx
+ 686:	72 ce                	jb     656 <free+0x26>
+{
+ 688:	89 d0                	mov    %edx,%eax
+ 68a:	eb bc                	jmp    648 <free+0x18>
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 c6                	jne    66d <free+0x3d>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 a4 0a 00 00       	mov    %eax,0xaa4
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	55                   	push   %ebp
+ 6c1:	89 e5                	mov    %esp,%ebp
+ 6c3:	57                   	push   %edi
+ 6c4:	56                   	push   %esi
+ 6c5:	53                   	push   %ebx
+ 6c6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6cc:	8b 15 a4 0a 00 00    	mov    0xaa4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6d5:	c1 ef 03             	shr    $0x3,%edi
+ 6d8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6db:	85 d2                	test   %edx,%edx
+ 6dd:	0f 84 9d 00 00 00    	je     780 <malloc+0xc0>
+ 6e3:	8b 02                	mov    (%edx),%eax
+ 6e5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6e8:	39 cf                	cmp    %ecx,%edi
+ 6ea:	76 6c                	jbe    758 <malloc+0x98>
+ 6ec:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6f2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6f7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 701:	eb 0e                	jmp    711 <malloc+0x51>
+ 703:	90                   	nop
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 708:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 70a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 70d:	39 f9                	cmp    %edi,%ecx
+ 70f:	73 47                	jae    758 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 05 a4 0a 00 00    	cmp    %eax,0xaa4
+ 717:	89 c2                	mov    %eax,%edx
+ 719:	75 ed                	jne    708 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	56                   	push   %esi
+ 71f:	e8 36 fc ff ff       	call   35a <sbrk>
+  if(p == (char*)-1)
+ 724:	83 c4 10             	add    $0x10,%esp
+ 727:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 72a:	74 1c                	je     748 <malloc+0x88>
+  hp->s.size = nu;
+ 72c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72f:	83 ec 0c             	sub    $0xc,%esp
+ 732:	83 c0 08             	add    $0x8,%eax
+ 735:	50                   	push   %eax
+ 736:	e8 f5 fe ff ff       	call   630 <free>
+  return freep;
+ 73b:	8b 15 a4 0a 00 00    	mov    0xaa4,%edx
+      if((p = morecore(nunits)) == 0)
+ 741:	83 c4 10             	add    $0x10,%esp
+ 744:	85 d2                	test   %edx,%edx
+ 746:	75 c0                	jne    708 <malloc+0x48>
+        return 0;
+  }
+}
+ 748:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 74b:	31 c0                	xor    %eax,%eax
+}
+ 74d:	5b                   	pop    %ebx
+ 74e:	5e                   	pop    %esi
+ 74f:	5f                   	pop    %edi
+ 750:	5d                   	pop    %ebp
+ 751:	c3                   	ret    
+ 752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 758:	39 cf                	cmp    %ecx,%edi
+ 75a:	74 54                	je     7b0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 75c:	29 f9                	sub    %edi,%ecx
+ 75e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 761:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 764:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 767:	89 15 a4 0a 00 00    	mov    %edx,0xaa4
+}
+ 76d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 770:	83 c0 08             	add    $0x8,%eax
+}
+ 773:	5b                   	pop    %ebx
+ 774:	5e                   	pop    %esi
+ 775:	5f                   	pop    %edi
+ 776:	5d                   	pop    %ebp
+ 777:	c3                   	ret    
+ 778:	90                   	nop
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 a4 0a 00 00 a8 	movl   $0xaa8,0xaa4
+ 787:	0a 00 00 
+ 78a:	c7 05 a8 0a 00 00 a8 	movl   $0xaa8,0xaa8
+ 791:	0a 00 00 
+    base.s.size = 0;
+ 794:	b8 a8 0a 00 00       	mov    $0xaa8,%eax
+ 799:	c7 05 ac 0a 00 00 00 	movl   $0x0,0xaac
+ 7a0:	00 00 00 
+ 7a3:	e9 44 ff ff ff       	jmp    6ec <malloc+0x2c>
+ 7a8:	90                   	nop
+ 7a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 08                	mov    (%eax),%ecx
+ 7b2:	89 0a                	mov    %ecx,(%edx)
+ 7b4:	eb b1                	jmp    767 <malloc+0xa7>
diff -ruN xv6org/mkdir.d xv6mhybrid/mkdir.d
--- xv6org/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/mkdir.d	2020-10-15 19:50:34.869696260 +0530
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/mkdir.o and xv6mhybrid/mkdir.o differ
diff -ruN xv6org/mkdir.sym xv6mhybrid/mkdir.sym
--- xv6org/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/mkdir.sym	2020-10-15 19:50:34.965690002 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+000007b8 .rodata
+00000808 .eh_frame
+00000aa4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+000007f4 digits.1056
+00000000 umalloc.c
+00000aa4 freep
+00000aa8 base
+00000080 strcpy
+00000460 printf
+000002a0 memmove
+0000031a mknod
+00000190 gets
+00000352 getpid
+000006c0 malloc
+00000362 sleep
+00000392 get_burst_time
+000002e2 pipe
+000002f2 write
+0000032a fstat
+00000302 kill
+0000039a process_state
+00000342 chdir
+000003a2 dec_burstTime
+0000030a exec
+000002da wait
+000003aa inc_cpucounter
+000002ea read
+00000322 unlink
+000002ca fork
+0000035a sbrk
+0000036a uptime
+00000aa4 __bss_start
+00000130 memset
+00000000 main
+0000038a set_burst_time
+000000b0 strcmp
+0000034a dup
+0000037a getMaxPid
+00000372 getNumProc
+00000382 getProcInfo
+00000210 stat
+00000aa4 _edata
+00000ab0 _end
+00000332 link
+000002d2 exit
+00000260 atoi
+00000100 strlen
+00000312 open
+00000150 strchr
+0000033a mkdir
+000002fa close
+00000630 free
Binary files xv6org/mkfs and xv6mhybrid/mkfs differ
diff -ruN xv6org/mp.d xv6mhybrid/mp.d
--- xv6org/mp.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/mp.d	2020-10-15 19:50:36.389597606 +0530
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files xv6org/mp.o and xv6mhybrid/mp.o differ
diff -ruN xv6org/param.h xv6mhybrid/param.h
--- xv6org/param.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/param.h	2020-10-15 18:55:52.436812956 +0530
@@ -11,4 +11,5 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
+#define QUANTA 		 2	// Time Quantum hybrid (SJF+RR). 2 is the min burst time.		
 
diff -ruN xv6org/picirq.d xv6mhybrid/picirq.d
--- xv6org/picirq.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/picirq.d	2020-10-15 18:32:58.609737407 +0530
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files xv6org/picirq.o and xv6mhybrid/picirq.o differ
diff -ruN xv6org/pipe.d xv6mhybrid/pipe.d
--- xv6org/pipe.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/pipe.d	2020-10-15 19:50:36.425595273 +0530
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6org/pipe.o and xv6mhybrid/pipe.o differ
diff -ruN xv6org/printf.d xv6mhybrid/printf.d
--- xv6org/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printf.d	2020-10-15 19:50:33.749769292 +0530
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/printf.o and xv6mhybrid/printf.o differ
Binary files xv6org/_printMaxPid and xv6mhybrid/_printMaxPid differ
diff -ruN xv6org/printMaxPid.asm xv6mhybrid/printMaxPid.asm
--- xv6org/printMaxPid.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printMaxPid.asm	2020-10-15 19:50:35.605648448 +0530
@@ -0,0 +1,1187 @@
+
+_printMaxPid:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+	int max_pid = getMaxPid();
+  11:	e8 14 03 00 00       	call   32a <getMaxPid>
+	printf(1 , "Maximum PID(process ID) is: %d \n" , max_pid);
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 68 07 00 00       	push   $0x768
+  1f:	6a 01                	push   $0x1
+  21:	e8 ea 03 00 00       	call   410 <printf>
+  	exit();
+  26:	e8 57 02 00 00       	call   282 <exit>
+  2b:	66 90                	xchg   %ax,%ax
+  2d:	66 90                	xchg   %ax,%ax
+  2f:	90                   	nop
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  31:	89 e5                	mov    %esp,%ebp
+  33:	53                   	push   %ebx
+  34:	8b 45 08             	mov    0x8(%ebp),%eax
+  37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  3a:	89 c2                	mov    %eax,%edx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  40:	83 c1 01             	add    $0x1,%ecx
+  43:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  47:	83 c2 01             	add    $0x1,%edx
+  4a:	84 db                	test   %bl,%bl
+  4c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  4f:	75 ef                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  51:	5b                   	pop    %ebx
+  52:	5d                   	pop    %ebp
+  53:	c3                   	ret    
+  54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	0f b6 19             	movzbl (%ecx),%ebx
+  70:	84 c0                	test   %al,%al
+  72:	75 1c                	jne    90 <strcmp+0x30>
+  74:	eb 2a                	jmp    a0 <strcmp+0x40>
+  76:	8d 76 00             	lea    0x0(%esi),%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  80:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  83:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  86:	83 c1 01             	add    $0x1,%ecx
+  89:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  8c:	84 c0                	test   %al,%al
+  8e:	74 10                	je     a0 <strcmp+0x40>
+  90:	38 d8                	cmp    %bl,%al
+  92:	74 ec                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  94:	29 d8                	sub    %ebx,%eax
+}
+  96:	5b                   	pop    %ebx
+  97:	5d                   	pop    %ebp
+  98:	c3                   	ret    
+  99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b6:	80 39 00             	cmpb   $0x0,(%ecx)
+  b9:	74 15                	je     d0 <strlen+0x20>
+  bb:	31 d2                	xor    %edx,%edx
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  c0:	83 c2 01             	add    $0x1,%edx
+  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	75 f5                	jne    c0 <strlen+0x10>
+    ;
+  return n;
+}
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  d0:	31 c0                	xor    %eax,%eax
+}
+  d2:	5d                   	pop    %ebp
+  d3:	c3                   	ret    
+  d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	57                   	push   %edi
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ed:	89 d7                	mov    %edx,%edi
+  ef:	fc                   	cld    
+  f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  f2:	89 d0                	mov    %edx,%eax
+  f4:	5f                   	pop    %edi
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 45 08             	mov    0x8(%ebp),%eax
+ 107:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 10a:	0f b6 10             	movzbl (%eax),%edx
+ 10d:	84 d2                	test   %dl,%dl
+ 10f:	74 1d                	je     12e <strchr+0x2e>
+    if(*s == c)
+ 111:	38 d3                	cmp    %dl,%bl
+ 113:	89 d9                	mov    %ebx,%ecx
+ 115:	75 0d                	jne    124 <strchr+0x24>
+ 117:	eb 17                	jmp    130 <strchr+0x30>
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	38 ca                	cmp    %cl,%dl
+ 122:	74 0c                	je     130 <strchr+0x30>
+  for(; *s; s++)
+ 124:	83 c0 01             	add    $0x1,%eax
+ 127:	0f b6 10             	movzbl (%eax),%edx
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 12e:	31 c0                	xor    %eax,%eax
+}
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	56                   	push   %esi
+ 145:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 146:	31 f6                	xor    %esi,%esi
+ 148:	89 f3                	mov    %esi,%ebx
+{
+ 14a:	83 ec 1c             	sub    $0x1c,%esp
+ 14d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 150:	eb 2f                	jmp    181 <gets+0x41>
+ 152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 158:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 15b:	83 ec 04             	sub    $0x4,%esp
+ 15e:	6a 01                	push   $0x1
+ 160:	50                   	push   %eax
+ 161:	6a 00                	push   $0x0
+ 163:	e8 32 01 00 00       	call   29a <read>
+    if(cc < 1)
+ 168:	83 c4 10             	add    $0x10,%esp
+ 16b:	85 c0                	test   %eax,%eax
+ 16d:	7e 1c                	jle    18b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 16f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 173:	83 c7 01             	add    $0x1,%edi
+ 176:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 179:	3c 0a                	cmp    $0xa,%al
+ 17b:	74 23                	je     1a0 <gets+0x60>
+ 17d:	3c 0d                	cmp    $0xd,%al
+ 17f:	74 1f                	je     1a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 181:	83 c3 01             	add    $0x1,%ebx
+ 184:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 187:	89 fe                	mov    %edi,%esi
+ 189:	7c cd                	jl     158 <gets+0x18>
+ 18b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 18d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 190:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 193:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 196:	5b                   	pop    %ebx
+ 197:	5e                   	pop    %esi
+ 198:	5f                   	pop    %edi
+ 199:	5d                   	pop    %ebp
+ 19a:	c3                   	ret    
+ 19b:	90                   	nop
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a6:	01 de                	add    %ebx,%esi
+ 1a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5e                   	pop    %esi
+ 1b2:	5f                   	pop    %edi
+ 1b3:	5d                   	pop    %ebp
+ 1b4:	c3                   	ret    
+ 1b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	pushl  0x8(%ebp)
+ 1cd:	e8 f0 00 00 00       	call   2c2 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f3 00 00 00       	call   2da <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 b9 00 00 00       	call   2aa <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	89 f6                	mov    %esi,%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 11             	movsbl (%ecx),%edx
+ 21a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 21d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 21f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 224:	77 1f                	ja     245 <atoi+0x35>
+ 226:	8d 76 00             	lea    0x0(%esi),%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 230:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 233:	83 c1 01             	add    $0x1,%ecx
+ 236:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 11             	movsbl (%ecx),%edx
+ 23d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	5b                   	pop    %ebx
+ 246:	5d                   	pop    %ebp
+ 247:	c3                   	ret    
+ 248:	90                   	nop
+ 249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	56                   	push   %esi
+ 254:	53                   	push   %ebx
+ 255:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 258:	8b 45 08             	mov    0x8(%ebp),%eax
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 db                	test   %ebx,%ebx
+ 260:	7e 14                	jle    276 <memmove+0x26>
+ 262:	31 d2                	xor    %edx,%edx
+ 264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 268:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 26c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 26f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 272:	39 d3                	cmp    %edx,%ebx
+ 274:	75 f2                	jne    268 <memmove+0x18>
+  return vdst;
+}
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5d                   	pop    %ebp
+ 279:	c3                   	ret    
+
+0000027a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 27f:	cd 40                	int    $0x40
+ 281:	c3                   	ret    
+
+00000282 <exit>:
+SYSCALL(exit)
+ 282:	b8 02 00 00 00       	mov    $0x2,%eax
+ 287:	cd 40                	int    $0x40
+ 289:	c3                   	ret    
+
+0000028a <wait>:
+SYSCALL(wait)
+ 28a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 28f:	cd 40                	int    $0x40
+ 291:	c3                   	ret    
+
+00000292 <pipe>:
+SYSCALL(pipe)
+ 292:	b8 04 00 00 00       	mov    $0x4,%eax
+ 297:	cd 40                	int    $0x40
+ 299:	c3                   	ret    
+
+0000029a <read>:
+SYSCALL(read)
+ 29a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <write>:
+SYSCALL(write)
+ 2a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <close>:
+SYSCALL(close)
+ 2aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <kill>:
+SYSCALL(kill)
+ 2b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <exec>:
+SYSCALL(exec)
+ 2ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <open>:
+SYSCALL(open)
+ 2c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <mknod>:
+SYSCALL(mknod)
+ 2ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <unlink>:
+SYSCALL(unlink)
+ 2d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <fstat>:
+SYSCALL(fstat)
+ 2da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <link>:
+SYSCALL(link)
+ 2e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mkdir>:
+SYSCALL(mkdir)
+ 2ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <chdir>:
+SYSCALL(chdir)
+ 2f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <dup>:
+SYSCALL(dup)
+ 2fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <getpid>:
+SYSCALL(getpid)
+ 302:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <sbrk>:
+SYSCALL(sbrk)
+ 30a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <sleep>:
+SYSCALL(sleep)
+ 312:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <uptime>:
+SYSCALL(uptime)
+ 31a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getNumProc>:
+SYSCALL(getNumProc)
+ 322:	b8 16 00 00 00       	mov    $0x16,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 32a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 332:	b8 18 00 00 00       	mov    $0x18,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 33a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 342:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <process_state>:
+SYSCALL(process_state)
+ 34a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 352:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <inc_cpucounter>:
+ 35a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+ 362:	66 90                	xchg   %ax,%ax
+ 364:	66 90                	xchg   %ax,%ax
+ 366:	66 90                	xchg   %ax,%ax
+ 368:	66 90                	xchg   %ax,%ax
+ 36a:	66 90                	xchg   %ax,%ax
+ 36c:	66 90                	xchg   %ax,%ax
+ 36e:	66 90                	xchg   %ax,%ax
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 379:	85 d2                	test   %edx,%edx
+{
+ 37b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 37e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 380:	79 76                	jns    3f8 <printint+0x88>
+ 382:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 386:	74 70                	je     3f8 <printint+0x88>
+    x = -xx;
+ 388:	f7 d8                	neg    %eax
+    neg = 1;
+ 38a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 391:	31 f6                	xor    %esi,%esi
+ 393:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 396:	eb 0a                	jmp    3a2 <printint+0x32>
+ 398:	90                   	nop
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	89 fe                	mov    %edi,%esi
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3a7:	f7 f1                	div    %ecx
+ 3a9:	0f b6 92 94 07 00 00 	movzbl 0x794(%edx),%edx
+  }while((x /= base) != 0);
+ 3b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3b5:	75 e9                	jne    3a0 <printint+0x30>
+  if(neg)
+ 3b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ba:	85 c0                	test   %eax,%eax
+ 3bc:	74 08                	je     3c6 <printint+0x56>
+    buf[i++] = '-';
+ 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3d3:	83 ec 04             	sub    $0x4,%esp
+ 3d6:	83 ee 01             	sub    $0x1,%esi
+ 3d9:	6a 01                	push   $0x1
+ 3db:	53                   	push   %ebx
+ 3dc:	57                   	push   %edi
+ 3dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3e0:	e8 bd fe ff ff       	call   2a2 <write>
+
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3ff:	eb 90                	jmp    391 <printint+0x21>
+ 401:	eb 0d                	jmp    410 <printf>
+ 403:	90                   	nop
+ 404:	90                   	nop
+ 405:	90                   	nop
+ 406:	90                   	nop
+ 407:	90                   	nop
+ 408:	90                   	nop
+ 409:	90                   	nop
+ 40a:	90                   	nop
+ 40b:	90                   	nop
+ 40c:	90                   	nop
+ 40d:	90                   	nop
+ 40e:	90                   	nop
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 419:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 41c:	0f b6 1e             	movzbl (%esi),%ebx
+ 41f:	84 db                	test   %bl,%bl
+ 421:	0f 84 b3 00 00 00    	je     4da <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 427:	8d 45 10             	lea    0x10(%ebp),%eax
+ 42a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 42d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 42f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 432:	eb 2f                	jmp    463 <printf+0x53>
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	0f 84 a7 00 00 00    	je     4e8 <printf+0xd8>
+  write(fd, &c, 1);
+ 441:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 444:	83 ec 04             	sub    $0x4,%esp
+ 447:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 44a:	6a 01                	push   $0x1
+ 44c:	50                   	push   %eax
+ 44d:	ff 75 08             	pushl  0x8(%ebp)
+ 450:	e8 4d fe ff ff       	call   2a2 <write>
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 45b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 45f:	84 db                	test   %bl,%bl
+ 461:	74 77                	je     4da <printf+0xca>
+    if(state == 0){
+ 463:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 465:	0f be cb             	movsbl %bl,%ecx
+ 468:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 46b:	74 cb                	je     438 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 46d:	83 ff 25             	cmp    $0x25,%edi
+ 470:	75 e6                	jne    458 <printf+0x48>
+      if(c == 'd'){
+ 472:	83 f8 64             	cmp    $0x64,%eax
+ 475:	0f 84 05 01 00 00    	je     580 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 47b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 481:	83 f9 70             	cmp    $0x70,%ecx
+ 484:	74 72                	je     4f8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 486:	83 f8 73             	cmp    $0x73,%eax
+ 489:	0f 84 99 00 00 00    	je     528 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 48f:	83 f8 63             	cmp    $0x63,%eax
+ 492:	0f 84 08 01 00 00    	je     5a0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 ef 00 00 00    	je     590 <printf+0x180>
+  write(fd, &c, 1);
+ 4a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a4:	83 ec 04             	sub    $0x4,%esp
+ 4a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ab:	6a 01                	push   $0x1
+ 4ad:	50                   	push   %eax
+ 4ae:	ff 75 08             	pushl  0x8(%ebp)
+ 4b1:	e8 ec fd ff ff       	call   2a2 <write>
+ 4b6:	83 c4 0c             	add    $0xc,%esp
+ 4b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4bf:	6a 01                	push   $0x1
+ 4c1:	50                   	push   %eax
+ 4c2:	ff 75 08             	pushl  0x8(%ebp)
+ 4c5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4c8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4ca:	e8 d3 fd ff ff       	call   2a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4d6:	84 db                	test   %bl,%bl
+ 4d8:	75 89                	jne    463 <printf+0x53>
+    }
+  }
+}
+ 4da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4dd:	5b                   	pop    %ebx
+ 4de:	5e                   	pop    %esi
+ 4df:	5f                   	pop    %edi
+ 4e0:	5d                   	pop    %ebp
+ 4e1:	c3                   	ret    
+ 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4ed:	e9 66 ff ff ff       	jmp    458 <printf+0x48>
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f8:	83 ec 0c             	sub    $0xc,%esp
+ 4fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	6a 00                	push   $0x0
+ 502:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 505:	8b 45 08             	mov    0x8(%ebp),%eax
+ 508:	8b 17                	mov    (%edi),%edx
+ 50a:	e8 61 fe ff ff       	call   370 <printint>
+        ap++;
+ 50f:	89 f8                	mov    %edi,%eax
+ 511:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 514:	31 ff                	xor    %edi,%edi
+        ap++;
+ 516:	83 c0 04             	add    $0x4,%eax
+ 519:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 51c:	e9 37 ff ff ff       	jmp    458 <printf+0x48>
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 52b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 52d:	83 c0 04             	add    $0x4,%eax
+ 530:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 533:	85 c9                	test   %ecx,%ecx
+ 535:	0f 84 8e 00 00 00    	je     5c9 <printf+0x1b9>
+        while(*s != 0){
+ 53b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 53e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 540:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 542:	84 c0                	test   %al,%al
+ 544:	0f 84 0e ff ff ff    	je     458 <printf+0x48>
+ 54a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 54d:	89 de                	mov    %ebx,%esi
+ 54f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 552:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 555:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 558:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 55b:	83 c6 01             	add    $0x1,%esi
+ 55e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 561:	6a 01                	push   $0x1
+ 563:	57                   	push   %edi
+ 564:	53                   	push   %ebx
+ 565:	e8 38 fd ff ff       	call   2a2 <write>
+        while(*s != 0){
+ 56a:	0f b6 06             	movzbl (%esi),%eax
+ 56d:	83 c4 10             	add    $0x10,%esp
+ 570:	84 c0                	test   %al,%al
+ 572:	75 e4                	jne    558 <printf+0x148>
+ 574:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 577:	31 ff                	xor    %edi,%edi
+ 579:	e9 da fe ff ff       	jmp    458 <printf+0x48>
+ 57e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	e9 73 ff ff ff       	jmp    502 <printf+0xf2>
+ 58f:	90                   	nop
+  write(fd, &c, 1);
+ 590:	83 ec 04             	sub    $0x4,%esp
+ 593:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 596:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 599:	6a 01                	push   $0x1
+ 59b:	e9 21 ff ff ff       	jmp    4c1 <printf+0xb1>
+        putc(fd, *ap);
+ 5a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5a6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5a8:	6a 01                	push   $0x1
+        ap++;
+ 5aa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5b3:	50                   	push   %eax
+ 5b4:	ff 75 08             	pushl  0x8(%ebp)
+ 5b7:	e8 e6 fc ff ff       	call   2a2 <write>
+        ap++;
+ 5bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5bf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5c2:	31 ff                	xor    %edi,%edi
+ 5c4:	e9 8f fe ff ff       	jmp    458 <printf+0x48>
+          s = "(null)";
+ 5c9:	bb 8c 07 00 00       	mov    $0x78c,%ebx
+        while(*s != 0){
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	e9 72 ff ff ff       	jmp    54a <printf+0x13a>
+ 5d8:	66 90                	xchg   %ax,%ax
+ 5da:	66 90                	xchg   %ax,%ax
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	a1 38 0a 00 00       	mov    0xa38,%eax
+{
+ 5e6:	89 e5                	mov    %esp,%ebp
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	53                   	push   %ebx
+ 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f8:	39 c8                	cmp    %ecx,%eax
+ 5fa:	8b 10                	mov    (%eax),%edx
+ 5fc:	73 32                	jae    630 <free+0x50>
+ 5fe:	39 d1                	cmp    %edx,%ecx
+ 600:	72 04                	jb     606 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 602:	39 d0                	cmp    %edx,%eax
+ 604:	72 32                	jb     638 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 606:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 609:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60c:	39 fa                	cmp    %edi,%edx
+ 60e:	74 30                	je     640 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 610:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 613:	8b 50 04             	mov    0x4(%eax),%edx
+ 616:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 619:	39 f1                	cmp    %esi,%ecx
+ 61b:	74 3a                	je     657 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 61d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 61f:	a3 38 0a 00 00       	mov    %eax,0xa38
+}
+ 624:	5b                   	pop    %ebx
+ 625:	5e                   	pop    %esi
+ 626:	5f                   	pop    %edi
+ 627:	5d                   	pop    %ebp
+ 628:	c3                   	ret    
+ 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 04                	jb     638 <free+0x58>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	72 ce                	jb     606 <free+0x26>
+{
+ 638:	89 d0                	mov    %edx,%eax
+ 63a:	eb bc                	jmp    5f8 <free+0x18>
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 640:	03 72 04             	add    0x4(%edx),%esi
+ 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 646:	8b 10                	mov    (%eax),%edx
+ 648:	8b 12                	mov    (%edx),%edx
+ 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 64d:	8b 50 04             	mov    0x4(%eax),%edx
+ 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 653:	39 f1                	cmp    %esi,%ecx
+ 655:	75 c6                	jne    61d <free+0x3d>
+    p->s.size += bp->s.size;
+ 657:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 65a:	a3 38 0a 00 00       	mov    %eax,0xa38
+    p->s.size += bp->s.size;
+ 65f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 665:	89 10                	mov    %edx,(%eax)
+}
+ 667:	5b                   	pop    %ebx
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000670 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 679:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 67c:	8b 15 38 0a 00 00    	mov    0xa38,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 682:	8d 78 07             	lea    0x7(%eax),%edi
+ 685:	c1 ef 03             	shr    $0x3,%edi
+ 688:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 68b:	85 d2                	test   %edx,%edx
+ 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
+ 693:	8b 02                	mov    (%edx),%eax
+ 695:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 698:	39 cf                	cmp    %ecx,%edi
+ 69a:	76 6c                	jbe    708 <malloc+0x98>
+ 69c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6a7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6b1:	eb 0e                	jmp    6c1 <malloc+0x51>
+ 6b3:	90                   	nop
+ 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bd:	39 f9                	cmp    %edi,%ecx
+ 6bf:	73 47                	jae    708 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6c1:	39 05 38 0a 00 00    	cmp    %eax,0xa38
+ 6c7:	89 c2                	mov    %eax,%edx
+ 6c9:	75 ed                	jne    6b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6cb:	83 ec 0c             	sub    $0xc,%esp
+ 6ce:	56                   	push   %esi
+ 6cf:	e8 36 fc ff ff       	call   30a <sbrk>
+  if(p == (char*)-1)
+ 6d4:	83 c4 10             	add    $0x10,%esp
+ 6d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6da:	74 1c                	je     6f8 <malloc+0x88>
+  hp->s.size = nu;
+ 6dc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6df:	83 ec 0c             	sub    $0xc,%esp
+ 6e2:	83 c0 08             	add    $0x8,%eax
+ 6e5:	50                   	push   %eax
+ 6e6:	e8 f5 fe ff ff       	call   5e0 <free>
+  return freep;
+ 6eb:	8b 15 38 0a 00 00    	mov    0xa38,%edx
+      if((p = morecore(nunits)) == 0)
+ 6f1:	83 c4 10             	add    $0x10,%esp
+ 6f4:	85 d2                	test   %edx,%edx
+ 6f6:	75 c0                	jne    6b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6fb:	31 c0                	xor    %eax,%eax
+}
+ 6fd:	5b                   	pop    %ebx
+ 6fe:	5e                   	pop    %esi
+ 6ff:	5f                   	pop    %edi
+ 700:	5d                   	pop    %ebp
+ 701:	c3                   	ret    
+ 702:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 708:	39 cf                	cmp    %ecx,%edi
+ 70a:	74 54                	je     760 <malloc+0xf0>
+        p->s.size -= nunits;
+ 70c:	29 f9                	sub    %edi,%ecx
+ 70e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 711:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 714:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 717:	89 15 38 0a 00 00    	mov    %edx,0xa38
+}
+ 71d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 720:	83 c0 08             	add    $0x8,%eax
+}
+ 723:	5b                   	pop    %ebx
+ 724:	5e                   	pop    %esi
+ 725:	5f                   	pop    %edi
+ 726:	5d                   	pop    %ebp
+ 727:	c3                   	ret    
+ 728:	90                   	nop
+ 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 730:	c7 05 38 0a 00 00 3c 	movl   $0xa3c,0xa38
+ 737:	0a 00 00 
+ 73a:	c7 05 3c 0a 00 00 3c 	movl   $0xa3c,0xa3c
+ 741:	0a 00 00 
+    base.s.size = 0;
+ 744:	b8 3c 0a 00 00       	mov    $0xa3c,%eax
+ 749:	c7 05 40 0a 00 00 00 	movl   $0x0,0xa40
+ 750:	00 00 00 
+ 753:	e9 44 ff ff ff       	jmp    69c <malloc+0x2c>
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 760:	8b 08                	mov    (%eax),%ecx
+ 762:	89 0a                	mov    %ecx,(%edx)
+ 764:	eb b1                	jmp    717 <malloc+0xa7>
diff -ruN xv6org/printMaxPid.c xv6mhybrid/printMaxPid.c
--- xv6org/printMaxPid.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printMaxPid.c	2020-10-14 12:48:29.548732000 +0530
@@ -0,0 +1,11 @@
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+	int max_pid = getMaxPid();
+	printf(1 , "Maximum PID(process ID) is: %d \n" , max_pid);
+  	exit();
+}
\ No newline at end of file
diff -ruN xv6org/printMaxPid.d xv6mhybrid/printMaxPid.d
--- xv6org/printMaxPid.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printMaxPid.d	2020-10-15 19:50:35.593649227 +0530
@@ -0,0 +1,2 @@
+printMaxPid.o: printMaxPid.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h
Binary files xv6org/printMaxPid.o and xv6mhybrid/printMaxPid.o differ
diff -ruN xv6org/printMaxPid.sym xv6mhybrid/printMaxPid.sym
--- xv6org/printMaxPid.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printMaxPid.sym	2020-10-15 19:50:35.609648188 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000768 .rodata
+000007a8 .eh_frame
+00000a38 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 printMaxPid.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+00000794 digits.1056
+00000000 umalloc.c
+00000a38 freep
+00000a3c base
+00000030 strcpy
+00000410 printf
+00000250 memmove
+000002ca mknod
+00000140 gets
+00000302 getpid
+00000670 malloc
+00000312 sleep
+00000342 get_burst_time
+00000292 pipe
+000002a2 write
+000002da fstat
+000002b2 kill
+0000034a process_state
+000002f2 chdir
+00000352 dec_burstTime
+000002ba exec
+0000028a wait
+0000035a inc_cpucounter
+0000029a read
+000002d2 unlink
+0000027a fork
+0000030a sbrk
+0000031a uptime
+00000a38 __bss_start
+000000e0 memset
+00000000 main
+0000033a set_burst_time
+00000060 strcmp
+000002fa dup
+0000032a getMaxPid
+00000322 getNumProc
+00000332 getProcInfo
+000001c0 stat
+00000a38 _edata
+00000a44 _end
+000002e2 link
+00000282 exit
+00000210 atoi
+000000b0 strlen
+000002c2 open
+00000100 strchr
+000002ea mkdir
+000002aa close
+000005e0 free
Binary files xv6org/_printNumProc and xv6mhybrid/_printNumProc differ
diff -ruN xv6org/printNumProc.asm xv6mhybrid/printNumProc.asm
--- xv6org/printNumProc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printNumProc.asm	2020-10-15 19:50:35.637646371 +0530
@@ -0,0 +1,1187 @@
+
+_printNumProc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  int num = getNumProc();	
+  11:	e8 0c 03 00 00       	call   322 <getNumProc>
+  printf(1 , "Number of active processes(in either state): %d \n" , num);
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 68 07 00 00       	push   $0x768
+  1f:	6a 01                	push   $0x1
+  21:	e8 ea 03 00 00       	call   410 <printf>
+  exit();
+  26:	e8 57 02 00 00       	call   282 <exit>
+  2b:	66 90                	xchg   %ax,%ax
+  2d:	66 90                	xchg   %ax,%ax
+  2f:	90                   	nop
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  31:	89 e5                	mov    %esp,%ebp
+  33:	53                   	push   %ebx
+  34:	8b 45 08             	mov    0x8(%ebp),%eax
+  37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  3a:	89 c2                	mov    %eax,%edx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  40:	83 c1 01             	add    $0x1,%ecx
+  43:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  47:	83 c2 01             	add    $0x1,%edx
+  4a:	84 db                	test   %bl,%bl
+  4c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  4f:	75 ef                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  51:	5b                   	pop    %ebx
+  52:	5d                   	pop    %ebp
+  53:	c3                   	ret    
+  54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	0f b6 19             	movzbl (%ecx),%ebx
+  70:	84 c0                	test   %al,%al
+  72:	75 1c                	jne    90 <strcmp+0x30>
+  74:	eb 2a                	jmp    a0 <strcmp+0x40>
+  76:	8d 76 00             	lea    0x0(%esi),%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  80:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  83:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  86:	83 c1 01             	add    $0x1,%ecx
+  89:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  8c:	84 c0                	test   %al,%al
+  8e:	74 10                	je     a0 <strcmp+0x40>
+  90:	38 d8                	cmp    %bl,%al
+  92:	74 ec                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  94:	29 d8                	sub    %ebx,%eax
+}
+  96:	5b                   	pop    %ebx
+  97:	5d                   	pop    %ebp
+  98:	c3                   	ret    
+  99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b6:	80 39 00             	cmpb   $0x0,(%ecx)
+  b9:	74 15                	je     d0 <strlen+0x20>
+  bb:	31 d2                	xor    %edx,%edx
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  c0:	83 c2 01             	add    $0x1,%edx
+  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	75 f5                	jne    c0 <strlen+0x10>
+    ;
+  return n;
+}
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  d0:	31 c0                	xor    %eax,%eax
+}
+  d2:	5d                   	pop    %ebp
+  d3:	c3                   	ret    
+  d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	57                   	push   %edi
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ed:	89 d7                	mov    %edx,%edi
+  ef:	fc                   	cld    
+  f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  f2:	89 d0                	mov    %edx,%eax
+  f4:	5f                   	pop    %edi
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 45 08             	mov    0x8(%ebp),%eax
+ 107:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 10a:	0f b6 10             	movzbl (%eax),%edx
+ 10d:	84 d2                	test   %dl,%dl
+ 10f:	74 1d                	je     12e <strchr+0x2e>
+    if(*s == c)
+ 111:	38 d3                	cmp    %dl,%bl
+ 113:	89 d9                	mov    %ebx,%ecx
+ 115:	75 0d                	jne    124 <strchr+0x24>
+ 117:	eb 17                	jmp    130 <strchr+0x30>
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	38 ca                	cmp    %cl,%dl
+ 122:	74 0c                	je     130 <strchr+0x30>
+  for(; *s; s++)
+ 124:	83 c0 01             	add    $0x1,%eax
+ 127:	0f b6 10             	movzbl (%eax),%edx
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 12e:	31 c0                	xor    %eax,%eax
+}
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	56                   	push   %esi
+ 145:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 146:	31 f6                	xor    %esi,%esi
+ 148:	89 f3                	mov    %esi,%ebx
+{
+ 14a:	83 ec 1c             	sub    $0x1c,%esp
+ 14d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 150:	eb 2f                	jmp    181 <gets+0x41>
+ 152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 158:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 15b:	83 ec 04             	sub    $0x4,%esp
+ 15e:	6a 01                	push   $0x1
+ 160:	50                   	push   %eax
+ 161:	6a 00                	push   $0x0
+ 163:	e8 32 01 00 00       	call   29a <read>
+    if(cc < 1)
+ 168:	83 c4 10             	add    $0x10,%esp
+ 16b:	85 c0                	test   %eax,%eax
+ 16d:	7e 1c                	jle    18b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 16f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 173:	83 c7 01             	add    $0x1,%edi
+ 176:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 179:	3c 0a                	cmp    $0xa,%al
+ 17b:	74 23                	je     1a0 <gets+0x60>
+ 17d:	3c 0d                	cmp    $0xd,%al
+ 17f:	74 1f                	je     1a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 181:	83 c3 01             	add    $0x1,%ebx
+ 184:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 187:	89 fe                	mov    %edi,%esi
+ 189:	7c cd                	jl     158 <gets+0x18>
+ 18b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 18d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 190:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 193:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 196:	5b                   	pop    %ebx
+ 197:	5e                   	pop    %esi
+ 198:	5f                   	pop    %edi
+ 199:	5d                   	pop    %ebp
+ 19a:	c3                   	ret    
+ 19b:	90                   	nop
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a6:	01 de                	add    %ebx,%esi
+ 1a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5e                   	pop    %esi
+ 1b2:	5f                   	pop    %edi
+ 1b3:	5d                   	pop    %ebp
+ 1b4:	c3                   	ret    
+ 1b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	pushl  0x8(%ebp)
+ 1cd:	e8 f0 00 00 00       	call   2c2 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f3 00 00 00       	call   2da <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 b9 00 00 00       	call   2aa <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	89 f6                	mov    %esi,%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 11             	movsbl (%ecx),%edx
+ 21a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 21d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 21f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 224:	77 1f                	ja     245 <atoi+0x35>
+ 226:	8d 76 00             	lea    0x0(%esi),%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 230:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 233:	83 c1 01             	add    $0x1,%ecx
+ 236:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 11             	movsbl (%ecx),%edx
+ 23d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	5b                   	pop    %ebx
+ 246:	5d                   	pop    %ebp
+ 247:	c3                   	ret    
+ 248:	90                   	nop
+ 249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	56                   	push   %esi
+ 254:	53                   	push   %ebx
+ 255:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 258:	8b 45 08             	mov    0x8(%ebp),%eax
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 db                	test   %ebx,%ebx
+ 260:	7e 14                	jle    276 <memmove+0x26>
+ 262:	31 d2                	xor    %edx,%edx
+ 264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 268:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 26c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 26f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 272:	39 d3                	cmp    %edx,%ebx
+ 274:	75 f2                	jne    268 <memmove+0x18>
+  return vdst;
+}
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5d                   	pop    %ebp
+ 279:	c3                   	ret    
+
+0000027a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 27f:	cd 40                	int    $0x40
+ 281:	c3                   	ret    
+
+00000282 <exit>:
+SYSCALL(exit)
+ 282:	b8 02 00 00 00       	mov    $0x2,%eax
+ 287:	cd 40                	int    $0x40
+ 289:	c3                   	ret    
+
+0000028a <wait>:
+SYSCALL(wait)
+ 28a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 28f:	cd 40                	int    $0x40
+ 291:	c3                   	ret    
+
+00000292 <pipe>:
+SYSCALL(pipe)
+ 292:	b8 04 00 00 00       	mov    $0x4,%eax
+ 297:	cd 40                	int    $0x40
+ 299:	c3                   	ret    
+
+0000029a <read>:
+SYSCALL(read)
+ 29a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <write>:
+SYSCALL(write)
+ 2a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <close>:
+SYSCALL(close)
+ 2aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <kill>:
+SYSCALL(kill)
+ 2b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <exec>:
+SYSCALL(exec)
+ 2ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <open>:
+SYSCALL(open)
+ 2c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <mknod>:
+SYSCALL(mknod)
+ 2ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <unlink>:
+SYSCALL(unlink)
+ 2d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <fstat>:
+SYSCALL(fstat)
+ 2da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <link>:
+SYSCALL(link)
+ 2e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mkdir>:
+SYSCALL(mkdir)
+ 2ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <chdir>:
+SYSCALL(chdir)
+ 2f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <dup>:
+SYSCALL(dup)
+ 2fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <getpid>:
+SYSCALL(getpid)
+ 302:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <sbrk>:
+SYSCALL(sbrk)
+ 30a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <sleep>:
+SYSCALL(sleep)
+ 312:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <uptime>:
+SYSCALL(uptime)
+ 31a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getNumProc>:
+SYSCALL(getNumProc)
+ 322:	b8 16 00 00 00       	mov    $0x16,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 32a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 332:	b8 18 00 00 00       	mov    $0x18,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 33a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 342:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <process_state>:
+SYSCALL(process_state)
+ 34a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 352:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <inc_cpucounter>:
+ 35a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+ 362:	66 90                	xchg   %ax,%ax
+ 364:	66 90                	xchg   %ax,%ax
+ 366:	66 90                	xchg   %ax,%ax
+ 368:	66 90                	xchg   %ax,%ax
+ 36a:	66 90                	xchg   %ax,%ax
+ 36c:	66 90                	xchg   %ax,%ax
+ 36e:	66 90                	xchg   %ax,%ax
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 379:	85 d2                	test   %edx,%edx
+{
+ 37b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 37e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 380:	79 76                	jns    3f8 <printint+0x88>
+ 382:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 386:	74 70                	je     3f8 <printint+0x88>
+    x = -xx;
+ 388:	f7 d8                	neg    %eax
+    neg = 1;
+ 38a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 391:	31 f6                	xor    %esi,%esi
+ 393:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 396:	eb 0a                	jmp    3a2 <printint+0x32>
+ 398:	90                   	nop
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	89 fe                	mov    %edi,%esi
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3a7:	f7 f1                	div    %ecx
+ 3a9:	0f b6 92 a4 07 00 00 	movzbl 0x7a4(%edx),%edx
+  }while((x /= base) != 0);
+ 3b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3b5:	75 e9                	jne    3a0 <printint+0x30>
+  if(neg)
+ 3b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ba:	85 c0                	test   %eax,%eax
+ 3bc:	74 08                	je     3c6 <printint+0x56>
+    buf[i++] = '-';
+ 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3d3:	83 ec 04             	sub    $0x4,%esp
+ 3d6:	83 ee 01             	sub    $0x1,%esi
+ 3d9:	6a 01                	push   $0x1
+ 3db:	53                   	push   %ebx
+ 3dc:	57                   	push   %edi
+ 3dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3e0:	e8 bd fe ff ff       	call   2a2 <write>
+
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3ff:	eb 90                	jmp    391 <printint+0x21>
+ 401:	eb 0d                	jmp    410 <printf>
+ 403:	90                   	nop
+ 404:	90                   	nop
+ 405:	90                   	nop
+ 406:	90                   	nop
+ 407:	90                   	nop
+ 408:	90                   	nop
+ 409:	90                   	nop
+ 40a:	90                   	nop
+ 40b:	90                   	nop
+ 40c:	90                   	nop
+ 40d:	90                   	nop
+ 40e:	90                   	nop
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 419:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 41c:	0f b6 1e             	movzbl (%esi),%ebx
+ 41f:	84 db                	test   %bl,%bl
+ 421:	0f 84 b3 00 00 00    	je     4da <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 427:	8d 45 10             	lea    0x10(%ebp),%eax
+ 42a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 42d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 42f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 432:	eb 2f                	jmp    463 <printf+0x53>
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	0f 84 a7 00 00 00    	je     4e8 <printf+0xd8>
+  write(fd, &c, 1);
+ 441:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 444:	83 ec 04             	sub    $0x4,%esp
+ 447:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 44a:	6a 01                	push   $0x1
+ 44c:	50                   	push   %eax
+ 44d:	ff 75 08             	pushl  0x8(%ebp)
+ 450:	e8 4d fe ff ff       	call   2a2 <write>
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 45b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 45f:	84 db                	test   %bl,%bl
+ 461:	74 77                	je     4da <printf+0xca>
+    if(state == 0){
+ 463:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 465:	0f be cb             	movsbl %bl,%ecx
+ 468:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 46b:	74 cb                	je     438 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 46d:	83 ff 25             	cmp    $0x25,%edi
+ 470:	75 e6                	jne    458 <printf+0x48>
+      if(c == 'd'){
+ 472:	83 f8 64             	cmp    $0x64,%eax
+ 475:	0f 84 05 01 00 00    	je     580 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 47b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 481:	83 f9 70             	cmp    $0x70,%ecx
+ 484:	74 72                	je     4f8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 486:	83 f8 73             	cmp    $0x73,%eax
+ 489:	0f 84 99 00 00 00    	je     528 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 48f:	83 f8 63             	cmp    $0x63,%eax
+ 492:	0f 84 08 01 00 00    	je     5a0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 ef 00 00 00    	je     590 <printf+0x180>
+  write(fd, &c, 1);
+ 4a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a4:	83 ec 04             	sub    $0x4,%esp
+ 4a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ab:	6a 01                	push   $0x1
+ 4ad:	50                   	push   %eax
+ 4ae:	ff 75 08             	pushl  0x8(%ebp)
+ 4b1:	e8 ec fd ff ff       	call   2a2 <write>
+ 4b6:	83 c4 0c             	add    $0xc,%esp
+ 4b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4bf:	6a 01                	push   $0x1
+ 4c1:	50                   	push   %eax
+ 4c2:	ff 75 08             	pushl  0x8(%ebp)
+ 4c5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4c8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4ca:	e8 d3 fd ff ff       	call   2a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4d6:	84 db                	test   %bl,%bl
+ 4d8:	75 89                	jne    463 <printf+0x53>
+    }
+  }
+}
+ 4da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4dd:	5b                   	pop    %ebx
+ 4de:	5e                   	pop    %esi
+ 4df:	5f                   	pop    %edi
+ 4e0:	5d                   	pop    %ebp
+ 4e1:	c3                   	ret    
+ 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4ed:	e9 66 ff ff ff       	jmp    458 <printf+0x48>
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f8:	83 ec 0c             	sub    $0xc,%esp
+ 4fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	6a 00                	push   $0x0
+ 502:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 505:	8b 45 08             	mov    0x8(%ebp),%eax
+ 508:	8b 17                	mov    (%edi),%edx
+ 50a:	e8 61 fe ff ff       	call   370 <printint>
+        ap++;
+ 50f:	89 f8                	mov    %edi,%eax
+ 511:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 514:	31 ff                	xor    %edi,%edi
+        ap++;
+ 516:	83 c0 04             	add    $0x4,%eax
+ 519:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 51c:	e9 37 ff ff ff       	jmp    458 <printf+0x48>
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 52b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 52d:	83 c0 04             	add    $0x4,%eax
+ 530:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 533:	85 c9                	test   %ecx,%ecx
+ 535:	0f 84 8e 00 00 00    	je     5c9 <printf+0x1b9>
+        while(*s != 0){
+ 53b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 53e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 540:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 542:	84 c0                	test   %al,%al
+ 544:	0f 84 0e ff ff ff    	je     458 <printf+0x48>
+ 54a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 54d:	89 de                	mov    %ebx,%esi
+ 54f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 552:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 555:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 558:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 55b:	83 c6 01             	add    $0x1,%esi
+ 55e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 561:	6a 01                	push   $0x1
+ 563:	57                   	push   %edi
+ 564:	53                   	push   %ebx
+ 565:	e8 38 fd ff ff       	call   2a2 <write>
+        while(*s != 0){
+ 56a:	0f b6 06             	movzbl (%esi),%eax
+ 56d:	83 c4 10             	add    $0x10,%esp
+ 570:	84 c0                	test   %al,%al
+ 572:	75 e4                	jne    558 <printf+0x148>
+ 574:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 577:	31 ff                	xor    %edi,%edi
+ 579:	e9 da fe ff ff       	jmp    458 <printf+0x48>
+ 57e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	e9 73 ff ff ff       	jmp    502 <printf+0xf2>
+ 58f:	90                   	nop
+  write(fd, &c, 1);
+ 590:	83 ec 04             	sub    $0x4,%esp
+ 593:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 596:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 599:	6a 01                	push   $0x1
+ 59b:	e9 21 ff ff ff       	jmp    4c1 <printf+0xb1>
+        putc(fd, *ap);
+ 5a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5a6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5a8:	6a 01                	push   $0x1
+        ap++;
+ 5aa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5b3:	50                   	push   %eax
+ 5b4:	ff 75 08             	pushl  0x8(%ebp)
+ 5b7:	e8 e6 fc ff ff       	call   2a2 <write>
+        ap++;
+ 5bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5bf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5c2:	31 ff                	xor    %edi,%edi
+ 5c4:	e9 8f fe ff ff       	jmp    458 <printf+0x48>
+          s = "(null)";
+ 5c9:	bb 9c 07 00 00       	mov    $0x79c,%ebx
+        while(*s != 0){
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	e9 72 ff ff ff       	jmp    54a <printf+0x13a>
+ 5d8:	66 90                	xchg   %ax,%ax
+ 5da:	66 90                	xchg   %ax,%ax
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	a1 48 0a 00 00       	mov    0xa48,%eax
+{
+ 5e6:	89 e5                	mov    %esp,%ebp
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	53                   	push   %ebx
+ 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f8:	39 c8                	cmp    %ecx,%eax
+ 5fa:	8b 10                	mov    (%eax),%edx
+ 5fc:	73 32                	jae    630 <free+0x50>
+ 5fe:	39 d1                	cmp    %edx,%ecx
+ 600:	72 04                	jb     606 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 602:	39 d0                	cmp    %edx,%eax
+ 604:	72 32                	jb     638 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 606:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 609:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60c:	39 fa                	cmp    %edi,%edx
+ 60e:	74 30                	je     640 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 610:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 613:	8b 50 04             	mov    0x4(%eax),%edx
+ 616:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 619:	39 f1                	cmp    %esi,%ecx
+ 61b:	74 3a                	je     657 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 61d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 61f:	a3 48 0a 00 00       	mov    %eax,0xa48
+}
+ 624:	5b                   	pop    %ebx
+ 625:	5e                   	pop    %esi
+ 626:	5f                   	pop    %edi
+ 627:	5d                   	pop    %ebp
+ 628:	c3                   	ret    
+ 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 04                	jb     638 <free+0x58>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	72 ce                	jb     606 <free+0x26>
+{
+ 638:	89 d0                	mov    %edx,%eax
+ 63a:	eb bc                	jmp    5f8 <free+0x18>
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 640:	03 72 04             	add    0x4(%edx),%esi
+ 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 646:	8b 10                	mov    (%eax),%edx
+ 648:	8b 12                	mov    (%edx),%edx
+ 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 64d:	8b 50 04             	mov    0x4(%eax),%edx
+ 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 653:	39 f1                	cmp    %esi,%ecx
+ 655:	75 c6                	jne    61d <free+0x3d>
+    p->s.size += bp->s.size;
+ 657:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 65a:	a3 48 0a 00 00       	mov    %eax,0xa48
+    p->s.size += bp->s.size;
+ 65f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 665:	89 10                	mov    %edx,(%eax)
+}
+ 667:	5b                   	pop    %ebx
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000670 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 679:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 67c:	8b 15 48 0a 00 00    	mov    0xa48,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 682:	8d 78 07             	lea    0x7(%eax),%edi
+ 685:	c1 ef 03             	shr    $0x3,%edi
+ 688:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 68b:	85 d2                	test   %edx,%edx
+ 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
+ 693:	8b 02                	mov    (%edx),%eax
+ 695:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 698:	39 cf                	cmp    %ecx,%edi
+ 69a:	76 6c                	jbe    708 <malloc+0x98>
+ 69c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6a7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6b1:	eb 0e                	jmp    6c1 <malloc+0x51>
+ 6b3:	90                   	nop
+ 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bd:	39 f9                	cmp    %edi,%ecx
+ 6bf:	73 47                	jae    708 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6c1:	39 05 48 0a 00 00    	cmp    %eax,0xa48
+ 6c7:	89 c2                	mov    %eax,%edx
+ 6c9:	75 ed                	jne    6b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6cb:	83 ec 0c             	sub    $0xc,%esp
+ 6ce:	56                   	push   %esi
+ 6cf:	e8 36 fc ff ff       	call   30a <sbrk>
+  if(p == (char*)-1)
+ 6d4:	83 c4 10             	add    $0x10,%esp
+ 6d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6da:	74 1c                	je     6f8 <malloc+0x88>
+  hp->s.size = nu;
+ 6dc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6df:	83 ec 0c             	sub    $0xc,%esp
+ 6e2:	83 c0 08             	add    $0x8,%eax
+ 6e5:	50                   	push   %eax
+ 6e6:	e8 f5 fe ff ff       	call   5e0 <free>
+  return freep;
+ 6eb:	8b 15 48 0a 00 00    	mov    0xa48,%edx
+      if((p = morecore(nunits)) == 0)
+ 6f1:	83 c4 10             	add    $0x10,%esp
+ 6f4:	85 d2                	test   %edx,%edx
+ 6f6:	75 c0                	jne    6b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6fb:	31 c0                	xor    %eax,%eax
+}
+ 6fd:	5b                   	pop    %ebx
+ 6fe:	5e                   	pop    %esi
+ 6ff:	5f                   	pop    %edi
+ 700:	5d                   	pop    %ebp
+ 701:	c3                   	ret    
+ 702:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 708:	39 cf                	cmp    %ecx,%edi
+ 70a:	74 54                	je     760 <malloc+0xf0>
+        p->s.size -= nunits;
+ 70c:	29 f9                	sub    %edi,%ecx
+ 70e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 711:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 714:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 717:	89 15 48 0a 00 00    	mov    %edx,0xa48
+}
+ 71d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 720:	83 c0 08             	add    $0x8,%eax
+}
+ 723:	5b                   	pop    %ebx
+ 724:	5e                   	pop    %esi
+ 725:	5f                   	pop    %edi
+ 726:	5d                   	pop    %ebp
+ 727:	c3                   	ret    
+ 728:	90                   	nop
+ 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 730:	c7 05 48 0a 00 00 4c 	movl   $0xa4c,0xa48
+ 737:	0a 00 00 
+ 73a:	c7 05 4c 0a 00 00 4c 	movl   $0xa4c,0xa4c
+ 741:	0a 00 00 
+    base.s.size = 0;
+ 744:	b8 4c 0a 00 00       	mov    $0xa4c,%eax
+ 749:	c7 05 50 0a 00 00 00 	movl   $0x0,0xa50
+ 750:	00 00 00 
+ 753:	e9 44 ff ff ff       	jmp    69c <malloc+0x2c>
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 760:	8b 08                	mov    (%eax),%ecx
+ 762:	89 0a                	mov    %ecx,(%edx)
+ 764:	eb b1                	jmp    717 <malloc+0xa7>
diff -ruN xv6org/printNumProc.c xv6mhybrid/printNumProc.c
--- xv6org/printNumProc.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printNumProc.c	2020-10-14 12:49:55.275709000 +0530
@@ -0,0 +1,10 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+  int num = getNumProc();	
+  printf(1 , "Number of active processes(in either state): %d \n" , num);
+  exit();
+}
\ No newline at end of file
diff -ruN xv6org/printNumProc.d xv6mhybrid/printNumProc.d
--- xv6org/printNumProc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printNumProc.d	2020-10-15 19:50:35.621647409 +0530
@@ -0,0 +1,2 @@
+printNumProc.o: printNumProc.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h
Binary files xv6org/printNumProc.o and xv6mhybrid/printNumProc.o differ
diff -ruN xv6org/printNumProc.sym xv6mhybrid/printNumProc.sym
--- xv6org/printNumProc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printNumProc.sym	2020-10-15 19:50:35.637646371 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000768 .rodata
+000007b8 .eh_frame
+00000a48 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 printNumProc.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+000007a4 digits.1056
+00000000 umalloc.c
+00000a48 freep
+00000a4c base
+00000030 strcpy
+00000410 printf
+00000250 memmove
+000002ca mknod
+00000140 gets
+00000302 getpid
+00000670 malloc
+00000312 sleep
+00000342 get_burst_time
+00000292 pipe
+000002a2 write
+000002da fstat
+000002b2 kill
+0000034a process_state
+000002f2 chdir
+00000352 dec_burstTime
+000002ba exec
+0000028a wait
+0000035a inc_cpucounter
+0000029a read
+000002d2 unlink
+0000027a fork
+0000030a sbrk
+0000031a uptime
+00000a48 __bss_start
+000000e0 memset
+00000000 main
+0000033a set_burst_time
+00000060 strcmp
+000002fa dup
+0000032a getMaxPid
+00000322 getNumProc
+00000332 getProcInfo
+000001c0 stat
+00000a48 _edata
+00000a54 _end
+000002e2 link
+00000282 exit
+00000210 atoi
+000000b0 strlen
+000002c2 open
+00000100 strchr
+000002ea mkdir
+000002aa close
+000005e0 free
Binary files xv6org/_printProcInfo and xv6mhybrid/_printProcInfo differ
diff -ruN xv6org/printProcInfo.asm xv6mhybrid/printProcInfo.asm
--- xv6org/printProcInfo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printProcInfo.asm	2020-10-15 19:50:35.669644293 +0530
@@ -0,0 +1,1226 @@
+
+_printProcInfo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main()
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+    int pid=2;                        // choose yourself  
+    struct processInfo pif;
+    int tmp=getProcInfo(pid, &pif);   //stores the info of process in pif
+   e:	8d 45 ec             	lea    -0x14(%ebp),%eax
+{
+  11:	83 ec 1c             	sub    $0x1c,%esp
+    int tmp=getProcInfo(pid, &pif);   //stores the info of process in pif
+  14:	50                   	push   %eax
+  15:	6a 02                	push   $0x2
+  17:	e8 66 03 00 00       	call   382 <getProcInfo>
+    if(tmp==-1){
+  1c:	83 c4 10             	add    $0x10,%esp
+  1f:	83 f8 ff             	cmp    $0xffffffff,%eax
+  22:	74 3c                	je     60 <main+0x60>
+        printf(1, "No process found, return value %d \n",tmp );            //No Process Found as -1 returned
+    }
+    else{
+        printf(1, "Process Info: \n  Parent PID is: %d \n ", pif.ppid);
+  24:	50                   	push   %eax
+  25:	ff 75 ec             	pushl  -0x14(%ebp)
+  28:	68 dc 07 00 00       	push   $0x7dc
+  2d:	6a 01                	push   $0x1
+  2f:	e8 2c 04 00 00       	call   460 <printf>
+        printf(1, "Size of the process: %d \n", pif.psize);
+  34:	83 c4 0c             	add    $0xc,%esp
+  37:	ff 75 f0             	pushl  -0x10(%ebp)
+  3a:	68 28 08 00 00       	push   $0x828
+  3f:	6a 01                	push   $0x1
+  41:	e8 1a 04 00 00       	call   460 <printf>
+        printf(1, "Number of context switches: %d \n", pif.numberContextSwitches);
+  46:	83 c4 0c             	add    $0xc,%esp
+  49:	ff 75 f4             	pushl  -0xc(%ebp)
+  4c:	68 04 08 00 00       	push   $0x804
+  51:	6a 01                	push   $0x1
+  53:	e8 08 04 00 00       	call   460 <printf>
+  58:	83 c4 10             	add    $0x10,%esp
+    }
+    exit(); 
+  5b:	e8 72 02 00 00       	call   2d2 <exit>
+        printf(1, "No process found, return value %d \n",tmp );            //No Process Found as -1 returned
+  60:	52                   	push   %edx
+  61:	6a ff                	push   $0xffffffff
+  63:	68 b8 07 00 00       	push   $0x7b8
+  68:	6a 01                	push   $0x1
+  6a:	e8 f1 03 00 00       	call   460 <printf>
+  6f:	83 c4 10             	add    $0x10,%esp
+  72:	eb e7                	jmp    5b <main+0x5b>
+  74:	66 90                	xchg   %ax,%ax
+  76:	66 90                	xchg   %ax,%ax
+  78:	66 90                	xchg   %ax,%ax
+  7a:	66 90                	xchg   %ax,%ax
+  7c:	66 90                	xchg   %ax,%ax
+  7e:	66 90                	xchg   %ax,%ax
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	0f b6 19             	movzbl (%ecx),%ebx
+  c0:	84 c0                	test   %al,%al
+  c2:	75 1c                	jne    e0 <strcmp+0x30>
+  c4:	eb 2a                	jmp    f0 <strcmp+0x40>
+  c6:	8d 76 00             	lea    0x0(%esi),%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	83 c1 01             	add    $0x1,%ecx
+  d9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  dc:	84 c0                	test   %al,%al
+  de:	74 10                	je     f0 <strcmp+0x40>
+  e0:	38 d8                	cmp    %bl,%al
+  e2:	74 ec                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e4:	29 d8                	sub    %ebx,%eax
+}
+  e6:	5b                   	pop    %ebx
+  e7:	5d                   	pop    %ebp
+  e8:	c3                   	ret    
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 120:	31 c0                	xor    %eax,%eax
+}
+ 122:	5d                   	pop    %ebp
+ 123:	c3                   	ret    
+ 124:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 12a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+ 198:	89 f3                	mov    %esi,%ebx
+{
+ 19a:	83 ec 1c             	sub    $0x1c,%esp
+ 19d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a0:	eb 2f                	jmp    1d1 <gets+0x41>
+ 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1ab:	83 ec 04             	sub    $0x4,%esp
+ 1ae:	6a 01                	push   $0x1
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 32 01 00 00       	call   2ea <read>
+    if(cc < 1)
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	85 c0                	test   %eax,%eax
+ 1bd:	7e 1c                	jle    1db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c3:	83 c7 01             	add    $0x1,%edi
+ 1c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c9:	3c 0a                	cmp    $0xa,%al
+ 1cb:	74 23                	je     1f0 <gets+0x60>
+ 1cd:	3c 0d                	cmp    $0xd,%al
+ 1cf:	74 1f                	je     1f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1d1:	83 c3 01             	add    $0x1,%ebx
+ 1d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d7:	89 fe                	mov    %edi,%esi
+ 1d9:	7c cd                	jl     1a8 <gets+0x18>
+ 1db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5e                   	pop    %esi
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	90                   	nop
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	01 de                	add    %ebx,%esi
+ 1f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 200:	5b                   	pop    %ebx
+ 201:	5e                   	pop    %esi
+ 202:	5f                   	pop    %edi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	pushl  0x8(%ebp)
+ 21d:	e8 f0 00 00 00       	call   312 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	pushl  0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f3 00 00 00       	call   32a <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 b9 00 00 00       	call   2fa <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	89 f6                	mov    %esi,%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 11             	movsbl (%ecx),%edx
+ 26a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 26d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 26f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 274:	77 1f                	ja     295 <atoi+0x35>
+ 276:	8d 76 00             	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 280:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 283:	83 c1 01             	add    $0x1,%ecx
+ 286:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 11             	movsbl (%ecx),%edx
+ 28d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	5b                   	pop    %ebx
+ 296:	5d                   	pop    %ebp
+ 297:	c3                   	ret    
+ 298:	90                   	nop
+ 299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+ 2a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 db                	test   %ebx,%ebx
+ 2b0:	7e 14                	jle    2c6 <memmove+0x26>
+ 2b2:	31 d2                	xor    %edx,%edx
+ 2b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2bf:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2c2:	39 d3                	cmp    %edx,%ebx
+ 2c4:	75 f2                	jne    2b8 <memmove+0x18>
+  return vdst;
+}
+ 2c6:	5b                   	pop    %ebx
+ 2c7:	5e                   	pop    %esi
+ 2c8:	5d                   	pop    %ebp
+ 2c9:	c3                   	ret    
+
+000002ca <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <exit>:
+SYSCALL(exit)
+ 2d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <wait>:
+SYSCALL(wait)
+ 2da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <pipe>:
+SYSCALL(pipe)
+ 2e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <read>:
+SYSCALL(read)
+ 2ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <write>:
+SYSCALL(write)
+ 2f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <close>:
+SYSCALL(close)
+ 2fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <kill>:
+SYSCALL(kill)
+ 302:	b8 06 00 00 00       	mov    $0x6,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <exec>:
+SYSCALL(exec)
+ 30a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <open>:
+SYSCALL(open)
+ 312:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mknod>:
+SYSCALL(mknod)
+ 31a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <unlink>:
+SYSCALL(unlink)
+ 322:	b8 12 00 00 00       	mov    $0x12,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <fstat>:
+SYSCALL(fstat)
+ 32a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <link>:
+SYSCALL(link)
+ 332:	b8 13 00 00 00       	mov    $0x13,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <mkdir>:
+SYSCALL(mkdir)
+ 33a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <chdir>:
+SYSCALL(chdir)
+ 342:	b8 09 00 00 00       	mov    $0x9,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <dup>:
+SYSCALL(dup)
+ 34a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getpid>:
+SYSCALL(getpid)
+ 352:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <sbrk>:
+SYSCALL(sbrk)
+ 35a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <sleep>:
+SYSCALL(sleep)
+ 362:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <uptime>:
+SYSCALL(uptime)
+ 36a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <getNumProc>:
+SYSCALL(getNumProc)
+ 372:	b8 16 00 00 00       	mov    $0x16,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 382:	b8 18 00 00 00       	mov    $0x18,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 392:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <process_state>:
+SYSCALL(process_state)
+ 39a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 3a2:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <inc_cpucounter>:
+ 3aa:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+ 3b2:	66 90                	xchg   %ax,%ax
+ 3b4:	66 90                	xchg   %ax,%ax
+ 3b6:	66 90                	xchg   %ax,%ax
+ 3b8:	66 90                	xchg   %ax,%ax
+ 3ba:	66 90                	xchg   %ax,%ax
+ 3bc:	66 90                	xchg   %ax,%ax
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3c9:	85 d2                	test   %edx,%edx
+{
+ 3cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ce:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3d0:	79 76                	jns    448 <printint+0x88>
+ 3d2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3d6:	74 70                	je     448 <printint+0x88>
+    x = -xx;
+ 3d8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3da:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e1:	31 f6                	xor    %esi,%esi
+ 3e3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3e6:	eb 0a                	jmp    3f2 <printint+0x32>
+ 3e8:	90                   	nop
+ 3e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 fe                	mov    %edi,%esi
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3f7:	f7 f1                	div    %ecx
+ 3f9:	0f b6 92 4c 08 00 00 	movzbl 0x84c(%edx),%edx
+  }while((x /= base) != 0);
+ 400:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 402:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 405:	75 e9                	jne    3f0 <printint+0x30>
+  if(neg)
+ 407:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 40a:	85 c0                	test   %eax,%eax
+ 40c:	74 08                	je     416 <printint+0x56>
+    buf[i++] = '-';
+ 40e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 413:	8d 7e 02             	lea    0x2(%esi),%edi
+ 416:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 41a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+ 420:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 423:	83 ec 04             	sub    $0x4,%esp
+ 426:	83 ee 01             	sub    $0x1,%esi
+ 429:	6a 01                	push   $0x1
+ 42b:	53                   	push   %ebx
+ 42c:	57                   	push   %edi
+ 42d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 430:	e8 bd fe ff ff       	call   2f2 <write>
+
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 44f:	eb 90                	jmp    3e1 <printint+0x21>
+ 451:	eb 0d                	jmp    460 <printf>
+ 453:	90                   	nop
+ 454:	90                   	nop
+ 455:	90                   	nop
+ 456:	90                   	nop
+ 457:	90                   	nop
+ 458:	90                   	nop
+ 459:	90                   	nop
+ 45a:	90                   	nop
+ 45b:	90                   	nop
+ 45c:	90                   	nop
+ 45d:	90                   	nop
+ 45e:	90                   	nop
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 469:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 46c:	0f b6 1e             	movzbl (%esi),%ebx
+ 46f:	84 db                	test   %bl,%bl
+ 471:	0f 84 b3 00 00 00    	je     52a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 477:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 47d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 47f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 482:	eb 2f                	jmp    4b3 <printf+0x53>
+ 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	0f 84 a7 00 00 00    	je     538 <printf+0xd8>
+  write(fd, &c, 1);
+ 491:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 494:	83 ec 04             	sub    $0x4,%esp
+ 497:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 49a:	6a 01                	push   $0x1
+ 49c:	50                   	push   %eax
+ 49d:	ff 75 08             	pushl  0x8(%ebp)
+ 4a0:	e8 4d fe ff ff       	call   2f2 <write>
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4ab:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4af:	84 db                	test   %bl,%bl
+ 4b1:	74 77                	je     52a <printf+0xca>
+    if(state == 0){
+ 4b3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4b5:	0f be cb             	movsbl %bl,%ecx
+ 4b8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4bb:	74 cb                	je     488 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4bd:	83 ff 25             	cmp    $0x25,%edi
+ 4c0:	75 e6                	jne    4a8 <printf+0x48>
+      if(c == 'd'){
+ 4c2:	83 f8 64             	cmp    $0x64,%eax
+ 4c5:	0f 84 05 01 00 00    	je     5d0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4cb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4d1:	83 f9 70             	cmp    $0x70,%ecx
+ 4d4:	74 72                	je     548 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d6:	83 f8 73             	cmp    $0x73,%eax
+ 4d9:	0f 84 99 00 00 00    	je     578 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4df:	83 f8 63             	cmp    $0x63,%eax
+ 4e2:	0f 84 08 01 00 00    	je     5f0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	0f 84 ef 00 00 00    	je     5e0 <printf+0x180>
+  write(fd, &c, 1);
+ 4f1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4f4:	83 ec 04             	sub    $0x4,%esp
+ 4f7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4fb:	6a 01                	push   $0x1
+ 4fd:	50                   	push   %eax
+ 4fe:	ff 75 08             	pushl  0x8(%ebp)
+ 501:	e8 ec fd ff ff       	call   2f2 <write>
+ 506:	83 c4 0c             	add    $0xc,%esp
+ 509:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 50c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 50f:	6a 01                	push   $0x1
+ 511:	50                   	push   %eax
+ 512:	ff 75 08             	pushl  0x8(%ebp)
+ 515:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 518:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 51a:	e8 d3 fd ff ff       	call   2f2 <write>
+  for(i = 0; fmt[i]; i++){
+ 51f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 523:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 526:	84 db                	test   %bl,%bl
+ 528:	75 89                	jne    4b3 <printf+0x53>
+    }
+  }
+}
+ 52a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 52d:	5b                   	pop    %ebx
+ 52e:	5e                   	pop    %esi
+ 52f:	5f                   	pop    %edi
+ 530:	5d                   	pop    %ebp
+ 531:	c3                   	ret    
+ 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 538:	bf 25 00 00 00       	mov    $0x25,%edi
+ 53d:	e9 66 ff ff ff       	jmp    4a8 <printf+0x48>
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 548:	83 ec 0c             	sub    $0xc,%esp
+ 54b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 550:	6a 00                	push   $0x0
+ 552:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 555:	8b 45 08             	mov    0x8(%ebp),%eax
+ 558:	8b 17                	mov    (%edi),%edx
+ 55a:	e8 61 fe ff ff       	call   3c0 <printint>
+        ap++;
+ 55f:	89 f8                	mov    %edi,%eax
+ 561:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 564:	31 ff                	xor    %edi,%edi
+        ap++;
+ 566:	83 c0 04             	add    $0x4,%eax
+ 569:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 56c:	e9 37 ff ff ff       	jmp    4a8 <printf+0x48>
+ 571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 578:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 57b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 57d:	83 c0 04             	add    $0x4,%eax
+ 580:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 583:	85 c9                	test   %ecx,%ecx
+ 585:	0f 84 8e 00 00 00    	je     619 <printf+0x1b9>
+        while(*s != 0){
+ 58b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 58e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 590:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 592:	84 c0                	test   %al,%al
+ 594:	0f 84 0e ff ff ff    	je     4a8 <printf+0x48>
+ 59a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 59d:	89 de                	mov    %ebx,%esi
+ 59f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5a5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5a8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5ab:	83 c6 01             	add    $0x1,%esi
+ 5ae:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5b1:	6a 01                	push   $0x1
+ 5b3:	57                   	push   %edi
+ 5b4:	53                   	push   %ebx
+ 5b5:	e8 38 fd ff ff       	call   2f2 <write>
+        while(*s != 0){
+ 5ba:	0f b6 06             	movzbl (%esi),%eax
+ 5bd:	83 c4 10             	add    $0x10,%esp
+ 5c0:	84 c0                	test   %al,%al
+ 5c2:	75 e4                	jne    5a8 <printf+0x148>
+ 5c4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5c7:	31 ff                	xor    %edi,%edi
+ 5c9:	e9 da fe ff ff       	jmp    4a8 <printf+0x48>
+ 5ce:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5d8:	6a 01                	push   $0x1
+ 5da:	e9 73 ff ff ff       	jmp    552 <printf+0xf2>
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5e3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5e6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	e9 21 ff ff ff       	jmp    511 <printf+0xb1>
+        putc(fd, *ap);
+ 5f0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+        ap++;
+ 5fa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5fd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 600:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 603:	50                   	push   %eax
+ 604:	ff 75 08             	pushl  0x8(%ebp)
+ 607:	e8 e6 fc ff ff       	call   2f2 <write>
+        ap++;
+ 60c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 60f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 612:	31 ff                	xor    %edi,%edi
+ 614:	e9 8f fe ff ff       	jmp    4a8 <printf+0x48>
+          s = "(null)";
+ 619:	bb 42 08 00 00       	mov    $0x842,%ebx
+        while(*s != 0){
+ 61e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 623:	e9 72 ff ff ff       	jmp    59a <printf+0x13a>
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 631:	a1 f0 0a 00 00       	mov    0xaf0,%eax
+{
+ 636:	89 e5                	mov    %esp,%ebp
+ 638:	57                   	push   %edi
+ 639:	56                   	push   %esi
+ 63a:	53                   	push   %ebx
+ 63b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 63e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 648:	39 c8                	cmp    %ecx,%eax
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	73 32                	jae    680 <free+0x50>
+ 64e:	39 d1                	cmp    %edx,%ecx
+ 650:	72 04                	jb     656 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 652:	39 d0                	cmp    %edx,%eax
+ 654:	72 32                	jb     688 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 656:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 659:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65c:	39 fa                	cmp    %edi,%edx
+ 65e:	74 30                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 660:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 663:	8b 50 04             	mov    0x4(%eax),%edx
+ 666:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 669:	39 f1                	cmp    %esi,%ecx
+ 66b:	74 3a                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 66f:	a3 f0 0a 00 00       	mov    %eax,0xaf0
+}
+ 674:	5b                   	pop    %ebx
+ 675:	5e                   	pop    %esi
+ 676:	5f                   	pop    %edi
+ 677:	5d                   	pop    %ebp
+ 678:	c3                   	ret    
+ 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 680:	39 d0                	cmp    %edx,%eax
+ 682:	72 04                	jb     688 <free+0x58>
+ 684:	39 d1                	cmp    %edx,%ecx
+ 686:	72 ce                	jb     656 <free+0x26>
+{
+ 688:	89 d0                	mov    %edx,%eax
+ 68a:	eb bc                	jmp    648 <free+0x18>
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 c6                	jne    66d <free+0x3d>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 f0 0a 00 00       	mov    %eax,0xaf0
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	55                   	push   %ebp
+ 6c1:	89 e5                	mov    %esp,%ebp
+ 6c3:	57                   	push   %edi
+ 6c4:	56                   	push   %esi
+ 6c5:	53                   	push   %ebx
+ 6c6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6cc:	8b 15 f0 0a 00 00    	mov    0xaf0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6d5:	c1 ef 03             	shr    $0x3,%edi
+ 6d8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6db:	85 d2                	test   %edx,%edx
+ 6dd:	0f 84 9d 00 00 00    	je     780 <malloc+0xc0>
+ 6e3:	8b 02                	mov    (%edx),%eax
+ 6e5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6e8:	39 cf                	cmp    %ecx,%edi
+ 6ea:	76 6c                	jbe    758 <malloc+0x98>
+ 6ec:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6f2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6f7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 701:	eb 0e                	jmp    711 <malloc+0x51>
+ 703:	90                   	nop
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 708:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 70a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 70d:	39 f9                	cmp    %edi,%ecx
+ 70f:	73 47                	jae    758 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 05 f0 0a 00 00    	cmp    %eax,0xaf0
+ 717:	89 c2                	mov    %eax,%edx
+ 719:	75 ed                	jne    708 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	56                   	push   %esi
+ 71f:	e8 36 fc ff ff       	call   35a <sbrk>
+  if(p == (char*)-1)
+ 724:	83 c4 10             	add    $0x10,%esp
+ 727:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 72a:	74 1c                	je     748 <malloc+0x88>
+  hp->s.size = nu;
+ 72c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72f:	83 ec 0c             	sub    $0xc,%esp
+ 732:	83 c0 08             	add    $0x8,%eax
+ 735:	50                   	push   %eax
+ 736:	e8 f5 fe ff ff       	call   630 <free>
+  return freep;
+ 73b:	8b 15 f0 0a 00 00    	mov    0xaf0,%edx
+      if((p = morecore(nunits)) == 0)
+ 741:	83 c4 10             	add    $0x10,%esp
+ 744:	85 d2                	test   %edx,%edx
+ 746:	75 c0                	jne    708 <malloc+0x48>
+        return 0;
+  }
+}
+ 748:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 74b:	31 c0                	xor    %eax,%eax
+}
+ 74d:	5b                   	pop    %ebx
+ 74e:	5e                   	pop    %esi
+ 74f:	5f                   	pop    %edi
+ 750:	5d                   	pop    %ebp
+ 751:	c3                   	ret    
+ 752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 758:	39 cf                	cmp    %ecx,%edi
+ 75a:	74 54                	je     7b0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 75c:	29 f9                	sub    %edi,%ecx
+ 75e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 761:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 764:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 767:	89 15 f0 0a 00 00    	mov    %edx,0xaf0
+}
+ 76d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 770:	83 c0 08             	add    $0x8,%eax
+}
+ 773:	5b                   	pop    %ebx
+ 774:	5e                   	pop    %esi
+ 775:	5f                   	pop    %edi
+ 776:	5d                   	pop    %ebp
+ 777:	c3                   	ret    
+ 778:	90                   	nop
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 f0 0a 00 00 f4 	movl   $0xaf4,0xaf0
+ 787:	0a 00 00 
+ 78a:	c7 05 f4 0a 00 00 f4 	movl   $0xaf4,0xaf4
+ 791:	0a 00 00 
+    base.s.size = 0;
+ 794:	b8 f4 0a 00 00       	mov    $0xaf4,%eax
+ 799:	c7 05 f8 0a 00 00 00 	movl   $0x0,0xaf8
+ 7a0:	00 00 00 
+ 7a3:	e9 44 ff ff ff       	jmp    6ec <malloc+0x2c>
+ 7a8:	90                   	nop
+ 7a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 08                	mov    (%eax),%ecx
+ 7b2:	89 0a                	mov    %ecx,(%edx)
+ 7b4:	eb b1                	jmp    767 <malloc+0xa7>
diff -ruN xv6org/printProcInfo.c xv6mhybrid/printProcInfo.c
--- xv6org/printProcInfo.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printProcInfo.c	2020-10-14 12:53:40.406908000 +0530
@@ -0,0 +1,20 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main()
+{
+    int pid=2;                        // choose yourself  
+    struct processInfo pif;
+    int tmp=getProcInfo(pid, &pif);   //stores the info of process in pif
+    if(tmp==-1){
+        printf(1, "No process found, return value %d \n",tmp );            //No Process Found as -1 returned
+    }
+    else{
+        printf(1, "Process Info: \n  Parent PID is: %d \n ", pif.ppid);
+        printf(1, "Size of the process: %d \n", pif.psize);
+        printf(1, "Number of context switches: %d \n", pif.numberContextSwitches);
+    }
+    exit(); 
+}
\ No newline at end of file
diff -ruN xv6org/printProcInfo.d xv6mhybrid/printProcInfo.d
--- xv6org/printProcInfo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printProcInfo.d	2020-10-15 19:50:35.653645332 +0530
@@ -0,0 +1,2 @@
+printProcInfo.o: printProcInfo.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6org/printProcInfo.o and xv6mhybrid/printProcInfo.o differ
diff -ruN xv6org/printProcInfo.sym xv6mhybrid/printProcInfo.sym
--- xv6org/printProcInfo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/printProcInfo.sym	2020-10-15 19:50:35.669644293 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+000007b8 .rodata
+00000860 .eh_frame
+00000af0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 printProcInfo.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+0000084c digits.1056
+00000000 umalloc.c
+00000af0 freep
+00000af4 base
+00000080 strcpy
+00000460 printf
+000002a0 memmove
+0000031a mknod
+00000190 gets
+00000352 getpid
+000006c0 malloc
+00000362 sleep
+00000392 get_burst_time
+000002e2 pipe
+000002f2 write
+0000032a fstat
+00000302 kill
+0000039a process_state
+00000342 chdir
+000003a2 dec_burstTime
+0000030a exec
+000002da wait
+000003aa inc_cpucounter
+000002ea read
+00000322 unlink
+000002ca fork
+0000035a sbrk
+0000036a uptime
+00000af0 __bss_start
+00000130 memset
+00000000 main
+0000038a set_burst_time
+000000b0 strcmp
+0000034a dup
+0000037a getMaxPid
+00000372 getNumProc
+00000382 getProcInfo
+00000210 stat
+00000af0 _edata
+00000afc _end
+00000332 link
+000002d2 exit
+00000260 atoi
+00000100 strlen
+00000312 open
+00000150 strchr
+0000033a mkdir
+000002fa close
+00000630 free
diff -ruN xv6org/proc.c xv6mhybrid/proc.c
--- xv6org/proc.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/proc.c	2020-10-15 20:08:02.324958482 +0530
@@ -6,8 +6,10 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
 
-struct {
+struct
+{
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -20,32 +22,32 @@
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+void pinit(void)
 {
   initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags() & FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
+  {
     if (cpus[i].apicid == apicid)
       return &cpus[i];
   }
@@ -54,8 +56,9 @@
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   struct cpu *c;
   struct proc *p;
   pushcli();
@@ -70,7 +73,7 @@
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
@@ -78,8 +81,8 @@
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == UNUSED)
       goto found;
 
   release(&ptable.lock);
@@ -88,11 +91,13 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->count_contextswitch = 0;
+  p->burst_time = 0;
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
+  {
     p->state = UNUSED;
     return 0;
   }
@@ -100,15 +105,15 @@
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+  p->tf = (struct trapframe *)sp;
 
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+  *(uint *)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+  p->context = (struct context *)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
@@ -117,16 +122,15 @@
 
 //PAGEBREAK: 32
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
@@ -137,7 +141,7 @@
   p->tf->ss = p->tf->ds;
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
+  p->tf->eip = 0; // beginning of initcode.S
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -155,18 +159,20 @@
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
 
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0)
+  {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  }
+  else if (n < 0)
+  {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -177,20 +183,21 @@
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+  {
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
@@ -203,8 +210,8 @@
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
@@ -224,19 +231,20 @@
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
-void
-exit(void)
+void exit(void)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd])
+    {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
@@ -253,10 +261,12 @@
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->parent == curproc)
+    {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
         wakeup1(initproc);
     }
   }
@@ -269,22 +279,24 @@
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+int wait(void)
 {
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE)
+      {
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -301,13 +313,14 @@
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed)
+    {
       release(&ptable.lock);
       return -1;
     }
 
     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    sleep(curproc, &ptable.lock); //DOC: wait-sleep
   }
 }
 
@@ -319,39 +332,89 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
-void
-scheduler(void)
+
+// Default Round robin scheduling
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+//   c->proc = 0;
+
+//   for(;;){
+//     // Enable interrupts on this processor.
+//     sti();
+//     // Loop over process table looking for process to run.
+//     acquire(&ptable.lock);
+//     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+//       if(p->state != RUNNABLE)
+//         continue;
+
+//       (p->count_contextswitch)++;
+//       // Switch to chosen process.  It is the process's job
+//       // to release ptable.lock and then reacquire it
+//       // before jumping back to us.
+//       c->proc = p;
+//       switchuvm(p);
+//       p->state = RUNNING;
+
+//       swtch(&(c->scheduler), p->context);
+//       switchkvm();
+//       // Process is done running for now.
+//       // It should have changed its p->state before coming back.
+//       //(p->count_contextswitch)++;
+//       c->proc = 0;
+//     }
+//     release(&ptable.lock);
+
+//   }
+// }
+
+// Shortest Job First scheduler implementation
+void scheduler(void)
 {
-  struct proc *p;
+  struct proc *p,*lowest_bt,*p1;        //lowest_bt is the process with shortest burst time
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;)
+  {
     // Enable interrupts on this processor.
     sti();
-
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
+    lowest_bt= 0;
+    int currentMin = __INT_MAX__; // CPU burst times are between 1 and 20.
+    for (p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++)
+    {
+      if (p1->state != RUNNABLE)  continue;
+      if(p1->burst_time < currentMin)
+      {
+        lowest_bt = p1;
+        currentMin = p1->burst_time;
+      }
+      else if(p1->pid < lowest_bt->pid && p1->burst_time == currentMin)
+      {
+        lowest_bt=p1;
+      }
+      
+    }
+    p=lowest_bt;
+    if (p != 0)
+    {
+      (p->count_contextswitch)++;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      p->cpucounter = 0;
       swtch(&(c->scheduler), p->context);
       switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -362,19 +425,18 @@
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
     panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -382,10 +444,9 @@
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
+  acquire(&ptable.lock); //DOC: yieldlock
   myproc()->state = RUNNABLE;
   sched();
   release(&ptable.lock);
@@ -393,14 +454,14 @@
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 
-  if (first) {
+  if (first)
+  {
     // Some initialization functions must be run in the context
     // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
@@ -414,15 +475,14 @@
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -431,8 +491,8 @@
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
+  if (lk != &ptable.lock){                        //DOC: sleeplock0
+    acquire(&ptable.lock); //DOC: sleeplock1
     release(lk);
   }
   // Go to sleep.
@@ -445,7 +505,8 @@
   p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
+  if (lk != &ptable.lock)
+  { //DOC: sleeplock2
     release(&ptable.lock);
     acquire(lk);
   }
@@ -459,14 +520,13 @@
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == SLEEPING && p->chan == chan)
       p->state = RUNNABLE;
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   acquire(&ptable.lock);
   wakeup1(chan);
@@ -476,17 +536,18 @@
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
   acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)
+    {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
         p->state = RUNNABLE;
       release(&ptable.lock);
       return 0;
@@ -500,35 +561,149 @@
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [EMBRYO] "embryo",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    if (p->state == SLEEPING)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
   }
 }
+
+int getNumProc(void)
+{
+  struct proc *p;
+  acquire(&ptable.lock);
+  int cnt = 0;        // to count number of processes.
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if(p->state == UNUSED) continue;
+    cnt++;
+  }
+  release(&ptable.lock);
+  return cnt;
+}
+
+int getMaxPid(void)
+{
+  struct proc *p;
+  acquire(&ptable.lock);
+  int max_pid = -1;
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)              
+  {
+    if (p->pid > max_pid)       //to calculate max pid
+      max_pid = (p->pid);
+  }
+  release(&ptable.lock);
+  return max_pid;
+}
+
+
+int getProcInfo(int pid, struct processInfo *pif)
+{
+  struct proc *p;
+  acquire(&ptable.lock);
+  int flag = -1;
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)        // it it matches the given id
+    {
+      pif->ppid = p->parent->pid;
+      pif->numberContextSwitches = p->count_contextswitch;
+      pif->psize = p->sz;
+      flag = 0;
+      break;
+    }
+  }
+  release(&ptable.lock);
+  return flag;
+}
+int set_burst_time(int bt)
+{
+  int flag = -1;
+  acquire(&ptable.lock);
+  mycpu()->proc->burst_time = bt;       // to set the burst time
+  flag = 0;
+  release(&ptable.lock);
+  yield();
+  return flag;
+}
+
+int get_burst_time()
+{
+  int burstTime = -1;
+  acquire(&ptable.lock);
+  burstTime = mycpu()->proc->burst_time;
+  release(&ptable.lock);
+  return burstTime;
+}
+int process_state()
+{
+  struct proc *p;
+  sti();
+  acquire(&ptable.lock);
+  cprintf("Name \t PID \t State \t Burst_Time \n");
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if(p->state == ZOMBIE)
+      cprintf("%s \t %d \t ZOMBIE \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == RUNNABLE)
+      cprintf("%s \t %d \t RUNNABLE \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == EMBRYO)
+      cprintf("%s \t %d \t EMBRYO \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == RUNNING)
+      cprintf("%s \t %d \t RUNNING \t %d \n ", p->name, p->pid, p->burst_time);
+    else if (p->state == SLEEPING)
+      cprintf("%s \t %d \t SLEEPING \t %d \n ", p->name, p->pid, p->burst_time);
+  }
+  release(&ptable.lock);
+  return 0;
+}
+
+void dec_burstTime(void)
+{
+  acquire(&ptable.lock);
+  if(mycpu()->proc->burst_time < 0)
+  {
+    mycpu()->proc->burst_time = -1;
+  }
+  else
+  {
+    mycpu()->proc->burst_time -= QUANTA; 
+  }
+  release(&ptable.lock);
+}
+
+int inc_cpucounter(void)
+{
+  int res;
+  acquire(&ptable.lock);
+  res = mycpu()->proc->cpucounter+1;
+  mycpu()->proc->cpucounter = mycpu()->proc->cpucounter+1;
+  release(&ptable.lock);
+  return res;
+}
\ No newline at end of file
diff -ruN xv6org/proc.d xv6mhybrid/proc.d
--- xv6org/proc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/proc.d	2020-10-15 19:51:10.559469658 +0530
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h processInfo.h
diff -ruN xv6org/processInfo.h xv6mhybrid/processInfo.h
--- xv6org/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/processInfo.h	2020-06-12 12:22:40.000000000 +0530
@@ -0,0 +1,6 @@
+struct processInfo
+{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
Binary files xv6org/_process_state and xv6mhybrid/_process_state differ
diff -ruN xv6org/process_state.asm xv6mhybrid/process_state.asm
--- xv6org/process_state.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/process_state.asm	2020-10-15 19:50:35.721640918 +0530
@@ -0,0 +1,1181 @@
+
+_process_state:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int main(void){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  process_state();
+  11:	e8 24 03 00 00       	call   33a <process_state>
+  exit();
+  16:	e8 57 02 00 00       	call   272 <exit>
+  1b:	66 90                	xchg   %ax,%ax
+  1d:	66 90                	xchg   %ax,%ax
+  1f:	90                   	nop
+
+00000020 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	53                   	push   %ebx
+  24:	8b 45 08             	mov    0x8(%ebp),%eax
+  27:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  2a:	89 c2                	mov    %eax,%edx
+  2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  30:	83 c1 01             	add    $0x1,%ecx
+  33:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  37:	83 c2 01             	add    $0x1,%edx
+  3a:	84 db                	test   %bl,%bl
+  3c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  3f:	75 ef                	jne    30 <strcpy+0x10>
+    ;
+  return os;
+}
+  41:	5b                   	pop    %ebx
+  42:	5d                   	pop    %ebp
+  43:	c3                   	ret    
+  44:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  4a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000050 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  50:	55                   	push   %ebp
+  51:	89 e5                	mov    %esp,%ebp
+  53:	53                   	push   %ebx
+  54:	8b 55 08             	mov    0x8(%ebp),%edx
+  57:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  5a:	0f b6 02             	movzbl (%edx),%eax
+  5d:	0f b6 19             	movzbl (%ecx),%ebx
+  60:	84 c0                	test   %al,%al
+  62:	75 1c                	jne    80 <strcmp+0x30>
+  64:	eb 2a                	jmp    90 <strcmp+0x40>
+  66:	8d 76 00             	lea    0x0(%esi),%esi
+  69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  70:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  73:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  76:	83 c1 01             	add    $0x1,%ecx
+  79:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  7c:	84 c0                	test   %al,%al
+  7e:	74 10                	je     90 <strcmp+0x40>
+  80:	38 d8                	cmp    %bl,%al
+  82:	74 ec                	je     70 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  84:	29 d8                	sub    %ebx,%eax
+}
+  86:	5b                   	pop    %ebx
+  87:	5d                   	pop    %ebp
+  88:	c3                   	ret    
+  89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  90:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  92:	29 d8                	sub    %ebx,%eax
+}
+  94:	5b                   	pop    %ebx
+  95:	5d                   	pop    %ebp
+  96:	c3                   	ret    
+  97:	89 f6                	mov    %esi,%esi
+  99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  a6:	80 39 00             	cmpb   $0x0,(%ecx)
+  a9:	74 15                	je     c0 <strlen+0x20>
+  ab:	31 d2                	xor    %edx,%edx
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+  b0:	83 c2 01             	add    $0x1,%edx
+  b3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  b7:	89 d0                	mov    %edx,%eax
+  b9:	75 f5                	jne    b0 <strlen+0x10>
+    ;
+  return n;
+}
+  bb:	5d                   	pop    %ebp
+  bc:	c3                   	ret    
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  c0:	31 c0                	xor    %eax,%eax
+}
+  c2:	5d                   	pop    %ebp
+  c3:	c3                   	ret    
+  c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  d0:	55                   	push   %ebp
+  d1:	89 e5                	mov    %esp,%ebp
+  d3:	57                   	push   %edi
+  d4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  d7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  da:	8b 45 0c             	mov    0xc(%ebp),%eax
+  dd:	89 d7                	mov    %edx,%edi
+  df:	fc                   	cld    
+  e0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  e2:	89 d0                	mov    %edx,%eax
+  e4:	5f                   	pop    %edi
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	89 f6                	mov    %esi,%esi
+  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	53                   	push   %ebx
+  f4:	8b 45 08             	mov    0x8(%ebp),%eax
+  f7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+  fa:	0f b6 10             	movzbl (%eax),%edx
+  fd:	84 d2                	test   %dl,%dl
+  ff:	74 1d                	je     11e <strchr+0x2e>
+    if(*s == c)
+ 101:	38 d3                	cmp    %dl,%bl
+ 103:	89 d9                	mov    %ebx,%ecx
+ 105:	75 0d                	jne    114 <strchr+0x24>
+ 107:	eb 17                	jmp    120 <strchr+0x30>
+ 109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 110:	38 ca                	cmp    %cl,%dl
+ 112:	74 0c                	je     120 <strchr+0x30>
+  for(; *s; s++)
+ 114:	83 c0 01             	add    $0x1,%eax
+ 117:	0f b6 10             	movzbl (%eax),%edx
+ 11a:	84 d2                	test   %dl,%dl
+ 11c:	75 f2                	jne    110 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 11e:	31 c0                	xor    %eax,%eax
+}
+ 120:	5b                   	pop    %ebx
+ 121:	5d                   	pop    %ebp
+ 122:	c3                   	ret    
+ 123:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	56                   	push   %esi
+ 135:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 136:	31 f6                	xor    %esi,%esi
+ 138:	89 f3                	mov    %esi,%ebx
+{
+ 13a:	83 ec 1c             	sub    $0x1c,%esp
+ 13d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 140:	eb 2f                	jmp    171 <gets+0x41>
+ 142:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 148:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 14b:	83 ec 04             	sub    $0x4,%esp
+ 14e:	6a 01                	push   $0x1
+ 150:	50                   	push   %eax
+ 151:	6a 00                	push   $0x0
+ 153:	e8 32 01 00 00       	call   28a <read>
+    if(cc < 1)
+ 158:	83 c4 10             	add    $0x10,%esp
+ 15b:	85 c0                	test   %eax,%eax
+ 15d:	7e 1c                	jle    17b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 15f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 163:	83 c7 01             	add    $0x1,%edi
+ 166:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 169:	3c 0a                	cmp    $0xa,%al
+ 16b:	74 23                	je     190 <gets+0x60>
+ 16d:	3c 0d                	cmp    $0xd,%al
+ 16f:	74 1f                	je     190 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 171:	83 c3 01             	add    $0x1,%ebx
+ 174:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 177:	89 fe                	mov    %edi,%esi
+ 179:	7c cd                	jl     148 <gets+0x18>
+ 17b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 17d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 180:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 183:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 186:	5b                   	pop    %ebx
+ 187:	5e                   	pop    %esi
+ 188:	5f                   	pop    %edi
+ 189:	5d                   	pop    %ebp
+ 18a:	c3                   	ret    
+ 18b:	90                   	nop
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 190:	8b 75 08             	mov    0x8(%ebp),%esi
+ 193:	8b 45 08             	mov    0x8(%ebp),%eax
+ 196:	01 de                	add    %ebx,%esi
+ 198:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 19a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 19d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1a0:	5b                   	pop    %ebx
+ 1a1:	5e                   	pop    %esi
+ 1a2:	5f                   	pop    %edi
+ 1a3:	5d                   	pop    %ebp
+ 1a4:	c3                   	ret    
+ 1a5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	56                   	push   %esi
+ 1b4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1b5:	83 ec 08             	sub    $0x8,%esp
+ 1b8:	6a 00                	push   $0x0
+ 1ba:	ff 75 08             	pushl  0x8(%ebp)
+ 1bd:	e8 f0 00 00 00       	call   2b2 <open>
+  if(fd < 0)
+ 1c2:	83 c4 10             	add    $0x10,%esp
+ 1c5:	85 c0                	test   %eax,%eax
+ 1c7:	78 27                	js     1f0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1c9:	83 ec 08             	sub    $0x8,%esp
+ 1cc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1cf:	89 c3                	mov    %eax,%ebx
+ 1d1:	50                   	push   %eax
+ 1d2:	e8 f3 00 00 00       	call   2ca <fstat>
+  close(fd);
+ 1d7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1da:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1dc:	e8 b9 00 00 00       	call   29a <close>
+  return r;
+ 1e1:	83 c4 10             	add    $0x10,%esp
+}
+ 1e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1e7:	89 f0                	mov    %esi,%eax
+ 1e9:	5b                   	pop    %ebx
+ 1ea:	5e                   	pop    %esi
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 1f0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 1f5:	eb ed                	jmp    1e4 <stat+0x34>
+ 1f7:	89 f6                	mov    %esi,%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	53                   	push   %ebx
+ 204:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 207:	0f be 11             	movsbl (%ecx),%edx
+ 20a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 20d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 20f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 214:	77 1f                	ja     235 <atoi+0x35>
+ 216:	8d 76 00             	lea    0x0(%esi),%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 220:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 223:	83 c1 01             	add    $0x1,%ecx
+ 226:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 22a:	0f be 11             	movsbl (%ecx),%edx
+ 22d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 230:	80 fb 09             	cmp    $0x9,%bl
+ 233:	76 eb                	jbe    220 <atoi+0x20>
+  return n;
+}
+ 235:	5b                   	pop    %ebx
+ 236:	5d                   	pop    %ebp
+ 237:	c3                   	ret    
+ 238:	90                   	nop
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000240 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	56                   	push   %esi
+ 244:	53                   	push   %ebx
+ 245:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 248:	8b 45 08             	mov    0x8(%ebp),%eax
+ 24b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 24e:	85 db                	test   %ebx,%ebx
+ 250:	7e 14                	jle    266 <memmove+0x26>
+ 252:	31 d2                	xor    %edx,%edx
+ 254:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 258:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 25c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 25f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 262:	39 d3                	cmp    %edx,%ebx
+ 264:	75 f2                	jne    258 <memmove+0x18>
+  return vdst;
+}
+ 266:	5b                   	pop    %ebx
+ 267:	5e                   	pop    %esi
+ 268:	5d                   	pop    %ebp
+ 269:	c3                   	ret    
+
+0000026a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 26a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 26f:	cd 40                	int    $0x40
+ 271:	c3                   	ret    
+
+00000272 <exit>:
+SYSCALL(exit)
+ 272:	b8 02 00 00 00       	mov    $0x2,%eax
+ 277:	cd 40                	int    $0x40
+ 279:	c3                   	ret    
+
+0000027a <wait>:
+SYSCALL(wait)
+ 27a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 27f:	cd 40                	int    $0x40
+ 281:	c3                   	ret    
+
+00000282 <pipe>:
+SYSCALL(pipe)
+ 282:	b8 04 00 00 00       	mov    $0x4,%eax
+ 287:	cd 40                	int    $0x40
+ 289:	c3                   	ret    
+
+0000028a <read>:
+SYSCALL(read)
+ 28a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 28f:	cd 40                	int    $0x40
+ 291:	c3                   	ret    
+
+00000292 <write>:
+SYSCALL(write)
+ 292:	b8 10 00 00 00       	mov    $0x10,%eax
+ 297:	cd 40                	int    $0x40
+ 299:	c3                   	ret    
+
+0000029a <close>:
+SYSCALL(close)
+ 29a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <kill>:
+SYSCALL(kill)
+ 2a2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <exec>:
+SYSCALL(exec)
+ 2aa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <open>:
+SYSCALL(open)
+ 2b2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <mknod>:
+SYSCALL(mknod)
+ 2ba:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <unlink>:
+SYSCALL(unlink)
+ 2c2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <fstat>:
+SYSCALL(fstat)
+ 2ca:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <link>:
+SYSCALL(link)
+ 2d2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <mkdir>:
+SYSCALL(mkdir)
+ 2da:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <chdir>:
+SYSCALL(chdir)
+ 2e2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <dup>:
+SYSCALL(dup)
+ 2ea:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <getpid>:
+SYSCALL(getpid)
+ 2f2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <sbrk>:
+SYSCALL(sbrk)
+ 2fa:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <sleep>:
+SYSCALL(sleep)
+ 302:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <uptime>:
+SYSCALL(uptime)
+ 30a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <getNumProc>:
+SYSCALL(getNumProc)
+ 312:	b8 16 00 00 00       	mov    $0x16,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 31a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 322:	b8 18 00 00 00       	mov    $0x18,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 32a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 332:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <process_state>:
+SYSCALL(process_state)
+ 33a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 342:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <inc_cpucounter>:
+ 34a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+ 352:	66 90                	xchg   %ax,%ax
+ 354:	66 90                	xchg   %ax,%ax
+ 356:	66 90                	xchg   %ax,%ax
+ 358:	66 90                	xchg   %ax,%ax
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 369:	85 d2                	test   %edx,%edx
+{
+ 36b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 36e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 370:	79 76                	jns    3e8 <printint+0x88>
+ 372:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 376:	74 70                	je     3e8 <printint+0x88>
+    x = -xx;
+ 378:	f7 d8                	neg    %eax
+    neg = 1;
+ 37a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 381:	31 f6                	xor    %esi,%esi
+ 383:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 386:	eb 0a                	jmp    392 <printint+0x32>
+ 388:	90                   	nop
+ 389:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 390:	89 fe                	mov    %edi,%esi
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	8d 7e 01             	lea    0x1(%esi),%edi
+ 397:	f7 f1                	div    %ecx
+ 399:	0f b6 92 60 07 00 00 	movzbl 0x760(%edx),%edx
+  }while((x /= base) != 0);
+ 3a0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3a2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3a5:	75 e9                	jne    390 <printint+0x30>
+  if(neg)
+ 3a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3aa:	85 c0                	test   %eax,%eax
+ 3ac:	74 08                	je     3b6 <printint+0x56>
+    buf[i++] = '-';
+ 3ae:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3b3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3b6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ba:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3c3:	83 ec 04             	sub    $0x4,%esp
+ 3c6:	83 ee 01             	sub    $0x1,%esi
+ 3c9:	6a 01                	push   $0x1
+ 3cb:	53                   	push   %ebx
+ 3cc:	57                   	push   %edi
+ 3cd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3d0:	e8 bd fe ff ff       	call   292 <write>
+
+  while(--i >= 0)
+ 3d5:	83 c4 10             	add    $0x10,%esp
+ 3d8:	39 de                	cmp    %ebx,%esi
+ 3da:	75 e4                	jne    3c0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3df:	5b                   	pop    %ebx
+ 3e0:	5e                   	pop    %esi
+ 3e1:	5f                   	pop    %edi
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3e8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3ef:	eb 90                	jmp    381 <printint+0x21>
+ 3f1:	eb 0d                	jmp    400 <printf>
+ 3f3:	90                   	nop
+ 3f4:	90                   	nop
+ 3f5:	90                   	nop
+ 3f6:	90                   	nop
+ 3f7:	90                   	nop
+ 3f8:	90                   	nop
+ 3f9:	90                   	nop
+ 3fa:	90                   	nop
+ 3fb:	90                   	nop
+ 3fc:	90                   	nop
+ 3fd:	90                   	nop
+ 3fe:	90                   	nop
+ 3ff:	90                   	nop
+
+00000400 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+ 406:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 409:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 40c:	0f b6 1e             	movzbl (%esi),%ebx
+ 40f:	84 db                	test   %bl,%bl
+ 411:	0f 84 b3 00 00 00    	je     4ca <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 417:	8d 45 10             	lea    0x10(%ebp),%eax
+ 41a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 41d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 41f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 422:	eb 2f                	jmp    453 <printf+0x53>
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 428:	83 f8 25             	cmp    $0x25,%eax
+ 42b:	0f 84 a7 00 00 00    	je     4d8 <printf+0xd8>
+  write(fd, &c, 1);
+ 431:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 434:	83 ec 04             	sub    $0x4,%esp
+ 437:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 43a:	6a 01                	push   $0x1
+ 43c:	50                   	push   %eax
+ 43d:	ff 75 08             	pushl  0x8(%ebp)
+ 440:	e8 4d fe ff ff       	call   292 <write>
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 44b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	74 77                	je     4ca <printf+0xca>
+    if(state == 0){
+ 453:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 455:	0f be cb             	movsbl %bl,%ecx
+ 458:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 45b:	74 cb                	je     428 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 45d:	83 ff 25             	cmp    $0x25,%edi
+ 460:	75 e6                	jne    448 <printf+0x48>
+      if(c == 'd'){
+ 462:	83 f8 64             	cmp    $0x64,%eax
+ 465:	0f 84 05 01 00 00    	je     570 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 46b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 471:	83 f9 70             	cmp    $0x70,%ecx
+ 474:	74 72                	je     4e8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 476:	83 f8 73             	cmp    $0x73,%eax
+ 479:	0f 84 99 00 00 00    	je     518 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 47f:	83 f8 63             	cmp    $0x63,%eax
+ 482:	0f 84 08 01 00 00    	je     590 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	0f 84 ef 00 00 00    	je     580 <printf+0x180>
+  write(fd, &c, 1);
+ 491:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 494:	83 ec 04             	sub    $0x4,%esp
+ 497:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 49b:	6a 01                	push   $0x1
+ 49d:	50                   	push   %eax
+ 49e:	ff 75 08             	pushl  0x8(%ebp)
+ 4a1:	e8 ec fd ff ff       	call   292 <write>
+ 4a6:	83 c4 0c             	add    $0xc,%esp
+ 4a9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4ac:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4af:	6a 01                	push   $0x1
+ 4b1:	50                   	push   %eax
+ 4b2:	ff 75 08             	pushl  0x8(%ebp)
+ 4b5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4b8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4ba:	e8 d3 fd ff ff       	call   292 <write>
+  for(i = 0; fmt[i]; i++){
+ 4bf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4c3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4c6:	84 db                	test   %bl,%bl
+ 4c8:	75 89                	jne    453 <printf+0x53>
+    }
+  }
+}
+ 4ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cd:	5b                   	pop    %ebx
+ 4ce:	5e                   	pop    %esi
+ 4cf:	5f                   	pop    %edi
+ 4d0:	5d                   	pop    %ebp
+ 4d1:	c3                   	ret    
+ 4d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4d8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4dd:	e9 66 ff ff ff       	jmp    448 <printf+0x48>
+ 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4e8:	83 ec 0c             	sub    $0xc,%esp
+ 4eb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f0:	6a 00                	push   $0x0
+ 4f2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 4f5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4f8:	8b 17                	mov    (%edi),%edx
+ 4fa:	e8 61 fe ff ff       	call   360 <printint>
+        ap++;
+ 4ff:	89 f8                	mov    %edi,%eax
+ 501:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 504:	31 ff                	xor    %edi,%edi
+        ap++;
+ 506:	83 c0 04             	add    $0x4,%eax
+ 509:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 50c:	e9 37 ff ff ff       	jmp    448 <printf+0x48>
+ 511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 51b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 523:	85 c9                	test   %ecx,%ecx
+ 525:	0f 84 8e 00 00 00    	je     5b9 <printf+0x1b9>
+        while(*s != 0){
+ 52b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 52e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 530:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 532:	84 c0                	test   %al,%al
+ 534:	0f 84 0e ff ff ff    	je     448 <printf+0x48>
+ 53a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 53d:	89 de                	mov    %ebx,%esi
+ 53f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 542:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 545:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 548:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 54b:	83 c6 01             	add    $0x1,%esi
+ 54e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 551:	6a 01                	push   $0x1
+ 553:	57                   	push   %edi
+ 554:	53                   	push   %ebx
+ 555:	e8 38 fd ff ff       	call   292 <write>
+        while(*s != 0){
+ 55a:	0f b6 06             	movzbl (%esi),%eax
+ 55d:	83 c4 10             	add    $0x10,%esp
+ 560:	84 c0                	test   %al,%al
+ 562:	75 e4                	jne    548 <printf+0x148>
+ 564:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 567:	31 ff                	xor    %edi,%edi
+ 569:	e9 da fe ff ff       	jmp    448 <printf+0x48>
+ 56e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 73 ff ff ff       	jmp    4f2 <printf+0xf2>
+ 57f:	90                   	nop
+  write(fd, &c, 1);
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 586:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 589:	6a 01                	push   $0x1
+ 58b:	e9 21 ff ff ff       	jmp    4b1 <printf+0xb1>
+        putc(fd, *ap);
+ 590:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 596:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 598:	6a 01                	push   $0x1
+        ap++;
+ 59a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 59d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5a0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5a3:	50                   	push   %eax
+ 5a4:	ff 75 08             	pushl  0x8(%ebp)
+ 5a7:	e8 e6 fc ff ff       	call   292 <write>
+        ap++;
+ 5ac:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5af:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5b2:	31 ff                	xor    %edi,%edi
+ 5b4:	e9 8f fe ff ff       	jmp    448 <printf+0x48>
+          s = "(null)";
+ 5b9:	bb 58 07 00 00       	mov    $0x758,%ebx
+        while(*s != 0){
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	e9 72 ff ff ff       	jmp    53a <printf+0x13a>
+ 5c8:	66 90                	xchg   %ax,%ax
+ 5ca:	66 90                	xchg   %ax,%ax
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	a1 04 0a 00 00       	mov    0xa04,%eax
+{
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e8:	39 c8                	cmp    %ecx,%eax
+ 5ea:	8b 10                	mov    (%eax),%edx
+ 5ec:	73 32                	jae    620 <free+0x50>
+ 5ee:	39 d1                	cmp    %edx,%ecx
+ 5f0:	72 04                	jb     5f6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f2:	39 d0                	cmp    %edx,%eax
+ 5f4:	72 32                	jb     628 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5f9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fc:	39 fa                	cmp    %edi,%edx
+ 5fe:	74 30                	je     630 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 600:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 603:	8b 50 04             	mov    0x4(%eax),%edx
+ 606:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 609:	39 f1                	cmp    %esi,%ecx
+ 60b:	74 3a                	je     647 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 60d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 60f:	a3 04 0a 00 00       	mov    %eax,0xa04
+}
+ 614:	5b                   	pop    %ebx
+ 615:	5e                   	pop    %esi
+ 616:	5f                   	pop    %edi
+ 617:	5d                   	pop    %ebp
+ 618:	c3                   	ret    
+ 619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 04                	jb     628 <free+0x58>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	72 ce                	jb     5f6 <free+0x26>
+{
+ 628:	89 d0                	mov    %edx,%eax
+ 62a:	eb bc                	jmp    5e8 <free+0x18>
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 630:	03 72 04             	add    0x4(%edx),%esi
+ 633:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 636:	8b 10                	mov    (%eax),%edx
+ 638:	8b 12                	mov    (%edx),%edx
+ 63a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63d:	8b 50 04             	mov    0x4(%eax),%edx
+ 640:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 643:	39 f1                	cmp    %esi,%ecx
+ 645:	75 c6                	jne    60d <free+0x3d>
+    p->s.size += bp->s.size;
+ 647:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 64a:	a3 04 0a 00 00       	mov    %eax,0xa04
+    p->s.size += bp->s.size;
+ 64f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 652:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 655:	89 10                	mov    %edx,(%eax)
+}
+ 657:	5b                   	pop    %ebx
+ 658:	5e                   	pop    %esi
+ 659:	5f                   	pop    %edi
+ 65a:	5d                   	pop    %ebp
+ 65b:	c3                   	ret    
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 66c:	8b 15 04 0a 00 00    	mov    0xa04,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 672:	8d 78 07             	lea    0x7(%eax),%edi
+ 675:	c1 ef 03             	shr    $0x3,%edi
+ 678:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 67b:	85 d2                	test   %edx,%edx
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+ 683:	8b 02                	mov    (%edx),%eax
+ 685:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 688:	39 cf                	cmp    %ecx,%edi
+ 68a:	76 6c                	jbe    6f8 <malloc+0x98>
+ 68c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 692:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 697:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 69a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6a1:	eb 0e                	jmp    6b1 <malloc+0x51>
+ 6a3:	90                   	nop
+ 6a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f9                	cmp    %edi,%ecx
+ 6af:	73 47                	jae    6f8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	39 05 04 0a 00 00    	cmp    %eax,0xa04
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	75 ed                	jne    6a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6bb:	83 ec 0c             	sub    $0xc,%esp
+ 6be:	56                   	push   %esi
+ 6bf:	e8 36 fc ff ff       	call   2fa <sbrk>
+  if(p == (char*)-1)
+ 6c4:	83 c4 10             	add    $0x10,%esp
+ 6c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ca:	74 1c                	je     6e8 <malloc+0x88>
+  hp->s.size = nu;
+ 6cc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6cf:	83 ec 0c             	sub    $0xc,%esp
+ 6d2:	83 c0 08             	add    $0x8,%eax
+ 6d5:	50                   	push   %eax
+ 6d6:	e8 f5 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6db:	8b 15 04 0a 00 00    	mov    0xa04,%edx
+      if((p = morecore(nunits)) == 0)
+ 6e1:	83 c4 10             	add    $0x10,%esp
+ 6e4:	85 d2                	test   %edx,%edx
+ 6e6:	75 c0                	jne    6a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6eb:	31 c0                	xor    %eax,%eax
+}
+ 6ed:	5b                   	pop    %ebx
+ 6ee:	5e                   	pop    %esi
+ 6ef:	5f                   	pop    %edi
+ 6f0:	5d                   	pop    %ebp
+ 6f1:	c3                   	ret    
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6f8:	39 cf                	cmp    %ecx,%edi
+ 6fa:	74 54                	je     750 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6fc:	29 f9                	sub    %edi,%ecx
+ 6fe:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 701:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 704:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 707:	89 15 04 0a 00 00    	mov    %edx,0xa04
+}
+ 70d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 710:	83 c0 08             	add    $0x8,%eax
+}
+ 713:	5b                   	pop    %ebx
+ 714:	5e                   	pop    %esi
+ 715:	5f                   	pop    %edi
+ 716:	5d                   	pop    %ebp
+ 717:	c3                   	ret    
+ 718:	90                   	nop
+ 719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 04 0a 00 00 08 	movl   $0xa08,0xa04
+ 727:	0a 00 00 
+ 72a:	c7 05 08 0a 00 00 08 	movl   $0xa08,0xa08
+ 731:	0a 00 00 
+    base.s.size = 0;
+ 734:	b8 08 0a 00 00       	mov    $0xa08,%eax
+ 739:	c7 05 0c 0a 00 00 00 	movl   $0x0,0xa0c
+ 740:	00 00 00 
+ 743:	e9 44 ff ff ff       	jmp    68c <malloc+0x2c>
+ 748:	90                   	nop
+ 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b1                	jmp    707 <malloc+0xa7>
diff -ruN xv6org/process_state.c xv6mhybrid/process_state.c
--- xv6org/process_state.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/process_state.c	2020-10-14 12:29:55.262939000 +0530
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int main(void){
+  process_state();
+  exit();
+}
\ No newline at end of file
diff -ruN xv6org/process_state.d xv6mhybrid/process_state.d
--- xv6org/process_state.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/process_state.d	2020-10-15 19:50:35.709641697 +0530
@@ -0,0 +1,2 @@
+process_state.o: process_state.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h fcntl.h
Binary files xv6org/process_state.o and xv6mhybrid/process_state.o differ
diff -ruN xv6org/process_state.sym xv6mhybrid/process_state.sym
--- xv6org/process_state.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/process_state.sym	2020-10-15 19:50:35.725640658 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000758 .rodata
+00000774 .eh_frame
+00000a04 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 process_state.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+00000760 digits.1056
+00000000 umalloc.c
+00000a04 freep
+00000a08 base
+00000020 strcpy
+00000400 printf
+00000240 memmove
+000002ba mknod
+00000130 gets
+000002f2 getpid
+00000660 malloc
+00000302 sleep
+00000332 get_burst_time
+00000282 pipe
+00000292 write
+000002ca fstat
+000002a2 kill
+0000033a process_state
+000002e2 chdir
+00000342 dec_burstTime
+000002aa exec
+0000027a wait
+0000034a inc_cpucounter
+0000028a read
+000002c2 unlink
+0000026a fork
+000002fa sbrk
+0000030a uptime
+00000a04 __bss_start
+000000d0 memset
+00000000 main
+0000032a set_burst_time
+00000050 strcmp
+000002ea dup
+0000031a getMaxPid
+00000312 getNumProc
+00000322 getProcInfo
+000001b0 stat
+00000a04 _edata
+00000a10 _end
+000002d2 link
+00000272 exit
+00000200 atoi
+000000a0 strlen
+000002b2 open
+000000f0 strchr
+000002da mkdir
+0000029a close
+000005d0 free
diff -ruN xv6org/proc.h xv6mhybrid/proc.h
--- xv6org/proc.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/proc.h	2020-10-15 19:48:24.531605364 +0530
@@ -49,10 +49,8 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int count_contextswitch;     // Counter for Context Switches of the process
+  int burst_time;              // Burst Time for process
+  int cpucounter;       	   // Number of CPU cycles the process has been in the running state	      
 };
 
-// Process memory is laid out contiguously, low addresses first:
-//   text
-//   original data and bss
-//   fixed-size stack
-//   expandable heap
Binary files xv6org/proc.o and xv6mhybrid/proc.o differ
Binary files xv6org/_ps and xv6mhybrid/_ps differ
Binary files xv6org/_rm and xv6mhybrid/_rm differ
diff -ruN xv6org/rm.asm xv6mhybrid/rm.asm
--- xv6org/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/rm.asm	2020-10-15 19:50:35.029685839 +0530
@@ -0,0 +1,1234 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bf 01 00 00 00       	mov    $0x1,%edi
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d 76 00             	lea    0x0(%esi),%esi
+  29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 e8 02 00 00       	call   322 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 82 02 00 00       	call   2d2 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 cc 07 00 00       	push   $0x7cc
+  58:	6a 02                	push   $0x2
+  5a:	e8 01 04 00 00       	call   460 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 b8 07 00 00       	push   $0x7b8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ee 03 00 00       	call   460 <printf>
+    exit();
+  72:	e8 5b 02 00 00       	call   2d2 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	0f b6 19             	movzbl (%ecx),%ebx
+  c0:	84 c0                	test   %al,%al
+  c2:	75 1c                	jne    e0 <strcmp+0x30>
+  c4:	eb 2a                	jmp    f0 <strcmp+0x40>
+  c6:	8d 76 00             	lea    0x0(%esi),%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	83 c1 01             	add    $0x1,%ecx
+  d9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  dc:	84 c0                	test   %al,%al
+  de:	74 10                	je     f0 <strcmp+0x40>
+  e0:	38 d8                	cmp    %bl,%al
+  e2:	74 ec                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e4:	29 d8                	sub    %ebx,%eax
+}
+  e6:	5b                   	pop    %ebx
+  e7:	5d                   	pop    %ebp
+  e8:	c3                   	ret    
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 120:	31 c0                	xor    %eax,%eax
+}
+ 122:	5d                   	pop    %ebp
+ 123:	c3                   	ret    
+ 124:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 12a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+ 198:	89 f3                	mov    %esi,%ebx
+{
+ 19a:	83 ec 1c             	sub    $0x1c,%esp
+ 19d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a0:	eb 2f                	jmp    1d1 <gets+0x41>
+ 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1ab:	83 ec 04             	sub    $0x4,%esp
+ 1ae:	6a 01                	push   $0x1
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 32 01 00 00       	call   2ea <read>
+    if(cc < 1)
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	85 c0                	test   %eax,%eax
+ 1bd:	7e 1c                	jle    1db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c3:	83 c7 01             	add    $0x1,%edi
+ 1c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c9:	3c 0a                	cmp    $0xa,%al
+ 1cb:	74 23                	je     1f0 <gets+0x60>
+ 1cd:	3c 0d                	cmp    $0xd,%al
+ 1cf:	74 1f                	je     1f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1d1:	83 c3 01             	add    $0x1,%ebx
+ 1d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d7:	89 fe                	mov    %edi,%esi
+ 1d9:	7c cd                	jl     1a8 <gets+0x18>
+ 1db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5e                   	pop    %esi
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	90                   	nop
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	01 de                	add    %ebx,%esi
+ 1f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 200:	5b                   	pop    %ebx
+ 201:	5e                   	pop    %esi
+ 202:	5f                   	pop    %edi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	pushl  0x8(%ebp)
+ 21d:	e8 f0 00 00 00       	call   312 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	pushl  0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f3 00 00 00       	call   32a <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 b9 00 00 00       	call   2fa <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	89 f6                	mov    %esi,%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 11             	movsbl (%ecx),%edx
+ 26a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 26d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 26f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 274:	77 1f                	ja     295 <atoi+0x35>
+ 276:	8d 76 00             	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 280:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 283:	83 c1 01             	add    $0x1,%ecx
+ 286:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 11             	movsbl (%ecx),%edx
+ 28d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	5b                   	pop    %ebx
+ 296:	5d                   	pop    %ebp
+ 297:	c3                   	ret    
+ 298:	90                   	nop
+ 299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+ 2a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 db                	test   %ebx,%ebx
+ 2b0:	7e 14                	jle    2c6 <memmove+0x26>
+ 2b2:	31 d2                	xor    %edx,%edx
+ 2b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2bf:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2c2:	39 d3                	cmp    %edx,%ebx
+ 2c4:	75 f2                	jne    2b8 <memmove+0x18>
+  return vdst;
+}
+ 2c6:	5b                   	pop    %ebx
+ 2c7:	5e                   	pop    %esi
+ 2c8:	5d                   	pop    %ebp
+ 2c9:	c3                   	ret    
+
+000002ca <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <exit>:
+SYSCALL(exit)
+ 2d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <wait>:
+SYSCALL(wait)
+ 2da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <pipe>:
+SYSCALL(pipe)
+ 2e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <read>:
+SYSCALL(read)
+ 2ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <write>:
+SYSCALL(write)
+ 2f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <close>:
+SYSCALL(close)
+ 2fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <kill>:
+SYSCALL(kill)
+ 302:	b8 06 00 00 00       	mov    $0x6,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <exec>:
+SYSCALL(exec)
+ 30a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <open>:
+SYSCALL(open)
+ 312:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mknod>:
+SYSCALL(mknod)
+ 31a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <unlink>:
+SYSCALL(unlink)
+ 322:	b8 12 00 00 00       	mov    $0x12,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <fstat>:
+SYSCALL(fstat)
+ 32a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <link>:
+SYSCALL(link)
+ 332:	b8 13 00 00 00       	mov    $0x13,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <mkdir>:
+SYSCALL(mkdir)
+ 33a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <chdir>:
+SYSCALL(chdir)
+ 342:	b8 09 00 00 00       	mov    $0x9,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <dup>:
+SYSCALL(dup)
+ 34a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getpid>:
+SYSCALL(getpid)
+ 352:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <sbrk>:
+SYSCALL(sbrk)
+ 35a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <sleep>:
+SYSCALL(sleep)
+ 362:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <uptime>:
+SYSCALL(uptime)
+ 36a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <getNumProc>:
+SYSCALL(getNumProc)
+ 372:	b8 16 00 00 00       	mov    $0x16,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 382:	b8 18 00 00 00       	mov    $0x18,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 392:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <process_state>:
+SYSCALL(process_state)
+ 39a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 3a2:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <inc_cpucounter>:
+ 3aa:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+ 3b2:	66 90                	xchg   %ax,%ax
+ 3b4:	66 90                	xchg   %ax,%ax
+ 3b6:	66 90                	xchg   %ax,%ax
+ 3b8:	66 90                	xchg   %ax,%ax
+ 3ba:	66 90                	xchg   %ax,%ax
+ 3bc:	66 90                	xchg   %ax,%ax
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3c9:	85 d2                	test   %edx,%edx
+{
+ 3cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ce:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3d0:	79 76                	jns    448 <printint+0x88>
+ 3d2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3d6:	74 70                	je     448 <printint+0x88>
+    x = -xx;
+ 3d8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3da:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e1:	31 f6                	xor    %esi,%esi
+ 3e3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3e6:	eb 0a                	jmp    3f2 <printint+0x32>
+ 3e8:	90                   	nop
+ 3e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 fe                	mov    %edi,%esi
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3f7:	f7 f1                	div    %ecx
+ 3f9:	0f b6 92 ec 07 00 00 	movzbl 0x7ec(%edx),%edx
+  }while((x /= base) != 0);
+ 400:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 402:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 405:	75 e9                	jne    3f0 <printint+0x30>
+  if(neg)
+ 407:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 40a:	85 c0                	test   %eax,%eax
+ 40c:	74 08                	je     416 <printint+0x56>
+    buf[i++] = '-';
+ 40e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 413:	8d 7e 02             	lea    0x2(%esi),%edi
+ 416:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 41a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+ 420:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 423:	83 ec 04             	sub    $0x4,%esp
+ 426:	83 ee 01             	sub    $0x1,%esi
+ 429:	6a 01                	push   $0x1
+ 42b:	53                   	push   %ebx
+ 42c:	57                   	push   %edi
+ 42d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 430:	e8 bd fe ff ff       	call   2f2 <write>
+
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 44f:	eb 90                	jmp    3e1 <printint+0x21>
+ 451:	eb 0d                	jmp    460 <printf>
+ 453:	90                   	nop
+ 454:	90                   	nop
+ 455:	90                   	nop
+ 456:	90                   	nop
+ 457:	90                   	nop
+ 458:	90                   	nop
+ 459:	90                   	nop
+ 45a:	90                   	nop
+ 45b:	90                   	nop
+ 45c:	90                   	nop
+ 45d:	90                   	nop
+ 45e:	90                   	nop
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 469:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 46c:	0f b6 1e             	movzbl (%esi),%ebx
+ 46f:	84 db                	test   %bl,%bl
+ 471:	0f 84 b3 00 00 00    	je     52a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 477:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 47d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 47f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 482:	eb 2f                	jmp    4b3 <printf+0x53>
+ 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	0f 84 a7 00 00 00    	je     538 <printf+0xd8>
+  write(fd, &c, 1);
+ 491:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 494:	83 ec 04             	sub    $0x4,%esp
+ 497:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 49a:	6a 01                	push   $0x1
+ 49c:	50                   	push   %eax
+ 49d:	ff 75 08             	pushl  0x8(%ebp)
+ 4a0:	e8 4d fe ff ff       	call   2f2 <write>
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4ab:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4af:	84 db                	test   %bl,%bl
+ 4b1:	74 77                	je     52a <printf+0xca>
+    if(state == 0){
+ 4b3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4b5:	0f be cb             	movsbl %bl,%ecx
+ 4b8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4bb:	74 cb                	je     488 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4bd:	83 ff 25             	cmp    $0x25,%edi
+ 4c0:	75 e6                	jne    4a8 <printf+0x48>
+      if(c == 'd'){
+ 4c2:	83 f8 64             	cmp    $0x64,%eax
+ 4c5:	0f 84 05 01 00 00    	je     5d0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4cb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4d1:	83 f9 70             	cmp    $0x70,%ecx
+ 4d4:	74 72                	je     548 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d6:	83 f8 73             	cmp    $0x73,%eax
+ 4d9:	0f 84 99 00 00 00    	je     578 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4df:	83 f8 63             	cmp    $0x63,%eax
+ 4e2:	0f 84 08 01 00 00    	je     5f0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	0f 84 ef 00 00 00    	je     5e0 <printf+0x180>
+  write(fd, &c, 1);
+ 4f1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4f4:	83 ec 04             	sub    $0x4,%esp
+ 4f7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4fb:	6a 01                	push   $0x1
+ 4fd:	50                   	push   %eax
+ 4fe:	ff 75 08             	pushl  0x8(%ebp)
+ 501:	e8 ec fd ff ff       	call   2f2 <write>
+ 506:	83 c4 0c             	add    $0xc,%esp
+ 509:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 50c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 50f:	6a 01                	push   $0x1
+ 511:	50                   	push   %eax
+ 512:	ff 75 08             	pushl  0x8(%ebp)
+ 515:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 518:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 51a:	e8 d3 fd ff ff       	call   2f2 <write>
+  for(i = 0; fmt[i]; i++){
+ 51f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 523:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 526:	84 db                	test   %bl,%bl
+ 528:	75 89                	jne    4b3 <printf+0x53>
+    }
+  }
+}
+ 52a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 52d:	5b                   	pop    %ebx
+ 52e:	5e                   	pop    %esi
+ 52f:	5f                   	pop    %edi
+ 530:	5d                   	pop    %ebp
+ 531:	c3                   	ret    
+ 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 538:	bf 25 00 00 00       	mov    $0x25,%edi
+ 53d:	e9 66 ff ff ff       	jmp    4a8 <printf+0x48>
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 548:	83 ec 0c             	sub    $0xc,%esp
+ 54b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 550:	6a 00                	push   $0x0
+ 552:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 555:	8b 45 08             	mov    0x8(%ebp),%eax
+ 558:	8b 17                	mov    (%edi),%edx
+ 55a:	e8 61 fe ff ff       	call   3c0 <printint>
+        ap++;
+ 55f:	89 f8                	mov    %edi,%eax
+ 561:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 564:	31 ff                	xor    %edi,%edi
+        ap++;
+ 566:	83 c0 04             	add    $0x4,%eax
+ 569:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 56c:	e9 37 ff ff ff       	jmp    4a8 <printf+0x48>
+ 571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 578:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 57b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 57d:	83 c0 04             	add    $0x4,%eax
+ 580:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 583:	85 c9                	test   %ecx,%ecx
+ 585:	0f 84 8e 00 00 00    	je     619 <printf+0x1b9>
+        while(*s != 0){
+ 58b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 58e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 590:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 592:	84 c0                	test   %al,%al
+ 594:	0f 84 0e ff ff ff    	je     4a8 <printf+0x48>
+ 59a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 59d:	89 de                	mov    %ebx,%esi
+ 59f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5a5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5a8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5ab:	83 c6 01             	add    $0x1,%esi
+ 5ae:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5b1:	6a 01                	push   $0x1
+ 5b3:	57                   	push   %edi
+ 5b4:	53                   	push   %ebx
+ 5b5:	e8 38 fd ff ff       	call   2f2 <write>
+        while(*s != 0){
+ 5ba:	0f b6 06             	movzbl (%esi),%eax
+ 5bd:	83 c4 10             	add    $0x10,%esp
+ 5c0:	84 c0                	test   %al,%al
+ 5c2:	75 e4                	jne    5a8 <printf+0x148>
+ 5c4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5c7:	31 ff                	xor    %edi,%edi
+ 5c9:	e9 da fe ff ff       	jmp    4a8 <printf+0x48>
+ 5ce:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5d8:	6a 01                	push   $0x1
+ 5da:	e9 73 ff ff ff       	jmp    552 <printf+0xf2>
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5e3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5e6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	e9 21 ff ff ff       	jmp    511 <printf+0xb1>
+        putc(fd, *ap);
+ 5f0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+        ap++;
+ 5fa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5fd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 600:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 603:	50                   	push   %eax
+ 604:	ff 75 08             	pushl  0x8(%ebp)
+ 607:	e8 e6 fc ff ff       	call   2f2 <write>
+        ap++;
+ 60c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 60f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 612:	31 ff                	xor    %edi,%edi
+ 614:	e9 8f fe ff ff       	jmp    4a8 <printf+0x48>
+          s = "(null)";
+ 619:	bb e5 07 00 00       	mov    $0x7e5,%ebx
+        while(*s != 0){
+ 61e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 623:	e9 72 ff ff ff       	jmp    59a <printf+0x13a>
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 631:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+{
+ 636:	89 e5                	mov    %esp,%ebp
+ 638:	57                   	push   %edi
+ 639:	56                   	push   %esi
+ 63a:	53                   	push   %ebx
+ 63b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 63e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 648:	39 c8                	cmp    %ecx,%eax
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	73 32                	jae    680 <free+0x50>
+ 64e:	39 d1                	cmp    %edx,%ecx
+ 650:	72 04                	jb     656 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 652:	39 d0                	cmp    %edx,%eax
+ 654:	72 32                	jb     688 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 656:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 659:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65c:	39 fa                	cmp    %edi,%edx
+ 65e:	74 30                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 660:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 663:	8b 50 04             	mov    0x4(%eax),%edx
+ 666:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 669:	39 f1                	cmp    %esi,%ecx
+ 66b:	74 3a                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 66f:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+}
+ 674:	5b                   	pop    %ebx
+ 675:	5e                   	pop    %esi
+ 676:	5f                   	pop    %edi
+ 677:	5d                   	pop    %ebp
+ 678:	c3                   	ret    
+ 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 680:	39 d0                	cmp    %edx,%eax
+ 682:	72 04                	jb     688 <free+0x58>
+ 684:	39 d1                	cmp    %edx,%ecx
+ 686:	72 ce                	jb     656 <free+0x26>
+{
+ 688:	89 d0                	mov    %edx,%eax
+ 68a:	eb bc                	jmp    648 <free+0x18>
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 c6                	jne    66d <free+0x3d>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	55                   	push   %ebp
+ 6c1:	89 e5                	mov    %esp,%ebp
+ 6c3:	57                   	push   %edi
+ 6c4:	56                   	push   %esi
+ 6c5:	53                   	push   %ebx
+ 6c6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6cc:	8b 15 9c 0a 00 00    	mov    0xa9c,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6d5:	c1 ef 03             	shr    $0x3,%edi
+ 6d8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6db:	85 d2                	test   %edx,%edx
+ 6dd:	0f 84 9d 00 00 00    	je     780 <malloc+0xc0>
+ 6e3:	8b 02                	mov    (%edx),%eax
+ 6e5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6e8:	39 cf                	cmp    %ecx,%edi
+ 6ea:	76 6c                	jbe    758 <malloc+0x98>
+ 6ec:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6f2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6f7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 701:	eb 0e                	jmp    711 <malloc+0x51>
+ 703:	90                   	nop
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 708:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 70a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 70d:	39 f9                	cmp    %edi,%ecx
+ 70f:	73 47                	jae    758 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 05 9c 0a 00 00    	cmp    %eax,0xa9c
+ 717:	89 c2                	mov    %eax,%edx
+ 719:	75 ed                	jne    708 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	56                   	push   %esi
+ 71f:	e8 36 fc ff ff       	call   35a <sbrk>
+  if(p == (char*)-1)
+ 724:	83 c4 10             	add    $0x10,%esp
+ 727:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 72a:	74 1c                	je     748 <malloc+0x88>
+  hp->s.size = nu;
+ 72c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72f:	83 ec 0c             	sub    $0xc,%esp
+ 732:	83 c0 08             	add    $0x8,%eax
+ 735:	50                   	push   %eax
+ 736:	e8 f5 fe ff ff       	call   630 <free>
+  return freep;
+ 73b:	8b 15 9c 0a 00 00    	mov    0xa9c,%edx
+      if((p = morecore(nunits)) == 0)
+ 741:	83 c4 10             	add    $0x10,%esp
+ 744:	85 d2                	test   %edx,%edx
+ 746:	75 c0                	jne    708 <malloc+0x48>
+        return 0;
+  }
+}
+ 748:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 74b:	31 c0                	xor    %eax,%eax
+}
+ 74d:	5b                   	pop    %ebx
+ 74e:	5e                   	pop    %esi
+ 74f:	5f                   	pop    %edi
+ 750:	5d                   	pop    %ebp
+ 751:	c3                   	ret    
+ 752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 758:	39 cf                	cmp    %ecx,%edi
+ 75a:	74 54                	je     7b0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 75c:	29 f9                	sub    %edi,%ecx
+ 75e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 761:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 764:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 767:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+}
+ 76d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 770:	83 c0 08             	add    $0x8,%eax
+}
+ 773:	5b                   	pop    %ebx
+ 774:	5e                   	pop    %esi
+ 775:	5f                   	pop    %edi
+ 776:	5d                   	pop    %ebp
+ 777:	c3                   	ret    
+ 778:	90                   	nop
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 9c 0a 00 00 a0 	movl   $0xaa0,0xa9c
+ 787:	0a 00 00 
+ 78a:	c7 05 a0 0a 00 00 a0 	movl   $0xaa0,0xaa0
+ 791:	0a 00 00 
+    base.s.size = 0;
+ 794:	b8 a0 0a 00 00       	mov    $0xaa0,%eax
+ 799:	c7 05 a4 0a 00 00 00 	movl   $0x0,0xaa4
+ 7a0:	00 00 00 
+ 7a3:	e9 44 ff ff ff       	jmp    6ec <malloc+0x2c>
+ 7a8:	90                   	nop
+ 7a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 08                	mov    (%eax),%ecx
+ 7b2:	89 0a                	mov    %ecx,(%edx)
+ 7b4:	eb b1                	jmp    767 <malloc+0xa7>
diff -ruN xv6org/rm.d xv6mhybrid/rm.d
--- xv6org/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/rm.d	2020-10-15 19:50:34.993688177 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/rm.o and xv6mhybrid/rm.o differ
diff -ruN xv6org/rm.sym xv6mhybrid/rm.sym
--- xv6org/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/rm.sym	2020-10-15 19:50:35.037685320 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+000007b8 .rodata
+00000800 .eh_frame
+00000a9c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+000007ec digits.1056
+00000000 umalloc.c
+00000a9c freep
+00000aa0 base
+00000080 strcpy
+00000460 printf
+000002a0 memmove
+0000031a mknod
+00000190 gets
+00000352 getpid
+000006c0 malloc
+00000362 sleep
+00000392 get_burst_time
+000002e2 pipe
+000002f2 write
+0000032a fstat
+00000302 kill
+0000039a process_state
+00000342 chdir
+000003a2 dec_burstTime
+0000030a exec
+000002da wait
+000003aa inc_cpucounter
+000002ea read
+00000322 unlink
+000002ca fork
+0000035a sbrk
+0000036a uptime
+00000a9c __bss_start
+00000130 memset
+00000000 main
+0000038a set_burst_time
+000000b0 strcmp
+0000034a dup
+0000037a getMaxPid
+00000372 getNumProc
+00000382 getProcInfo
+00000210 stat
+00000a9c _edata
+00000aa8 _end
+00000332 link
+000002d2 exit
+00000260 atoi
+00000100 strlen
+00000312 open
+00000150 strchr
+0000033a mkdir
+000002fa close
+00000630 free
Binary files xv6org/_sh and xv6mhybrid/_sh differ
diff -ruN xv6org/sh.asm xv6mhybrid/sh.asm
--- xv6org/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/sh.asm	2020-10-15 19:50:35.161677270 +0530
@@ -0,0 +1,2594 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      11:	eb 0a                	jmp    1d <main+0x1d>
+      13:	90                   	nop
+      14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(fd >= 3){
+      18:	83 f8 02             	cmp    $0x2,%eax
+      1b:	7f 76                	jg     93 <main+0x93>
+  while((fd = open("console", O_RDWR)) >= 0){
+      1d:	83 ec 08             	sub    $0x8,%esp
+      20:	6a 02                	push   $0x2
+      22:	68 99 12 00 00       	push   $0x1299
+      27:	e8 26 0d 00 00       	call   d52 <open>
+      2c:	83 c4 10             	add    $0x10,%esp
+      2f:	85 c0                	test   %eax,%eax
+      31:	79 e5                	jns    18 <main+0x18>
+      33:	eb 1f                	jmp    54 <main+0x54>
+      35:	8d 76 00             	lea    0x0(%esi),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      38:	80 3d c2 18 00 00 20 	cmpb   $0x20,0x18c2
+      3f:	74 7a                	je     bb <main+0xbb>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      41:	e8 c4 0c 00 00       	call   d0a <fork>
+  if(pid == -1)
+      46:	83 f8 ff             	cmp    $0xffffffff,%eax
+      49:	74 3b                	je     86 <main+0x86>
+    if(fork1() == 0)
+      4b:	85 c0                	test   %eax,%eax
+      4d:	74 57                	je     a6 <main+0xa6>
+    wait();
+      4f:	e8 c6 0c 00 00       	call   d1a <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      54:	83 ec 08             	sub    $0x8,%esp
+      57:	6a 64                	push   $0x64
+      59:	68 c0 18 00 00       	push   $0x18c0
+      5e:	e8 9d 00 00 00       	call   100 <getcmd>
+      63:	83 c4 10             	add    $0x10,%esp
+      66:	85 c0                	test   %eax,%eax
+      68:	78 37                	js     a1 <main+0xa1>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      6a:	80 3d c0 18 00 00 63 	cmpb   $0x63,0x18c0
+      71:	75 ce                	jne    41 <main+0x41>
+      73:	80 3d c1 18 00 00 64 	cmpb   $0x64,0x18c1
+      7a:	74 bc                	je     38 <main+0x38>
+  pid = fork();
+      7c:	e8 89 0c 00 00       	call   d0a <fork>
+  if(pid == -1)
+      81:	83 f8 ff             	cmp    $0xffffffff,%eax
+      84:	75 c5                	jne    4b <main+0x4b>
+    panic("fork");
+      86:	83 ec 0c             	sub    $0xc,%esp
+      89:	68 22 12 00 00       	push   $0x1222
+      8e:	e8 bd 00 00 00       	call   150 <panic>
+      close(fd);
+      93:	83 ec 0c             	sub    $0xc,%esp
+      96:	50                   	push   %eax
+      97:	e8 9e 0c 00 00       	call   d3a <close>
+      break;
+      9c:	83 c4 10             	add    $0x10,%esp
+      9f:	eb b3                	jmp    54 <main+0x54>
+  exit();
+      a1:	e8 6c 0c 00 00       	call   d12 <exit>
+      runcmd(parsecmd(buf));
+      a6:	83 ec 0c             	sub    $0xc,%esp
+      a9:	68 c0 18 00 00       	push   $0x18c0
+      ae:	e8 9d 09 00 00       	call   a50 <parsecmd>
+      b3:	89 04 24             	mov    %eax,(%esp)
+      b6:	e8 b5 00 00 00       	call   170 <runcmd>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      bb:	83 ec 0c             	sub    $0xc,%esp
+      be:	68 c0 18 00 00       	push   $0x18c0
+      c3:	e8 78 0a 00 00       	call   b40 <strlen>
+      if(chdir(buf+3) < 0)
+      c8:	c7 04 24 c3 18 00 00 	movl   $0x18c3,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      cf:	c6 80 bf 18 00 00 00 	movb   $0x0,0x18bf(%eax)
+      if(chdir(buf+3) < 0)
+      d6:	e8 a7 0c 00 00       	call   d82 <chdir>
+      db:	83 c4 10             	add    $0x10,%esp
+      de:	85 c0                	test   %eax,%eax
+      e0:	0f 89 6e ff ff ff    	jns    54 <main+0x54>
+        printf(2, "cannot cd %s\n", buf+3);
+      e6:	50                   	push   %eax
+      e7:	68 c3 18 00 00       	push   $0x18c3
+      ec:	68 a1 12 00 00       	push   $0x12a1
+      f1:	6a 02                	push   $0x2
+      f3:	e8 a8 0d 00 00       	call   ea0 <printf>
+      f8:	83 c4 10             	add    $0x10,%esp
+      fb:	e9 54 ff ff ff       	jmp    54 <main+0x54>
+
+00000100 <getcmd>:
+{
+     100:	55                   	push   %ebp
+     101:	89 e5                	mov    %esp,%ebp
+     103:	56                   	push   %esi
+     104:	53                   	push   %ebx
+     105:	8b 75 0c             	mov    0xc(%ebp),%esi
+     108:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     10b:	83 ec 08             	sub    $0x8,%esp
+     10e:	68 f8 11 00 00       	push   $0x11f8
+     113:	6a 02                	push   $0x2
+     115:	e8 86 0d 00 00       	call   ea0 <printf>
+  memset(buf, 0, nbuf);
+     11a:	83 c4 0c             	add    $0xc,%esp
+     11d:	56                   	push   %esi
+     11e:	6a 00                	push   $0x0
+     120:	53                   	push   %ebx
+     121:	e8 4a 0a 00 00       	call   b70 <memset>
+  gets(buf, nbuf);
+     126:	58                   	pop    %eax
+     127:	5a                   	pop    %edx
+     128:	56                   	push   %esi
+     129:	53                   	push   %ebx
+     12a:	e8 a1 0a 00 00       	call   bd0 <gets>
+  if(buf[0] == 0) // EOF
+     12f:	83 c4 10             	add    $0x10,%esp
+     132:	31 c0                	xor    %eax,%eax
+     134:	80 3b 00             	cmpb   $0x0,(%ebx)
+     137:	0f 94 c0             	sete   %al
+}
+     13a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  if(buf[0] == 0) // EOF
+     13d:	f7 d8                	neg    %eax
+}
+     13f:	5b                   	pop    %ebx
+     140:	5e                   	pop    %esi
+     141:	5d                   	pop    %ebp
+     142:	c3                   	ret    
+     143:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <panic>:
+{
+     150:	55                   	push   %ebp
+     151:	89 e5                	mov    %esp,%ebp
+     153:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     156:	ff 75 08             	pushl  0x8(%ebp)
+     159:	68 95 12 00 00       	push   $0x1295
+     15e:	6a 02                	push   $0x2
+     160:	e8 3b 0d 00 00       	call   ea0 <printf>
+  exit();
+     165:	e8 a8 0b 00 00       	call   d12 <exit>
+     16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <runcmd>:
+{
+     170:	55                   	push   %ebp
+     171:	89 e5                	mov    %esp,%ebp
+     173:	53                   	push   %ebx
+     174:	83 ec 14             	sub    $0x14,%esp
+     177:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     17a:	85 db                	test   %ebx,%ebx
+     17c:	74 3a                	je     1b8 <runcmd+0x48>
+  switch(cmd->type){
+     17e:	83 3b 05             	cmpl   $0x5,(%ebx)
+     181:	0f 87 06 01 00 00    	ja     28d <runcmd+0x11d>
+     187:	8b 03                	mov    (%ebx),%eax
+     189:	ff 24 85 b0 12 00 00 	jmp    *0x12b0(,%eax,4)
+    if(ecmd->argv[0] == 0)
+     190:	8b 43 04             	mov    0x4(%ebx),%eax
+     193:	85 c0                	test   %eax,%eax
+     195:	74 21                	je     1b8 <runcmd+0x48>
+    exec(ecmd->argv[0], ecmd->argv);
+     197:	52                   	push   %edx
+     198:	52                   	push   %edx
+     199:	8d 53 04             	lea    0x4(%ebx),%edx
+     19c:	52                   	push   %edx
+     19d:	50                   	push   %eax
+     19e:	e8 a7 0b 00 00       	call   d4a <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     1a3:	83 c4 0c             	add    $0xc,%esp
+     1a6:	ff 73 04             	pushl  0x4(%ebx)
+     1a9:	68 02 12 00 00       	push   $0x1202
+     1ae:	6a 02                	push   $0x2
+     1b0:	e8 eb 0c 00 00       	call   ea0 <printf>
+    break;
+     1b5:	83 c4 10             	add    $0x10,%esp
+    exit();
+     1b8:	e8 55 0b 00 00       	call   d12 <exit>
+  pid = fork();
+     1bd:	e8 48 0b 00 00       	call   d0a <fork>
+  if(pid == -1)
+     1c2:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1c5:	0f 84 cf 00 00 00    	je     29a <runcmd+0x12a>
+    if(fork1() == 0)
+     1cb:	85 c0                	test   %eax,%eax
+     1cd:	75 e9                	jne    1b8 <runcmd+0x48>
+      runcmd(bcmd->cmd);
+     1cf:	83 ec 0c             	sub    $0xc,%esp
+     1d2:	ff 73 04             	pushl  0x4(%ebx)
+     1d5:	e8 96 ff ff ff       	call   170 <runcmd>
+    close(rcmd->fd);
+     1da:	83 ec 0c             	sub    $0xc,%esp
+     1dd:	ff 73 14             	pushl  0x14(%ebx)
+     1e0:	e8 55 0b 00 00       	call   d3a <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     1e5:	59                   	pop    %ecx
+     1e6:	58                   	pop    %eax
+     1e7:	ff 73 10             	pushl  0x10(%ebx)
+     1ea:	ff 73 08             	pushl  0x8(%ebx)
+     1ed:	e8 60 0b 00 00       	call   d52 <open>
+     1f2:	83 c4 10             	add    $0x10,%esp
+     1f5:	85 c0                	test   %eax,%eax
+     1f7:	79 d6                	jns    1cf <runcmd+0x5f>
+      printf(2, "open %s failed\n", rcmd->file);
+     1f9:	52                   	push   %edx
+     1fa:	ff 73 08             	pushl  0x8(%ebx)
+     1fd:	68 12 12 00 00       	push   $0x1212
+     202:	6a 02                	push   $0x2
+     204:	e8 97 0c 00 00       	call   ea0 <printf>
+      exit();
+     209:	e8 04 0b 00 00       	call   d12 <exit>
+    if(pipe(p) < 0)
+     20e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     211:	83 ec 0c             	sub    $0xc,%esp
+     214:	50                   	push   %eax
+     215:	e8 08 0b 00 00       	call   d22 <pipe>
+     21a:	83 c4 10             	add    $0x10,%esp
+     21d:	85 c0                	test   %eax,%eax
+     21f:	0f 88 b0 00 00 00    	js     2d5 <runcmd+0x165>
+  pid = fork();
+     225:	e8 e0 0a 00 00       	call   d0a <fork>
+  if(pid == -1)
+     22a:	83 f8 ff             	cmp    $0xffffffff,%eax
+     22d:	74 6b                	je     29a <runcmd+0x12a>
+    if(fork1() == 0){
+     22f:	85 c0                	test   %eax,%eax
+     231:	0f 84 ab 00 00 00    	je     2e2 <runcmd+0x172>
+  pid = fork();
+     237:	e8 ce 0a 00 00       	call   d0a <fork>
+  if(pid == -1)
+     23c:	83 f8 ff             	cmp    $0xffffffff,%eax
+     23f:	74 59                	je     29a <runcmd+0x12a>
+    if(fork1() == 0){
+     241:	85 c0                	test   %eax,%eax
+     243:	74 62                	je     2a7 <runcmd+0x137>
+    close(p[0]);
+     245:	83 ec 0c             	sub    $0xc,%esp
+     248:	ff 75 f0             	pushl  -0x10(%ebp)
+     24b:	e8 ea 0a 00 00       	call   d3a <close>
+    close(p[1]);
+     250:	58                   	pop    %eax
+     251:	ff 75 f4             	pushl  -0xc(%ebp)
+     254:	e8 e1 0a 00 00       	call   d3a <close>
+    wait();
+     259:	e8 bc 0a 00 00       	call   d1a <wait>
+    wait();
+     25e:	e8 b7 0a 00 00       	call   d1a <wait>
+    break;
+     263:	83 c4 10             	add    $0x10,%esp
+     266:	e9 4d ff ff ff       	jmp    1b8 <runcmd+0x48>
+  pid = fork();
+     26b:	e8 9a 0a 00 00       	call   d0a <fork>
+  if(pid == -1)
+     270:	83 f8 ff             	cmp    $0xffffffff,%eax
+     273:	74 25                	je     29a <runcmd+0x12a>
+    if(fork1() == 0)
+     275:	85 c0                	test   %eax,%eax
+     277:	0f 84 52 ff ff ff    	je     1cf <runcmd+0x5f>
+    wait();
+     27d:	e8 98 0a 00 00       	call   d1a <wait>
+    runcmd(lcmd->right);
+     282:	83 ec 0c             	sub    $0xc,%esp
+     285:	ff 73 08             	pushl  0x8(%ebx)
+     288:	e8 e3 fe ff ff       	call   170 <runcmd>
+    panic("runcmd");
+     28d:	83 ec 0c             	sub    $0xc,%esp
+     290:	68 fb 11 00 00       	push   $0x11fb
+     295:	e8 b6 fe ff ff       	call   150 <panic>
+    panic("fork");
+     29a:	83 ec 0c             	sub    $0xc,%esp
+     29d:	68 22 12 00 00       	push   $0x1222
+     2a2:	e8 a9 fe ff ff       	call   150 <panic>
+      close(0);
+     2a7:	83 ec 0c             	sub    $0xc,%esp
+     2aa:	6a 00                	push   $0x0
+     2ac:	e8 89 0a 00 00       	call   d3a <close>
+      dup(p[0]);
+     2b1:	5a                   	pop    %edx
+     2b2:	ff 75 f0             	pushl  -0x10(%ebp)
+     2b5:	e8 d0 0a 00 00       	call   d8a <dup>
+      close(p[0]);
+     2ba:	59                   	pop    %ecx
+     2bb:	ff 75 f0             	pushl  -0x10(%ebp)
+     2be:	e8 77 0a 00 00       	call   d3a <close>
+      close(p[1]);
+     2c3:	58                   	pop    %eax
+     2c4:	ff 75 f4             	pushl  -0xc(%ebp)
+     2c7:	e8 6e 0a 00 00       	call   d3a <close>
+      runcmd(pcmd->right);
+     2cc:	58                   	pop    %eax
+     2cd:	ff 73 08             	pushl  0x8(%ebx)
+     2d0:	e8 9b fe ff ff       	call   170 <runcmd>
+      panic("pipe");
+     2d5:	83 ec 0c             	sub    $0xc,%esp
+     2d8:	68 27 12 00 00       	push   $0x1227
+     2dd:	e8 6e fe ff ff       	call   150 <panic>
+      close(1);
+     2e2:	83 ec 0c             	sub    $0xc,%esp
+     2e5:	6a 01                	push   $0x1
+     2e7:	e8 4e 0a 00 00       	call   d3a <close>
+      dup(p[1]);
+     2ec:	58                   	pop    %eax
+     2ed:	ff 75 f4             	pushl  -0xc(%ebp)
+     2f0:	e8 95 0a 00 00       	call   d8a <dup>
+      close(p[0]);
+     2f5:	58                   	pop    %eax
+     2f6:	ff 75 f0             	pushl  -0x10(%ebp)
+     2f9:	e8 3c 0a 00 00       	call   d3a <close>
+      close(p[1]);
+     2fe:	58                   	pop    %eax
+     2ff:	ff 75 f4             	pushl  -0xc(%ebp)
+     302:	e8 33 0a 00 00       	call   d3a <close>
+      runcmd(pcmd->left);
+     307:	58                   	pop    %eax
+     308:	ff 73 04             	pushl  0x4(%ebx)
+     30b:	e8 60 fe ff ff       	call   170 <runcmd>
+
+00000310 <fork1>:
+{
+     310:	55                   	push   %ebp
+     311:	89 e5                	mov    %esp,%ebp
+     313:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     316:	e8 ef 09 00 00       	call   d0a <fork>
+  if(pid == -1)
+     31b:	83 f8 ff             	cmp    $0xffffffff,%eax
+     31e:	74 02                	je     322 <fork1+0x12>
+  return pid;
+}
+     320:	c9                   	leave  
+     321:	c3                   	ret    
+    panic("fork");
+     322:	83 ec 0c             	sub    $0xc,%esp
+     325:	68 22 12 00 00       	push   $0x1222
+     32a:	e8 21 fe ff ff       	call   150 <panic>
+     32f:	90                   	nop
+
+00000330 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     330:	55                   	push   %ebp
+     331:	89 e5                	mov    %esp,%ebp
+     333:	53                   	push   %ebx
+     334:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     337:	6a 54                	push   $0x54
+     339:	e8 c2 0d 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     33e:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     341:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     343:	6a 54                	push   $0x54
+     345:	6a 00                	push   $0x0
+     347:	50                   	push   %eax
+     348:	e8 23 08 00 00       	call   b70 <memset>
+  cmd->type = EXEC;
+     34d:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     353:	89 d8                	mov    %ebx,%eax
+     355:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     358:	c9                   	leave  
+     359:	c3                   	ret    
+     35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000360 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     360:	55                   	push   %ebp
+     361:	89 e5                	mov    %esp,%ebp
+     363:	53                   	push   %ebx
+     364:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     367:	6a 18                	push   $0x18
+     369:	e8 92 0d 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     36e:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     371:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     373:	6a 18                	push   $0x18
+     375:	6a 00                	push   $0x0
+     377:	50                   	push   %eax
+     378:	e8 f3 07 00 00       	call   b70 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     37d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     380:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     386:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     389:	8b 45 0c             	mov    0xc(%ebp),%eax
+     38c:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     38f:	8b 45 10             	mov    0x10(%ebp),%eax
+     392:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     395:	8b 45 14             	mov    0x14(%ebp),%eax
+     398:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     39b:	8b 45 18             	mov    0x18(%ebp),%eax
+     39e:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3a1:	89 d8                	mov    %ebx,%eax
+     3a3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3a6:	c9                   	leave  
+     3a7:	c3                   	ret    
+     3a8:	90                   	nop
+     3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003b0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3b0:	55                   	push   %ebp
+     3b1:	89 e5                	mov    %esp,%ebp
+     3b3:	53                   	push   %ebx
+     3b4:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3b7:	6a 0c                	push   $0xc
+     3b9:	e8 42 0d 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3be:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     3c1:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3c3:	6a 0c                	push   $0xc
+     3c5:	6a 00                	push   $0x0
+     3c7:	50                   	push   %eax
+     3c8:	e8 a3 07 00 00       	call   b70 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     3cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     3d0:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     3d6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3dc:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     3df:	89 d8                	mov    %ebx,%eax
+     3e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3e4:	c9                   	leave  
+     3e5:	c3                   	ret    
+     3e6:	8d 76 00             	lea    0x0(%esi),%esi
+     3e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003f0 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     3f0:	55                   	push   %ebp
+     3f1:	89 e5                	mov    %esp,%ebp
+     3f3:	53                   	push   %ebx
+     3f4:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3f7:	6a 0c                	push   $0xc
+     3f9:	e8 02 0d 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3fe:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     401:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     403:	6a 0c                	push   $0xc
+     405:	6a 00                	push   $0x0
+     407:	50                   	push   %eax
+     408:	e8 63 07 00 00       	call   b70 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     40d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     410:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     416:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     419:	8b 45 0c             	mov    0xc(%ebp),%eax
+     41c:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     41f:	89 d8                	mov    %ebx,%eax
+     421:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     424:	c9                   	leave  
+     425:	c3                   	ret    
+     426:	8d 76 00             	lea    0x0(%esi),%esi
+     429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000430 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     430:	55                   	push   %ebp
+     431:	89 e5                	mov    %esp,%ebp
+     433:	53                   	push   %ebx
+     434:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     437:	6a 08                	push   $0x8
+     439:	e8 c2 0c 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     43e:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     441:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     443:	6a 08                	push   $0x8
+     445:	6a 00                	push   $0x0
+     447:	50                   	push   %eax
+     448:	e8 23 07 00 00       	call   b70 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     44d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     450:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     456:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     459:	89 d8                	mov    %ebx,%eax
+     45b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     45e:	c9                   	leave  
+     45f:	c3                   	ret    
+
+00000460 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     460:	55                   	push   %ebp
+     461:	89 e5                	mov    %esp,%ebp
+     463:	57                   	push   %edi
+     464:	56                   	push   %esi
+     465:	53                   	push   %ebx
+     466:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     469:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     46c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     46f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  s = *ps;
+     472:	8b 30                	mov    (%eax),%esi
+  while(s < es && strchr(whitespace, *s))
+     474:	39 de                	cmp    %ebx,%esi
+     476:	72 0f                	jb     487 <gettoken+0x27>
+     478:	eb 25                	jmp    49f <gettoken+0x3f>
+     47a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    s++;
+     480:	83 c6 01             	add    $0x1,%esi
+  while(s < es && strchr(whitespace, *s))
+     483:	39 f3                	cmp    %esi,%ebx
+     485:	74 18                	je     49f <gettoken+0x3f>
+     487:	0f be 06             	movsbl (%esi),%eax
+     48a:	83 ec 08             	sub    $0x8,%esp
+     48d:	50                   	push   %eax
+     48e:	68 ac 18 00 00       	push   $0x18ac
+     493:	e8 f8 06 00 00       	call   b90 <strchr>
+     498:	83 c4 10             	add    $0x10,%esp
+     49b:	85 c0                	test   %eax,%eax
+     49d:	75 e1                	jne    480 <gettoken+0x20>
+  if(q)
+     49f:	85 ff                	test   %edi,%edi
+     4a1:	74 02                	je     4a5 <gettoken+0x45>
+    *q = s;
+     4a3:	89 37                	mov    %esi,(%edi)
+  ret = *s;
+     4a5:	0f be 06             	movsbl (%esi),%eax
+  switch(*s){
+     4a8:	3c 29                	cmp    $0x29,%al
+     4aa:	7f 54                	jg     500 <gettoken+0xa0>
+     4ac:	3c 28                	cmp    $0x28,%al
+     4ae:	0f 8d c8 00 00 00    	jge    57c <gettoken+0x11c>
+     4b4:	31 ff                	xor    %edi,%edi
+     4b6:	84 c0                	test   %al,%al
+     4b8:	0f 85 d2 00 00 00    	jne    590 <gettoken+0x130>
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     4be:	8b 55 14             	mov    0x14(%ebp),%edx
+     4c1:	85 d2                	test   %edx,%edx
+     4c3:	74 05                	je     4ca <gettoken+0x6a>
+    *eq = s;
+     4c5:	8b 45 14             	mov    0x14(%ebp),%eax
+     4c8:	89 30                	mov    %esi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     4ca:	39 de                	cmp    %ebx,%esi
+     4cc:	72 09                	jb     4d7 <gettoken+0x77>
+     4ce:	eb 1f                	jmp    4ef <gettoken+0x8f>
+    s++;
+     4d0:	83 c6 01             	add    $0x1,%esi
+  while(s < es && strchr(whitespace, *s))
+     4d3:	39 f3                	cmp    %esi,%ebx
+     4d5:	74 18                	je     4ef <gettoken+0x8f>
+     4d7:	0f be 06             	movsbl (%esi),%eax
+     4da:	83 ec 08             	sub    $0x8,%esp
+     4dd:	50                   	push   %eax
+     4de:	68 ac 18 00 00       	push   $0x18ac
+     4e3:	e8 a8 06 00 00       	call   b90 <strchr>
+     4e8:	83 c4 10             	add    $0x10,%esp
+     4eb:	85 c0                	test   %eax,%eax
+     4ed:	75 e1                	jne    4d0 <gettoken+0x70>
+  *ps = s;
+     4ef:	8b 45 08             	mov    0x8(%ebp),%eax
+     4f2:	89 30                	mov    %esi,(%eax)
+  return ret;
+}
+     4f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     4f7:	89 f8                	mov    %edi,%eax
+     4f9:	5b                   	pop    %ebx
+     4fa:	5e                   	pop    %esi
+     4fb:	5f                   	pop    %edi
+     4fc:	5d                   	pop    %ebp
+     4fd:	c3                   	ret    
+     4fe:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     500:	3c 3e                	cmp    $0x3e,%al
+     502:	75 1c                	jne    520 <gettoken+0xc0>
+    if(*s == '>'){
+     504:	80 7e 01 3e          	cmpb   $0x3e,0x1(%esi)
+    s++;
+     508:	8d 46 01             	lea    0x1(%esi),%eax
+    if(*s == '>'){
+     50b:	0f 84 a4 00 00 00    	je     5b5 <gettoken+0x155>
+    s++;
+     511:	89 c6                	mov    %eax,%esi
+     513:	bf 3e 00 00 00       	mov    $0x3e,%edi
+     518:	eb a4                	jmp    4be <gettoken+0x5e>
+     51a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  switch(*s){
+     520:	7f 56                	jg     578 <gettoken+0x118>
+     522:	8d 48 c5             	lea    -0x3b(%eax),%ecx
+     525:	80 f9 01             	cmp    $0x1,%cl
+     528:	76 52                	jbe    57c <gettoken+0x11c>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     52a:	39 f3                	cmp    %esi,%ebx
+     52c:	77 24                	ja     552 <gettoken+0xf2>
+     52e:	eb 70                	jmp    5a0 <gettoken+0x140>
+     530:	0f be 06             	movsbl (%esi),%eax
+     533:	83 ec 08             	sub    $0x8,%esp
+     536:	50                   	push   %eax
+     537:	68 a4 18 00 00       	push   $0x18a4
+     53c:	e8 4f 06 00 00       	call   b90 <strchr>
+     541:	83 c4 10             	add    $0x10,%esp
+     544:	85 c0                	test   %eax,%eax
+     546:	75 1f                	jne    567 <gettoken+0x107>
+      s++;
+     548:	83 c6 01             	add    $0x1,%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     54b:	39 f3                	cmp    %esi,%ebx
+     54d:	74 51                	je     5a0 <gettoken+0x140>
+     54f:	0f be 06             	movsbl (%esi),%eax
+     552:	83 ec 08             	sub    $0x8,%esp
+     555:	50                   	push   %eax
+     556:	68 ac 18 00 00       	push   $0x18ac
+     55b:	e8 30 06 00 00       	call   b90 <strchr>
+     560:	83 c4 10             	add    $0x10,%esp
+     563:	85 c0                	test   %eax,%eax
+     565:	74 c9                	je     530 <gettoken+0xd0>
+    ret = 'a';
+     567:	bf 61 00 00 00       	mov    $0x61,%edi
+     56c:	e9 4d ff ff ff       	jmp    4be <gettoken+0x5e>
+     571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     578:	3c 7c                	cmp    $0x7c,%al
+     57a:	75 ae                	jne    52a <gettoken+0xca>
+  ret = *s;
+     57c:	0f be f8             	movsbl %al,%edi
+    s++;
+     57f:	83 c6 01             	add    $0x1,%esi
+    break;
+     582:	e9 37 ff ff ff       	jmp    4be <gettoken+0x5e>
+     587:	89 f6                	mov    %esi,%esi
+     589:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  switch(*s){
+     590:	3c 26                	cmp    $0x26,%al
+     592:	75 96                	jne    52a <gettoken+0xca>
+     594:	eb e6                	jmp    57c <gettoken+0x11c>
+     596:	8d 76 00             	lea    0x0(%esi),%esi
+     599:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  if(eq)
+     5a0:	8b 45 14             	mov    0x14(%ebp),%eax
+     5a3:	bf 61 00 00 00       	mov    $0x61,%edi
+     5a8:	85 c0                	test   %eax,%eax
+     5aa:	0f 85 15 ff ff ff    	jne    4c5 <gettoken+0x65>
+     5b0:	e9 3a ff ff ff       	jmp    4ef <gettoken+0x8f>
+      s++;
+     5b5:	83 c6 02             	add    $0x2,%esi
+      ret = '+';
+     5b8:	bf 2b 00 00 00       	mov    $0x2b,%edi
+     5bd:	e9 fc fe ff ff       	jmp    4be <gettoken+0x5e>
+     5c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000005d0 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     5d0:	55                   	push   %ebp
+     5d1:	89 e5                	mov    %esp,%ebp
+     5d3:	57                   	push   %edi
+     5d4:	56                   	push   %esi
+     5d5:	53                   	push   %ebx
+     5d6:	83 ec 0c             	sub    $0xc,%esp
+     5d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+     5dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     5df:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     5e1:	39 f3                	cmp    %esi,%ebx
+     5e3:	72 12                	jb     5f7 <peek+0x27>
+     5e5:	eb 28                	jmp    60f <peek+0x3f>
+     5e7:	89 f6                	mov    %esi,%esi
+     5e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    s++;
+     5f0:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     5f3:	39 de                	cmp    %ebx,%esi
+     5f5:	74 18                	je     60f <peek+0x3f>
+     5f7:	0f be 03             	movsbl (%ebx),%eax
+     5fa:	83 ec 08             	sub    $0x8,%esp
+     5fd:	50                   	push   %eax
+     5fe:	68 ac 18 00 00       	push   $0x18ac
+     603:	e8 88 05 00 00       	call   b90 <strchr>
+     608:	83 c4 10             	add    $0x10,%esp
+     60b:	85 c0                	test   %eax,%eax
+     60d:	75 e1                	jne    5f0 <peek+0x20>
+  *ps = s;
+     60f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     611:	0f be 13             	movsbl (%ebx),%edx
+     614:	31 c0                	xor    %eax,%eax
+     616:	84 d2                	test   %dl,%dl
+     618:	74 17                	je     631 <peek+0x61>
+     61a:	83 ec 08             	sub    $0x8,%esp
+     61d:	52                   	push   %edx
+     61e:	ff 75 10             	pushl  0x10(%ebp)
+     621:	e8 6a 05 00 00       	call   b90 <strchr>
+     626:	83 c4 10             	add    $0x10,%esp
+     629:	85 c0                	test   %eax,%eax
+     62b:	0f 95 c0             	setne  %al
+     62e:	0f b6 c0             	movzbl %al,%eax
+}
+     631:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     634:	5b                   	pop    %ebx
+     635:	5e                   	pop    %esi
+     636:	5f                   	pop    %edi
+     637:	5d                   	pop    %ebp
+     638:	c3                   	ret    
+     639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000640 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     640:	55                   	push   %ebp
+     641:	89 e5                	mov    %esp,%ebp
+     643:	57                   	push   %edi
+     644:	56                   	push   %esi
+     645:	53                   	push   %ebx
+     646:	83 ec 1c             	sub    $0x1c,%esp
+     649:	8b 75 0c             	mov    0xc(%ebp),%esi
+     64c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     64f:	90                   	nop
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     650:	83 ec 04             	sub    $0x4,%esp
+     653:	68 49 12 00 00       	push   $0x1249
+     658:	53                   	push   %ebx
+     659:	56                   	push   %esi
+     65a:	e8 71 ff ff ff       	call   5d0 <peek>
+     65f:	83 c4 10             	add    $0x10,%esp
+     662:	85 c0                	test   %eax,%eax
+     664:	74 6a                	je     6d0 <parseredirs+0x90>
+    tok = gettoken(ps, es, 0, 0);
+     666:	6a 00                	push   $0x0
+     668:	6a 00                	push   $0x0
+     66a:	53                   	push   %ebx
+     66b:	56                   	push   %esi
+     66c:	e8 ef fd ff ff       	call   460 <gettoken>
+     671:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     673:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     676:	50                   	push   %eax
+     677:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     67a:	50                   	push   %eax
+     67b:	53                   	push   %ebx
+     67c:	56                   	push   %esi
+     67d:	e8 de fd ff ff       	call   460 <gettoken>
+     682:	83 c4 20             	add    $0x20,%esp
+     685:	83 f8 61             	cmp    $0x61,%eax
+     688:	75 51                	jne    6db <parseredirs+0x9b>
+      panic("missing file for redirection");
+    switch(tok){
+     68a:	83 ff 3c             	cmp    $0x3c,%edi
+     68d:	74 31                	je     6c0 <parseredirs+0x80>
+     68f:	83 ff 3e             	cmp    $0x3e,%edi
+     692:	74 05                	je     699 <parseredirs+0x59>
+     694:	83 ff 2b             	cmp    $0x2b,%edi
+     697:	75 b7                	jne    650 <parseredirs+0x10>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     699:	83 ec 0c             	sub    $0xc,%esp
+     69c:	6a 01                	push   $0x1
+     69e:	68 01 02 00 00       	push   $0x201
+     6a3:	ff 75 e4             	pushl  -0x1c(%ebp)
+     6a6:	ff 75 e0             	pushl  -0x20(%ebp)
+     6a9:	ff 75 08             	pushl  0x8(%ebp)
+     6ac:	e8 af fc ff ff       	call   360 <redircmd>
+      break;
+     6b1:	83 c4 20             	add    $0x20,%esp
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6b4:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     6b7:	eb 97                	jmp    650 <parseredirs+0x10>
+     6b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     6c0:	83 ec 0c             	sub    $0xc,%esp
+     6c3:	6a 00                	push   $0x0
+     6c5:	6a 00                	push   $0x0
+     6c7:	eb da                	jmp    6a3 <parseredirs+0x63>
+     6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  return cmd;
+}
+     6d0:	8b 45 08             	mov    0x8(%ebp),%eax
+     6d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     6d6:	5b                   	pop    %ebx
+     6d7:	5e                   	pop    %esi
+     6d8:	5f                   	pop    %edi
+     6d9:	5d                   	pop    %ebp
+     6da:	c3                   	ret    
+      panic("missing file for redirection");
+     6db:	83 ec 0c             	sub    $0xc,%esp
+     6de:	68 2c 12 00 00       	push   $0x122c
+     6e3:	e8 68 fa ff ff       	call   150 <panic>
+     6e8:	90                   	nop
+     6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000006f0 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     6f0:	55                   	push   %ebp
+     6f1:	89 e5                	mov    %esp,%ebp
+     6f3:	57                   	push   %edi
+     6f4:	56                   	push   %esi
+     6f5:	53                   	push   %ebx
+     6f6:	83 ec 30             	sub    $0x30,%esp
+     6f9:	8b 75 08             	mov    0x8(%ebp),%esi
+     6fc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     6ff:	68 4c 12 00 00       	push   $0x124c
+     704:	57                   	push   %edi
+     705:	56                   	push   %esi
+     706:	e8 c5 fe ff ff       	call   5d0 <peek>
+     70b:	83 c4 10             	add    $0x10,%esp
+     70e:	85 c0                	test   %eax,%eax
+     710:	0f 85 92 00 00 00    	jne    7a8 <parseexec+0xb8>
+     716:	89 c3                	mov    %eax,%ebx
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     718:	e8 13 fc ff ff       	call   330 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     71d:	83 ec 04             	sub    $0x4,%esp
+  ret = execcmd();
+     720:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = parseredirs(ret, ps, es);
+     723:	57                   	push   %edi
+     724:	56                   	push   %esi
+     725:	50                   	push   %eax
+     726:	e8 15 ff ff ff       	call   640 <parseredirs>
+     72b:	83 c4 10             	add    $0x10,%esp
+     72e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     731:	eb 18                	jmp    74b <parseexec+0x5b>
+     733:	90                   	nop
+     734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     738:	83 ec 04             	sub    $0x4,%esp
+     73b:	57                   	push   %edi
+     73c:	56                   	push   %esi
+     73d:	ff 75 d4             	pushl  -0x2c(%ebp)
+     740:	e8 fb fe ff ff       	call   640 <parseredirs>
+     745:	83 c4 10             	add    $0x10,%esp
+     748:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     74b:	83 ec 04             	sub    $0x4,%esp
+     74e:	68 63 12 00 00       	push   $0x1263
+     753:	57                   	push   %edi
+     754:	56                   	push   %esi
+     755:	e8 76 fe ff ff       	call   5d0 <peek>
+     75a:	83 c4 10             	add    $0x10,%esp
+     75d:	85 c0                	test   %eax,%eax
+     75f:	75 67                	jne    7c8 <parseexec+0xd8>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     761:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     764:	50                   	push   %eax
+     765:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     768:	50                   	push   %eax
+     769:	57                   	push   %edi
+     76a:	56                   	push   %esi
+     76b:	e8 f0 fc ff ff       	call   460 <gettoken>
+     770:	83 c4 10             	add    $0x10,%esp
+     773:	85 c0                	test   %eax,%eax
+     775:	74 51                	je     7c8 <parseexec+0xd8>
+    if(tok != 'a')
+     777:	83 f8 61             	cmp    $0x61,%eax
+     77a:	75 6b                	jne    7e7 <parseexec+0xf7>
+    cmd->argv[argc] = q;
+     77c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     77f:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     782:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     789:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     78d:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     790:	83 fb 0a             	cmp    $0xa,%ebx
+     793:	75 a3                	jne    738 <parseexec+0x48>
+      panic("too many args");
+     795:	83 ec 0c             	sub    $0xc,%esp
+     798:	68 55 12 00 00       	push   $0x1255
+     79d:	e8 ae f9 ff ff       	call   150 <panic>
+     7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     7a8:	83 ec 08             	sub    $0x8,%esp
+     7ab:	57                   	push   %edi
+     7ac:	56                   	push   %esi
+     7ad:	e8 5e 01 00 00       	call   910 <parseblock>
+     7b2:	83 c4 10             	add    $0x10,%esp
+     7b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     7b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     7bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7be:	5b                   	pop    %ebx
+     7bf:	5e                   	pop    %esi
+     7c0:	5f                   	pop    %edi
+     7c1:	5d                   	pop    %ebp
+     7c2:	c3                   	ret    
+     7c3:	90                   	nop
+     7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     7c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     7cb:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+  cmd->argv[argc] = 0;
+     7ce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     7d5:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+}
+     7dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     7df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7e2:	5b                   	pop    %ebx
+     7e3:	5e                   	pop    %esi
+     7e4:	5f                   	pop    %edi
+     7e5:	5d                   	pop    %ebp
+     7e6:	c3                   	ret    
+      panic("syntax");
+     7e7:	83 ec 0c             	sub    $0xc,%esp
+     7ea:	68 4e 12 00 00       	push   $0x124e
+     7ef:	e8 5c f9 ff ff       	call   150 <panic>
+     7f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     7fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000800 <parsepipe>:
+{
+     800:	55                   	push   %ebp
+     801:	89 e5                	mov    %esp,%ebp
+     803:	57                   	push   %edi
+     804:	56                   	push   %esi
+     805:	53                   	push   %ebx
+     806:	83 ec 14             	sub    $0x14,%esp
+     809:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     80c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  cmd = parseexec(ps, es);
+     80f:	56                   	push   %esi
+     810:	53                   	push   %ebx
+     811:	e8 da fe ff ff       	call   6f0 <parseexec>
+  if(peek(ps, es, "|")){
+     816:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseexec(ps, es);
+     819:	89 c7                	mov    %eax,%edi
+  if(peek(ps, es, "|")){
+     81b:	68 68 12 00 00       	push   $0x1268
+     820:	56                   	push   %esi
+     821:	53                   	push   %ebx
+     822:	e8 a9 fd ff ff       	call   5d0 <peek>
+     827:	83 c4 10             	add    $0x10,%esp
+     82a:	85 c0                	test   %eax,%eax
+     82c:	75 12                	jne    840 <parsepipe+0x40>
+}
+     82e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     831:	89 f8                	mov    %edi,%eax
+     833:	5b                   	pop    %ebx
+     834:	5e                   	pop    %esi
+     835:	5f                   	pop    %edi
+     836:	5d                   	pop    %ebp
+     837:	c3                   	ret    
+     838:	90                   	nop
+     839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     840:	6a 00                	push   $0x0
+     842:	6a 00                	push   $0x0
+     844:	56                   	push   %esi
+     845:	53                   	push   %ebx
+     846:	e8 15 fc ff ff       	call   460 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     84b:	58                   	pop    %eax
+     84c:	5a                   	pop    %edx
+     84d:	56                   	push   %esi
+     84e:	53                   	push   %ebx
+     84f:	e8 ac ff ff ff       	call   800 <parsepipe>
+     854:	89 7d 08             	mov    %edi,0x8(%ebp)
+     857:	89 45 0c             	mov    %eax,0xc(%ebp)
+     85a:	83 c4 10             	add    $0x10,%esp
+}
+     85d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     860:	5b                   	pop    %ebx
+     861:	5e                   	pop    %esi
+     862:	5f                   	pop    %edi
+     863:	5d                   	pop    %ebp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     864:	e9 47 fb ff ff       	jmp    3b0 <pipecmd>
+     869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000870 <parseline>:
+{
+     870:	55                   	push   %ebp
+     871:	89 e5                	mov    %esp,%ebp
+     873:	57                   	push   %edi
+     874:	56                   	push   %esi
+     875:	53                   	push   %ebx
+     876:	83 ec 14             	sub    $0x14,%esp
+     879:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     87c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  cmd = parsepipe(ps, es);
+     87f:	56                   	push   %esi
+     880:	53                   	push   %ebx
+     881:	e8 7a ff ff ff       	call   800 <parsepipe>
+  while(peek(ps, es, "&")){
+     886:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     889:	89 c7                	mov    %eax,%edi
+  while(peek(ps, es, "&")){
+     88b:	eb 1b                	jmp    8a8 <parseline+0x38>
+     88d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     890:	6a 00                	push   $0x0
+     892:	6a 00                	push   $0x0
+     894:	56                   	push   %esi
+     895:	53                   	push   %ebx
+     896:	e8 c5 fb ff ff       	call   460 <gettoken>
+    cmd = backcmd(cmd);
+     89b:	89 3c 24             	mov    %edi,(%esp)
+     89e:	e8 8d fb ff ff       	call   430 <backcmd>
+     8a3:	83 c4 10             	add    $0x10,%esp
+     8a6:	89 c7                	mov    %eax,%edi
+  while(peek(ps, es, "&")){
+     8a8:	83 ec 04             	sub    $0x4,%esp
+     8ab:	68 6a 12 00 00       	push   $0x126a
+     8b0:	56                   	push   %esi
+     8b1:	53                   	push   %ebx
+     8b2:	e8 19 fd ff ff       	call   5d0 <peek>
+     8b7:	83 c4 10             	add    $0x10,%esp
+     8ba:	85 c0                	test   %eax,%eax
+     8bc:	75 d2                	jne    890 <parseline+0x20>
+  if(peek(ps, es, ";")){
+     8be:	83 ec 04             	sub    $0x4,%esp
+     8c1:	68 66 12 00 00       	push   $0x1266
+     8c6:	56                   	push   %esi
+     8c7:	53                   	push   %ebx
+     8c8:	e8 03 fd ff ff       	call   5d0 <peek>
+     8cd:	83 c4 10             	add    $0x10,%esp
+     8d0:	85 c0                	test   %eax,%eax
+     8d2:	75 0c                	jne    8e0 <parseline+0x70>
+}
+     8d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8d7:	89 f8                	mov    %edi,%eax
+     8d9:	5b                   	pop    %ebx
+     8da:	5e                   	pop    %esi
+     8db:	5f                   	pop    %edi
+     8dc:	5d                   	pop    %ebp
+     8dd:	c3                   	ret    
+     8de:	66 90                	xchg   %ax,%ax
+    gettoken(ps, es, 0, 0);
+     8e0:	6a 00                	push   $0x0
+     8e2:	6a 00                	push   $0x0
+     8e4:	56                   	push   %esi
+     8e5:	53                   	push   %ebx
+     8e6:	e8 75 fb ff ff       	call   460 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     8eb:	58                   	pop    %eax
+     8ec:	5a                   	pop    %edx
+     8ed:	56                   	push   %esi
+     8ee:	53                   	push   %ebx
+     8ef:	e8 7c ff ff ff       	call   870 <parseline>
+     8f4:	89 7d 08             	mov    %edi,0x8(%ebp)
+     8f7:	89 45 0c             	mov    %eax,0xc(%ebp)
+     8fa:	83 c4 10             	add    $0x10,%esp
+}
+     8fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     900:	5b                   	pop    %ebx
+     901:	5e                   	pop    %esi
+     902:	5f                   	pop    %edi
+     903:	5d                   	pop    %ebp
+    cmd = listcmd(cmd, parseline(ps, es));
+     904:	e9 e7 fa ff ff       	jmp    3f0 <listcmd>
+     909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000910 <parseblock>:
+{
+     910:	55                   	push   %ebp
+     911:	89 e5                	mov    %esp,%ebp
+     913:	57                   	push   %edi
+     914:	56                   	push   %esi
+     915:	53                   	push   %ebx
+     916:	83 ec 10             	sub    $0x10,%esp
+     919:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     91c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     91f:	68 4c 12 00 00       	push   $0x124c
+     924:	56                   	push   %esi
+     925:	53                   	push   %ebx
+     926:	e8 a5 fc ff ff       	call   5d0 <peek>
+     92b:	83 c4 10             	add    $0x10,%esp
+     92e:	85 c0                	test   %eax,%eax
+     930:	74 4a                	je     97c <parseblock+0x6c>
+  gettoken(ps, es, 0, 0);
+     932:	6a 00                	push   $0x0
+     934:	6a 00                	push   $0x0
+     936:	56                   	push   %esi
+     937:	53                   	push   %ebx
+     938:	e8 23 fb ff ff       	call   460 <gettoken>
+  cmd = parseline(ps, es);
+     93d:	58                   	pop    %eax
+     93e:	5a                   	pop    %edx
+     93f:	56                   	push   %esi
+     940:	53                   	push   %ebx
+     941:	e8 2a ff ff ff       	call   870 <parseline>
+  if(!peek(ps, es, ")"))
+     946:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseline(ps, es);
+     949:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     94b:	68 88 12 00 00       	push   $0x1288
+     950:	56                   	push   %esi
+     951:	53                   	push   %ebx
+     952:	e8 79 fc ff ff       	call   5d0 <peek>
+     957:	83 c4 10             	add    $0x10,%esp
+     95a:	85 c0                	test   %eax,%eax
+     95c:	74 2b                	je     989 <parseblock+0x79>
+  gettoken(ps, es, 0, 0);
+     95e:	6a 00                	push   $0x0
+     960:	6a 00                	push   $0x0
+     962:	56                   	push   %esi
+     963:	53                   	push   %ebx
+     964:	e8 f7 fa ff ff       	call   460 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     969:	83 c4 0c             	add    $0xc,%esp
+     96c:	56                   	push   %esi
+     96d:	53                   	push   %ebx
+     96e:	57                   	push   %edi
+     96f:	e8 cc fc ff ff       	call   640 <parseredirs>
+}
+     974:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     977:	5b                   	pop    %ebx
+     978:	5e                   	pop    %esi
+     979:	5f                   	pop    %edi
+     97a:	5d                   	pop    %ebp
+     97b:	c3                   	ret    
+    panic("parseblock");
+     97c:	83 ec 0c             	sub    $0xc,%esp
+     97f:	68 6c 12 00 00       	push   $0x126c
+     984:	e8 c7 f7 ff ff       	call   150 <panic>
+    panic("syntax - missing )");
+     989:	83 ec 0c             	sub    $0xc,%esp
+     98c:	68 77 12 00 00       	push   $0x1277
+     991:	e8 ba f7 ff ff       	call   150 <panic>
+     996:	8d 76 00             	lea    0x0(%esi),%esi
+     999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000009a0 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     9a0:	55                   	push   %ebp
+     9a1:	89 e5                	mov    %esp,%ebp
+     9a3:	53                   	push   %ebx
+     9a4:	83 ec 04             	sub    $0x4,%esp
+     9a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     9aa:	85 db                	test   %ebx,%ebx
+     9ac:	74 20                	je     9ce <nulterminate+0x2e>
+    return 0;
+
+  switch(cmd->type){
+     9ae:	83 3b 05             	cmpl   $0x5,(%ebx)
+     9b1:	77 1b                	ja     9ce <nulterminate+0x2e>
+     9b3:	8b 03                	mov    (%ebx),%eax
+     9b5:	ff 24 85 c8 12 00 00 	jmp    *0x12c8(,%eax,4)
+     9bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    nulterminate(lcmd->right);
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+     9c0:	83 ec 0c             	sub    $0xc,%esp
+     9c3:	ff 73 04             	pushl  0x4(%ebx)
+     9c6:	e8 d5 ff ff ff       	call   9a0 <nulterminate>
+    break;
+     9cb:	83 c4 10             	add    $0x10,%esp
+  }
+  return cmd;
+}
+     9ce:	89 d8                	mov    %ebx,%eax
+     9d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     9d3:	c9                   	leave  
+     9d4:	c3                   	ret    
+     9d5:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(lcmd->left);
+     9d8:	83 ec 0c             	sub    $0xc,%esp
+     9db:	ff 73 04             	pushl  0x4(%ebx)
+     9de:	e8 bd ff ff ff       	call   9a0 <nulterminate>
+    nulterminate(lcmd->right);
+     9e3:	58                   	pop    %eax
+     9e4:	ff 73 08             	pushl  0x8(%ebx)
+     9e7:	e8 b4 ff ff ff       	call   9a0 <nulterminate>
+}
+     9ec:	89 d8                	mov    %ebx,%eax
+    break;
+     9ee:	83 c4 10             	add    $0x10,%esp
+}
+     9f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     9f4:	c9                   	leave  
+     9f5:	c3                   	ret    
+     9f6:	8d 76 00             	lea    0x0(%esi),%esi
+     9f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    for(i=0; ecmd->argv[i]; i++)
+     a00:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     a03:	8d 43 08             	lea    0x8(%ebx),%eax
+     a06:	85 c9                	test   %ecx,%ecx
+     a08:	74 c4                	je     9ce <nulterminate+0x2e>
+     a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     a10:	8b 50 24             	mov    0x24(%eax),%edx
+     a13:	83 c0 04             	add    $0x4,%eax
+     a16:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     a19:	8b 50 fc             	mov    -0x4(%eax),%edx
+     a1c:	85 d2                	test   %edx,%edx
+     a1e:	75 f0                	jne    a10 <nulterminate+0x70>
+}
+     a20:	89 d8                	mov    %ebx,%eax
+     a22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a25:	c9                   	leave  
+     a26:	c3                   	ret    
+     a27:	89 f6                	mov    %esi,%esi
+     a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    nulterminate(rcmd->cmd);
+     a30:	83 ec 0c             	sub    $0xc,%esp
+     a33:	ff 73 04             	pushl  0x4(%ebx)
+     a36:	e8 65 ff ff ff       	call   9a0 <nulterminate>
+    *rcmd->efile = 0;
+     a3b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     a3e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     a41:	c6 00 00             	movb   $0x0,(%eax)
+}
+     a44:	89 d8                	mov    %ebx,%eax
+     a46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a49:	c9                   	leave  
+     a4a:	c3                   	ret    
+     a4b:	90                   	nop
+     a4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a50 <parsecmd>:
+{
+     a50:	55                   	push   %ebp
+     a51:	89 e5                	mov    %esp,%ebp
+     a53:	56                   	push   %esi
+     a54:	53                   	push   %ebx
+  es = s + strlen(s);
+     a55:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a58:	83 ec 0c             	sub    $0xc,%esp
+     a5b:	53                   	push   %ebx
+     a5c:	e8 df 00 00 00       	call   b40 <strlen>
+  cmd = parseline(&s, es);
+     a61:	59                   	pop    %ecx
+  es = s + strlen(s);
+     a62:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     a64:	8d 45 08             	lea    0x8(%ebp),%eax
+     a67:	5e                   	pop    %esi
+     a68:	53                   	push   %ebx
+     a69:	50                   	push   %eax
+     a6a:	e8 01 fe ff ff       	call   870 <parseline>
+     a6f:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     a71:	8d 45 08             	lea    0x8(%ebp),%eax
+     a74:	83 c4 0c             	add    $0xc,%esp
+     a77:	68 11 12 00 00       	push   $0x1211
+     a7c:	53                   	push   %ebx
+     a7d:	50                   	push   %eax
+     a7e:	e8 4d fb ff ff       	call   5d0 <peek>
+  if(s != es){
+     a83:	8b 45 08             	mov    0x8(%ebp),%eax
+     a86:	83 c4 10             	add    $0x10,%esp
+     a89:	39 d8                	cmp    %ebx,%eax
+     a8b:	75 12                	jne    a9f <parsecmd+0x4f>
+  nulterminate(cmd);
+     a8d:	83 ec 0c             	sub    $0xc,%esp
+     a90:	56                   	push   %esi
+     a91:	e8 0a ff ff ff       	call   9a0 <nulterminate>
+}
+     a96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     a99:	89 f0                	mov    %esi,%eax
+     a9b:	5b                   	pop    %ebx
+     a9c:	5e                   	pop    %esi
+     a9d:	5d                   	pop    %ebp
+     a9e:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     a9f:	52                   	push   %edx
+     aa0:	50                   	push   %eax
+     aa1:	68 8a 12 00 00       	push   $0x128a
+     aa6:	6a 02                	push   $0x2
+     aa8:	e8 f3 03 00 00       	call   ea0 <printf>
+    panic("syntax");
+     aad:	c7 04 24 4e 12 00 00 	movl   $0x124e,(%esp)
+     ab4:	e8 97 f6 ff ff       	call   150 <panic>
+     ab9:	66 90                	xchg   %ax,%ax
+     abb:	66 90                	xchg   %ax,%ax
+     abd:	66 90                	xchg   %ax,%ax
+     abf:	90                   	nop
+
+00000ac0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     ac0:	55                   	push   %ebp
+     ac1:	89 e5                	mov    %esp,%ebp
+     ac3:	53                   	push   %ebx
+     ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+     ac7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     aca:	89 c2                	mov    %eax,%edx
+     acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ad0:	83 c1 01             	add    $0x1,%ecx
+     ad3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+     ad7:	83 c2 01             	add    $0x1,%edx
+     ada:	84 db                	test   %bl,%bl
+     adc:	88 5a ff             	mov    %bl,-0x1(%edx)
+     adf:	75 ef                	jne    ad0 <strcpy+0x10>
+    ;
+  return os;
+}
+     ae1:	5b                   	pop    %ebx
+     ae2:	5d                   	pop    %ebp
+     ae3:	c3                   	ret    
+     ae4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     aea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000af0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     af0:	55                   	push   %ebp
+     af1:	89 e5                	mov    %esp,%ebp
+     af3:	53                   	push   %ebx
+     af4:	8b 55 08             	mov    0x8(%ebp),%edx
+     af7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+     afa:	0f b6 02             	movzbl (%edx),%eax
+     afd:	0f b6 19             	movzbl (%ecx),%ebx
+     b00:	84 c0                	test   %al,%al
+     b02:	75 1c                	jne    b20 <strcmp+0x30>
+     b04:	eb 2a                	jmp    b30 <strcmp+0x40>
+     b06:	8d 76 00             	lea    0x0(%esi),%esi
+     b09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+     b10:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+     b13:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+     b16:	83 c1 01             	add    $0x1,%ecx
+     b19:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+     b1c:	84 c0                	test   %al,%al
+     b1e:	74 10                	je     b30 <strcmp+0x40>
+     b20:	38 d8                	cmp    %bl,%al
+     b22:	74 ec                	je     b10 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+     b24:	29 d8                	sub    %ebx,%eax
+}
+     b26:	5b                   	pop    %ebx
+     b27:	5d                   	pop    %ebp
+     b28:	c3                   	ret    
+     b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b30:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+     b32:	29 d8                	sub    %ebx,%eax
+}
+     b34:	5b                   	pop    %ebx
+     b35:	5d                   	pop    %ebp
+     b36:	c3                   	ret    
+     b37:	89 f6                	mov    %esi,%esi
+     b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000b40 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     b40:	55                   	push   %ebp
+     b41:	89 e5                	mov    %esp,%ebp
+     b43:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     b46:	80 39 00             	cmpb   $0x0,(%ecx)
+     b49:	74 15                	je     b60 <strlen+0x20>
+     b4b:	31 d2                	xor    %edx,%edx
+     b4d:	8d 76 00             	lea    0x0(%esi),%esi
+     b50:	83 c2 01             	add    $0x1,%edx
+     b53:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+     b57:	89 d0                	mov    %edx,%eax
+     b59:	75 f5                	jne    b50 <strlen+0x10>
+    ;
+  return n;
+}
+     b5b:	5d                   	pop    %ebp
+     b5c:	c3                   	ret    
+     b5d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+     b60:	31 c0                	xor    %eax,%eax
+}
+     b62:	5d                   	pop    %ebp
+     b63:	c3                   	ret    
+     b64:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b6a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000b70 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     b70:	55                   	push   %ebp
+     b71:	89 e5                	mov    %esp,%ebp
+     b73:	57                   	push   %edi
+     b74:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     b77:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     b7a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     b7d:	89 d7                	mov    %edx,%edi
+     b7f:	fc                   	cld    
+     b80:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     b82:	89 d0                	mov    %edx,%eax
+     b84:	5f                   	pop    %edi
+     b85:	5d                   	pop    %ebp
+     b86:	c3                   	ret    
+     b87:	89 f6                	mov    %esi,%esi
+     b89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000b90 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     b90:	55                   	push   %ebp
+     b91:	89 e5                	mov    %esp,%ebp
+     b93:	53                   	push   %ebx
+     b94:	8b 45 08             	mov    0x8(%ebp),%eax
+     b97:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+     b9a:	0f b6 10             	movzbl (%eax),%edx
+     b9d:	84 d2                	test   %dl,%dl
+     b9f:	74 1d                	je     bbe <strchr+0x2e>
+    if(*s == c)
+     ba1:	38 d3                	cmp    %dl,%bl
+     ba3:	89 d9                	mov    %ebx,%ecx
+     ba5:	75 0d                	jne    bb4 <strchr+0x24>
+     ba7:	eb 17                	jmp    bc0 <strchr+0x30>
+     ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bb0:	38 ca                	cmp    %cl,%dl
+     bb2:	74 0c                	je     bc0 <strchr+0x30>
+  for(; *s; s++)
+     bb4:	83 c0 01             	add    $0x1,%eax
+     bb7:	0f b6 10             	movzbl (%eax),%edx
+     bba:	84 d2                	test   %dl,%dl
+     bbc:	75 f2                	jne    bb0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+     bbe:	31 c0                	xor    %eax,%eax
+}
+     bc0:	5b                   	pop    %ebx
+     bc1:	5d                   	pop    %ebp
+     bc2:	c3                   	ret    
+     bc3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     bc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000bd0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     bd0:	55                   	push   %ebp
+     bd1:	89 e5                	mov    %esp,%ebp
+     bd3:	57                   	push   %edi
+     bd4:	56                   	push   %esi
+     bd5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     bd6:	31 f6                	xor    %esi,%esi
+     bd8:	89 f3                	mov    %esi,%ebx
+{
+     bda:	83 ec 1c             	sub    $0x1c,%esp
+     bdd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+     be0:	eb 2f                	jmp    c11 <gets+0x41>
+     be2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+     be8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     beb:	83 ec 04             	sub    $0x4,%esp
+     bee:	6a 01                	push   $0x1
+     bf0:	50                   	push   %eax
+     bf1:	6a 00                	push   $0x0
+     bf3:	e8 32 01 00 00       	call   d2a <read>
+    if(cc < 1)
+     bf8:	83 c4 10             	add    $0x10,%esp
+     bfb:	85 c0                	test   %eax,%eax
+     bfd:	7e 1c                	jle    c1b <gets+0x4b>
+      break;
+    buf[i++] = c;
+     bff:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     c03:	83 c7 01             	add    $0x1,%edi
+     c06:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+     c09:	3c 0a                	cmp    $0xa,%al
+     c0b:	74 23                	je     c30 <gets+0x60>
+     c0d:	3c 0d                	cmp    $0xd,%al
+     c0f:	74 1f                	je     c30 <gets+0x60>
+  for(i=0; i+1 < max; ){
+     c11:	83 c3 01             	add    $0x1,%ebx
+     c14:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     c17:	89 fe                	mov    %edi,%esi
+     c19:	7c cd                	jl     be8 <gets+0x18>
+     c1b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+     c1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+     c20:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     c23:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c26:	5b                   	pop    %ebx
+     c27:	5e                   	pop    %esi
+     c28:	5f                   	pop    %edi
+     c29:	5d                   	pop    %ebp
+     c2a:	c3                   	ret    
+     c2b:	90                   	nop
+     c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c30:	8b 75 08             	mov    0x8(%ebp),%esi
+     c33:	8b 45 08             	mov    0x8(%ebp),%eax
+     c36:	01 de                	add    %ebx,%esi
+     c38:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+     c3a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     c3d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c40:	5b                   	pop    %ebx
+     c41:	5e                   	pop    %esi
+     c42:	5f                   	pop    %edi
+     c43:	5d                   	pop    %ebp
+     c44:	c3                   	ret    
+     c45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000c50 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     c50:	55                   	push   %ebp
+     c51:	89 e5                	mov    %esp,%ebp
+     c53:	56                   	push   %esi
+     c54:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     c55:	83 ec 08             	sub    $0x8,%esp
+     c58:	6a 00                	push   $0x0
+     c5a:	ff 75 08             	pushl  0x8(%ebp)
+     c5d:	e8 f0 00 00 00       	call   d52 <open>
+  if(fd < 0)
+     c62:	83 c4 10             	add    $0x10,%esp
+     c65:	85 c0                	test   %eax,%eax
+     c67:	78 27                	js     c90 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+     c69:	83 ec 08             	sub    $0x8,%esp
+     c6c:	ff 75 0c             	pushl  0xc(%ebp)
+     c6f:	89 c3                	mov    %eax,%ebx
+     c71:	50                   	push   %eax
+     c72:	e8 f3 00 00 00       	call   d6a <fstat>
+  close(fd);
+     c77:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     c7a:	89 c6                	mov    %eax,%esi
+  close(fd);
+     c7c:	e8 b9 00 00 00       	call   d3a <close>
+  return r;
+     c81:	83 c4 10             	add    $0x10,%esp
+}
+     c84:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     c87:	89 f0                	mov    %esi,%eax
+     c89:	5b                   	pop    %ebx
+     c8a:	5e                   	pop    %esi
+     c8b:	5d                   	pop    %ebp
+     c8c:	c3                   	ret    
+     c8d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+     c90:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     c95:	eb ed                	jmp    c84 <stat+0x34>
+     c97:	89 f6                	mov    %esi,%esi
+     c99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000ca0 <atoi>:
+
+int
+atoi(const char *s)
+{
+     ca0:	55                   	push   %ebp
+     ca1:	89 e5                	mov    %esp,%ebp
+     ca3:	53                   	push   %ebx
+     ca4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     ca7:	0f be 11             	movsbl (%ecx),%edx
+     caa:	8d 42 d0             	lea    -0x30(%edx),%eax
+     cad:	3c 09                	cmp    $0x9,%al
+  n = 0;
+     caf:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+     cb4:	77 1f                	ja     cd5 <atoi+0x35>
+     cb6:	8d 76 00             	lea    0x0(%esi),%esi
+     cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+     cc0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+     cc3:	83 c1 01             	add    $0x1,%ecx
+     cc6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+     cca:	0f be 11             	movsbl (%ecx),%edx
+     ccd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+     cd0:	80 fb 09             	cmp    $0x9,%bl
+     cd3:	76 eb                	jbe    cc0 <atoi+0x20>
+  return n;
+}
+     cd5:	5b                   	pop    %ebx
+     cd6:	5d                   	pop    %ebp
+     cd7:	c3                   	ret    
+     cd8:	90                   	nop
+     cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000ce0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     ce0:	55                   	push   %ebp
+     ce1:	89 e5                	mov    %esp,%ebp
+     ce3:	56                   	push   %esi
+     ce4:	53                   	push   %ebx
+     ce5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+     ceb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     cee:	85 db                	test   %ebx,%ebx
+     cf0:	7e 14                	jle    d06 <memmove+0x26>
+     cf2:	31 d2                	xor    %edx,%edx
+     cf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+     cf8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+     cfc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+     cff:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+     d02:	39 d3                	cmp    %edx,%ebx
+     d04:	75 f2                	jne    cf8 <memmove+0x18>
+  return vdst;
+}
+     d06:	5b                   	pop    %ebx
+     d07:	5e                   	pop    %esi
+     d08:	5d                   	pop    %ebp
+     d09:	c3                   	ret    
+
+00000d0a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     d0a:	b8 01 00 00 00       	mov    $0x1,%eax
+     d0f:	cd 40                	int    $0x40
+     d11:	c3                   	ret    
+
+00000d12 <exit>:
+SYSCALL(exit)
+     d12:	b8 02 00 00 00       	mov    $0x2,%eax
+     d17:	cd 40                	int    $0x40
+     d19:	c3                   	ret    
+
+00000d1a <wait>:
+SYSCALL(wait)
+     d1a:	b8 03 00 00 00       	mov    $0x3,%eax
+     d1f:	cd 40                	int    $0x40
+     d21:	c3                   	ret    
+
+00000d22 <pipe>:
+SYSCALL(pipe)
+     d22:	b8 04 00 00 00       	mov    $0x4,%eax
+     d27:	cd 40                	int    $0x40
+     d29:	c3                   	ret    
+
+00000d2a <read>:
+SYSCALL(read)
+     d2a:	b8 05 00 00 00       	mov    $0x5,%eax
+     d2f:	cd 40                	int    $0x40
+     d31:	c3                   	ret    
+
+00000d32 <write>:
+SYSCALL(write)
+     d32:	b8 10 00 00 00       	mov    $0x10,%eax
+     d37:	cd 40                	int    $0x40
+     d39:	c3                   	ret    
+
+00000d3a <close>:
+SYSCALL(close)
+     d3a:	b8 15 00 00 00       	mov    $0x15,%eax
+     d3f:	cd 40                	int    $0x40
+     d41:	c3                   	ret    
+
+00000d42 <kill>:
+SYSCALL(kill)
+     d42:	b8 06 00 00 00       	mov    $0x6,%eax
+     d47:	cd 40                	int    $0x40
+     d49:	c3                   	ret    
+
+00000d4a <exec>:
+SYSCALL(exec)
+     d4a:	b8 07 00 00 00       	mov    $0x7,%eax
+     d4f:	cd 40                	int    $0x40
+     d51:	c3                   	ret    
+
+00000d52 <open>:
+SYSCALL(open)
+     d52:	b8 0f 00 00 00       	mov    $0xf,%eax
+     d57:	cd 40                	int    $0x40
+     d59:	c3                   	ret    
+
+00000d5a <mknod>:
+SYSCALL(mknod)
+     d5a:	b8 11 00 00 00       	mov    $0x11,%eax
+     d5f:	cd 40                	int    $0x40
+     d61:	c3                   	ret    
+
+00000d62 <unlink>:
+SYSCALL(unlink)
+     d62:	b8 12 00 00 00       	mov    $0x12,%eax
+     d67:	cd 40                	int    $0x40
+     d69:	c3                   	ret    
+
+00000d6a <fstat>:
+SYSCALL(fstat)
+     d6a:	b8 08 00 00 00       	mov    $0x8,%eax
+     d6f:	cd 40                	int    $0x40
+     d71:	c3                   	ret    
+
+00000d72 <link>:
+SYSCALL(link)
+     d72:	b8 13 00 00 00       	mov    $0x13,%eax
+     d77:	cd 40                	int    $0x40
+     d79:	c3                   	ret    
+
+00000d7a <mkdir>:
+SYSCALL(mkdir)
+     d7a:	b8 14 00 00 00       	mov    $0x14,%eax
+     d7f:	cd 40                	int    $0x40
+     d81:	c3                   	ret    
+
+00000d82 <chdir>:
+SYSCALL(chdir)
+     d82:	b8 09 00 00 00       	mov    $0x9,%eax
+     d87:	cd 40                	int    $0x40
+     d89:	c3                   	ret    
+
+00000d8a <dup>:
+SYSCALL(dup)
+     d8a:	b8 0a 00 00 00       	mov    $0xa,%eax
+     d8f:	cd 40                	int    $0x40
+     d91:	c3                   	ret    
+
+00000d92 <getpid>:
+SYSCALL(getpid)
+     d92:	b8 0b 00 00 00       	mov    $0xb,%eax
+     d97:	cd 40                	int    $0x40
+     d99:	c3                   	ret    
+
+00000d9a <sbrk>:
+SYSCALL(sbrk)
+     d9a:	b8 0c 00 00 00       	mov    $0xc,%eax
+     d9f:	cd 40                	int    $0x40
+     da1:	c3                   	ret    
+
+00000da2 <sleep>:
+SYSCALL(sleep)
+     da2:	b8 0d 00 00 00       	mov    $0xd,%eax
+     da7:	cd 40                	int    $0x40
+     da9:	c3                   	ret    
+
+00000daa <uptime>:
+SYSCALL(uptime)
+     daa:	b8 0e 00 00 00       	mov    $0xe,%eax
+     daf:	cd 40                	int    $0x40
+     db1:	c3                   	ret    
+
+00000db2 <getNumProc>:
+SYSCALL(getNumProc)
+     db2:	b8 16 00 00 00       	mov    $0x16,%eax
+     db7:	cd 40                	int    $0x40
+     db9:	c3                   	ret    
+
+00000dba <getMaxPid>:
+SYSCALL(getMaxPid)
+     dba:	b8 17 00 00 00       	mov    $0x17,%eax
+     dbf:	cd 40                	int    $0x40
+     dc1:	c3                   	ret    
+
+00000dc2 <getProcInfo>:
+SYSCALL(getProcInfo)
+     dc2:	b8 18 00 00 00       	mov    $0x18,%eax
+     dc7:	cd 40                	int    $0x40
+     dc9:	c3                   	ret    
+
+00000dca <set_burst_time>:
+SYSCALL(set_burst_time)
+     dca:	b8 19 00 00 00       	mov    $0x19,%eax
+     dcf:	cd 40                	int    $0x40
+     dd1:	c3                   	ret    
+
+00000dd2 <get_burst_time>:
+SYSCALL(get_burst_time)
+     dd2:	b8 1a 00 00 00       	mov    $0x1a,%eax
+     dd7:	cd 40                	int    $0x40
+     dd9:	c3                   	ret    
+
+00000dda <process_state>:
+SYSCALL(process_state)
+     dda:	b8 1b 00 00 00       	mov    $0x1b,%eax
+     ddf:	cd 40                	int    $0x40
+     de1:	c3                   	ret    
+
+00000de2 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+     de2:	b8 1d 00 00 00       	mov    $0x1d,%eax
+     de7:	cd 40                	int    $0x40
+     de9:	c3                   	ret    
+
+00000dea <inc_cpucounter>:
+     dea:	b8 1c 00 00 00       	mov    $0x1c,%eax
+     def:	cd 40                	int    $0x40
+     df1:	c3                   	ret    
+     df2:	66 90                	xchg   %ax,%ax
+     df4:	66 90                	xchg   %ax,%ax
+     df6:	66 90                	xchg   %ax,%ax
+     df8:	66 90                	xchg   %ax,%ax
+     dfa:	66 90                	xchg   %ax,%ax
+     dfc:	66 90                	xchg   %ax,%ax
+     dfe:	66 90                	xchg   %ax,%ax
+
+00000e00 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     e00:	55                   	push   %ebp
+     e01:	89 e5                	mov    %esp,%ebp
+     e03:	57                   	push   %edi
+     e04:	56                   	push   %esi
+     e05:	53                   	push   %ebx
+     e06:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+     e09:	85 d2                	test   %edx,%edx
+{
+     e0b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+     e0e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+     e10:	79 76                	jns    e88 <printint+0x88>
+     e12:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     e16:	74 70                	je     e88 <printint+0x88>
+    x = -xx;
+     e18:	f7 d8                	neg    %eax
+    neg = 1;
+     e1a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     e21:	31 f6                	xor    %esi,%esi
+     e23:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+     e26:	eb 0a                	jmp    e32 <printint+0x32>
+     e28:	90                   	nop
+     e29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+     e30:	89 fe                	mov    %edi,%esi
+     e32:	31 d2                	xor    %edx,%edx
+     e34:	8d 7e 01             	lea    0x1(%esi),%edi
+     e37:	f7 f1                	div    %ecx
+     e39:	0f b6 92 e8 12 00 00 	movzbl 0x12e8(%edx),%edx
+  }while((x /= base) != 0);
+     e40:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+     e42:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+     e45:	75 e9                	jne    e30 <printint+0x30>
+  if(neg)
+     e47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+     e4a:	85 c0                	test   %eax,%eax
+     e4c:	74 08                	je     e56 <printint+0x56>
+    buf[i++] = '-';
+     e4e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+     e53:	8d 7e 02             	lea    0x2(%esi),%edi
+     e56:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+     e5a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+     e5d:	8d 76 00             	lea    0x0(%esi),%esi
+     e60:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+     e63:	83 ec 04             	sub    $0x4,%esp
+     e66:	83 ee 01             	sub    $0x1,%esi
+     e69:	6a 01                	push   $0x1
+     e6b:	53                   	push   %ebx
+     e6c:	57                   	push   %edi
+     e6d:	88 45 d7             	mov    %al,-0x29(%ebp)
+     e70:	e8 bd fe ff ff       	call   d32 <write>
+
+  while(--i >= 0)
+     e75:	83 c4 10             	add    $0x10,%esp
+     e78:	39 de                	cmp    %ebx,%esi
+     e7a:	75 e4                	jne    e60 <printint+0x60>
+    putc(fd, buf[i]);
+}
+     e7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e7f:	5b                   	pop    %ebx
+     e80:	5e                   	pop    %esi
+     e81:	5f                   	pop    %edi
+     e82:	5d                   	pop    %ebp
+     e83:	c3                   	ret    
+     e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     e88:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+     e8f:	eb 90                	jmp    e21 <printint+0x21>
+     e91:	eb 0d                	jmp    ea0 <printf>
+     e93:	90                   	nop
+     e94:	90                   	nop
+     e95:	90                   	nop
+     e96:	90                   	nop
+     e97:	90                   	nop
+     e98:	90                   	nop
+     e99:	90                   	nop
+     e9a:	90                   	nop
+     e9b:	90                   	nop
+     e9c:	90                   	nop
+     e9d:	90                   	nop
+     e9e:	90                   	nop
+     e9f:	90                   	nop
+
+00000ea0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     ea0:	55                   	push   %ebp
+     ea1:	89 e5                	mov    %esp,%ebp
+     ea3:	57                   	push   %edi
+     ea4:	56                   	push   %esi
+     ea5:	53                   	push   %ebx
+     ea6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     ea9:	8b 75 0c             	mov    0xc(%ebp),%esi
+     eac:	0f b6 1e             	movzbl (%esi),%ebx
+     eaf:	84 db                	test   %bl,%bl
+     eb1:	0f 84 b3 00 00 00    	je     f6a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+     eb7:	8d 45 10             	lea    0x10(%ebp),%eax
+     eba:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+     ebd:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+     ebf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     ec2:	eb 2f                	jmp    ef3 <printf+0x53>
+     ec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+     ec8:	83 f8 25             	cmp    $0x25,%eax
+     ecb:	0f 84 a7 00 00 00    	je     f78 <printf+0xd8>
+  write(fd, &c, 1);
+     ed1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+     ed4:	83 ec 04             	sub    $0x4,%esp
+     ed7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+     eda:	6a 01                	push   $0x1
+     edc:	50                   	push   %eax
+     edd:	ff 75 08             	pushl  0x8(%ebp)
+     ee0:	e8 4d fe ff ff       	call   d32 <write>
+     ee5:	83 c4 10             	add    $0x10,%esp
+     ee8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+     eeb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     eef:	84 db                	test   %bl,%bl
+     ef1:	74 77                	je     f6a <printf+0xca>
+    if(state == 0){
+     ef3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+     ef5:	0f be cb             	movsbl %bl,%ecx
+     ef8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+     efb:	74 cb                	je     ec8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+     efd:	83 ff 25             	cmp    $0x25,%edi
+     f00:	75 e6                	jne    ee8 <printf+0x48>
+      if(c == 'd'){
+     f02:	83 f8 64             	cmp    $0x64,%eax
+     f05:	0f 84 05 01 00 00    	je     1010 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+     f0b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     f11:	83 f9 70             	cmp    $0x70,%ecx
+     f14:	74 72                	je     f88 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+     f16:	83 f8 73             	cmp    $0x73,%eax
+     f19:	0f 84 99 00 00 00    	je     fb8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+     f1f:	83 f8 63             	cmp    $0x63,%eax
+     f22:	0f 84 08 01 00 00    	je     1030 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+     f28:	83 f8 25             	cmp    $0x25,%eax
+     f2b:	0f 84 ef 00 00 00    	je     1020 <printf+0x180>
+  write(fd, &c, 1);
+     f31:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     f34:	83 ec 04             	sub    $0x4,%esp
+     f37:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     f3b:	6a 01                	push   $0x1
+     f3d:	50                   	push   %eax
+     f3e:	ff 75 08             	pushl  0x8(%ebp)
+     f41:	e8 ec fd ff ff       	call   d32 <write>
+     f46:	83 c4 0c             	add    $0xc,%esp
+     f49:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+     f4c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+     f4f:	6a 01                	push   $0x1
+     f51:	50                   	push   %eax
+     f52:	ff 75 08             	pushl  0x8(%ebp)
+     f55:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+     f58:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+     f5a:	e8 d3 fd ff ff       	call   d32 <write>
+  for(i = 0; fmt[i]; i++){
+     f5f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+     f63:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+     f66:	84 db                	test   %bl,%bl
+     f68:	75 89                	jne    ef3 <printf+0x53>
+    }
+  }
+}
+     f6a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f6d:	5b                   	pop    %ebx
+     f6e:	5e                   	pop    %esi
+     f6f:	5f                   	pop    %edi
+     f70:	5d                   	pop    %ebp
+     f71:	c3                   	ret    
+     f72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+     f78:	bf 25 00 00 00       	mov    $0x25,%edi
+     f7d:	e9 66 ff ff ff       	jmp    ee8 <printf+0x48>
+     f82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+     f88:	83 ec 0c             	sub    $0xc,%esp
+     f8b:	b9 10 00 00 00       	mov    $0x10,%ecx
+     f90:	6a 00                	push   $0x0
+     f92:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+     f95:	8b 45 08             	mov    0x8(%ebp),%eax
+     f98:	8b 17                	mov    (%edi),%edx
+     f9a:	e8 61 fe ff ff       	call   e00 <printint>
+        ap++;
+     f9f:	89 f8                	mov    %edi,%eax
+     fa1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+     fa4:	31 ff                	xor    %edi,%edi
+        ap++;
+     fa6:	83 c0 04             	add    $0x4,%eax
+     fa9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     fac:	e9 37 ff ff ff       	jmp    ee8 <printf+0x48>
+     fb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+     fb8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     fbb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+     fbd:	83 c0 04             	add    $0x4,%eax
+     fc0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+     fc3:	85 c9                	test   %ecx,%ecx
+     fc5:	0f 84 8e 00 00 00    	je     1059 <printf+0x1b9>
+        while(*s != 0){
+     fcb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+     fce:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+     fd0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+     fd2:	84 c0                	test   %al,%al
+     fd4:	0f 84 0e ff ff ff    	je     ee8 <printf+0x48>
+     fda:	89 75 d0             	mov    %esi,-0x30(%ebp)
+     fdd:	89 de                	mov    %ebx,%esi
+     fdf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     fe2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+     fe5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+     fe8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+     feb:	83 c6 01             	add    $0x1,%esi
+     fee:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+     ff1:	6a 01                	push   $0x1
+     ff3:	57                   	push   %edi
+     ff4:	53                   	push   %ebx
+     ff5:	e8 38 fd ff ff       	call   d32 <write>
+        while(*s != 0){
+     ffa:	0f b6 06             	movzbl (%esi),%eax
+     ffd:	83 c4 10             	add    $0x10,%esp
+    1000:	84 c0                	test   %al,%al
+    1002:	75 e4                	jne    fe8 <printf+0x148>
+    1004:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+    1007:	31 ff                	xor    %edi,%edi
+    1009:	e9 da fe ff ff       	jmp    ee8 <printf+0x48>
+    100e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+    1010:	83 ec 0c             	sub    $0xc,%esp
+    1013:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1018:	6a 01                	push   $0x1
+    101a:	e9 73 ff ff ff       	jmp    f92 <printf+0xf2>
+    101f:	90                   	nop
+  write(fd, &c, 1);
+    1020:	83 ec 04             	sub    $0x4,%esp
+    1023:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+    1026:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1029:	6a 01                	push   $0x1
+    102b:	e9 21 ff ff ff       	jmp    f51 <printf+0xb1>
+        putc(fd, *ap);
+    1030:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+    1033:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    1036:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+    1038:	6a 01                	push   $0x1
+        ap++;
+    103a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+    103d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+    1040:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    1043:	50                   	push   %eax
+    1044:	ff 75 08             	pushl  0x8(%ebp)
+    1047:	e8 e6 fc ff ff       	call   d32 <write>
+        ap++;
+    104c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+    104f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    1052:	31 ff                	xor    %edi,%edi
+    1054:	e9 8f fe ff ff       	jmp    ee8 <printf+0x48>
+          s = "(null)";
+    1059:	bb e0 12 00 00       	mov    $0x12e0,%ebx
+        while(*s != 0){
+    105e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1063:	e9 72 ff ff ff       	jmp    fda <printf+0x13a>
+    1068:	66 90                	xchg   %ax,%ax
+    106a:	66 90                	xchg   %ax,%ax
+    106c:	66 90                	xchg   %ax,%ax
+    106e:	66 90                	xchg   %ax,%ax
+
+00001070 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1070:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1071:	a1 24 19 00 00       	mov    0x1924,%eax
+{
+    1076:	89 e5                	mov    %esp,%ebp
+    1078:	57                   	push   %edi
+    1079:	56                   	push   %esi
+    107a:	53                   	push   %ebx
+    107b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    107e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    1081:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1088:	39 c8                	cmp    %ecx,%eax
+    108a:	8b 10                	mov    (%eax),%edx
+    108c:	73 32                	jae    10c0 <free+0x50>
+    108e:	39 d1                	cmp    %edx,%ecx
+    1090:	72 04                	jb     1096 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1092:	39 d0                	cmp    %edx,%eax
+    1094:	72 32                	jb     10c8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1096:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    1099:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    109c:	39 fa                	cmp    %edi,%edx
+    109e:	74 30                	je     10d0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    10a0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    10a3:	8b 50 04             	mov    0x4(%eax),%edx
+    10a6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    10a9:	39 f1                	cmp    %esi,%ecx
+    10ab:	74 3a                	je     10e7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    10ad:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+    10af:	a3 24 19 00 00       	mov    %eax,0x1924
+}
+    10b4:	5b                   	pop    %ebx
+    10b5:	5e                   	pop    %esi
+    10b6:	5f                   	pop    %edi
+    10b7:	5d                   	pop    %ebp
+    10b8:	c3                   	ret    
+    10b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    10c0:	39 d0                	cmp    %edx,%eax
+    10c2:	72 04                	jb     10c8 <free+0x58>
+    10c4:	39 d1                	cmp    %edx,%ecx
+    10c6:	72 ce                	jb     1096 <free+0x26>
+{
+    10c8:	89 d0                	mov    %edx,%eax
+    10ca:	eb bc                	jmp    1088 <free+0x18>
+    10cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+    10d0:	03 72 04             	add    0x4(%edx),%esi
+    10d3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    10d6:	8b 10                	mov    (%eax),%edx
+    10d8:	8b 12                	mov    (%edx),%edx
+    10da:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    10dd:	8b 50 04             	mov    0x4(%eax),%edx
+    10e0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    10e3:	39 f1                	cmp    %esi,%ecx
+    10e5:	75 c6                	jne    10ad <free+0x3d>
+    p->s.size += bp->s.size;
+    10e7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    10ea:	a3 24 19 00 00       	mov    %eax,0x1924
+    p->s.size += bp->s.size;
+    10ef:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    10f2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    10f5:	89 10                	mov    %edx,(%eax)
+}
+    10f7:	5b                   	pop    %ebx
+    10f8:	5e                   	pop    %esi
+    10f9:	5f                   	pop    %edi
+    10fa:	5d                   	pop    %ebp
+    10fb:	c3                   	ret    
+    10fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001100 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    1100:	55                   	push   %ebp
+    1101:	89 e5                	mov    %esp,%ebp
+    1103:	57                   	push   %edi
+    1104:	56                   	push   %esi
+    1105:	53                   	push   %ebx
+    1106:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1109:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    110c:	8b 15 24 19 00 00    	mov    0x1924,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1112:	8d 78 07             	lea    0x7(%eax),%edi
+    1115:	c1 ef 03             	shr    $0x3,%edi
+    1118:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+    111b:	85 d2                	test   %edx,%edx
+    111d:	0f 84 9d 00 00 00    	je     11c0 <malloc+0xc0>
+    1123:	8b 02                	mov    (%edx),%eax
+    1125:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+    1128:	39 cf                	cmp    %ecx,%edi
+    112a:	76 6c                	jbe    1198 <malloc+0x98>
+    112c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    1132:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    1137:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    113a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+    1141:	eb 0e                	jmp    1151 <malloc+0x51>
+    1143:	90                   	nop
+    1144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1148:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    114a:	8b 48 04             	mov    0x4(%eax),%ecx
+    114d:	39 f9                	cmp    %edi,%ecx
+    114f:	73 47                	jae    1198 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1151:	39 05 24 19 00 00    	cmp    %eax,0x1924
+    1157:	89 c2                	mov    %eax,%edx
+    1159:	75 ed                	jne    1148 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    115b:	83 ec 0c             	sub    $0xc,%esp
+    115e:	56                   	push   %esi
+    115f:	e8 36 fc ff ff       	call   d9a <sbrk>
+  if(p == (char*)-1)
+    1164:	83 c4 10             	add    $0x10,%esp
+    1167:	83 f8 ff             	cmp    $0xffffffff,%eax
+    116a:	74 1c                	je     1188 <malloc+0x88>
+  hp->s.size = nu;
+    116c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    116f:	83 ec 0c             	sub    $0xc,%esp
+    1172:	83 c0 08             	add    $0x8,%eax
+    1175:	50                   	push   %eax
+    1176:	e8 f5 fe ff ff       	call   1070 <free>
+  return freep;
+    117b:	8b 15 24 19 00 00    	mov    0x1924,%edx
+      if((p = morecore(nunits)) == 0)
+    1181:	83 c4 10             	add    $0x10,%esp
+    1184:	85 d2                	test   %edx,%edx
+    1186:	75 c0                	jne    1148 <malloc+0x48>
+        return 0;
+  }
+}
+    1188:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    118b:	31 c0                	xor    %eax,%eax
+}
+    118d:	5b                   	pop    %ebx
+    118e:	5e                   	pop    %esi
+    118f:	5f                   	pop    %edi
+    1190:	5d                   	pop    %ebp
+    1191:	c3                   	ret    
+    1192:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    1198:	39 cf                	cmp    %ecx,%edi
+    119a:	74 54                	je     11f0 <malloc+0xf0>
+        p->s.size -= nunits;
+    119c:	29 f9                	sub    %edi,%ecx
+    119e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    11a1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    11a4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+    11a7:	89 15 24 19 00 00    	mov    %edx,0x1924
+}
+    11ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    11b0:	83 c0 08             	add    $0x8,%eax
+}
+    11b3:	5b                   	pop    %ebx
+    11b4:	5e                   	pop    %esi
+    11b5:	5f                   	pop    %edi
+    11b6:	5d                   	pop    %ebp
+    11b7:	c3                   	ret    
+    11b8:	90                   	nop
+    11b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    11c0:	c7 05 24 19 00 00 28 	movl   $0x1928,0x1924
+    11c7:	19 00 00 
+    11ca:	c7 05 28 19 00 00 28 	movl   $0x1928,0x1928
+    11d1:	19 00 00 
+    base.s.size = 0;
+    11d4:	b8 28 19 00 00       	mov    $0x1928,%eax
+    11d9:	c7 05 2c 19 00 00 00 	movl   $0x0,0x192c
+    11e0:	00 00 00 
+    11e3:	e9 44 ff ff ff       	jmp    112c <malloc+0x2c>
+    11e8:	90                   	nop
+    11e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+    11f0:	8b 08                	mov    (%eax),%ecx
+    11f2:	89 0a                	mov    %ecx,(%edx)
+    11f4:	eb b1                	jmp    11a7 <malloc+0xa7>
diff -ruN xv6org/sh.d xv6mhybrid/sh.d
--- xv6org/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/sh.d	2020-10-15 19:50:35.145678309 +0530
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files xv6org/sh.o and xv6mhybrid/sh.o differ
diff -ruN xv6org/sh.sym xv6mhybrid/sh.sym
--- xv6org/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/sh.sym	2020-10-15 19:50:35.165677011 +0530
@@ -0,0 +1,87 @@
+00000000 .text
+000011f8 .rodata
+000012fc .eh_frame
+000018a4 .data
+000018c0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+000018c0 buf.1094
+00000000 ulib.c
+00000000 printf.c
+00000e00 printint
+000012e8 digits.1056
+00000000 umalloc.c
+00001924 freep
+00001928 base
+00000ac0 strcpy
+00000ea0 printf
+00000ce0 memmove
+00000d5a mknod
+00000330 execcmd
+00000bd0 gets
+00000d92 getpid
+00000800 parsepipe
+00000a50 parsecmd
+00000430 backcmd
+000005d0 peek
+00000640 parseredirs
+00000460 gettoken
+00001100 malloc
+00000da2 sleep
+00000dd2 get_burst_time
+000018ac whitespace
+00000310 fork1
+000009a0 nulterminate
+00000d22 pipe
+00000100 getcmd
+00000d32 write
+00000d6a fstat
+00000d42 kill
+00000dda process_state
+00000d82 chdir
+00000870 parseline
+00000de2 dec_burstTime
+00000170 runcmd
+00000910 parseblock
+00000d4a exec
+00000d1a wait
+000018a4 symbols
+00000dea inc_cpucounter
+00000d2a read
+000006f0 parseexec
+00000d62 unlink
+00000150 panic
+00000d0a fork
+00000d9a sbrk
+00000daa uptime
+000018b2 __bss_start
+00000b70 memset
+00000000 main
+00000dca set_burst_time
+00000af0 strcmp
+00000d8a dup
+000003b0 pipecmd
+00000360 redircmd
+00000dba getMaxPid
+00000db2 getNumProc
+00000dc2 getProcInfo
+00000c50 stat
+000018b2 _edata
+00001930 _end
+00000d72 link
+00000d12 exit
+00000ca0 atoi
+00000b40 strlen
+00000d52 open
+00000b90 strchr
+00000d7a mkdir
+00000d3a close
+000003f0 listcmd
+00001070 free
diff -ruN xv6org/sleeplock.d xv6mhybrid/sleeplock.d
--- xv6org/sleeplock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/sleeplock.d	2020-10-15 19:51:10.583468224 +0530
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files xv6org/sleeplock.o and xv6mhybrid/sleeplock.o differ
diff -ruN xv6org/spinlock.d xv6mhybrid/spinlock.d
--- xv6org/spinlock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/spinlock.d	2020-10-15 19:51:10.619466071 +0530
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files xv6org/spinlock.o and xv6mhybrid/spinlock.o differ
Binary files xv6org/_stressfs and xv6mhybrid/_stressfs differ
diff -ruN xv6org/stressfs.asm xv6mhybrid/stressfs.asm
--- xv6org/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/stressfs.asm	2020-10-15 19:50:35.197674933 +0530
@@ -0,0 +1,1311 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   7:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+   c:	ff 71 fc             	pushl  -0x4(%ecx)
+   f:	55                   	push   %ebp
+  10:	89 e5                	mov    %esp,%ebp
+  12:	57                   	push   %edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  16:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+
+  for(i = 0; i < 4; i++)
+  1c:	31 db                	xor    %ebx,%ebx
+{
+  1e:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  2b:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  32:	74 72 65 
+  printf(1, "stressfs starting\n");
+  35:	68 78 08 00 00       	push   $0x878
+  3a:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  43:	73 66 73 
+  printf(1, "stressfs starting\n");
+  46:	e8 d5 04 00 00       	call   520 <printf>
+  memset(data, 'a', sizeof(data));
+  4b:	83 c4 0c             	add    $0xc,%esp
+  4e:	68 00 02 00 00       	push   $0x200
+  53:	6a 61                	push   $0x61
+  55:	56                   	push   %esi
+  56:	e8 95 01 00 00       	call   1f0 <memset>
+  5b:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  5e:	e8 27 03 00 00       	call   38a <fork>
+  63:	85 c0                	test   %eax,%eax
+  65:	0f 8f bf 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6b:	83 c3 01             	add    $0x1,%ebx
+  6e:	83 fb 04             	cmp    $0x4,%ebx
+  71:	75 eb                	jne    5e <main+0x5e>
+  73:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  78:	83 ec 04             	sub    $0x4,%esp
+  7b:	53                   	push   %ebx
+  7c:	68 8b 08 00 00       	push   $0x88b
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  81:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  86:	6a 01                	push   $0x1
+  88:	e8 93 04 00 00       	call   520 <printf>
+  path[8] += i;
+  8d:	89 f8                	mov    %edi,%eax
+  8f:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  95:	5f                   	pop    %edi
+  96:	58                   	pop    %eax
+  97:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  9d:	68 02 02 00 00       	push   $0x202
+  a2:	50                   	push   %eax
+  a3:	e8 2a 03 00 00       	call   3d2 <open>
+  a8:	83 c4 10             	add    $0x10,%esp
+  ab:	89 c7                	mov    %eax,%edi
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(i = 0; i < 20; i++)
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b0:	83 ec 04             	sub    $0x4,%esp
+  b3:	68 00 02 00 00       	push   $0x200
+  b8:	56                   	push   %esi
+  b9:	57                   	push   %edi
+  ba:	e8 f3 02 00 00       	call   3b2 <write>
+  for(i = 0; i < 20; i++)
+  bf:	83 c4 10             	add    $0x10,%esp
+  c2:	83 eb 01             	sub    $0x1,%ebx
+  c5:	75 e9                	jne    b0 <main+0xb0>
+  close(fd);
+  c7:	83 ec 0c             	sub    $0xc,%esp
+  ca:	57                   	push   %edi
+  cb:	e8 ea 02 00 00       	call   3ba <close>
+
+  printf(1, "read\n");
+  d0:	58                   	pop    %eax
+  d1:	5a                   	pop    %edx
+  d2:	68 95 08 00 00       	push   $0x895
+  d7:	6a 01                	push   $0x1
+  d9:	e8 42 04 00 00       	call   520 <printf>
+
+  fd = open(path, O_RDONLY);
+  de:	59                   	pop    %ecx
+  df:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  e5:	5b                   	pop    %ebx
+  e6:	6a 00                	push   $0x0
+  e8:	50                   	push   %eax
+  e9:	bb 14 00 00 00       	mov    $0x14,%ebx
+  ee:	e8 df 02 00 00       	call   3d2 <open>
+  f3:	83 c4 10             	add    $0x10,%esp
+  f6:	89 c7                	mov    %eax,%edi
+  f8:	90                   	nop
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 9b 02 00 00       	call   3aa <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 9a 02 00 00       	call   3ba <close>
+
+  wait();
+ 120:	e8 75 02 00 00       	call   39a <wait>
+
+  exit();
+ 125:	e8 68 02 00 00       	call   392 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 47 ff ff ff       	jmp    78 <main+0x78>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 14a:	89 c2                	mov    %eax,%edx
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 150:	83 c1 01             	add    $0x1,%ecx
+ 153:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 157:	83 c2 01             	add    $0x1,%edx
+ 15a:	84 db                	test   %bl,%bl
+ 15c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 15f:	75 ef                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 161:	5b                   	pop    %ebx
+ 162:	5d                   	pop    %ebp
+ 163:	c3                   	ret    
+ 164:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 16a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	53                   	push   %ebx
+ 174:	8b 55 08             	mov    0x8(%ebp),%edx
+ 177:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 17a:	0f b6 02             	movzbl (%edx),%eax
+ 17d:	0f b6 19             	movzbl (%ecx),%ebx
+ 180:	84 c0                	test   %al,%al
+ 182:	75 1c                	jne    1a0 <strcmp+0x30>
+ 184:	eb 2a                	jmp    1b0 <strcmp+0x40>
+ 186:	8d 76 00             	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 190:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 193:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 196:	83 c1 01             	add    $0x1,%ecx
+ 199:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 19c:	84 c0                	test   %al,%al
+ 19e:	74 10                	je     1b0 <strcmp+0x40>
+ 1a0:	38 d8                	cmp    %bl,%al
+ 1a2:	74 ec                	je     190 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1a4:	29 d8                	sub    %ebx,%eax
+}
+ 1a6:	5b                   	pop    %ebx
+ 1a7:	5d                   	pop    %ebp
+ 1a8:	c3                   	ret    
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1b2:	29 d8                	sub    %ebx,%eax
+}
+ 1b4:	5b                   	pop    %ebx
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	89 f6                	mov    %esi,%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1c6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1c9:	74 15                	je     1e0 <strlen+0x20>
+ 1cb:	31 d2                	xor    %edx,%edx
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1d0:	83 c2 01             	add    $0x1,%edx
+ 1d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1d7:	89 d0                	mov    %edx,%eax
+ 1d9:	75 f5                	jne    1d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1db:	5d                   	pop    %ebp
+ 1dc:	c3                   	ret    
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1e0:	31 c0                	xor    %eax,%eax
+}
+ 1e2:	5d                   	pop    %ebp
+ 1e3:	c3                   	ret    
+ 1e4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1ea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	57                   	push   %edi
+ 1f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1fd:	89 d7                	mov    %edx,%edi
+ 1ff:	fc                   	cld    
+ 200:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 202:	89 d0                	mov    %edx,%eax
+ 204:	5f                   	pop    %edi
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	89 f6                	mov    %esi,%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 45 08             	mov    0x8(%ebp),%eax
+ 217:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 21a:	0f b6 10             	movzbl (%eax),%edx
+ 21d:	84 d2                	test   %dl,%dl
+ 21f:	74 1d                	je     23e <strchr+0x2e>
+    if(*s == c)
+ 221:	38 d3                	cmp    %dl,%bl
+ 223:	89 d9                	mov    %ebx,%ecx
+ 225:	75 0d                	jne    234 <strchr+0x24>
+ 227:	eb 17                	jmp    240 <strchr+0x30>
+ 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 230:	38 ca                	cmp    %cl,%dl
+ 232:	74 0c                	je     240 <strchr+0x30>
+  for(; *s; s++)
+ 234:	83 c0 01             	add    $0x1,%eax
+ 237:	0f b6 10             	movzbl (%eax),%edx
+ 23a:	84 d2                	test   %dl,%dl
+ 23c:	75 f2                	jne    230 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 23e:	31 c0                	xor    %eax,%eax
+}
+ 240:	5b                   	pop    %ebx
+ 241:	5d                   	pop    %ebp
+ 242:	c3                   	ret    
+ 243:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	56                   	push   %esi
+ 255:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 256:	31 f6                	xor    %esi,%esi
+ 258:	89 f3                	mov    %esi,%ebx
+{
+ 25a:	83 ec 1c             	sub    $0x1c,%esp
+ 25d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 260:	eb 2f                	jmp    291 <gets+0x41>
+ 262:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 268:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 26b:	83 ec 04             	sub    $0x4,%esp
+ 26e:	6a 01                	push   $0x1
+ 270:	50                   	push   %eax
+ 271:	6a 00                	push   $0x0
+ 273:	e8 32 01 00 00       	call   3aa <read>
+    if(cc < 1)
+ 278:	83 c4 10             	add    $0x10,%esp
+ 27b:	85 c0                	test   %eax,%eax
+ 27d:	7e 1c                	jle    29b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 27f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 283:	83 c7 01             	add    $0x1,%edi
+ 286:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 289:	3c 0a                	cmp    $0xa,%al
+ 28b:	74 23                	je     2b0 <gets+0x60>
+ 28d:	3c 0d                	cmp    $0xd,%al
+ 28f:	74 1f                	je     2b0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 291:	83 c3 01             	add    $0x1,%ebx
+ 294:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 297:	89 fe                	mov    %edi,%esi
+ 299:	7c cd                	jl     268 <gets+0x18>
+ 29b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 29d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2a0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+ 2ab:	90                   	nop
+ 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2b0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b6:	01 de                	add    %ebx,%esi
+ 2b8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ba:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2c0:	5b                   	pop    %ebx
+ 2c1:	5e                   	pop    %esi
+ 2c2:	5f                   	pop    %edi
+ 2c3:	5d                   	pop    %ebp
+ 2c4:	c3                   	ret    
+ 2c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d5:	83 ec 08             	sub    $0x8,%esp
+ 2d8:	6a 00                	push   $0x0
+ 2da:	ff 75 08             	pushl  0x8(%ebp)
+ 2dd:	e8 f0 00 00 00       	call   3d2 <open>
+  if(fd < 0)
+ 2e2:	83 c4 10             	add    $0x10,%esp
+ 2e5:	85 c0                	test   %eax,%eax
+ 2e7:	78 27                	js     310 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ef:	89 c3                	mov    %eax,%ebx
+ 2f1:	50                   	push   %eax
+ 2f2:	e8 f3 00 00 00       	call   3ea <fstat>
+  close(fd);
+ 2f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2fc:	e8 b9 00 00 00       	call   3ba <close>
+  return r;
+ 301:	83 c4 10             	add    $0x10,%esp
+}
+ 304:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 307:	89 f0                	mov    %esi,%eax
+ 309:	5b                   	pop    %ebx
+ 30a:	5e                   	pop    %esi
+ 30b:	5d                   	pop    %ebp
+ 30c:	c3                   	ret    
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 310:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 315:	eb ed                	jmp    304 <stat+0x34>
+ 317:	89 f6                	mov    %esi,%esi
+ 319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000320 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 327:	0f be 11             	movsbl (%ecx),%edx
+ 32a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 32d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 32f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 334:	77 1f                	ja     355 <atoi+0x35>
+ 336:	8d 76 00             	lea    0x0(%esi),%esi
+ 339:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 340:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 343:	83 c1 01             	add    $0x1,%ecx
+ 346:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 34a:	0f be 11             	movsbl (%ecx),%edx
+ 34d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 350:	80 fb 09             	cmp    $0x9,%bl
+ 353:	76 eb                	jbe    340 <atoi+0x20>
+  return n;
+}
+ 355:	5b                   	pop    %ebx
+ 356:	5d                   	pop    %ebp
+ 357:	c3                   	ret    
+ 358:	90                   	nop
+ 359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000360 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	56                   	push   %esi
+ 364:	53                   	push   %ebx
+ 365:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 368:	8b 45 08             	mov    0x8(%ebp),%eax
+ 36b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	7e 14                	jle    386 <memmove+0x26>
+ 372:	31 d2                	xor    %edx,%edx
+ 374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 378:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 37c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 37f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 382:	39 d3                	cmp    %edx,%ebx
+ 384:	75 f2                	jne    378 <memmove+0x18>
+  return vdst;
+}
+ 386:	5b                   	pop    %ebx
+ 387:	5e                   	pop    %esi
+ 388:	5d                   	pop    %ebp
+ 389:	c3                   	ret    
+
+0000038a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 38a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <exit>:
+SYSCALL(exit)
+ 392:	b8 02 00 00 00       	mov    $0x2,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <wait>:
+SYSCALL(wait)
+ 39a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <pipe>:
+SYSCALL(pipe)
+ 3a2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <read>:
+SYSCALL(read)
+ 3aa:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <write>:
+SYSCALL(write)
+ 3b2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <close>:
+SYSCALL(close)
+ 3ba:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <kill>:
+SYSCALL(kill)
+ 3c2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <exec>:
+SYSCALL(exec)
+ 3ca:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <open>:
+SYSCALL(open)
+ 3d2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <mknod>:
+SYSCALL(mknod)
+ 3da:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <unlink>:
+SYSCALL(unlink)
+ 3e2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <fstat>:
+SYSCALL(fstat)
+ 3ea:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <link>:
+SYSCALL(link)
+ 3f2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <mkdir>:
+SYSCALL(mkdir)
+ 3fa:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <chdir>:
+SYSCALL(chdir)
+ 402:	b8 09 00 00 00       	mov    $0x9,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <dup>:
+SYSCALL(dup)
+ 40a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <getpid>:
+SYSCALL(getpid)
+ 412:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <sbrk>:
+SYSCALL(sbrk)
+ 41a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <sleep>:
+SYSCALL(sleep)
+ 422:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <uptime>:
+SYSCALL(uptime)
+ 42a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <getNumProc>:
+SYSCALL(getNumProc)
+ 432:	b8 16 00 00 00       	mov    $0x16,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 43a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 442:	b8 18 00 00 00       	mov    $0x18,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 44a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 452:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <process_state>:
+SYSCALL(process_state)
+ 45a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 462:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <inc_cpucounter>:
+ 46a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+ 472:	66 90                	xchg   %ax,%ax
+ 474:	66 90                	xchg   %ax,%ax
+ 476:	66 90                	xchg   %ax,%ax
+ 478:	66 90                	xchg   %ax,%ax
+ 47a:	66 90                	xchg   %ax,%ax
+ 47c:	66 90                	xchg   %ax,%ax
+ 47e:	66 90                	xchg   %ax,%ax
+
+00000480 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 489:	85 d2                	test   %edx,%edx
+{
+ 48b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 48e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 490:	79 76                	jns    508 <printint+0x88>
+ 492:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 496:	74 70                	je     508 <printint+0x88>
+    x = -xx;
+ 498:	f7 d8                	neg    %eax
+    neg = 1;
+ 49a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4a1:	31 f6                	xor    %esi,%esi
+ 4a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 4a6:	eb 0a                	jmp    4b2 <printint+0x32>
+ 4a8:	90                   	nop
+ 4a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4b0:	89 fe                	mov    %edi,%esi
+ 4b2:	31 d2                	xor    %edx,%edx
+ 4b4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 4b7:	f7 f1                	div    %ecx
+ 4b9:	0f b6 92 a4 08 00 00 	movzbl 0x8a4(%edx),%edx
+  }while((x /= base) != 0);
+ 4c0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 4c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 4c5:	75 e9                	jne    4b0 <printint+0x30>
+  if(neg)
+ 4c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4ca:	85 c0                	test   %eax,%eax
+ 4cc:	74 08                	je     4d6 <printint+0x56>
+    buf[i++] = '-';
+ 4ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4d3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4da:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4e0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 4e3:	83 ec 04             	sub    $0x4,%esp
+ 4e6:	83 ee 01             	sub    $0x1,%esi
+ 4e9:	6a 01                	push   $0x1
+ 4eb:	53                   	push   %ebx
+ 4ec:	57                   	push   %edi
+ 4ed:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4f0:	e8 bd fe ff ff       	call   3b2 <write>
+
+  while(--i >= 0)
+ 4f5:	83 c4 10             	add    $0x10,%esp
+ 4f8:	39 de                	cmp    %ebx,%esi
+ 4fa:	75 e4                	jne    4e0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 4fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ff:	5b                   	pop    %ebx
+ 500:	5e                   	pop    %esi
+ 501:	5f                   	pop    %edi
+ 502:	5d                   	pop    %ebp
+ 503:	c3                   	ret    
+ 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 508:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 50f:	eb 90                	jmp    4a1 <printint+0x21>
+ 511:	eb 0d                	jmp    520 <printf>
+ 513:	90                   	nop
+ 514:	90                   	nop
+ 515:	90                   	nop
+ 516:	90                   	nop
+ 517:	90                   	nop
+ 518:	90                   	nop
+ 519:	90                   	nop
+ 51a:	90                   	nop
+ 51b:	90                   	nop
+ 51c:	90                   	nop
+ 51d:	90                   	nop
+ 51e:	90                   	nop
+ 51f:	90                   	nop
+
+00000520 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	57                   	push   %edi
+ 524:	56                   	push   %esi
+ 525:	53                   	push   %ebx
+ 526:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 529:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 52c:	0f b6 1e             	movzbl (%esi),%ebx
+ 52f:	84 db                	test   %bl,%bl
+ 531:	0f 84 b3 00 00 00    	je     5ea <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 537:	8d 45 10             	lea    0x10(%ebp),%eax
+ 53a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 53d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 53f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 542:	eb 2f                	jmp    573 <printf+0x53>
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	0f 84 a7 00 00 00    	je     5f8 <printf+0xd8>
+  write(fd, &c, 1);
+ 551:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 554:	83 ec 04             	sub    $0x4,%esp
+ 557:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 55a:	6a 01                	push   $0x1
+ 55c:	50                   	push   %eax
+ 55d:	ff 75 08             	pushl  0x8(%ebp)
+ 560:	e8 4d fe ff ff       	call   3b2 <write>
+ 565:	83 c4 10             	add    $0x10,%esp
+ 568:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 56b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 56f:	84 db                	test   %bl,%bl
+ 571:	74 77                	je     5ea <printf+0xca>
+    if(state == 0){
+ 573:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 575:	0f be cb             	movsbl %bl,%ecx
+ 578:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 57b:	74 cb                	je     548 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 57d:	83 ff 25             	cmp    $0x25,%edi
+ 580:	75 e6                	jne    568 <printf+0x48>
+      if(c == 'd'){
+ 582:	83 f8 64             	cmp    $0x64,%eax
+ 585:	0f 84 05 01 00 00    	je     690 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 58b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 591:	83 f9 70             	cmp    $0x70,%ecx
+ 594:	74 72                	je     608 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 596:	83 f8 73             	cmp    $0x73,%eax
+ 599:	0f 84 99 00 00 00    	je     638 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 59f:	83 f8 63             	cmp    $0x63,%eax
+ 5a2:	0f 84 08 01 00 00    	je     6b0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5a8:	83 f8 25             	cmp    $0x25,%eax
+ 5ab:	0f 84 ef 00 00 00    	je     6a0 <printf+0x180>
+  write(fd, &c, 1);
+ 5b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5b4:	83 ec 04             	sub    $0x4,%esp
+ 5b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5bb:	6a 01                	push   $0x1
+ 5bd:	50                   	push   %eax
+ 5be:	ff 75 08             	pushl  0x8(%ebp)
+ 5c1:	e8 ec fd ff ff       	call   3b2 <write>
+ 5c6:	83 c4 0c             	add    $0xc,%esp
+ 5c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5cf:	6a 01                	push   $0x1
+ 5d1:	50                   	push   %eax
+ 5d2:	ff 75 08             	pushl  0x8(%ebp)
+ 5d5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5d8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 5da:	e8 d3 fd ff ff       	call   3b2 <write>
+  for(i = 0; fmt[i]; i++){
+ 5df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 5e3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5e6:	84 db                	test   %bl,%bl
+ 5e8:	75 89                	jne    573 <printf+0x53>
+    }
+  }
+}
+ 5ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5ed:	5b                   	pop    %ebx
+ 5ee:	5e                   	pop    %esi
+ 5ef:	5f                   	pop    %edi
+ 5f0:	5d                   	pop    %ebp
+ 5f1:	c3                   	ret    
+ 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 5f8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5fd:	e9 66 ff ff ff       	jmp    568 <printf+0x48>
+ 602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 608:	83 ec 0c             	sub    $0xc,%esp
+ 60b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 610:	6a 00                	push   $0x0
+ 612:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 615:	8b 45 08             	mov    0x8(%ebp),%eax
+ 618:	8b 17                	mov    (%edi),%edx
+ 61a:	e8 61 fe ff ff       	call   480 <printint>
+        ap++;
+ 61f:	89 f8                	mov    %edi,%eax
+ 621:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 624:	31 ff                	xor    %edi,%edi
+        ap++;
+ 626:	83 c0 04             	add    $0x4,%eax
+ 629:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 62c:	e9 37 ff ff ff       	jmp    568 <printf+0x48>
+ 631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 638:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 63b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 63d:	83 c0 04             	add    $0x4,%eax
+ 640:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 643:	85 c9                	test   %ecx,%ecx
+ 645:	0f 84 8e 00 00 00    	je     6d9 <printf+0x1b9>
+        while(*s != 0){
+ 64b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 64e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 650:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 652:	84 c0                	test   %al,%al
+ 654:	0f 84 0e ff ff ff    	je     568 <printf+0x48>
+ 65a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 65d:	89 de                	mov    %ebx,%esi
+ 65f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 662:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 665:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 668:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 66b:	83 c6 01             	add    $0x1,%esi
+ 66e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 671:	6a 01                	push   $0x1
+ 673:	57                   	push   %edi
+ 674:	53                   	push   %ebx
+ 675:	e8 38 fd ff ff       	call   3b2 <write>
+        while(*s != 0){
+ 67a:	0f b6 06             	movzbl (%esi),%eax
+ 67d:	83 c4 10             	add    $0x10,%esp
+ 680:	84 c0                	test   %al,%al
+ 682:	75 e4                	jne    668 <printf+0x148>
+ 684:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 687:	31 ff                	xor    %edi,%edi
+ 689:	e9 da fe ff ff       	jmp    568 <printf+0x48>
+ 68e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 690:	83 ec 0c             	sub    $0xc,%esp
+ 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 698:	6a 01                	push   $0x1
+ 69a:	e9 73 ff ff ff       	jmp    612 <printf+0xf2>
+ 69f:	90                   	nop
+  write(fd, &c, 1);
+ 6a0:	83 ec 04             	sub    $0x4,%esp
+ 6a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 6a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 6a9:	6a 01                	push   $0x1
+ 6ab:	e9 21 ff ff ff       	jmp    5d1 <printf+0xb1>
+        putc(fd, *ap);
+ 6b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 6b3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6b6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 6b8:	6a 01                	push   $0x1
+        ap++;
+ 6ba:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 6bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 6c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6c3:	50                   	push   %eax
+ 6c4:	ff 75 08             	pushl  0x8(%ebp)
+ 6c7:	e8 e6 fc ff ff       	call   3b2 <write>
+        ap++;
+ 6cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 6cf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6d2:	31 ff                	xor    %edi,%edi
+ 6d4:	e9 8f fe ff ff       	jmp    568 <printf+0x48>
+          s = "(null)";
+ 6d9:	bb 9b 08 00 00       	mov    $0x89b,%ebx
+        while(*s != 0){
+ 6de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6e3:	e9 72 ff ff ff       	jmp    65a <printf+0x13a>
+ 6e8:	66 90                	xchg   %ax,%ax
+ 6ea:	66 90                	xchg   %ax,%ax
+ 6ec:	66 90                	xchg   %ax,%ax
+ 6ee:	66 90                	xchg   %ax,%ax
+
+000006f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f1:	a1 54 0b 00 00       	mov    0xb54,%eax
+{
+ 6f6:	89 e5                	mov    %esp,%ebp
+ 6f8:	57                   	push   %edi
+ 6f9:	56                   	push   %esi
+ 6fa:	53                   	push   %ebx
+ 6fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 708:	39 c8                	cmp    %ecx,%eax
+ 70a:	8b 10                	mov    (%eax),%edx
+ 70c:	73 32                	jae    740 <free+0x50>
+ 70e:	39 d1                	cmp    %edx,%ecx
+ 710:	72 04                	jb     716 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 712:	39 d0                	cmp    %edx,%eax
+ 714:	72 32                	jb     748 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 716:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 719:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 71c:	39 fa                	cmp    %edi,%edx
+ 71e:	74 30                	je     750 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 720:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 723:	8b 50 04             	mov    0x4(%eax),%edx
+ 726:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 729:	39 f1                	cmp    %esi,%ecx
+ 72b:	74 3a                	je     767 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 72d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 72f:	a3 54 0b 00 00       	mov    %eax,0xb54
+}
+ 734:	5b                   	pop    %ebx
+ 735:	5e                   	pop    %esi
+ 736:	5f                   	pop    %edi
+ 737:	5d                   	pop    %ebp
+ 738:	c3                   	ret    
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 740:	39 d0                	cmp    %edx,%eax
+ 742:	72 04                	jb     748 <free+0x58>
+ 744:	39 d1                	cmp    %edx,%ecx
+ 746:	72 ce                	jb     716 <free+0x26>
+{
+ 748:	89 d0                	mov    %edx,%eax
+ 74a:	eb bc                	jmp    708 <free+0x18>
+ 74c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 750:	03 72 04             	add    0x4(%edx),%esi
+ 753:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 756:	8b 10                	mov    (%eax),%edx
+ 758:	8b 12                	mov    (%edx),%edx
+ 75a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 75d:	8b 50 04             	mov    0x4(%eax),%edx
+ 760:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 763:	39 f1                	cmp    %esi,%ecx
+ 765:	75 c6                	jne    72d <free+0x3d>
+    p->s.size += bp->s.size;
+ 767:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 76a:	a3 54 0b 00 00       	mov    %eax,0xb54
+    p->s.size += bp->s.size;
+ 76f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 772:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 775:	89 10                	mov    %edx,(%eax)
+}
+ 777:	5b                   	pop    %ebx
+ 778:	5e                   	pop    %esi
+ 779:	5f                   	pop    %edi
+ 77a:	5d                   	pop    %ebp
+ 77b:	c3                   	ret    
+ 77c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000780 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 780:	55                   	push   %ebp
+ 781:	89 e5                	mov    %esp,%ebp
+ 783:	57                   	push   %edi
+ 784:	56                   	push   %esi
+ 785:	53                   	push   %ebx
+ 786:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 789:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 78c:	8b 15 54 0b 00 00    	mov    0xb54,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 792:	8d 78 07             	lea    0x7(%eax),%edi
+ 795:	c1 ef 03             	shr    $0x3,%edi
+ 798:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 79b:	85 d2                	test   %edx,%edx
+ 79d:	0f 84 9d 00 00 00    	je     840 <malloc+0xc0>
+ 7a3:	8b 02                	mov    (%edx),%eax
+ 7a5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 7a8:	39 cf                	cmp    %ecx,%edi
+ 7aa:	76 6c                	jbe    818 <malloc+0x98>
+ 7ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 7b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7b7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 7c1:	eb 0e                	jmp    7d1 <malloc+0x51>
+ 7c3:	90                   	nop
+ 7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7cd:	39 f9                	cmp    %edi,%ecx
+ 7cf:	73 47                	jae    818 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7d1:	39 05 54 0b 00 00    	cmp    %eax,0xb54
+ 7d7:	89 c2                	mov    %eax,%edx
+ 7d9:	75 ed                	jne    7c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7db:	83 ec 0c             	sub    $0xc,%esp
+ 7de:	56                   	push   %esi
+ 7df:	e8 36 fc ff ff       	call   41a <sbrk>
+  if(p == (char*)-1)
+ 7e4:	83 c4 10             	add    $0x10,%esp
+ 7e7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ea:	74 1c                	je     808 <malloc+0x88>
+  hp->s.size = nu;
+ 7ec:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7ef:	83 ec 0c             	sub    $0xc,%esp
+ 7f2:	83 c0 08             	add    $0x8,%eax
+ 7f5:	50                   	push   %eax
+ 7f6:	e8 f5 fe ff ff       	call   6f0 <free>
+  return freep;
+ 7fb:	8b 15 54 0b 00 00    	mov    0xb54,%edx
+      if((p = morecore(nunits)) == 0)
+ 801:	83 c4 10             	add    $0x10,%esp
+ 804:	85 d2                	test   %edx,%edx
+ 806:	75 c0                	jne    7c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 808:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 80b:	31 c0                	xor    %eax,%eax
+}
+ 80d:	5b                   	pop    %ebx
+ 80e:	5e                   	pop    %esi
+ 80f:	5f                   	pop    %edi
+ 810:	5d                   	pop    %ebp
+ 811:	c3                   	ret    
+ 812:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 818:	39 cf                	cmp    %ecx,%edi
+ 81a:	74 54                	je     870 <malloc+0xf0>
+        p->s.size -= nunits;
+ 81c:	29 f9                	sub    %edi,%ecx
+ 81e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 821:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 824:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 827:	89 15 54 0b 00 00    	mov    %edx,0xb54
+}
+ 82d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 830:	83 c0 08             	add    $0x8,%eax
+}
+ 833:	5b                   	pop    %ebx
+ 834:	5e                   	pop    %esi
+ 835:	5f                   	pop    %edi
+ 836:	5d                   	pop    %ebp
+ 837:	c3                   	ret    
+ 838:	90                   	nop
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 840:	c7 05 54 0b 00 00 58 	movl   $0xb58,0xb54
+ 847:	0b 00 00 
+ 84a:	c7 05 58 0b 00 00 58 	movl   $0xb58,0xb58
+ 851:	0b 00 00 
+    base.s.size = 0;
+ 854:	b8 58 0b 00 00       	mov    $0xb58,%eax
+ 859:	c7 05 5c 0b 00 00 00 	movl   $0x0,0xb5c
+ 860:	00 00 00 
+ 863:	e9 44 ff ff ff       	jmp    7ac <malloc+0x2c>
+ 868:	90                   	nop
+ 869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 870:	8b 08                	mov    (%eax),%ecx
+ 872:	89 0a                	mov    %ecx,(%edx)
+ 874:	eb b1                	jmp    827 <malloc+0xa7>
diff -ruN xv6org/stressfs.d xv6mhybrid/stressfs.d
--- xv6org/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/stressfs.d	2020-10-15 19:50:35.185675712 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files xv6org/stressfs.o and xv6mhybrid/stressfs.o differ
diff -ruN xv6org/stressfs.sym xv6mhybrid/stressfs.sym
--- xv6org/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/stressfs.sym	2020-10-15 19:50:35.197674933 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000878 .rodata
+000008b8 .eh_frame
+00000b54 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000480 printint
+000008a4 digits.1056
+00000000 umalloc.c
+00000b54 freep
+00000b58 base
+00000140 strcpy
+00000520 printf
+00000360 memmove
+000003da mknod
+00000250 gets
+00000412 getpid
+00000780 malloc
+00000422 sleep
+00000452 get_burst_time
+000003a2 pipe
+000003b2 write
+000003ea fstat
+000003c2 kill
+0000045a process_state
+00000402 chdir
+00000462 dec_burstTime
+000003ca exec
+0000039a wait
+0000046a inc_cpucounter
+000003aa read
+000003e2 unlink
+0000038a fork
+0000041a sbrk
+0000042a uptime
+00000b54 __bss_start
+000001f0 memset
+00000000 main
+0000044a set_burst_time
+00000170 strcmp
+0000040a dup
+0000043a getMaxPid
+00000432 getNumProc
+00000442 getProcInfo
+000002d0 stat
+00000b54 _edata
+00000b60 _end
+000003f2 link
+00000392 exit
+00000320 atoi
+000001c0 strlen
+000003d2 open
+00000210 strchr
+000003fa mkdir
+000003ba close
+000006f0 free
diff -ruN xv6org/string.d xv6mhybrid/string.d
--- xv6org/string.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/string.d	2020-10-15 18:36:14.234802995 +0530
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files xv6org/string.o and xv6mhybrid/string.o differ
Binary files xv6org/swtch.o and xv6mhybrid/swtch.o differ
diff -ruN xv6org/syscall.c xv6mhybrid/syscall.c
--- xv6org/syscall.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/syscall.c	2020-10-15 19:52:37.302796558 +0530
@@ -103,29 +103,46 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
+extern int sys_process_state(void);
+extern int sys_dec_burstTime(void);
+extern int sys_inc_cpucounter(void);
 
 static int (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+    [SYS_fork] sys_fork,
+    [SYS_exit] sys_exit,
+    [SYS_wait] sys_wait,
+    [SYS_pipe] sys_pipe,
+    [SYS_read] sys_read,
+    [SYS_kill] sys_kill,
+    [SYS_exec] sys_exec,
+    [SYS_fstat] sys_fstat,
+    [SYS_chdir] sys_chdir,
+    [SYS_dup] sys_dup,
+    [SYS_getpid] sys_getpid,
+    [SYS_sbrk] sys_sbrk,
+    [SYS_sleep] sys_sleep,
+    [SYS_uptime] sys_uptime,
+    [SYS_open] sys_open,
+    [SYS_write] sys_write,
+    [SYS_mknod] sys_mknod,
+    [SYS_unlink] sys_unlink,
+    [SYS_link] sys_link,
+    [SYS_mkdir] sys_mkdir,
+    [SYS_close] sys_close,
+    [SYS_getNumProc] sys_getNumProc,
+    [SYS_getMaxPid] sys_getMaxPid,
+    [SYS_getProcInfo] sys_getProcInfo,
+    [SYS_set_burst_time] sys_set_burst_time,
+    [SYS_get_burst_time] sys_get_burst_time,
+    [SYS_process_state] sys_process_state,
+    [SYS_dec_burstTime] sys_dec_burstTime,
+    [SYS_inc_cpucounter] sys_inc_cpucounter,
+
 };
 
 void
diff -ruN xv6org/syscall.d xv6mhybrid/syscall.d
--- xv6org/syscall.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/syscall.d	2020-10-15 19:52:18.751713931 +0530
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
diff -ruN xv6org/syscall.h xv6mhybrid/syscall.h
--- xv6org/syscall.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/syscall.h	2020-10-15 19:49:28.550366228 +0530
@@ -20,3 +20,11 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc 22
+#define SYS_getMaxPid 23
+#define SYS_getProcInfo 24
+#define SYS_set_burst_time 25
+#define SYS_get_burst_time 26
+#define SYS_process_state 27
+#define SYS_inc_cpucounter 28
+#define SYS_dec_burstTime 29
\ No newline at end of file
Binary files xv6org/syscall.o and xv6mhybrid/syscall.o differ
diff -ruN xv6org/sysfile.c xv6mhybrid/sysfile.c
--- xv6org/sysfile.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/sysfile.c	2020-10-15 19:50:21.414586040 +0530
@@ -15,7 +15,7 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
-
+// #include<string.h>
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
diff -ruN xv6org/sysfile.d xv6mhybrid/sysfile.d
--- xv6org/sysfile.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/sysfile.d	2020-10-15 19:52:18.835709683 +0530
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files xv6org/sysfile.o and xv6mhybrid/sysfile.o differ
diff -ruN xv6org/sysproc.c xv6mhybrid/sysproc.c
--- xv6org/sysproc.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/sysproc.c	2020-10-15 19:52:02.364559809 +0530
@@ -89,3 +89,54 @@
   release(&tickslock);
   return xticks;
 }
+
+// get max PID amongst the PIDs of all currently active processes in the system.
+int sys_getMaxPid(void){
+  return getMaxPid();      // call getMaxPid function
+}
+
+// get number of active processes in the system
+int sys_getNumProc(void){
+    return getNumProc();    // call getNumProc function
+}
+
+// gives info of the process
+int sys_getProcInfo(void){
+  int pid;
+  struct processInfo *pif;
+  int sz1 = sizeof(pid);
+  int sz2 = sizeof(pif);
+  argptr(0, (void *)&pid, sz1);        
+  argptr(1, (void *)&pif, sz2); 
+  return getProcInfo(pid, pif);     // call getProcInfo function
+}
+
+// set burst time of a process
+int sys_set_burst_time(void)
+{
+  int n;
+  int sz = sizeof(n);
+  argptr(0, (void *)&n, sz);
+  return set_burst_time(n);       // call set_burst_time function
+}
+
+// get burst time of a process
+int sys_get_burst_time(void){
+  return get_burst_time();        // call get_burst_time function
+}
+
+// get the state of the process
+int sys_process_state(void){
+  return process_state();         // call process_state function
+}
+
+int sys_inc_cpucounter(void)
+{
+  return inc_cpucounter();
+}
+
+int sys_dec_burstTime(void)
+{
+  dec_burstTime();
+  return 29;
+}
\ No newline at end of file
diff -ruN xv6org/sysproc.d xv6mhybrid/sysproc.d
--- xv6org/sysproc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/sysproc.d	2020-10-15 19:52:18.871707863 +0530
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h
Binary files xv6org/sysproc.o and xv6mhybrid/sysproc.o differ
Binary files xv6org/_testBurstTime and xv6mhybrid/_testBurstTime differ
diff -ruN xv6org/testBurstTime.asm xv6mhybrid/testBurstTime.asm
--- xv6org/testBurstTime.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/testBurstTime.asm	2020-10-15 19:50:35.697642476 +0530
@@ -0,0 +1,1196 @@
+
+_testBurstTime:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+
+  printf(1 , "Burst Time before setting burst time: %d \n" , get_burst_time());
+  11:	e8 4c 03 00 00       	call   362 <get_burst_time>
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 88 07 00 00       	push   $0x788
+  1f:	6a 01                	push   $0x1
+  21:	e8 0a 04 00 00       	call   430 <printf>
+  set_burst_time(15);
+  26:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
+  2d:	e8 28 03 00 00       	call   35a <set_burst_time>
+  printf(1 , "Burst Time after setting burst time: %d \n" , get_burst_time());
+  32:	e8 2b 03 00 00       	call   362 <get_burst_time>
+  37:	83 c4 0c             	add    $0xc,%esp
+  3a:	50                   	push   %eax
+  3b:	68 b4 07 00 00       	push   $0x7b4
+  40:	6a 01                	push   $0x1
+  42:	e8 e9 03 00 00       	call   430 <printf>
+  exit();
+  47:	e8 56 02 00 00       	call   2a2 <exit>
+  4c:	66 90                	xchg   %ax,%ax
+  4e:	66 90                	xchg   %ax,%ax
+
+00000050 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  50:	55                   	push   %ebp
+  51:	89 e5                	mov    %esp,%ebp
+  53:	53                   	push   %ebx
+  54:	8b 45 08             	mov    0x8(%ebp),%eax
+  57:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  5a:	89 c2                	mov    %eax,%edx
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  60:	83 c1 01             	add    $0x1,%ecx
+  63:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  67:	83 c2 01             	add    $0x1,%edx
+  6a:	84 db                	test   %bl,%bl
+  6c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  6f:	75 ef                	jne    60 <strcpy+0x10>
+    ;
+  return os;
+}
+  71:	5b                   	pop    %ebx
+  72:	5d                   	pop    %ebp
+  73:	c3                   	ret    
+  74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000080 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 55 08             	mov    0x8(%ebp),%edx
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  8a:	0f b6 02             	movzbl (%edx),%eax
+  8d:	0f b6 19             	movzbl (%ecx),%ebx
+  90:	84 c0                	test   %al,%al
+  92:	75 1c                	jne    b0 <strcmp+0x30>
+  94:	eb 2a                	jmp    c0 <strcmp+0x40>
+  96:	8d 76 00             	lea    0x0(%esi),%esi
+  99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  a6:	83 c1 01             	add    $0x1,%ecx
+  a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  ac:	84 c0                	test   %al,%al
+  ae:	74 10                	je     c0 <strcmp+0x40>
+  b0:	38 d8                	cmp    %bl,%al
+  b2:	74 ec                	je     a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  b4:	29 d8                	sub    %ebx,%eax
+}
+  b6:	5b                   	pop    %ebx
+  b7:	5d                   	pop    %ebp
+  b8:	c3                   	ret    
+  b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  c2:	29 d8                	sub    %ebx,%eax
+}
+  c4:	5b                   	pop    %ebx
+  c5:	5d                   	pop    %ebp
+  c6:	c3                   	ret    
+  c7:	89 f6                	mov    %esi,%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  d0:	55                   	push   %ebp
+  d1:	89 e5                	mov    %esp,%ebp
+  d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  d6:	80 39 00             	cmpb   $0x0,(%ecx)
+  d9:	74 15                	je     f0 <strlen+0x20>
+  db:	31 d2                	xor    %edx,%edx
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  e0:	83 c2 01             	add    $0x1,%edx
+  e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  e7:	89 d0                	mov    %edx,%eax
+  e9:	75 f5                	jne    e0 <strlen+0x10>
+    ;
+  return n;
+}
+  eb:	5d                   	pop    %ebp
+  ec:	c3                   	ret    
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  f0:	31 c0                	xor    %eax,%eax
+}
+  f2:	5d                   	pop    %ebp
+  f3:	c3                   	ret    
+  f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000100 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 107:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 10a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 10d:	89 d7                	mov    %edx,%edi
+ 10f:	fc                   	cld    
+ 110:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 112:	89 d0                	mov    %edx,%eax
+ 114:	5f                   	pop    %edi
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	89 f6                	mov    %esi,%esi
+ 119:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000120 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	53                   	push   %ebx
+ 124:	8b 45 08             	mov    0x8(%ebp),%eax
+ 127:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 12a:	0f b6 10             	movzbl (%eax),%edx
+ 12d:	84 d2                	test   %dl,%dl
+ 12f:	74 1d                	je     14e <strchr+0x2e>
+    if(*s == c)
+ 131:	38 d3                	cmp    %dl,%bl
+ 133:	89 d9                	mov    %ebx,%ecx
+ 135:	75 0d                	jne    144 <strchr+0x24>
+ 137:	eb 17                	jmp    150 <strchr+0x30>
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 140:	38 ca                	cmp    %cl,%dl
+ 142:	74 0c                	je     150 <strchr+0x30>
+  for(; *s; s++)
+ 144:	83 c0 01             	add    $0x1,%eax
+ 147:	0f b6 10             	movzbl (%eax),%edx
+ 14a:	84 d2                	test   %dl,%dl
+ 14c:	75 f2                	jne    140 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 14e:	31 c0                	xor    %eax,%eax
+}
+ 150:	5b                   	pop    %ebx
+ 151:	5d                   	pop    %ebp
+ 152:	c3                   	ret    
+ 153:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000160 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	57                   	push   %edi
+ 164:	56                   	push   %esi
+ 165:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 166:	31 f6                	xor    %esi,%esi
+ 168:	89 f3                	mov    %esi,%ebx
+{
+ 16a:	83 ec 1c             	sub    $0x1c,%esp
+ 16d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 170:	eb 2f                	jmp    1a1 <gets+0x41>
+ 172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 178:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 17b:	83 ec 04             	sub    $0x4,%esp
+ 17e:	6a 01                	push   $0x1
+ 180:	50                   	push   %eax
+ 181:	6a 00                	push   $0x0
+ 183:	e8 32 01 00 00       	call   2ba <read>
+    if(cc < 1)
+ 188:	83 c4 10             	add    $0x10,%esp
+ 18b:	85 c0                	test   %eax,%eax
+ 18d:	7e 1c                	jle    1ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 18f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 193:	83 c7 01             	add    $0x1,%edi
+ 196:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 199:	3c 0a                	cmp    $0xa,%al
+ 19b:	74 23                	je     1c0 <gets+0x60>
+ 19d:	3c 0d                	cmp    $0xd,%al
+ 19f:	74 1f                	je     1c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1a1:	83 c3 01             	add    $0x1,%ebx
+ 1a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a7:	89 fe                	mov    %edi,%esi
+ 1a9:	7c cd                	jl     178 <gets+0x18>
+ 1ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5e                   	pop    %esi
+ 1b8:	5f                   	pop    %edi
+ 1b9:	5d                   	pop    %ebp
+ 1ba:	c3                   	ret    
+ 1bb:	90                   	nop
+ 1bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c6:	01 de                	add    %ebx,%esi
+ 1c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1d0:	5b                   	pop    %ebx
+ 1d1:	5e                   	pop    %esi
+ 1d2:	5f                   	pop    %edi
+ 1d3:	5d                   	pop    %ebp
+ 1d4:	c3                   	ret    
+ 1d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	56                   	push   %esi
+ 1e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1e5:	83 ec 08             	sub    $0x8,%esp
+ 1e8:	6a 00                	push   $0x0
+ 1ea:	ff 75 08             	pushl  0x8(%ebp)
+ 1ed:	e8 f0 00 00 00       	call   2e2 <open>
+  if(fd < 0)
+ 1f2:	83 c4 10             	add    $0x10,%esp
+ 1f5:	85 c0                	test   %eax,%eax
+ 1f7:	78 27                	js     220 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1ff:	89 c3                	mov    %eax,%ebx
+ 201:	50                   	push   %eax
+ 202:	e8 f3 00 00 00       	call   2fa <fstat>
+  close(fd);
+ 207:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 20a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 20c:	e8 b9 00 00 00       	call   2ca <close>
+  return r;
+ 211:	83 c4 10             	add    $0x10,%esp
+}
+ 214:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 217:	89 f0                	mov    %esi,%eax
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 220:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 225:	eb ed                	jmp    214 <stat+0x34>
+ 227:	89 f6                	mov    %esi,%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000230 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	53                   	push   %ebx
+ 234:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 237:	0f be 11             	movsbl (%ecx),%edx
+ 23a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 23d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 23f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 244:	77 1f                	ja     265 <atoi+0x35>
+ 246:	8d 76 00             	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 250:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 253:	83 c1 01             	add    $0x1,%ecx
+ 256:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 25a:	0f be 11             	movsbl (%ecx),%edx
+ 25d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 260:	80 fb 09             	cmp    $0x9,%bl
+ 263:	76 eb                	jbe    250 <atoi+0x20>
+  return n;
+}
+ 265:	5b                   	pop    %ebx
+ 266:	5d                   	pop    %ebp
+ 267:	c3                   	ret    
+ 268:	90                   	nop
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	56                   	push   %esi
+ 274:	53                   	push   %ebx
+ 275:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 278:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 27e:	85 db                	test   %ebx,%ebx
+ 280:	7e 14                	jle    296 <memmove+0x26>
+ 282:	31 d2                	xor    %edx,%edx
+ 284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 288:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 28c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 28f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 292:	39 d3                	cmp    %edx,%ebx
+ 294:	75 f2                	jne    288 <memmove+0x18>
+  return vdst;
+}
+ 296:	5b                   	pop    %ebx
+ 297:	5e                   	pop    %esi
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+
+0000029a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 29a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <exit>:
+SYSCALL(exit)
+ 2a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <wait>:
+SYSCALL(wait)
+ 2aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <pipe>:
+SYSCALL(pipe)
+ 2b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <read>:
+SYSCALL(read)
+ 2ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <write>:
+SYSCALL(write)
+ 2c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <close>:
+SYSCALL(close)
+ 2ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <kill>:
+SYSCALL(kill)
+ 2d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <exec>:
+SYSCALL(exec)
+ 2da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <open>:
+SYSCALL(open)
+ 2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mknod>:
+SYSCALL(mknod)
+ 2ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <unlink>:
+SYSCALL(unlink)
+ 2f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <fstat>:
+SYSCALL(fstat)
+ 2fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <link>:
+SYSCALL(link)
+ 302:	b8 13 00 00 00       	mov    $0x13,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mkdir>:
+SYSCALL(mkdir)
+ 30a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <chdir>:
+SYSCALL(chdir)
+ 312:	b8 09 00 00 00       	mov    $0x9,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <dup>:
+SYSCALL(dup)
+ 31a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getpid>:
+SYSCALL(getpid)
+ 322:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <sbrk>:
+SYSCALL(sbrk)
+ 32a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <sleep>:
+SYSCALL(sleep)
+ 332:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <uptime>:
+SYSCALL(uptime)
+ 33a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getNumProc>:
+SYSCALL(getNumProc)
+ 342:	b8 16 00 00 00       	mov    $0x16,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 352:	b8 18 00 00 00       	mov    $0x18,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 35a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 362:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <process_state>:
+SYSCALL(process_state)
+ 36a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 372:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <inc_cpucounter>:
+ 37a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+ 382:	66 90                	xchg   %ax,%ax
+ 384:	66 90                	xchg   %ax,%ax
+ 386:	66 90                	xchg   %ax,%ax
+ 388:	66 90                	xchg   %ax,%ax
+ 38a:	66 90                	xchg   %ax,%ax
+ 38c:	66 90                	xchg   %ax,%ax
+ 38e:	66 90                	xchg   %ax,%ax
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 399:	85 d2                	test   %edx,%edx
+{
+ 39b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 39e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3a0:	79 76                	jns    418 <printint+0x88>
+ 3a2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3a6:	74 70                	je     418 <printint+0x88>
+    x = -xx;
+ 3a8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3aa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b1:	31 f6                	xor    %esi,%esi
+ 3b3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3b6:	eb 0a                	jmp    3c2 <printint+0x32>
+ 3b8:	90                   	nop
+ 3b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 fe                	mov    %edi,%esi
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3c7:	f7 f1                	div    %ecx
+ 3c9:	0f b6 92 e8 07 00 00 	movzbl 0x7e8(%edx),%edx
+  }while((x /= base) != 0);
+ 3d0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3d2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3d5:	75 e9                	jne    3c0 <printint+0x30>
+  if(neg)
+ 3d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3da:	85 c0                	test   %eax,%eax
+ 3dc:	74 08                	je     3e6 <printint+0x56>
+    buf[i++] = '-';
+ 3de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3e3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3e6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ea:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3f3:	83 ec 04             	sub    $0x4,%esp
+ 3f6:	83 ee 01             	sub    $0x1,%esi
+ 3f9:	6a 01                	push   $0x1
+ 3fb:	53                   	push   %ebx
+ 3fc:	57                   	push   %edi
+ 3fd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 400:	e8 bd fe ff ff       	call   2c2 <write>
+
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 41f:	eb 90                	jmp    3b1 <printint+0x21>
+ 421:	eb 0d                	jmp    430 <printf>
+ 423:	90                   	nop
+ 424:	90                   	nop
+ 425:	90                   	nop
+ 426:	90                   	nop
+ 427:	90                   	nop
+ 428:	90                   	nop
+ 429:	90                   	nop
+ 42a:	90                   	nop
+ 42b:	90                   	nop
+ 42c:	90                   	nop
+ 42d:	90                   	nop
+ 42e:	90                   	nop
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 43c:	0f b6 1e             	movzbl (%esi),%ebx
+ 43f:	84 db                	test   %bl,%bl
+ 441:	0f 84 b3 00 00 00    	je     4fa <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 447:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 44d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 44f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 452:	eb 2f                	jmp    483 <printf+0x53>
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	0f 84 a7 00 00 00    	je     508 <printf+0xd8>
+  write(fd, &c, 1);
+ 461:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 464:	83 ec 04             	sub    $0x4,%esp
+ 467:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 46a:	6a 01                	push   $0x1
+ 46c:	50                   	push   %eax
+ 46d:	ff 75 08             	pushl  0x8(%ebp)
+ 470:	e8 4d fe ff ff       	call   2c2 <write>
+ 475:	83 c4 10             	add    $0x10,%esp
+ 478:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 47b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47f:	84 db                	test   %bl,%bl
+ 481:	74 77                	je     4fa <printf+0xca>
+    if(state == 0){
+ 483:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 485:	0f be cb             	movsbl %bl,%ecx
+ 488:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 48b:	74 cb                	je     458 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 48d:	83 ff 25             	cmp    $0x25,%edi
+ 490:	75 e6                	jne    478 <printf+0x48>
+      if(c == 'd'){
+ 492:	83 f8 64             	cmp    $0x64,%eax
+ 495:	0f 84 05 01 00 00    	je     5a0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 49b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4a1:	83 f9 70             	cmp    $0x70,%ecx
+ 4a4:	74 72                	je     518 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a6:	83 f8 73             	cmp    $0x73,%eax
+ 4a9:	0f 84 99 00 00 00    	je     548 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4af:	83 f8 63             	cmp    $0x63,%eax
+ 4b2:	0f 84 08 01 00 00    	je     5c0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 ef 00 00 00    	je     5b0 <printf+0x180>
+  write(fd, &c, 1);
+ 4c1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c4:	83 ec 04             	sub    $0x4,%esp
+ 4c7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4cb:	6a 01                	push   $0x1
+ 4cd:	50                   	push   %eax
+ 4ce:	ff 75 08             	pushl  0x8(%ebp)
+ 4d1:	e8 ec fd ff ff       	call   2c2 <write>
+ 4d6:	83 c4 0c             	add    $0xc,%esp
+ 4d9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4dc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4df:	6a 01                	push   $0x1
+ 4e1:	50                   	push   %eax
+ 4e2:	ff 75 08             	pushl  0x8(%ebp)
+ 4e5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4e8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4ea:	e8 d3 fd ff ff       	call   2c2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4ef:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4f3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4f6:	84 db                	test   %bl,%bl
+ 4f8:	75 89                	jne    483 <printf+0x53>
+    }
+  }
+}
+ 4fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4fd:	5b                   	pop    %ebx
+ 4fe:	5e                   	pop    %esi
+ 4ff:	5f                   	pop    %edi
+ 500:	5d                   	pop    %ebp
+ 501:	c3                   	ret    
+ 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 508:	bf 25 00 00 00       	mov    $0x25,%edi
+ 50d:	e9 66 ff ff ff       	jmp    478 <printf+0x48>
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 518:	83 ec 0c             	sub    $0xc,%esp
+ 51b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 520:	6a 00                	push   $0x0
+ 522:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 525:	8b 45 08             	mov    0x8(%ebp),%eax
+ 528:	8b 17                	mov    (%edi),%edx
+ 52a:	e8 61 fe ff ff       	call   390 <printint>
+        ap++;
+ 52f:	89 f8                	mov    %edi,%eax
+ 531:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 534:	31 ff                	xor    %edi,%edi
+        ap++;
+ 536:	83 c0 04             	add    $0x4,%eax
+ 539:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 53c:	e9 37 ff ff ff       	jmp    478 <printf+0x48>
+ 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 548:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 54b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 54d:	83 c0 04             	add    $0x4,%eax
+ 550:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 553:	85 c9                	test   %ecx,%ecx
+ 555:	0f 84 8e 00 00 00    	je     5e9 <printf+0x1b9>
+        while(*s != 0){
+ 55b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 55e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 560:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 562:	84 c0                	test   %al,%al
+ 564:	0f 84 0e ff ff ff    	je     478 <printf+0x48>
+ 56a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 56d:	89 de                	mov    %ebx,%esi
+ 56f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 572:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 575:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 578:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 57b:	83 c6 01             	add    $0x1,%esi
+ 57e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 581:	6a 01                	push   $0x1
+ 583:	57                   	push   %edi
+ 584:	53                   	push   %ebx
+ 585:	e8 38 fd ff ff       	call   2c2 <write>
+        while(*s != 0){
+ 58a:	0f b6 06             	movzbl (%esi),%eax
+ 58d:	83 c4 10             	add    $0x10,%esp
+ 590:	84 c0                	test   %al,%al
+ 592:	75 e4                	jne    578 <printf+0x148>
+ 594:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 597:	31 ff                	xor    %edi,%edi
+ 599:	e9 da fe ff ff       	jmp    478 <printf+0x48>
+ 59e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	e9 73 ff ff ff       	jmp    522 <printf+0xf2>
+ 5af:	90                   	nop
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+ 5b3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5b6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	e9 21 ff ff ff       	jmp    4e1 <printf+0xb1>
+        putc(fd, *ap);
+ 5c0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5c6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5c8:	6a 01                	push   $0x1
+        ap++;
+ 5ca:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5cd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5d0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5d3:	50                   	push   %eax
+ 5d4:	ff 75 08             	pushl  0x8(%ebp)
+ 5d7:	e8 e6 fc ff ff       	call   2c2 <write>
+        ap++;
+ 5dc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5df:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5e2:	31 ff                	xor    %edi,%edi
+ 5e4:	e9 8f fe ff ff       	jmp    478 <printf+0x48>
+          s = "(null)";
+ 5e9:	bb e0 07 00 00       	mov    $0x7e0,%ebx
+        while(*s != 0){
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	e9 72 ff ff ff       	jmp    56a <printf+0x13a>
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
+
+00000600 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 600:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	a1 8c 0a 00 00       	mov    0xa8c,%eax
+{
+ 606:	89 e5                	mov    %esp,%ebp
+ 608:	57                   	push   %edi
+ 609:	56                   	push   %esi
+ 60a:	53                   	push   %ebx
+ 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 60e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 618:	39 c8                	cmp    %ecx,%eax
+ 61a:	8b 10                	mov    (%eax),%edx
+ 61c:	73 32                	jae    650 <free+0x50>
+ 61e:	39 d1                	cmp    %edx,%ecx
+ 620:	72 04                	jb     626 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 622:	39 d0                	cmp    %edx,%eax
+ 624:	72 32                	jb     658 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 626:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 629:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62c:	39 fa                	cmp    %edi,%edx
+ 62e:	74 30                	je     660 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 630:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 633:	8b 50 04             	mov    0x4(%eax),%edx
+ 636:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 639:	39 f1                	cmp    %esi,%ecx
+ 63b:	74 3a                	je     677 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 63f:	a3 8c 0a 00 00       	mov    %eax,0xa8c
+}
+ 644:	5b                   	pop    %ebx
+ 645:	5e                   	pop    %esi
+ 646:	5f                   	pop    %edi
+ 647:	5d                   	pop    %ebp
+ 648:	c3                   	ret    
+ 649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 04                	jb     658 <free+0x58>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	72 ce                	jb     626 <free+0x26>
+{
+ 658:	89 d0                	mov    %edx,%eax
+ 65a:	eb bc                	jmp    618 <free+0x18>
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 c6                	jne    63d <free+0x3d>
+    p->s.size += bp->s.size;
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 67a:	a3 8c 0a 00 00       	mov    %eax,0xa8c
+    p->s.size += bp->s.size;
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
+}
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000690 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 699:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 69c:	8b 15 8c 0a 00 00    	mov    0xa8c,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6a5:	c1 ef 03             	shr    $0x3,%edi
+ 6a8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6ab:	85 d2                	test   %edx,%edx
+ 6ad:	0f 84 9d 00 00 00    	je     750 <malloc+0xc0>
+ 6b3:	8b 02                	mov    (%edx),%eax
+ 6b5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6b8:	39 cf                	cmp    %ecx,%edi
+ 6ba:	76 6c                	jbe    728 <malloc+0x98>
+ 6bc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6c2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6c7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ca:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6d1:	eb 0e                	jmp    6e1 <malloc+0x51>
+ 6d3:	90                   	nop
+ 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6da:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dd:	39 f9                	cmp    %edi,%ecx
+ 6df:	73 47                	jae    728 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 05 8c 0a 00 00    	cmp    %eax,0xa8c
+ 6e7:	89 c2                	mov    %eax,%edx
+ 6e9:	75 ed                	jne    6d8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6eb:	83 ec 0c             	sub    $0xc,%esp
+ 6ee:	56                   	push   %esi
+ 6ef:	e8 36 fc ff ff       	call   32a <sbrk>
+  if(p == (char*)-1)
+ 6f4:	83 c4 10             	add    $0x10,%esp
+ 6f7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6fa:	74 1c                	je     718 <malloc+0x88>
+  hp->s.size = nu;
+ 6fc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6ff:	83 ec 0c             	sub    $0xc,%esp
+ 702:	83 c0 08             	add    $0x8,%eax
+ 705:	50                   	push   %eax
+ 706:	e8 f5 fe ff ff       	call   600 <free>
+  return freep;
+ 70b:	8b 15 8c 0a 00 00    	mov    0xa8c,%edx
+      if((p = morecore(nunits)) == 0)
+ 711:	83 c4 10             	add    $0x10,%esp
+ 714:	85 d2                	test   %edx,%edx
+ 716:	75 c0                	jne    6d8 <malloc+0x48>
+        return 0;
+  }
+}
+ 718:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 71b:	31 c0                	xor    %eax,%eax
+}
+ 71d:	5b                   	pop    %ebx
+ 71e:	5e                   	pop    %esi
+ 71f:	5f                   	pop    %edi
+ 720:	5d                   	pop    %ebp
+ 721:	c3                   	ret    
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 728:	39 cf                	cmp    %ecx,%edi
+ 72a:	74 54                	je     780 <malloc+0xf0>
+        p->s.size -= nunits;
+ 72c:	29 f9                	sub    %edi,%ecx
+ 72e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 731:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 734:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 737:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
+}
+ 73d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 740:	83 c0 08             	add    $0x8,%eax
+}
+ 743:	5b                   	pop    %ebx
+ 744:	5e                   	pop    %esi
+ 745:	5f                   	pop    %edi
+ 746:	5d                   	pop    %ebp
+ 747:	c3                   	ret    
+ 748:	90                   	nop
+ 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 8c 0a 00 00 90 	movl   $0xa90,0xa8c
+ 757:	0a 00 00 
+ 75a:	c7 05 90 0a 00 00 90 	movl   $0xa90,0xa90
+ 761:	0a 00 00 
+    base.s.size = 0;
+ 764:	b8 90 0a 00 00       	mov    $0xa90,%eax
+ 769:	c7 05 94 0a 00 00 00 	movl   $0x0,0xa94
+ 770:	00 00 00 
+ 773:	e9 44 ff ff ff       	jmp    6bc <malloc+0x2c>
+ 778:	90                   	nop
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b1                	jmp    737 <malloc+0xa7>
diff -ruN xv6org/testBurstTime.c xv6mhybrid/testBurstTime.c
--- xv6org/testBurstTime.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/testBurstTime.c	2020-10-14 12:50:56.804789000 +0530
@@ -0,0 +1,12 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+
+  printf(1 , "Burst Time before setting burst time: %d \n" , get_burst_time());
+  set_burst_time(15);
+  printf(1 , "Burst Time after setting burst time: %d \n" , get_burst_time());
+  exit();
+}
\ No newline at end of file
diff -ruN xv6org/testBurstTime.d xv6mhybrid/testBurstTime.d
--- xv6org/testBurstTime.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/testBurstTime.d	2020-10-15 19:50:35.681643514 +0530
@@ -0,0 +1,2 @@
+testBurstTime.o: testBurstTime.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h
Binary files xv6org/testBurstTime.o and xv6mhybrid/testBurstTime.o differ
diff -ruN xv6org/testBurstTime.sym xv6mhybrid/testBurstTime.sym
--- xv6org/testBurstTime.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/testBurstTime.sym	2020-10-15 19:50:35.697642476 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000788 .rodata
+000007fc .eh_frame
+00000a8c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 testBurstTime.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+000007e8 digits.1056
+00000000 umalloc.c
+00000a8c freep
+00000a90 base
+00000050 strcpy
+00000430 printf
+00000270 memmove
+000002ea mknod
+00000160 gets
+00000322 getpid
+00000690 malloc
+00000332 sleep
+00000362 get_burst_time
+000002b2 pipe
+000002c2 write
+000002fa fstat
+000002d2 kill
+0000036a process_state
+00000312 chdir
+00000372 dec_burstTime
+000002da exec
+000002aa wait
+0000037a inc_cpucounter
+000002ba read
+000002f2 unlink
+0000029a fork
+0000032a sbrk
+0000033a uptime
+00000a8c __bss_start
+00000100 memset
+00000000 main
+0000035a set_burst_time
+00000080 strcmp
+0000031a dup
+0000034a getMaxPid
+00000342 getNumProc
+00000352 getProcInfo
+000001e0 stat
+00000a8c _edata
+00000a98 _end
+00000302 link
+000002a2 exit
+00000230 atoi
+000000d0 strlen
+000002e2 open
+00000120 strchr
+0000030a mkdir
+000002ca close
+00000600 free
Binary files xv6org/_test_sched and xv6mhybrid/_test_sched differ
diff -ruN xv6org/test_sched.asm xv6mhybrid/test_sched.asm
--- xv6org/test_sched.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_sched.asm	2020-10-15 19:50:35.821634426 +0530
@@ -0,0 +1,1452 @@
+
+_test_sched:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+    printf(1, "\n");
+}
+
+int 
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	81 ec 74 08 00 00    	sub    $0x874,%esp
+  17:	8b 41 04             	mov    0x4(%ecx),%eax
+  1a:	8b 31                	mov    (%ecx),%esi
+
+    // This code is for test case 3 and 4.
+    // To run this code for test case 1, change random_computation to random_io in else block.
+    // To run this code for test case 2, change random_io to random_computation in else block.
+    int n;
+    n = atoi(argv[1]);
+  1c:	ff 70 04             	pushl  0x4(%eax)
+  1f:	e8 1c 04 00 00       	call   440 <atoi>
+    if (argc < 2) n=5;
+  24:	83 c4 10             	add    $0x10,%esp
+  27:	83 fe 01             	cmp    $0x1,%esi
+  2a:	0f 8e 89 00 00 00    	jle    b9 <main+0xb9>
+  30:	89 c3                	mov    %eax,%ebx
+    int burst_time=0;
+    int pids[n];
+  32:	8d 04 85 12 00 00 00 	lea    0x12(,%eax,4),%eax
+    int returnOrder[n];    // to store completiton order
+    int map[500];          // to map process id to child number
+    int rand_bt[20] = {20, 17, 1, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  39:	8d bd c8 f7 ff ff    	lea    -0x838(%ebp),%edi
+  3f:	be 40 0a 00 00       	mov    $0xa40,%esi
+  44:	b9 14 00 00 00       	mov    $0x14,%ecx
+    int pids[n];
+  49:	83 e0 f0             	and    $0xfffffff0,%eax
+    int rand_bt[20] = {20, 17, 1, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  4c:	89 bd 90 f7 ff ff    	mov    %edi,-0x870(%ebp)
+    int pids[n];
+  52:	29 c4                	sub    %eax,%esp
+  54:	89 a5 8c f7 ff ff    	mov    %esp,-0x874(%ebp)
+    int returnOrder[n];    // to store completiton order
+  5a:	29 c4                	sub    %eax,%esp
+    int i=0;
+    while(i<n)
+  5c:	85 db                	test   %ebx,%ebx
+    int returnOrder[n];    // to store completiton order
+  5e:	89 a5 88 f7 ff ff    	mov    %esp,-0x878(%ebp)
+    int rand_bt[20] = {20, 17, 1, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  64:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+    while(i<n)
+  66:	0f 8e 51 01 00 00    	jle    1bd <main+0x1bd>
+    if (argc < 2) n=5;
+  6c:	31 f6                	xor    %esi,%esi
+    {
+        if(i==2 || i==4 || i==9 || i==14)
+  6e:	89 9d 94 f7 ff ff    	mov    %ebx,-0x86c(%ebp)
+  74:	89 f3                	mov    %esi,%ebx
+  76:	8b b5 8c f7 ff ff    	mov    -0x874(%ebp),%esi
+  7c:	eb 19                	jmp    97 <main+0x97>
+  7e:	66 90                	xchg   %ax,%ax
+                burst_time = rand_bt[i];
+                set_burst_time(burst_time);
+                random_io();
+                exit();    
+            }
+            else if (id < 0)
+  80:	78 71                	js     f3 <main+0xf3>
+                printf(1, "Error!! Could not be forked. \n");
+                exit();
+            }
+            else
+            {
+                pids[i] = id;
+  82:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
+                map[id]=i;
+  85:	89 9c 85 18 f8 ff ff 	mov    %ebx,-0x7e8(%ebp,%eax,4)
+            }
+        }
+        
+        i++;
+  8c:	83 c3 01             	add    $0x1,%ebx
+    while(i<n)
+  8f:	3b 9d 94 f7 ff ff    	cmp    -0x86c(%ebp),%ebx
+  95:	7d 6f                	jge    106 <main+0x106>
+            int id = fork();
+  97:	e8 0e 04 00 00       	call   4aa <fork>
+            if (id == 0)
+  9c:	85 c0                	test   %eax,%eax
+  9e:	75 e0                	jne    80 <main+0x80>
+                set_burst_time(burst_time);
+  a0:	83 ec 0c             	sub    $0xc,%esp
+  a3:	ff b4 9d c8 f7 ff ff 	pushl  -0x838(%ebp,%ebx,4)
+  aa:	e8 bb 04 00 00       	call   56a <set_burst_time>
+                random_io();
+  af:	e8 5c 01 00 00       	call   210 <random_io>
+                exit();    
+  b4:	e8 f9 03 00 00       	call   4b2 <exit>
+    int returnOrder[n];    // to store completiton order
+  b9:	8d 85 b4 f7 ff ff    	lea    -0x84c(%ebp),%eax
+    int rand_bt[20] = {20, 17, 1, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  bf:	8d bd c8 f7 ff ff    	lea    -0x838(%ebp),%edi
+  c5:	be 40 0a 00 00       	mov    $0xa40,%esi
+  ca:	b9 14 00 00 00       	mov    $0x14,%ecx
+    if (argc < 2) n=5;
+  cf:	bb 05 00 00 00       	mov    $0x5,%ebx
+    int returnOrder[n];    // to store completiton order
+  d4:	89 85 88 f7 ff ff    	mov    %eax,-0x878(%ebp)
+    int pids[n];
+  da:	8d 85 a0 f7 ff ff    	lea    -0x860(%ebp),%eax
+    int rand_bt[20] = {20, 17, 1, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  e0:	89 bd 90 f7 ff ff    	mov    %edi,-0x870(%ebp)
+  e6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+    int pids[n];
+  e8:	89 85 8c f7 ff ff    	mov    %eax,-0x874(%ebp)
+  ee:	e9 79 ff ff ff       	jmp    6c <main+0x6c>
+                printf(1, "Error!! Could not be forked. \n");
+  f3:	56                   	push   %esi
+  f4:	56                   	push   %esi
+  f5:	68 e0 09 00 00       	push   $0x9e0
+  fa:	6a 01                	push   $0x1
+  fc:	e8 3f 05 00 00       	call   640 <printf>
+                exit();
+ 101:	e8 ac 03 00 00       	call   4b2 <exit>
+ 106:	8b 9d 94 f7 ff ff    	mov    -0x86c(%ebp),%ebx
+    }
+
+    for (int i = 0; i < n; i++)
+ 10c:	8b bd 88 f7 ff ff    	mov    -0x878(%ebp),%edi
+ 112:	31 f6                	xor    %esi,%esi
+ 114:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    {
+        returnOrder[i] = wait();
+ 118:	e8 9d 03 00 00       	call   4ba <wait>
+ 11d:	89 04 b7             	mov    %eax,(%edi,%esi,4)
+    for (int i = 0; i < n; i++)
+ 120:	83 c6 01             	add    $0x1,%esi
+ 123:	39 de                	cmp    %ebx,%esi
+ 125:	7c f1                	jl     118 <main+0x118>
+    }
+    printf(1, "Child No.\tPID\t\t Burst Time     \n");
+ 127:	56                   	push   %esi
+ 128:	56                   	push   %esi
+ 129:	31 f6                	xor    %esi,%esi
+ 12b:	68 00 0a 00 00       	push   $0xa00
+ 130:	6a 01                	push   $0x1
+ 132:	e8 09 05 00 00       	call   640 <printf>
+ 137:	8b bd 8c f7 ff ff    	mov    -0x874(%ebp),%edi
+ 13d:	83 c4 10             	add    $0x10,%esp
+    for (int i = 0; i < n; i++)
+    {
+        printf(1, "%d\t\t %d\t\t %d  \n", i+1, pids[i], rand_bt[i]);
+ 140:	8b 85 90 f7 ff ff    	mov    -0x870(%ebp),%eax
+ 146:	83 ec 0c             	sub    $0xc,%esp
+ 149:	89 f2                	mov    %esi,%edx
+ 14b:	83 c6 01             	add    $0x1,%esi
+ 14e:	ff 34 90             	pushl  (%eax,%edx,4)
+ 151:	ff 34 97             	pushl  (%edi,%edx,4)
+ 154:	56                   	push   %esi
+ 155:	68 ce 09 00 00       	push   $0x9ce
+ 15a:	6a 01                	push   $0x1
+ 15c:	e8 df 04 00 00       	call   640 <printf>
+    for (int i = 0; i < n; i++)
+ 161:	83 c4 20             	add    $0x20,%esp
+ 164:	39 de                	cmp    %ebx,%esi
+ 166:	7c d8                	jl     140 <main+0x140>
+    }
+    printf(1, "\nCompletion Order: \n");
+ 168:	50                   	push   %eax
+ 169:	50                   	push   %eax
+    printf(1, "PID\t\t Burst Time     \n");
+    for (int i = 0; i < n; i++){
+ 16a:	31 f6                	xor    %esi,%esi
+    printf(1, "\nCompletion Order: \n");
+ 16c:	68 a2 09 00 00       	push   $0x9a2
+ 171:	6a 01                	push   $0x1
+ 173:	e8 c8 04 00 00       	call   640 <printf>
+    printf(1, "PID\t\t Burst Time     \n");
+ 178:	5a                   	pop    %edx
+ 179:	59                   	pop    %ecx
+ 17a:	68 b7 09 00 00       	push   $0x9b7
+ 17f:	6a 01                	push   $0x1
+ 181:	e8 ba 04 00 00       	call   640 <printf>
+ 186:	8b bd 88 f7 ff ff    	mov    -0x878(%ebp),%edi
+ 18c:	83 c4 10             	add    $0x10,%esp
+ 18f:	90                   	nop
+        printf(1, "%d\t\t %d  \n", returnOrder[i], rand_bt[map[returnOrder[i]]]);
+ 190:	8b 04 b7             	mov    (%edi,%esi,4),%eax
+    for (int i = 0; i < n; i++){
+ 193:	83 c6 01             	add    $0x1,%esi
+        printf(1, "%d\t\t %d  \n", returnOrder[i], rand_bt[map[returnOrder[i]]]);
+ 196:	8b 94 85 18 f8 ff ff 	mov    -0x7e8(%ebp,%eax,4),%edx
+ 19d:	ff b4 95 c8 f7 ff ff 	pushl  -0x838(%ebp,%edx,4)
+ 1a4:	50                   	push   %eax
+ 1a5:	68 d3 09 00 00       	push   $0x9d3
+ 1aa:	6a 01                	push   $0x1
+ 1ac:	e8 8f 04 00 00       	call   640 <printf>
+    for (int i = 0; i < n; i++){
+ 1b1:	83 c4 10             	add    $0x10,%esp
+ 1b4:	39 de                	cmp    %ebx,%esi
+ 1b6:	7c d8                	jl     190 <main+0x190>
+        
+    }
+    exit();
+ 1b8:	e8 f5 02 00 00       	call   4b2 <exit>
+    printf(1, "Child No.\tPID\t\t Burst Time     \n");
+ 1bd:	57                   	push   %edi
+ 1be:	57                   	push   %edi
+ 1bf:	68 00 0a 00 00       	push   $0xa00
+ 1c4:	6a 01                	push   $0x1
+ 1c6:	e8 75 04 00 00       	call   640 <printf>
+    printf(1, "\nCompletion Order: \n");
+ 1cb:	58                   	pop    %eax
+ 1cc:	5a                   	pop    %edx
+ 1cd:	68 a2 09 00 00       	push   $0x9a2
+ 1d2:	6a 01                	push   $0x1
+ 1d4:	e8 67 04 00 00       	call   640 <printf>
+    printf(1, "PID\t\t Burst Time     \n");
+ 1d9:	59                   	pop    %ecx
+ 1da:	5b                   	pop    %ebx
+ 1db:	68 b7 09 00 00       	push   $0x9b7
+ 1e0:	6a 01                	push   $0x1
+ 1e2:	e8 59 04 00 00       	call   640 <printf>
+ 1e7:	83 c4 10             	add    $0x10,%esp
+ 1ea:	eb cc                	jmp    1b8 <main+0x1b8>
+ 1ec:	66 90                	xchg   %ax,%ax
+ 1ee:	66 90                	xchg   %ax,%ax
+
+000001f0 <random_computation>:
+{
+ 1f0:	55                   	push   %ebp
+    float a = 0, b=0;
+ 1f1:	d9 ee                	fldz   
+{
+ 1f3:	89 e5                	mov    %esp,%ebp
+ 1f5:	8d 76 00             	lea    0x0(%esi),%esi
+        b+=1;
+ 1f8:	d8 05 90 0a 00 00    	fadds  0xa90
+    while(b<1000000)
+ 1fe:	d9 05 94 0a 00 00    	flds   0xa94
+ 204:	df e9                	fucomip %st(1),%st
+ 206:	77 f0                	ja     1f8 <random_computation+0x8>
+ 208:	dd d8                	fstp   %st(0)
+}
+ 20a:	5d                   	pop    %ebp
+ 20b:	c3                   	ret    
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <random_io>:
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	bb 96 00 00 00       	mov    $0x96,%ebx
+ 219:	83 ec 04             	sub    $0x4,%esp
+ 21c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1,"$");
+ 220:	83 ec 08             	sub    $0x8,%esp
+ 223:	68 a0 09 00 00       	push   $0x9a0
+ 228:	6a 01                	push   $0x1
+ 22a:	e8 11 04 00 00       	call   640 <printf>
+    while(i--)
+ 22f:	83 c4 10             	add    $0x10,%esp
+ 232:	83 eb 01             	sub    $0x1,%ebx
+ 235:	75 e9                	jne    220 <random_io+0x10>
+    sleep(3);
+ 237:	83 ec 0c             	sub    $0xc,%esp
+ 23a:	6a 03                	push   $0x3
+ 23c:	e8 01 03 00 00       	call   542 <sleep>
+    printf(1, "\n");
+ 241:	58                   	pop    %eax
+ 242:	5a                   	pop    %edx
+ 243:	68 cc 09 00 00       	push   $0x9cc
+ 248:	6a 01                	push   $0x1
+ 24a:	e8 f1 03 00 00       	call   640 <printf>
+}
+ 24f:	83 c4 10             	add    $0x10,%esp
+ 252:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 255:	c9                   	leave  
+ 256:	c3                   	ret    
+ 257:	66 90                	xchg   %ax,%ax
+ 259:	66 90                	xchg   %ax,%ax
+ 25b:	66 90                	xchg   %ax,%ax
+ 25d:	66 90                	xchg   %ax,%ax
+ 25f:	90                   	nop
+
+00000260 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 45 08             	mov    0x8(%ebp),%eax
+ 267:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 26a:	89 c2                	mov    %eax,%edx
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 270:	83 c1 01             	add    $0x1,%ecx
+ 273:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 277:	83 c2 01             	add    $0x1,%edx
+ 27a:	84 db                	test   %bl,%bl
+ 27c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 27f:	75 ef                	jne    270 <strcpy+0x10>
+    ;
+  return os;
+}
+ 281:	5b                   	pop    %ebx
+ 282:	5d                   	pop    %ebp
+ 283:	c3                   	ret    
+ 284:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 28a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000290 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	53                   	push   %ebx
+ 294:	8b 55 08             	mov    0x8(%ebp),%edx
+ 297:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 29a:	0f b6 02             	movzbl (%edx),%eax
+ 29d:	0f b6 19             	movzbl (%ecx),%ebx
+ 2a0:	84 c0                	test   %al,%al
+ 2a2:	75 1c                	jne    2c0 <strcmp+0x30>
+ 2a4:	eb 2a                	jmp    2d0 <strcmp+0x40>
+ 2a6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 2b0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 2b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 2b6:	83 c1 01             	add    $0x1,%ecx
+ 2b9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 2bc:	84 c0                	test   %al,%al
+ 2be:	74 10                	je     2d0 <strcmp+0x40>
+ 2c0:	38 d8                	cmp    %bl,%al
+ 2c2:	74 ec                	je     2b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 2c4:	29 d8                	sub    %ebx,%eax
+}
+ 2c6:	5b                   	pop    %ebx
+ 2c7:	5d                   	pop    %ebp
+ 2c8:	c3                   	ret    
+ 2c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 2d2:	29 d8                	sub    %ebx,%eax
+}
+ 2d4:	5b                   	pop    %ebx
+ 2d5:	5d                   	pop    %ebp
+ 2d6:	c3                   	ret    
+ 2d7:	89 f6                	mov    %esi,%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 2e6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 2e9:	74 15                	je     300 <strlen+0x20>
+ 2eb:	31 d2                	xor    %edx,%edx
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 2f0:	83 c2 01             	add    $0x1,%edx
+ 2f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 2f7:	89 d0                	mov    %edx,%eax
+ 2f9:	75 f5                	jne    2f0 <strlen+0x10>
+    ;
+  return n;
+}
+ 2fb:	5d                   	pop    %ebp
+ 2fc:	c3                   	ret    
+ 2fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 300:	31 c0                	xor    %eax,%eax
+}
+ 302:	5d                   	pop    %ebp
+ 303:	c3                   	ret    
+ 304:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 30a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000310 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 317:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 31a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 31d:	89 d7                	mov    %edx,%edi
+ 31f:	fc                   	cld    
+ 320:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 322:	89 d0                	mov    %edx,%eax
+ 324:	5f                   	pop    %edi
+ 325:	5d                   	pop    %ebp
+ 326:	c3                   	ret    
+ 327:	89 f6                	mov    %esi,%esi
+ 329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000330 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 45 08             	mov    0x8(%ebp),%eax
+ 337:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 33a:	0f b6 10             	movzbl (%eax),%edx
+ 33d:	84 d2                	test   %dl,%dl
+ 33f:	74 1d                	je     35e <strchr+0x2e>
+    if(*s == c)
+ 341:	38 d3                	cmp    %dl,%bl
+ 343:	89 d9                	mov    %ebx,%ecx
+ 345:	75 0d                	jne    354 <strchr+0x24>
+ 347:	eb 17                	jmp    360 <strchr+0x30>
+ 349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 350:	38 ca                	cmp    %cl,%dl
+ 352:	74 0c                	je     360 <strchr+0x30>
+  for(; *s; s++)
+ 354:	83 c0 01             	add    $0x1,%eax
+ 357:	0f b6 10             	movzbl (%eax),%edx
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 35e:	31 c0                	xor    %eax,%eax
+}
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 369:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000370 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 376:	31 f6                	xor    %esi,%esi
+ 378:	89 f3                	mov    %esi,%ebx
+{
+ 37a:	83 ec 1c             	sub    $0x1c,%esp
+ 37d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 380:	eb 2f                	jmp    3b1 <gets+0x41>
+ 382:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 388:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 38b:	83 ec 04             	sub    $0x4,%esp
+ 38e:	6a 01                	push   $0x1
+ 390:	50                   	push   %eax
+ 391:	6a 00                	push   $0x0
+ 393:	e8 32 01 00 00       	call   4ca <read>
+    if(cc < 1)
+ 398:	83 c4 10             	add    $0x10,%esp
+ 39b:	85 c0                	test   %eax,%eax
+ 39d:	7e 1c                	jle    3bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 39f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 3a3:	83 c7 01             	add    $0x1,%edi
+ 3a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 3a9:	3c 0a                	cmp    $0xa,%al
+ 3ab:	74 23                	je     3d0 <gets+0x60>
+ 3ad:	3c 0d                	cmp    $0xd,%al
+ 3af:	74 1f                	je     3d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 3b1:	83 c3 01             	add    $0x1,%ebx
+ 3b4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 3b7:	89 fe                	mov    %edi,%esi
+ 3b9:	7c cd                	jl     388 <gets+0x18>
+ 3bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 3bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 3c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 3c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3c6:	5b                   	pop    %ebx
+ 3c7:	5e                   	pop    %esi
+ 3c8:	5f                   	pop    %edi
+ 3c9:	5d                   	pop    %ebp
+ 3ca:	c3                   	ret    
+ 3cb:	90                   	nop
+ 3cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 3d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3d6:	01 de                	add    %ebx,%esi
+ 3d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 3da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 3dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3e0:	5b                   	pop    %ebx
+ 3e1:	5e                   	pop    %esi
+ 3e2:	5f                   	pop    %edi
+ 3e3:	5d                   	pop    %ebp
+ 3e4:	c3                   	ret    
+ 3e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	56                   	push   %esi
+ 3f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 3f5:	83 ec 08             	sub    $0x8,%esp
+ 3f8:	6a 00                	push   $0x0
+ 3fa:	ff 75 08             	pushl  0x8(%ebp)
+ 3fd:	e8 f0 00 00 00       	call   4f2 <open>
+  if(fd < 0)
+ 402:	83 c4 10             	add    $0x10,%esp
+ 405:	85 c0                	test   %eax,%eax
+ 407:	78 27                	js     430 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 409:	83 ec 08             	sub    $0x8,%esp
+ 40c:	ff 75 0c             	pushl  0xc(%ebp)
+ 40f:	89 c3                	mov    %eax,%ebx
+ 411:	50                   	push   %eax
+ 412:	e8 f3 00 00 00       	call   50a <fstat>
+  close(fd);
+ 417:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 41a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 41c:	e8 b9 00 00 00       	call   4da <close>
+  return r;
+ 421:	83 c4 10             	add    $0x10,%esp
+}
+ 424:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 427:	89 f0                	mov    %esi,%eax
+ 429:	5b                   	pop    %ebx
+ 42a:	5e                   	pop    %esi
+ 42b:	5d                   	pop    %ebp
+ 42c:	c3                   	ret    
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 430:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 435:	eb ed                	jmp    424 <stat+0x34>
+ 437:	89 f6                	mov    %esi,%esi
+ 439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000440 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	53                   	push   %ebx
+ 444:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 447:	0f be 11             	movsbl (%ecx),%edx
+ 44a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 44d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 44f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 454:	77 1f                	ja     475 <atoi+0x35>
+ 456:	8d 76 00             	lea    0x0(%esi),%esi
+ 459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 460:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 463:	83 c1 01             	add    $0x1,%ecx
+ 466:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 46a:	0f be 11             	movsbl (%ecx),%edx
+ 46d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 470:	80 fb 09             	cmp    $0x9,%bl
+ 473:	76 eb                	jbe    460 <atoi+0x20>
+  return n;
+}
+ 475:	5b                   	pop    %ebx
+ 476:	5d                   	pop    %ebp
+ 477:	c3                   	ret    
+ 478:	90                   	nop
+ 479:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000480 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	56                   	push   %esi
+ 484:	53                   	push   %ebx
+ 485:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 488:	8b 45 08             	mov    0x8(%ebp),%eax
+ 48b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 48e:	85 db                	test   %ebx,%ebx
+ 490:	7e 14                	jle    4a6 <memmove+0x26>
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 498:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 49c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 49f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 4a2:	39 d3                	cmp    %edx,%ebx
+ 4a4:	75 f2                	jne    498 <memmove+0x18>
+  return vdst;
+}
+ 4a6:	5b                   	pop    %ebx
+ 4a7:	5e                   	pop    %esi
+ 4a8:	5d                   	pop    %ebp
+ 4a9:	c3                   	ret    
+
+000004aa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 4aa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 4af:	cd 40                	int    $0x40
+ 4b1:	c3                   	ret    
+
+000004b2 <exit>:
+SYSCALL(exit)
+ 4b2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 4b7:	cd 40                	int    $0x40
+ 4b9:	c3                   	ret    
+
+000004ba <wait>:
+SYSCALL(wait)
+ 4ba:	b8 03 00 00 00       	mov    $0x3,%eax
+ 4bf:	cd 40                	int    $0x40
+ 4c1:	c3                   	ret    
+
+000004c2 <pipe>:
+SYSCALL(pipe)
+ 4c2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 4c7:	cd 40                	int    $0x40
+ 4c9:	c3                   	ret    
+
+000004ca <read>:
+SYSCALL(read)
+ 4ca:	b8 05 00 00 00       	mov    $0x5,%eax
+ 4cf:	cd 40                	int    $0x40
+ 4d1:	c3                   	ret    
+
+000004d2 <write>:
+SYSCALL(write)
+ 4d2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 4d7:	cd 40                	int    $0x40
+ 4d9:	c3                   	ret    
+
+000004da <close>:
+SYSCALL(close)
+ 4da:	b8 15 00 00 00       	mov    $0x15,%eax
+ 4df:	cd 40                	int    $0x40
+ 4e1:	c3                   	ret    
+
+000004e2 <kill>:
+SYSCALL(kill)
+ 4e2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 4e7:	cd 40                	int    $0x40
+ 4e9:	c3                   	ret    
+
+000004ea <exec>:
+SYSCALL(exec)
+ 4ea:	b8 07 00 00 00       	mov    $0x7,%eax
+ 4ef:	cd 40                	int    $0x40
+ 4f1:	c3                   	ret    
+
+000004f2 <open>:
+SYSCALL(open)
+ 4f2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 4f7:	cd 40                	int    $0x40
+ 4f9:	c3                   	ret    
+
+000004fa <mknod>:
+SYSCALL(mknod)
+ 4fa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 4ff:	cd 40                	int    $0x40
+ 501:	c3                   	ret    
+
+00000502 <unlink>:
+SYSCALL(unlink)
+ 502:	b8 12 00 00 00       	mov    $0x12,%eax
+ 507:	cd 40                	int    $0x40
+ 509:	c3                   	ret    
+
+0000050a <fstat>:
+SYSCALL(fstat)
+ 50a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 50f:	cd 40                	int    $0x40
+ 511:	c3                   	ret    
+
+00000512 <link>:
+SYSCALL(link)
+ 512:	b8 13 00 00 00       	mov    $0x13,%eax
+ 517:	cd 40                	int    $0x40
+ 519:	c3                   	ret    
+
+0000051a <mkdir>:
+SYSCALL(mkdir)
+ 51a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 51f:	cd 40                	int    $0x40
+ 521:	c3                   	ret    
+
+00000522 <chdir>:
+SYSCALL(chdir)
+ 522:	b8 09 00 00 00       	mov    $0x9,%eax
+ 527:	cd 40                	int    $0x40
+ 529:	c3                   	ret    
+
+0000052a <dup>:
+SYSCALL(dup)
+ 52a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 52f:	cd 40                	int    $0x40
+ 531:	c3                   	ret    
+
+00000532 <getpid>:
+SYSCALL(getpid)
+ 532:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 537:	cd 40                	int    $0x40
+ 539:	c3                   	ret    
+
+0000053a <sbrk>:
+SYSCALL(sbrk)
+ 53a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 53f:	cd 40                	int    $0x40
+ 541:	c3                   	ret    
+
+00000542 <sleep>:
+SYSCALL(sleep)
+ 542:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 547:	cd 40                	int    $0x40
+ 549:	c3                   	ret    
+
+0000054a <uptime>:
+SYSCALL(uptime)
+ 54a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 54f:	cd 40                	int    $0x40
+ 551:	c3                   	ret    
+
+00000552 <getNumProc>:
+SYSCALL(getNumProc)
+ 552:	b8 16 00 00 00       	mov    $0x16,%eax
+ 557:	cd 40                	int    $0x40
+ 559:	c3                   	ret    
+
+0000055a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 55a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 55f:	cd 40                	int    $0x40
+ 561:	c3                   	ret    
+
+00000562 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 562:	b8 18 00 00 00       	mov    $0x18,%eax
+ 567:	cd 40                	int    $0x40
+ 569:	c3                   	ret    
+
+0000056a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 56a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 56f:	cd 40                	int    $0x40
+ 571:	c3                   	ret    
+
+00000572 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 572:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 577:	cd 40                	int    $0x40
+ 579:	c3                   	ret    
+
+0000057a <process_state>:
+SYSCALL(process_state)
+ 57a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 582:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <inc_cpucounter>:
+ 58a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+ 592:	66 90                	xchg   %ax,%ax
+ 594:	66 90                	xchg   %ax,%ax
+ 596:	66 90                	xchg   %ax,%ax
+ 598:	66 90                	xchg   %ax,%ax
+ 59a:	66 90                	xchg   %ax,%ax
+ 59c:	66 90                	xchg   %ax,%ax
+ 59e:	66 90                	xchg   %ax,%ax
+
+000005a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 5a0:	55                   	push   %ebp
+ 5a1:	89 e5                	mov    %esp,%ebp
+ 5a3:	57                   	push   %edi
+ 5a4:	56                   	push   %esi
+ 5a5:	53                   	push   %ebx
+ 5a6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 5a9:	85 d2                	test   %edx,%edx
+{
+ 5ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 5ae:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 5b0:	79 76                	jns    628 <printint+0x88>
+ 5b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 5b6:	74 70                	je     628 <printint+0x88>
+    x = -xx;
+ 5b8:	f7 d8                	neg    %eax
+    neg = 1;
+ 5ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 5c1:	31 f6                	xor    %esi,%esi
+ 5c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 5c6:	eb 0a                	jmp    5d2 <printint+0x32>
+ 5c8:	90                   	nop
+ 5c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 5d0:	89 fe                	mov    %edi,%esi
+ 5d2:	31 d2                	xor    %edx,%edx
+ 5d4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 5d7:	f7 f1                	div    %ecx
+ 5d9:	0f b6 92 a0 0a 00 00 	movzbl 0xaa0(%edx),%edx
+  }while((x /= base) != 0);
+ 5e0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 5e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 5e5:	75 e9                	jne    5d0 <printint+0x30>
+  if(neg)
+ 5e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 5ea:	85 c0                	test   %eax,%eax
+ 5ec:	74 08                	je     5f6 <printint+0x56>
+    buf[i++] = '-';
+ 5ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 5f3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 5f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 5fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 600:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 603:	83 ec 04             	sub    $0x4,%esp
+ 606:	83 ee 01             	sub    $0x1,%esi
+ 609:	6a 01                	push   $0x1
+ 60b:	53                   	push   %ebx
+ 60c:	57                   	push   %edi
+ 60d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 610:	e8 bd fe ff ff       	call   4d2 <write>
+
+  while(--i >= 0)
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	39 de                	cmp    %ebx,%esi
+ 61a:	75 e4                	jne    600 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 61c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 61f:	5b                   	pop    %ebx
+ 620:	5e                   	pop    %esi
+ 621:	5f                   	pop    %edi
+ 622:	5d                   	pop    %ebp
+ 623:	c3                   	ret    
+ 624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 628:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 62f:	eb 90                	jmp    5c1 <printint+0x21>
+ 631:	eb 0d                	jmp    640 <printf>
+ 633:	90                   	nop
+ 634:	90                   	nop
+ 635:	90                   	nop
+ 636:	90                   	nop
+ 637:	90                   	nop
+ 638:	90                   	nop
+ 639:	90                   	nop
+ 63a:	90                   	nop
+ 63b:	90                   	nop
+ 63c:	90                   	nop
+ 63d:	90                   	nop
+ 63e:	90                   	nop
+ 63f:	90                   	nop
+
+00000640 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+ 646:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 649:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 64c:	0f b6 1e             	movzbl (%esi),%ebx
+ 64f:	84 db                	test   %bl,%bl
+ 651:	0f 84 b3 00 00 00    	je     70a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 657:	8d 45 10             	lea    0x10(%ebp),%eax
+ 65a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 65d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 65f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 662:	eb 2f                	jmp    693 <printf+0x53>
+ 664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 668:	83 f8 25             	cmp    $0x25,%eax
+ 66b:	0f 84 a7 00 00 00    	je     718 <printf+0xd8>
+  write(fd, &c, 1);
+ 671:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 674:	83 ec 04             	sub    $0x4,%esp
+ 677:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 67a:	6a 01                	push   $0x1
+ 67c:	50                   	push   %eax
+ 67d:	ff 75 08             	pushl  0x8(%ebp)
+ 680:	e8 4d fe ff ff       	call   4d2 <write>
+ 685:	83 c4 10             	add    $0x10,%esp
+ 688:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 68b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 68f:	84 db                	test   %bl,%bl
+ 691:	74 77                	je     70a <printf+0xca>
+    if(state == 0){
+ 693:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 695:	0f be cb             	movsbl %bl,%ecx
+ 698:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 69b:	74 cb                	je     668 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 69d:	83 ff 25             	cmp    $0x25,%edi
+ 6a0:	75 e6                	jne    688 <printf+0x48>
+      if(c == 'd'){
+ 6a2:	83 f8 64             	cmp    $0x64,%eax
+ 6a5:	0f 84 05 01 00 00    	je     7b0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 6ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 6b1:	83 f9 70             	cmp    $0x70,%ecx
+ 6b4:	74 72                	je     728 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 6b6:	83 f8 73             	cmp    $0x73,%eax
+ 6b9:	0f 84 99 00 00 00    	je     758 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 6bf:	83 f8 63             	cmp    $0x63,%eax
+ 6c2:	0f 84 08 01 00 00    	je     7d0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 6c8:	83 f8 25             	cmp    $0x25,%eax
+ 6cb:	0f 84 ef 00 00 00    	je     7c0 <printf+0x180>
+  write(fd, &c, 1);
+ 6d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 6d4:	83 ec 04             	sub    $0x4,%esp
+ 6d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 6db:	6a 01                	push   $0x1
+ 6dd:	50                   	push   %eax
+ 6de:	ff 75 08             	pushl  0x8(%ebp)
+ 6e1:	e8 ec fd ff ff       	call   4d2 <write>
+ 6e6:	83 c4 0c             	add    $0xc,%esp
+ 6e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 6ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 6ef:	6a 01                	push   $0x1
+ 6f1:	50                   	push   %eax
+ 6f2:	ff 75 08             	pushl  0x8(%ebp)
+ 6f5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 6f8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 6fa:	e8 d3 fd ff ff       	call   4d2 <write>
+  for(i = 0; fmt[i]; i++){
+ 6ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 703:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 706:	84 db                	test   %bl,%bl
+ 708:	75 89                	jne    693 <printf+0x53>
+    }
+  }
+}
+ 70a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70d:	5b                   	pop    %ebx
+ 70e:	5e                   	pop    %esi
+ 70f:	5f                   	pop    %edi
+ 710:	5d                   	pop    %ebp
+ 711:	c3                   	ret    
+ 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 718:	bf 25 00 00 00       	mov    $0x25,%edi
+ 71d:	e9 66 ff ff ff       	jmp    688 <printf+0x48>
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 728:	83 ec 0c             	sub    $0xc,%esp
+ 72b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 730:	6a 00                	push   $0x0
+ 732:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 735:	8b 45 08             	mov    0x8(%ebp),%eax
+ 738:	8b 17                	mov    (%edi),%edx
+ 73a:	e8 61 fe ff ff       	call   5a0 <printint>
+        ap++;
+ 73f:	89 f8                	mov    %edi,%eax
+ 741:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 744:	31 ff                	xor    %edi,%edi
+        ap++;
+ 746:	83 c0 04             	add    $0x4,%eax
+ 749:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 74c:	e9 37 ff ff ff       	jmp    688 <printf+0x48>
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 758:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 75b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 75d:	83 c0 04             	add    $0x4,%eax
+ 760:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 763:	85 c9                	test   %ecx,%ecx
+ 765:	0f 84 8e 00 00 00    	je     7f9 <printf+0x1b9>
+        while(*s != 0){
+ 76b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 76e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 770:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 772:	84 c0                	test   %al,%al
+ 774:	0f 84 0e ff ff ff    	je     688 <printf+0x48>
+ 77a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 77d:	89 de                	mov    %ebx,%esi
+ 77f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 782:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 785:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 788:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 78b:	83 c6 01             	add    $0x1,%esi
+ 78e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 791:	6a 01                	push   $0x1
+ 793:	57                   	push   %edi
+ 794:	53                   	push   %ebx
+ 795:	e8 38 fd ff ff       	call   4d2 <write>
+        while(*s != 0){
+ 79a:	0f b6 06             	movzbl (%esi),%eax
+ 79d:	83 c4 10             	add    $0x10,%esp
+ 7a0:	84 c0                	test   %al,%al
+ 7a2:	75 e4                	jne    788 <printf+0x148>
+ 7a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 7a7:	31 ff                	xor    %edi,%edi
+ 7a9:	e9 da fe ff ff       	jmp    688 <printf+0x48>
+ 7ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 7b0:	83 ec 0c             	sub    $0xc,%esp
+ 7b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 7b8:	6a 01                	push   $0x1
+ 7ba:	e9 73 ff ff ff       	jmp    732 <printf+0xf2>
+ 7bf:	90                   	nop
+  write(fd, &c, 1);
+ 7c0:	83 ec 04             	sub    $0x4,%esp
+ 7c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 7c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 7c9:	6a 01                	push   $0x1
+ 7cb:	e9 21 ff ff ff       	jmp    6f1 <printf+0xb1>
+        putc(fd, *ap);
+ 7d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 7d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 7d6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 7d8:	6a 01                	push   $0x1
+        ap++;
+ 7da:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 7dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 7e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 7e3:	50                   	push   %eax
+ 7e4:	ff 75 08             	pushl  0x8(%ebp)
+ 7e7:	e8 e6 fc ff ff       	call   4d2 <write>
+        ap++;
+ 7ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 7ef:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7f2:	31 ff                	xor    %edi,%edi
+ 7f4:	e9 8f fe ff ff       	jmp    688 <printf+0x48>
+          s = "(null)";
+ 7f9:	bb 98 0a 00 00       	mov    $0xa98,%ebx
+        while(*s != 0){
+ 7fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 803:	e9 72 ff ff ff       	jmp    77a <printf+0x13a>
+ 808:	66 90                	xchg   %ax,%ax
+ 80a:	66 90                	xchg   %ax,%ax
+ 80c:	66 90                	xchg   %ax,%ax
+ 80e:	66 90                	xchg   %ax,%ax
+
+00000810 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 810:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 811:	a1 94 0d 00 00       	mov    0xd94,%eax
+{
+ 816:	89 e5                	mov    %esp,%ebp
+ 818:	57                   	push   %edi
+ 819:	56                   	push   %esi
+ 81a:	53                   	push   %ebx
+ 81b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 81e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 828:	39 c8                	cmp    %ecx,%eax
+ 82a:	8b 10                	mov    (%eax),%edx
+ 82c:	73 32                	jae    860 <free+0x50>
+ 82e:	39 d1                	cmp    %edx,%ecx
+ 830:	72 04                	jb     836 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 832:	39 d0                	cmp    %edx,%eax
+ 834:	72 32                	jb     868 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 836:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 839:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 83c:	39 fa                	cmp    %edi,%edx
+ 83e:	74 30                	je     870 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 840:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 843:	8b 50 04             	mov    0x4(%eax),%edx
+ 846:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 849:	39 f1                	cmp    %esi,%ecx
+ 84b:	74 3a                	je     887 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 84d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 84f:	a3 94 0d 00 00       	mov    %eax,0xd94
+}
+ 854:	5b                   	pop    %ebx
+ 855:	5e                   	pop    %esi
+ 856:	5f                   	pop    %edi
+ 857:	5d                   	pop    %ebp
+ 858:	c3                   	ret    
+ 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 860:	39 d0                	cmp    %edx,%eax
+ 862:	72 04                	jb     868 <free+0x58>
+ 864:	39 d1                	cmp    %edx,%ecx
+ 866:	72 ce                	jb     836 <free+0x26>
+{
+ 868:	89 d0                	mov    %edx,%eax
+ 86a:	eb bc                	jmp    828 <free+0x18>
+ 86c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 870:	03 72 04             	add    0x4(%edx),%esi
+ 873:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 876:	8b 10                	mov    (%eax),%edx
+ 878:	8b 12                	mov    (%edx),%edx
+ 87a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 87d:	8b 50 04             	mov    0x4(%eax),%edx
+ 880:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 883:	39 f1                	cmp    %esi,%ecx
+ 885:	75 c6                	jne    84d <free+0x3d>
+    p->s.size += bp->s.size;
+ 887:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 88a:	a3 94 0d 00 00       	mov    %eax,0xd94
+    p->s.size += bp->s.size;
+ 88f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 892:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 895:	89 10                	mov    %edx,(%eax)
+}
+ 897:	5b                   	pop    %ebx
+ 898:	5e                   	pop    %esi
+ 899:	5f                   	pop    %edi
+ 89a:	5d                   	pop    %ebp
+ 89b:	c3                   	ret    
+ 89c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000008a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 8a0:	55                   	push   %ebp
+ 8a1:	89 e5                	mov    %esp,%ebp
+ 8a3:	57                   	push   %edi
+ 8a4:	56                   	push   %esi
+ 8a5:	53                   	push   %ebx
+ 8a6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 8ac:	8b 15 94 0d 00 00    	mov    0xd94,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8b2:	8d 78 07             	lea    0x7(%eax),%edi
+ 8b5:	c1 ef 03             	shr    $0x3,%edi
+ 8b8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 8bb:	85 d2                	test   %edx,%edx
+ 8bd:	0f 84 9d 00 00 00    	je     960 <malloc+0xc0>
+ 8c3:	8b 02                	mov    (%edx),%eax
+ 8c5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 8c8:	39 cf                	cmp    %ecx,%edi
+ 8ca:	76 6c                	jbe    938 <malloc+0x98>
+ 8cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 8d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 8d7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 8da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 8e1:	eb 0e                	jmp    8f1 <malloc+0x51>
+ 8e3:	90                   	nop
+ 8e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8e8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 8ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 8ed:	39 f9                	cmp    %edi,%ecx
+ 8ef:	73 47                	jae    938 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 8f1:	39 05 94 0d 00 00    	cmp    %eax,0xd94
+ 8f7:	89 c2                	mov    %eax,%edx
+ 8f9:	75 ed                	jne    8e8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 8fb:	83 ec 0c             	sub    $0xc,%esp
+ 8fe:	56                   	push   %esi
+ 8ff:	e8 36 fc ff ff       	call   53a <sbrk>
+  if(p == (char*)-1)
+ 904:	83 c4 10             	add    $0x10,%esp
+ 907:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 90a:	74 1c                	je     928 <malloc+0x88>
+  hp->s.size = nu;
+ 90c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 90f:	83 ec 0c             	sub    $0xc,%esp
+ 912:	83 c0 08             	add    $0x8,%eax
+ 915:	50                   	push   %eax
+ 916:	e8 f5 fe ff ff       	call   810 <free>
+  return freep;
+ 91b:	8b 15 94 0d 00 00    	mov    0xd94,%edx
+      if((p = morecore(nunits)) == 0)
+ 921:	83 c4 10             	add    $0x10,%esp
+ 924:	85 d2                	test   %edx,%edx
+ 926:	75 c0                	jne    8e8 <malloc+0x48>
+        return 0;
+  }
+}
+ 928:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 92b:	31 c0                	xor    %eax,%eax
+}
+ 92d:	5b                   	pop    %ebx
+ 92e:	5e                   	pop    %esi
+ 92f:	5f                   	pop    %edi
+ 930:	5d                   	pop    %ebp
+ 931:	c3                   	ret    
+ 932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 938:	39 cf                	cmp    %ecx,%edi
+ 93a:	74 54                	je     990 <malloc+0xf0>
+        p->s.size -= nunits;
+ 93c:	29 f9                	sub    %edi,%ecx
+ 93e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 941:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 944:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 947:	89 15 94 0d 00 00    	mov    %edx,0xd94
+}
+ 94d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 950:	83 c0 08             	add    $0x8,%eax
+}
+ 953:	5b                   	pop    %ebx
+ 954:	5e                   	pop    %esi
+ 955:	5f                   	pop    %edi
+ 956:	5d                   	pop    %ebp
+ 957:	c3                   	ret    
+ 958:	90                   	nop
+ 959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 960:	c7 05 94 0d 00 00 98 	movl   $0xd98,0xd94
+ 967:	0d 00 00 
+ 96a:	c7 05 98 0d 00 00 98 	movl   $0xd98,0xd98
+ 971:	0d 00 00 
+    base.s.size = 0;
+ 974:	b8 98 0d 00 00       	mov    $0xd98,%eax
+ 979:	c7 05 9c 0d 00 00 00 	movl   $0x0,0xd9c
+ 980:	00 00 00 
+ 983:	e9 44 ff ff ff       	jmp    8cc <malloc+0x2c>
+ 988:	90                   	nop
+ 989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 990:	8b 08                	mov    (%eax),%ecx
+ 992:	89 0a                	mov    %ecx,(%edx)
+ 994:	eb b1                	jmp    947 <malloc+0xa7>
diff -ruN xv6org/test_sched.c xv6mhybrid/test_sched.c
--- xv6org/test_sched.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_sched.c	2020-10-15 15:18:39.593215000 +0530
@@ -0,0 +1,118 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+#include "fcntl.h"
+
+// CPU bound process
+void
+random_computation()
+{
+    float a = 0, b=0;
+
+    while(b<1000000)
+    {
+        if((int)b%2 == 0)
+            a = a - (1.5*2.6);
+        else
+            a = a+ 1.6*4.9;
+        b+=1;
+    }
+}
+
+// I/O bound process
+void
+random_io()
+{
+    int i=150;
+    while(i--)
+    {
+        printf(1,"$");
+    }
+    sleep(3);
+    printf(1, "\n");
+}
+
+int 
+main(int argc, char *argv[])
+{
+
+
+    // This code is for test case 3 and 4.
+    // To run this code for test case 1, change random_computation to random_io in else block.
+    // To run this code for test case 2, change random_io to random_computation in else block.
+    int n;
+    n = atoi(argv[1]);
+    if (argc < 2) n=5;
+    int burst_time=0;
+    int pids[n];
+    int returnOrder[n];    // to store completiton order
+    int map[500];          // to map process id to child number
+    int rand_bt[20] = {20, 17, 1, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+    int i=0;
+    while(i<n)
+    {
+        if(i==2 || i==4 || i==9 || i==14)
+        {
+            int id = fork();
+            if (id == 0)
+            {
+                burst_time = rand_bt[i];
+                set_burst_time(burst_time);
+                random_io();
+                exit();    
+            }
+            else if (id < 0)
+            {
+                printf(1, "Error!! Could not be forked. \n");
+                exit();
+            }
+            else
+            {
+                pids[i] = id;
+                map[id]=i;
+            }
+        }
+        else
+        {
+            int id = fork();
+            if (id == 0)
+            {
+                burst_time = rand_bt[i];
+                set_burst_time(burst_time);
+                random_io();
+                exit();    
+            }
+            else if (id < 0)
+            {
+                printf(1, "Error!! Could not be forked. \n");
+                exit();
+            }
+            else
+            {
+                pids[i] = id;
+                map[id]=i;
+            }
+        }
+        
+        i++;
+    }
+
+    for (int i = 0; i < n; i++)
+    {
+        returnOrder[i] = wait();
+    }
+    printf(1, "Child No.\tPID\t\t Burst Time     \n");
+    for (int i = 0; i < n; i++)
+    {
+        printf(1, "%d\t\t %d\t\t %d  \n", i+1, pids[i], rand_bt[i]);
+    }
+    printf(1, "\nCompletion Order: \n");
+    printf(1, "PID\t\t Burst Time     \n");
+    for (int i = 0; i < n; i++){
+        printf(1, "%d\t\t %d  \n", returnOrder[i], rand_bt[map[returnOrder[i]]]);
+        
+    }
+    exit();
+}
+
diff -ruN xv6org/test_sched.d xv6mhybrid/test_sched.d
--- xv6org/test_sched.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_sched.d	2020-10-15 19:50:35.805635465 +0530
@@ -0,0 +1,2 @@
+test_sched.o: test_sched.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h processInfo.h fcntl.h
Binary files xv6org/test_sched.o and xv6mhybrid/test_sched.o differ
diff -ruN xv6org/test_sched.sym xv6mhybrid/test_sched.sym
--- xv6org/test_sched.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_sched.sym	2020-10-15 19:50:35.821634426 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+000009a0 .rodata
+00000ab4 .eh_frame
+00000d94 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_sched.c
+00000000 ulib.c
+00000000 printf.c
+000005a0 printint
+00000aa0 digits.1056
+00000000 umalloc.c
+00000d94 freep
+00000d98 base
+00000260 strcpy
+00000640 printf
+00000480 memmove
+000004fa mknod
+00000370 gets
+00000532 getpid
+000008a0 malloc
+00000542 sleep
+00000572 get_burst_time
+000004c2 pipe
+000004d2 write
+0000050a fstat
+000004e2 kill
+0000057a process_state
+00000522 chdir
+00000210 random_io
+00000582 dec_burstTime
+000004ea exec
+000004ba wait
+0000058a inc_cpucounter
+000004ca read
+00000502 unlink
+000001f0 random_computation
+000004aa fork
+0000053a sbrk
+0000054a uptime
+00000d94 __bss_start
+00000310 memset
+00000000 main
+0000056a set_burst_time
+00000290 strcmp
+0000052a dup
+0000055a getMaxPid
+00000552 getNumProc
+00000562 getProcInfo
+000003f0 stat
+00000d94 _edata
+00000da0 _end
+00000512 link
+000004b2 exit
+00000440 atoi
+000002e0 strlen
+000004f2 open
+00000330 strchr
+0000051a mkdir
+000004da close
+00000810 free
Binary files xv6org/_test_scheduler and xv6mhybrid/_test_scheduler differ
diff -ruN xv6org/test_scheduler.asm xv6mhybrid/test_scheduler.asm
--- xv6org/test_scheduler.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_scheduler.asm	2020-10-15 19:50:35.773637542 +0530
@@ -0,0 +1,1471 @@
+
+_test_scheduler:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+    printf(1, "\n");
+}
+
+int 
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	81 ec 74 08 00 00    	sub    $0x874,%esp
+  17:	8b 41 04             	mov    0x4(%ecx),%eax
+  1a:	8b 31                	mov    (%ecx),%esi
+
+    // This code is for test case 3 and 4.
+    // To run this code for test case 1, change random_computation to random_io in else block.
+    // To run this code for test case 2, change random_io to random_computation in else block.
+    int n;
+    n = atoi(argv[1]);
+  1c:	ff 70 04             	pushl  0x4(%eax)
+  1f:	e8 6c 04 00 00       	call   490 <atoi>
+    if (argc < 2) n=5;
+  24:	83 c4 10             	add    $0x10,%esp
+  27:	83 fe 01             	cmp    $0x1,%esi
+  2a:	0f 8e bc 01 00 00    	jle    1ec <main+0x1ec>
+  30:	89 c3                	mov    %eax,%ebx
+    int burst_time=0;
+    int pids[n];
+  32:	8d 04 85 12 00 00 00 	lea    0x12(,%eax,4),%eax
+    int returnOrder[n];    // to store completiton order
+    int map[500];          // to map process id to child number
+    int rand_bt[20] = {20, 17, 2, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  39:	8d bd c8 f7 ff ff    	lea    -0x838(%ebp),%edi
+  3f:	be 80 0a 00 00       	mov    $0xa80,%esi
+  44:	b9 14 00 00 00       	mov    $0x14,%ecx
+    int pids[n];
+  49:	83 e0 f0             	and    $0xfffffff0,%eax
+    int rand_bt[20] = {20, 17, 2, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  4c:	89 bd 90 f7 ff ff    	mov    %edi,-0x870(%ebp)
+    int pids[n];
+  52:	29 c4                	sub    %eax,%esp
+  54:	89 a5 8c f7 ff ff    	mov    %esp,-0x874(%ebp)
+    int returnOrder[n];    // to store completiton order
+  5a:	29 c4                	sub    %eax,%esp
+    int i=0;
+    while(i<n)
+  5c:	85 db                	test   %ebx,%ebx
+    int returnOrder[n];    // to store completiton order
+  5e:	89 a5 88 f7 ff ff    	mov    %esp,-0x878(%ebp)
+    int rand_bt[20] = {20, 17, 2, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+  64:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+    while(i<n)
+  66:	0f 8e cd 01 00 00    	jle    239 <main+0x239>
+    if (argc < 2) n=5;
+  6c:	31 f6                	xor    %esi,%esi
+    {
+        if(i==2 || i==4 || i==9 || i==14)
+  6e:	89 9d 94 f7 ff ff    	mov    %ebx,-0x86c(%ebp)
+  74:	bf 14 42 00 00       	mov    $0x4214,%edi
+  79:	89 f3                	mov    %esi,%ebx
+  7b:	8b b5 8c f7 ff ff    	mov    -0x874(%ebp),%esi
+  81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  88:	83 fb 0e             	cmp    $0xe,%ebx
+  8b:	0f 8e ef 00 00 00    	jle    180 <main+0x180>
+                map[id]=i;
+            }
+        }
+        else
+        {
+            int id = fork();
+  91:	e8 64 04 00 00       	call   4fa <fork>
+            if (id == 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	0f 84 26 01 00 00    	je     1c4 <main+0x1c4>
+            else if (id < 0)
+  9e:	0f 88 82 01 00 00    	js     226 <main+0x226>
+                printf(1, "Error!! Could not be forked. \n");
+                exit();
+            }
+            else
+            {
+                pids[i] = id;
+  a4:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
+                map[id]=i;
+  a7:	89 9c 85 18 f8 ff ff 	mov    %ebx,-0x7e8(%ebp,%eax,4)
+            }
+        }
+        
+        i++;
+  ae:	83 c3 01             	add    $0x1,%ebx
+    while(i<n)
+  b1:	3b 9d 94 f7 ff ff    	cmp    -0x86c(%ebp),%ebx
+  b7:	7c cf                	jl     88 <main+0x88>
+  b9:	8b 9d 94 f7 ff ff    	mov    -0x86c(%ebp),%ebx
+    }
+
+    for (int i = 0; i < n; i++)
+  bf:	8b bd 88 f7 ff ff    	mov    -0x878(%ebp),%edi
+  c5:	31 f6                	xor    %esi,%esi
+  c7:	89 f6                	mov    %esi,%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    {
+        returnOrder[i] = wait();
+  d0:	e8 35 04 00 00       	call   50a <wait>
+  d5:	89 04 b7             	mov    %eax,(%edi,%esi,4)
+    for (int i = 0; i < n; i++)
+  d8:	83 c6 01             	add    $0x1,%esi
+  db:	39 de                	cmp    %ebx,%esi
+  dd:	7c f1                	jl     d0 <main+0xd0>
+    }
+    printf(1, "Child No.\tPID\t\t Burst Time     \n");
+  df:	56                   	push   %esi
+  e0:	56                   	push   %esi
+  e1:	31 f6                	xor    %esi,%esi
+  e3:	68 5c 0a 00 00       	push   $0xa5c
+  e8:	6a 01                	push   $0x1
+  ea:	e8 a1 05 00 00       	call   690 <printf>
+  ef:	8b bd 8c f7 ff ff    	mov    -0x874(%ebp),%edi
+  f5:	83 c4 10             	add    $0x10,%esp
+  f8:	90                   	nop
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    for (int i = 0; i < n; i++)
+    {
+        printf(1, "%d\t\t %d\t\t %d  \n", i+1, pids[i], rand_bt[i]);
+ 100:	8b 85 90 f7 ff ff    	mov    -0x870(%ebp),%eax
+ 106:	83 ec 0c             	sub    $0xc,%esp
+ 109:	89 f2                	mov    %esi,%edx
+ 10b:	83 c6 01             	add    $0x1,%esi
+ 10e:	ff 34 90             	pushl  (%eax,%edx,4)
+ 111:	ff 34 97             	pushl  (%edi,%edx,4)
+ 114:	56                   	push   %esi
+ 115:	68 2c 0a 00 00       	push   $0xa2c
+ 11a:	6a 01                	push   $0x1
+ 11c:	e8 6f 05 00 00       	call   690 <printf>
+    for (int i = 0; i < n; i++)
+ 121:	83 c4 20             	add    $0x20,%esp
+ 124:	39 de                	cmp    %ebx,%esi
+ 126:	7c d8                	jl     100 <main+0x100>
+    }
+    printf(1, "\nCompletion Order: \n");
+ 128:	50                   	push   %eax
+ 129:	50                   	push   %eax
+    printf(1, "PID\t\t Burst Time     \n");
+    for (int i = 0; i < n; i++){
+ 12a:	31 f6                	xor    %esi,%esi
+    printf(1, "\nCompletion Order: \n");
+ 12c:	68 00 0a 00 00       	push   $0xa00
+ 131:	6a 01                	push   $0x1
+ 133:	e8 58 05 00 00       	call   690 <printf>
+    printf(1, "PID\t\t Burst Time     \n");
+ 138:	5a                   	pop    %edx
+ 139:	59                   	pop    %ecx
+ 13a:	68 15 0a 00 00       	push   $0xa15
+ 13f:	6a 01                	push   $0x1
+ 141:	e8 4a 05 00 00       	call   690 <printf>
+ 146:	8b bd 88 f7 ff ff    	mov    -0x878(%ebp),%edi
+ 14c:	83 c4 10             	add    $0x10,%esp
+ 14f:	90                   	nop
+        printf(1, "%d\t\t %d  \n", returnOrder[i], rand_bt[map[returnOrder[i]]]);
+ 150:	8b 04 b7             	mov    (%edi,%esi,4),%eax
+    for (int i = 0; i < n; i++){
+ 153:	83 c6 01             	add    $0x1,%esi
+        printf(1, "%d\t\t %d  \n", returnOrder[i], rand_bt[map[returnOrder[i]]]);
+ 156:	8b 94 85 18 f8 ff ff 	mov    -0x7e8(%ebp,%eax,4),%edx
+ 15d:	ff b4 95 c8 f7 ff ff 	pushl  -0x838(%ebp,%edx,4)
+ 164:	50                   	push   %eax
+ 165:	68 31 0a 00 00       	push   $0xa31
+ 16a:	6a 01                	push   $0x1
+ 16c:	e8 1f 05 00 00       	call   690 <printf>
+    for (int i = 0; i < n; i++){
+ 171:	83 c4 10             	add    $0x10,%esp
+ 174:	39 de                	cmp    %ebx,%esi
+ 176:	7c d8                	jl     150 <main+0x150>
+                exit();    
+ 178:	e8 85 03 00 00       	call   502 <exit>
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+        if(i==2 || i==4 || i==9 || i==14)
+ 180:	0f a3 df             	bt     %ebx,%edi
+ 183:	0f 83 08 ff ff ff    	jae    91 <main+0x91>
+            int id = fork();
+ 189:	e8 6c 03 00 00       	call   4fa <fork>
+            if (id == 0)
+ 18e:	85 c0                	test   %eax,%eax
+ 190:	0f 85 08 ff ff ff    	jne    9e <main+0x9e>
+                set_burst_time(burst_time);
+ 196:	83 ec 0c             	sub    $0xc,%esp
+ 199:	ff b4 9d c8 f7 ff ff 	pushl  -0x838(%ebp,%ebx,4)
+ 1a0:	e8 15 04 00 00       	call   5ba <set_burst_time>
+    float a = 0, b=0;
+ 1a5:	d9 ee                	fldz   
+                set_burst_time(burst_time);
+ 1a7:	83 c4 10             	add    $0x10,%esp
+ 1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        b+=1;
+ 1b0:	d8 05 d0 0a 00 00    	fadds  0xad0
+    while(b<1000000)
+ 1b6:	d9 05 d4 0a 00 00    	flds   0xad4
+ 1bc:	df e9                	fucomip %st(1),%st
+ 1be:	77 f0                	ja     1b0 <main+0x1b0>
+ 1c0:	dd d8                	fstp   %st(0)
+ 1c2:	eb b4                	jmp    178 <main+0x178>
+                set_burst_time(burst_time);
+ 1c4:	83 ec 0c             	sub    $0xc,%esp
+ 1c7:	ff b4 9d c8 f7 ff ff 	pushl  -0x838(%ebp,%ebx,4)
+ 1ce:	e8 e7 03 00 00       	call   5ba <set_burst_time>
+    float a = 0, b=0;
+ 1d3:	d9 ee                	fldz   
+                set_burst_time(burst_time);
+ 1d5:	83 c4 10             	add    $0x10,%esp
+        b+=1;
+ 1d8:	d8 05 d0 0a 00 00    	fadds  0xad0
+    while(b<1000000)
+ 1de:	d9 05 d4 0a 00 00    	flds   0xad4
+ 1e4:	df e9                	fucomip %st(1),%st
+ 1e6:	77 f0                	ja     1d8 <main+0x1d8>
+ 1e8:	dd d8                	fstp   %st(0)
+ 1ea:	eb 8c                	jmp    178 <main+0x178>
+    int returnOrder[n];    // to store completiton order
+ 1ec:	8d 85 b4 f7 ff ff    	lea    -0x84c(%ebp),%eax
+    int rand_bt[20] = {20, 17, 2, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+ 1f2:	8d bd c8 f7 ff ff    	lea    -0x838(%ebp),%edi
+ 1f8:	be 80 0a 00 00       	mov    $0xa80,%esi
+ 1fd:	b9 14 00 00 00       	mov    $0x14,%ecx
+    if (argc < 2) n=5;
+ 202:	bb 05 00 00 00       	mov    $0x5,%ebx
+    int returnOrder[n];    // to store completiton order
+ 207:	89 85 88 f7 ff ff    	mov    %eax,-0x878(%ebp)
+    int pids[n];
+ 20d:	8d 85 a0 f7 ff ff    	lea    -0x860(%ebp),%eax
+    int rand_bt[20] = {20, 17, 2, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+ 213:	89 bd 90 f7 ff ff    	mov    %edi,-0x870(%ebp)
+ 219:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+    int pids[n];
+ 21b:	89 85 8c f7 ff ff    	mov    %eax,-0x874(%ebp)
+ 221:	e9 46 fe ff ff       	jmp    6c <main+0x6c>
+                printf(1, "Error!! Could not be forked. \n");
+ 226:	56                   	push   %esi
+ 227:	56                   	push   %esi
+ 228:	68 3c 0a 00 00       	push   $0xa3c
+ 22d:	6a 01                	push   $0x1
+ 22f:	e8 5c 04 00 00       	call   690 <printf>
+                exit();
+ 234:	e8 c9 02 00 00       	call   502 <exit>
+    printf(1, "Child No.\tPID\t\t Burst Time     \n");
+ 239:	57                   	push   %edi
+ 23a:	57                   	push   %edi
+ 23b:	68 5c 0a 00 00       	push   $0xa5c
+ 240:	6a 01                	push   $0x1
+ 242:	e8 49 04 00 00       	call   690 <printf>
+    printf(1, "\nCompletion Order: \n");
+ 247:	58                   	pop    %eax
+ 248:	5a                   	pop    %edx
+ 249:	68 00 0a 00 00       	push   $0xa00
+ 24e:	6a 01                	push   $0x1
+ 250:	e8 3b 04 00 00       	call   690 <printf>
+    printf(1, "PID\t\t Burst Time     \n");
+ 255:	59                   	pop    %ecx
+ 256:	5b                   	pop    %ebx
+ 257:	68 15 0a 00 00       	push   $0xa15
+ 25c:	6a 01                	push   $0x1
+ 25e:	e8 2d 04 00 00       	call   690 <printf>
+ 263:	83 c4 10             	add    $0x10,%esp
+ 266:	e9 0d ff ff ff       	jmp    178 <main+0x178>
+ 26b:	66 90                	xchg   %ax,%ax
+ 26d:	66 90                	xchg   %ax,%ax
+ 26f:	90                   	nop
+
+00000270 <random_computation>:
+{
+ 270:	55                   	push   %ebp
+    float a = 0, b=0;
+ 271:	d9 ee                	fldz   
+{
+ 273:	89 e5                	mov    %esp,%ebp
+ 275:	8d 76 00             	lea    0x0(%esi),%esi
+        b+=1;
+ 278:	d8 05 d0 0a 00 00    	fadds  0xad0
+    while(b<1000000)
+ 27e:	d9 05 d4 0a 00 00    	flds   0xad4
+ 284:	df e9                	fucomip %st(1),%st
+ 286:	77 f0                	ja     278 <random_computation+0x8>
+ 288:	dd d8                	fstp   %st(0)
+}
+ 28a:	5d                   	pop    %ebp
+ 28b:	c3                   	ret    
+ 28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <random_io>:
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	83 ec 14             	sub    $0x14,%esp
+    sleep(3);
+ 296:	6a 03                	push   $0x3
+ 298:	e8 f5 02 00 00       	call   592 <sleep>
+    printf(1, "\n");
+ 29d:	58                   	pop    %eax
+ 29e:	5a                   	pop    %edx
+ 29f:	68 2a 0a 00 00       	push   $0xa2a
+ 2a4:	6a 01                	push   $0x1
+ 2a6:	e8 e5 03 00 00       	call   690 <printf>
+}
+ 2ab:	83 c4 10             	add    $0x10,%esp
+ 2ae:	c9                   	leave  
+ 2af:	c3                   	ret    
+
+000002b0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 2b0:	55                   	push   %ebp
+ 2b1:	89 e5                	mov    %esp,%ebp
+ 2b3:	53                   	push   %ebx
+ 2b4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 2ba:	89 c2                	mov    %eax,%edx
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c0:	83 c1 01             	add    $0x1,%ecx
+ 2c3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 2c7:	83 c2 01             	add    $0x1,%edx
+ 2ca:	84 db                	test   %bl,%bl
+ 2cc:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 2cf:	75 ef                	jne    2c0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 2d1:	5b                   	pop    %ebx
+ 2d2:	5d                   	pop    %ebp
+ 2d3:	c3                   	ret    
+ 2d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 2da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000002e0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	53                   	push   %ebx
+ 2e4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2e7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 2ea:	0f b6 02             	movzbl (%edx),%eax
+ 2ed:	0f b6 19             	movzbl (%ecx),%ebx
+ 2f0:	84 c0                	test   %al,%al
+ 2f2:	75 1c                	jne    310 <strcmp+0x30>
+ 2f4:	eb 2a                	jmp    320 <strcmp+0x40>
+ 2f6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 300:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 303:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 306:	83 c1 01             	add    $0x1,%ecx
+ 309:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 30c:	84 c0                	test   %al,%al
+ 30e:	74 10                	je     320 <strcmp+0x40>
+ 310:	38 d8                	cmp    %bl,%al
+ 312:	74 ec                	je     300 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 314:	29 d8                	sub    %ebx,%eax
+}
+ 316:	5b                   	pop    %ebx
+ 317:	5d                   	pop    %ebp
+ 318:	c3                   	ret    
+ 319:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 320:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 322:	29 d8                	sub    %ebx,%eax
+}
+ 324:	5b                   	pop    %ebx
+ 325:	5d                   	pop    %ebp
+ 326:	c3                   	ret    
+ 327:	89 f6                	mov    %esi,%esi
+ 329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000330 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 336:	80 39 00             	cmpb   $0x0,(%ecx)
+ 339:	74 15                	je     350 <strlen+0x20>
+ 33b:	31 d2                	xor    %edx,%edx
+ 33d:	8d 76 00             	lea    0x0(%esi),%esi
+ 340:	83 c2 01             	add    $0x1,%edx
+ 343:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 347:	89 d0                	mov    %edx,%eax
+ 349:	75 f5                	jne    340 <strlen+0x10>
+    ;
+  return n;
+}
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 350:	31 c0                	xor    %eax,%eax
+}
+ 352:	5d                   	pop    %ebp
+ 353:	c3                   	ret    
+ 354:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 35a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000360 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 367:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 36a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 36d:	89 d7                	mov    %edx,%edi
+ 36f:	fc                   	cld    
+ 370:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	5f                   	pop    %edi
+ 375:	5d                   	pop    %ebp
+ 376:	c3                   	ret    
+ 377:	89 f6                	mov    %esi,%esi
+ 379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000380 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	53                   	push   %ebx
+ 384:	8b 45 08             	mov    0x8(%ebp),%eax
+ 387:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 38a:	0f b6 10             	movzbl (%eax),%edx
+ 38d:	84 d2                	test   %dl,%dl
+ 38f:	74 1d                	je     3ae <strchr+0x2e>
+    if(*s == c)
+ 391:	38 d3                	cmp    %dl,%bl
+ 393:	89 d9                	mov    %ebx,%ecx
+ 395:	75 0d                	jne    3a4 <strchr+0x24>
+ 397:	eb 17                	jmp    3b0 <strchr+0x30>
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3a0:	38 ca                	cmp    %cl,%dl
+ 3a2:	74 0c                	je     3b0 <strchr+0x30>
+  for(; *s; s++)
+ 3a4:	83 c0 01             	add    $0x1,%eax
+ 3a7:	0f b6 10             	movzbl (%eax),%edx
+ 3aa:	84 d2                	test   %dl,%dl
+ 3ac:	75 f2                	jne    3a0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 3ae:	31 c0                	xor    %eax,%eax
+}
+ 3b0:	5b                   	pop    %ebx
+ 3b1:	5d                   	pop    %ebp
+ 3b2:	c3                   	ret    
+ 3b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003c0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 3c6:	31 f6                	xor    %esi,%esi
+ 3c8:	89 f3                	mov    %esi,%ebx
+{
+ 3ca:	83 ec 1c             	sub    $0x1c,%esp
+ 3cd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 3d0:	eb 2f                	jmp    401 <gets+0x41>
+ 3d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 3d8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 3db:	83 ec 04             	sub    $0x4,%esp
+ 3de:	6a 01                	push   $0x1
+ 3e0:	50                   	push   %eax
+ 3e1:	6a 00                	push   $0x0
+ 3e3:	e8 32 01 00 00       	call   51a <read>
+    if(cc < 1)
+ 3e8:	83 c4 10             	add    $0x10,%esp
+ 3eb:	85 c0                	test   %eax,%eax
+ 3ed:	7e 1c                	jle    40b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 3ef:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 3f3:	83 c7 01             	add    $0x1,%edi
+ 3f6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 3f9:	3c 0a                	cmp    $0xa,%al
+ 3fb:	74 23                	je     420 <gets+0x60>
+ 3fd:	3c 0d                	cmp    $0xd,%al
+ 3ff:	74 1f                	je     420 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 401:	83 c3 01             	add    $0x1,%ebx
+ 404:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 407:	89 fe                	mov    %edi,%esi
+ 409:	7c cd                	jl     3d8 <gets+0x18>
+ 40b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 40d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 410:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 413:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 416:	5b                   	pop    %ebx
+ 417:	5e                   	pop    %esi
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	90                   	nop
+ 41c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 420:	8b 75 08             	mov    0x8(%ebp),%esi
+ 423:	8b 45 08             	mov    0x8(%ebp),%eax
+ 426:	01 de                	add    %ebx,%esi
+ 428:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 42a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 42d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 430:	5b                   	pop    %ebx
+ 431:	5e                   	pop    %esi
+ 432:	5f                   	pop    %edi
+ 433:	5d                   	pop    %ebp
+ 434:	c3                   	ret    
+ 435:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000440 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	56                   	push   %esi
+ 444:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 445:	83 ec 08             	sub    $0x8,%esp
+ 448:	6a 00                	push   $0x0
+ 44a:	ff 75 08             	pushl  0x8(%ebp)
+ 44d:	e8 f0 00 00 00       	call   542 <open>
+  if(fd < 0)
+ 452:	83 c4 10             	add    $0x10,%esp
+ 455:	85 c0                	test   %eax,%eax
+ 457:	78 27                	js     480 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 459:	83 ec 08             	sub    $0x8,%esp
+ 45c:	ff 75 0c             	pushl  0xc(%ebp)
+ 45f:	89 c3                	mov    %eax,%ebx
+ 461:	50                   	push   %eax
+ 462:	e8 f3 00 00 00       	call   55a <fstat>
+  close(fd);
+ 467:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 46a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 46c:	e8 b9 00 00 00       	call   52a <close>
+  return r;
+ 471:	83 c4 10             	add    $0x10,%esp
+}
+ 474:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 477:	89 f0                	mov    %esi,%eax
+ 479:	5b                   	pop    %ebx
+ 47a:	5e                   	pop    %esi
+ 47b:	5d                   	pop    %ebp
+ 47c:	c3                   	ret    
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 480:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 485:	eb ed                	jmp    474 <stat+0x34>
+ 487:	89 f6                	mov    %esi,%esi
+ 489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000490 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	53                   	push   %ebx
+ 494:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 497:	0f be 11             	movsbl (%ecx),%edx
+ 49a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 49d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 49f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 4a4:	77 1f                	ja     4c5 <atoi+0x35>
+ 4a6:	8d 76 00             	lea    0x0(%esi),%esi
+ 4a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 4b0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 4b3:	83 c1 01             	add    $0x1,%ecx
+ 4b6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 4ba:	0f be 11             	movsbl (%ecx),%edx
+ 4bd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 4c0:	80 fb 09             	cmp    $0x9,%bl
+ 4c3:	76 eb                	jbe    4b0 <atoi+0x20>
+  return n;
+}
+ 4c5:	5b                   	pop    %ebx
+ 4c6:	5d                   	pop    %ebp
+ 4c7:	c3                   	ret    
+ 4c8:	90                   	nop
+ 4c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000004d0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	56                   	push   %esi
+ 4d4:	53                   	push   %ebx
+ 4d5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 4d8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4db:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 4de:	85 db                	test   %ebx,%ebx
+ 4e0:	7e 14                	jle    4f6 <memmove+0x26>
+ 4e2:	31 d2                	xor    %edx,%edx
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 4e8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 4ec:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 4ef:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 4f2:	39 d3                	cmp    %edx,%ebx
+ 4f4:	75 f2                	jne    4e8 <memmove+0x18>
+  return vdst;
+}
+ 4f6:	5b                   	pop    %ebx
+ 4f7:	5e                   	pop    %esi
+ 4f8:	5d                   	pop    %ebp
+ 4f9:	c3                   	ret    
+
+000004fa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 4fa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 4ff:	cd 40                	int    $0x40
+ 501:	c3                   	ret    
+
+00000502 <exit>:
+SYSCALL(exit)
+ 502:	b8 02 00 00 00       	mov    $0x2,%eax
+ 507:	cd 40                	int    $0x40
+ 509:	c3                   	ret    
+
+0000050a <wait>:
+SYSCALL(wait)
+ 50a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 50f:	cd 40                	int    $0x40
+ 511:	c3                   	ret    
+
+00000512 <pipe>:
+SYSCALL(pipe)
+ 512:	b8 04 00 00 00       	mov    $0x4,%eax
+ 517:	cd 40                	int    $0x40
+ 519:	c3                   	ret    
+
+0000051a <read>:
+SYSCALL(read)
+ 51a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 51f:	cd 40                	int    $0x40
+ 521:	c3                   	ret    
+
+00000522 <write>:
+SYSCALL(write)
+ 522:	b8 10 00 00 00       	mov    $0x10,%eax
+ 527:	cd 40                	int    $0x40
+ 529:	c3                   	ret    
+
+0000052a <close>:
+SYSCALL(close)
+ 52a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 52f:	cd 40                	int    $0x40
+ 531:	c3                   	ret    
+
+00000532 <kill>:
+SYSCALL(kill)
+ 532:	b8 06 00 00 00       	mov    $0x6,%eax
+ 537:	cd 40                	int    $0x40
+ 539:	c3                   	ret    
+
+0000053a <exec>:
+SYSCALL(exec)
+ 53a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 53f:	cd 40                	int    $0x40
+ 541:	c3                   	ret    
+
+00000542 <open>:
+SYSCALL(open)
+ 542:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 547:	cd 40                	int    $0x40
+ 549:	c3                   	ret    
+
+0000054a <mknod>:
+SYSCALL(mknod)
+ 54a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 54f:	cd 40                	int    $0x40
+ 551:	c3                   	ret    
+
+00000552 <unlink>:
+SYSCALL(unlink)
+ 552:	b8 12 00 00 00       	mov    $0x12,%eax
+ 557:	cd 40                	int    $0x40
+ 559:	c3                   	ret    
+
+0000055a <fstat>:
+SYSCALL(fstat)
+ 55a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 55f:	cd 40                	int    $0x40
+ 561:	c3                   	ret    
+
+00000562 <link>:
+SYSCALL(link)
+ 562:	b8 13 00 00 00       	mov    $0x13,%eax
+ 567:	cd 40                	int    $0x40
+ 569:	c3                   	ret    
+
+0000056a <mkdir>:
+SYSCALL(mkdir)
+ 56a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 56f:	cd 40                	int    $0x40
+ 571:	c3                   	ret    
+
+00000572 <chdir>:
+SYSCALL(chdir)
+ 572:	b8 09 00 00 00       	mov    $0x9,%eax
+ 577:	cd 40                	int    $0x40
+ 579:	c3                   	ret    
+
+0000057a <dup>:
+SYSCALL(dup)
+ 57a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <getpid>:
+SYSCALL(getpid)
+ 582:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <sbrk>:
+SYSCALL(sbrk)
+ 58a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <sleep>:
+SYSCALL(sleep)
+ 592:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <uptime>:
+SYSCALL(uptime)
+ 59a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <getNumProc>:
+SYSCALL(getNumProc)
+ 5a2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <getMaxPid>:
+SYSCALL(getMaxPid)
+ 5aa:	b8 17 00 00 00       	mov    $0x17,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 5b2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <set_burst_time>:
+SYSCALL(set_burst_time)
+ 5ba:	b8 19 00 00 00       	mov    $0x19,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 5c2:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <process_state>:
+SYSCALL(process_state)
+ 5ca:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 5d2:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <inc_cpucounter>:
+ 5da:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+ 5e2:	66 90                	xchg   %ax,%ax
+ 5e4:	66 90                	xchg   %ax,%ax
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 5f0:	55                   	push   %ebp
+ 5f1:	89 e5                	mov    %esp,%ebp
+ 5f3:	57                   	push   %edi
+ 5f4:	56                   	push   %esi
+ 5f5:	53                   	push   %ebx
+ 5f6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 5f9:	85 d2                	test   %edx,%edx
+{
+ 5fb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 5fe:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 600:	79 76                	jns    678 <printint+0x88>
+ 602:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 606:	74 70                	je     678 <printint+0x88>
+    x = -xx;
+ 608:	f7 d8                	neg    %eax
+    neg = 1;
+ 60a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 611:	31 f6                	xor    %esi,%esi
+ 613:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 616:	eb 0a                	jmp    622 <printint+0x32>
+ 618:	90                   	nop
+ 619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 620:	89 fe                	mov    %edi,%esi
+ 622:	31 d2                	xor    %edx,%edx
+ 624:	8d 7e 01             	lea    0x1(%esi),%edi
+ 627:	f7 f1                	div    %ecx
+ 629:	0f b6 92 e0 0a 00 00 	movzbl 0xae0(%edx),%edx
+  }while((x /= base) != 0);
+ 630:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 632:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 635:	75 e9                	jne    620 <printint+0x30>
+  if(neg)
+ 637:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 63a:	85 c0                	test   %eax,%eax
+ 63c:	74 08                	je     646 <printint+0x56>
+    buf[i++] = '-';
+ 63e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 643:	8d 7e 02             	lea    0x2(%esi),%edi
+ 646:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 64a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
+ 650:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 653:	83 ec 04             	sub    $0x4,%esp
+ 656:	83 ee 01             	sub    $0x1,%esi
+ 659:	6a 01                	push   $0x1
+ 65b:	53                   	push   %ebx
+ 65c:	57                   	push   %edi
+ 65d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 660:	e8 bd fe ff ff       	call   522 <write>
+
+  while(--i >= 0)
+ 665:	83 c4 10             	add    $0x10,%esp
+ 668:	39 de                	cmp    %ebx,%esi
+ 66a:	75 e4                	jne    650 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 66c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 66f:	5b                   	pop    %ebx
+ 670:	5e                   	pop    %esi
+ 671:	5f                   	pop    %edi
+ 672:	5d                   	pop    %ebp
+ 673:	c3                   	ret    
+ 674:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 678:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 67f:	eb 90                	jmp    611 <printint+0x21>
+ 681:	eb 0d                	jmp    690 <printf>
+ 683:	90                   	nop
+ 684:	90                   	nop
+ 685:	90                   	nop
+ 686:	90                   	nop
+ 687:	90                   	nop
+ 688:	90                   	nop
+ 689:	90                   	nop
+ 68a:	90                   	nop
+ 68b:	90                   	nop
+ 68c:	90                   	nop
+ 68d:	90                   	nop
+ 68e:	90                   	nop
+ 68f:	90                   	nop
+
+00000690 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 699:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 69c:	0f b6 1e             	movzbl (%esi),%ebx
+ 69f:	84 db                	test   %bl,%bl
+ 6a1:	0f 84 b3 00 00 00    	je     75a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 6a7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 6aa:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 6ad:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 6af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 6b2:	eb 2f                	jmp    6e3 <printf+0x53>
+ 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 6b8:	83 f8 25             	cmp    $0x25,%eax
+ 6bb:	0f 84 a7 00 00 00    	je     768 <printf+0xd8>
+  write(fd, &c, 1);
+ 6c1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 6c4:	83 ec 04             	sub    $0x4,%esp
+ 6c7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 6ca:	6a 01                	push   $0x1
+ 6cc:	50                   	push   %eax
+ 6cd:	ff 75 08             	pushl  0x8(%ebp)
+ 6d0:	e8 4d fe ff ff       	call   522 <write>
+ 6d5:	83 c4 10             	add    $0x10,%esp
+ 6d8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 6db:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 6df:	84 db                	test   %bl,%bl
+ 6e1:	74 77                	je     75a <printf+0xca>
+    if(state == 0){
+ 6e3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 6e5:	0f be cb             	movsbl %bl,%ecx
+ 6e8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 6eb:	74 cb                	je     6b8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 6ed:	83 ff 25             	cmp    $0x25,%edi
+ 6f0:	75 e6                	jne    6d8 <printf+0x48>
+      if(c == 'd'){
+ 6f2:	83 f8 64             	cmp    $0x64,%eax
+ 6f5:	0f 84 05 01 00 00    	je     800 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 6fb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 701:	83 f9 70             	cmp    $0x70,%ecx
+ 704:	74 72                	je     778 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 706:	83 f8 73             	cmp    $0x73,%eax
+ 709:	0f 84 99 00 00 00    	je     7a8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 70f:	83 f8 63             	cmp    $0x63,%eax
+ 712:	0f 84 08 01 00 00    	je     820 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 718:	83 f8 25             	cmp    $0x25,%eax
+ 71b:	0f 84 ef 00 00 00    	je     810 <printf+0x180>
+  write(fd, &c, 1);
+ 721:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 724:	83 ec 04             	sub    $0x4,%esp
+ 727:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 72b:	6a 01                	push   $0x1
+ 72d:	50                   	push   %eax
+ 72e:	ff 75 08             	pushl  0x8(%ebp)
+ 731:	e8 ec fd ff ff       	call   522 <write>
+ 736:	83 c4 0c             	add    $0xc,%esp
+ 739:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 73c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 73f:	6a 01                	push   $0x1
+ 741:	50                   	push   %eax
+ 742:	ff 75 08             	pushl  0x8(%ebp)
+ 745:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 748:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 74a:	e8 d3 fd ff ff       	call   522 <write>
+  for(i = 0; fmt[i]; i++){
+ 74f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 753:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 756:	84 db                	test   %bl,%bl
+ 758:	75 89                	jne    6e3 <printf+0x53>
+    }
+  }
+}
+ 75a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 75d:	5b                   	pop    %ebx
+ 75e:	5e                   	pop    %esi
+ 75f:	5f                   	pop    %edi
+ 760:	5d                   	pop    %ebp
+ 761:	c3                   	ret    
+ 762:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 768:	bf 25 00 00 00       	mov    $0x25,%edi
+ 76d:	e9 66 ff ff ff       	jmp    6d8 <printf+0x48>
+ 772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 778:	83 ec 0c             	sub    $0xc,%esp
+ 77b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 780:	6a 00                	push   $0x0
+ 782:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 785:	8b 45 08             	mov    0x8(%ebp),%eax
+ 788:	8b 17                	mov    (%edi),%edx
+ 78a:	e8 61 fe ff ff       	call   5f0 <printint>
+        ap++;
+ 78f:	89 f8                	mov    %edi,%eax
+ 791:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 794:	31 ff                	xor    %edi,%edi
+        ap++;
+ 796:	83 c0 04             	add    $0x4,%eax
+ 799:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 79c:	e9 37 ff ff ff       	jmp    6d8 <printf+0x48>
+ 7a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 7a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 7ab:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 7ad:	83 c0 04             	add    $0x4,%eax
+ 7b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 7b3:	85 c9                	test   %ecx,%ecx
+ 7b5:	0f 84 8e 00 00 00    	je     849 <printf+0x1b9>
+        while(*s != 0){
+ 7bb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 7be:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 7c0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 7c2:	84 c0                	test   %al,%al
+ 7c4:	0f 84 0e ff ff ff    	je     6d8 <printf+0x48>
+ 7ca:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 7cd:	89 de                	mov    %ebx,%esi
+ 7cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 7d2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 7d5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 7d8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 7db:	83 c6 01             	add    $0x1,%esi
+ 7de:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 7e1:	6a 01                	push   $0x1
+ 7e3:	57                   	push   %edi
+ 7e4:	53                   	push   %ebx
+ 7e5:	e8 38 fd ff ff       	call   522 <write>
+        while(*s != 0){
+ 7ea:	0f b6 06             	movzbl (%esi),%eax
+ 7ed:	83 c4 10             	add    $0x10,%esp
+ 7f0:	84 c0                	test   %al,%al
+ 7f2:	75 e4                	jne    7d8 <printf+0x148>
+ 7f4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 7f7:	31 ff                	xor    %edi,%edi
+ 7f9:	e9 da fe ff ff       	jmp    6d8 <printf+0x48>
+ 7fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 808:	6a 01                	push   $0x1
+ 80a:	e9 73 ff ff ff       	jmp    782 <printf+0xf2>
+ 80f:	90                   	nop
+  write(fd, &c, 1);
+ 810:	83 ec 04             	sub    $0x4,%esp
+ 813:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 816:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 819:	6a 01                	push   $0x1
+ 81b:	e9 21 ff ff ff       	jmp    741 <printf+0xb1>
+        putc(fd, *ap);
+ 820:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 823:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 826:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 828:	6a 01                	push   $0x1
+        ap++;
+ 82a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 82d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 830:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 833:	50                   	push   %eax
+ 834:	ff 75 08             	pushl  0x8(%ebp)
+ 837:	e8 e6 fc ff ff       	call   522 <write>
+        ap++;
+ 83c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 83f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 842:	31 ff                	xor    %edi,%edi
+ 844:	e9 8f fe ff ff       	jmp    6d8 <printf+0x48>
+          s = "(null)";
+ 849:	bb d8 0a 00 00       	mov    $0xad8,%ebx
+        while(*s != 0){
+ 84e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 853:	e9 72 ff ff ff       	jmp    7ca <printf+0x13a>
+ 858:	66 90                	xchg   %ax,%ax
+ 85a:	66 90                	xchg   %ax,%ax
+ 85c:	66 90                	xchg   %ax,%ax
+ 85e:	66 90                	xchg   %ax,%ax
+
+00000860 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 860:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 861:	a1 d0 0d 00 00       	mov    0xdd0,%eax
+{
+ 866:	89 e5                	mov    %esp,%ebp
+ 868:	57                   	push   %edi
+ 869:	56                   	push   %esi
+ 86a:	53                   	push   %ebx
+ 86b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 86e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 871:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 878:	39 c8                	cmp    %ecx,%eax
+ 87a:	8b 10                	mov    (%eax),%edx
+ 87c:	73 32                	jae    8b0 <free+0x50>
+ 87e:	39 d1                	cmp    %edx,%ecx
+ 880:	72 04                	jb     886 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 882:	39 d0                	cmp    %edx,%eax
+ 884:	72 32                	jb     8b8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 886:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 889:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 88c:	39 fa                	cmp    %edi,%edx
+ 88e:	74 30                	je     8c0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 890:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 893:	8b 50 04             	mov    0x4(%eax),%edx
+ 896:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 899:	39 f1                	cmp    %esi,%ecx
+ 89b:	74 3a                	je     8d7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 89d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 89f:	a3 d0 0d 00 00       	mov    %eax,0xdd0
+}
+ 8a4:	5b                   	pop    %ebx
+ 8a5:	5e                   	pop    %esi
+ 8a6:	5f                   	pop    %edi
+ 8a7:	5d                   	pop    %ebp
+ 8a8:	c3                   	ret    
+ 8a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8b0:	39 d0                	cmp    %edx,%eax
+ 8b2:	72 04                	jb     8b8 <free+0x58>
+ 8b4:	39 d1                	cmp    %edx,%ecx
+ 8b6:	72 ce                	jb     886 <free+0x26>
+{
+ 8b8:	89 d0                	mov    %edx,%eax
+ 8ba:	eb bc                	jmp    878 <free+0x18>
+ 8bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 8c0:	03 72 04             	add    0x4(%edx),%esi
+ 8c3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8c6:	8b 10                	mov    (%eax),%edx
+ 8c8:	8b 12                	mov    (%edx),%edx
+ 8ca:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8cd:	8b 50 04             	mov    0x4(%eax),%edx
+ 8d0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8d3:	39 f1                	cmp    %esi,%ecx
+ 8d5:	75 c6                	jne    89d <free+0x3d>
+    p->s.size += bp->s.size;
+ 8d7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 8da:	a3 d0 0d 00 00       	mov    %eax,0xdd0
+    p->s.size += bp->s.size;
+ 8df:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 8e2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 8e5:	89 10                	mov    %edx,(%eax)
+}
+ 8e7:	5b                   	pop    %ebx
+ 8e8:	5e                   	pop    %esi
+ 8e9:	5f                   	pop    %edi
+ 8ea:	5d                   	pop    %ebp
+ 8eb:	c3                   	ret    
+ 8ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000008f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 8f0:	55                   	push   %ebp
+ 8f1:	89 e5                	mov    %esp,%ebp
+ 8f3:	57                   	push   %edi
+ 8f4:	56                   	push   %esi
+ 8f5:	53                   	push   %ebx
+ 8f6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 8fc:	8b 15 d0 0d 00 00    	mov    0xdd0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 902:	8d 78 07             	lea    0x7(%eax),%edi
+ 905:	c1 ef 03             	shr    $0x3,%edi
+ 908:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 90b:	85 d2                	test   %edx,%edx
+ 90d:	0f 84 9d 00 00 00    	je     9b0 <malloc+0xc0>
+ 913:	8b 02                	mov    (%edx),%eax
+ 915:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 918:	39 cf                	cmp    %ecx,%edi
+ 91a:	76 6c                	jbe    988 <malloc+0x98>
+ 91c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 922:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 927:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 92a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 931:	eb 0e                	jmp    941 <malloc+0x51>
+ 933:	90                   	nop
+ 934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 938:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 93a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 93d:	39 f9                	cmp    %edi,%ecx
+ 93f:	73 47                	jae    988 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 941:	39 05 d0 0d 00 00    	cmp    %eax,0xdd0
+ 947:	89 c2                	mov    %eax,%edx
+ 949:	75 ed                	jne    938 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 94b:	83 ec 0c             	sub    $0xc,%esp
+ 94e:	56                   	push   %esi
+ 94f:	e8 36 fc ff ff       	call   58a <sbrk>
+  if(p == (char*)-1)
+ 954:	83 c4 10             	add    $0x10,%esp
+ 957:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 95a:	74 1c                	je     978 <malloc+0x88>
+  hp->s.size = nu;
+ 95c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 95f:	83 ec 0c             	sub    $0xc,%esp
+ 962:	83 c0 08             	add    $0x8,%eax
+ 965:	50                   	push   %eax
+ 966:	e8 f5 fe ff ff       	call   860 <free>
+  return freep;
+ 96b:	8b 15 d0 0d 00 00    	mov    0xdd0,%edx
+      if((p = morecore(nunits)) == 0)
+ 971:	83 c4 10             	add    $0x10,%esp
+ 974:	85 d2                	test   %edx,%edx
+ 976:	75 c0                	jne    938 <malloc+0x48>
+        return 0;
+  }
+}
+ 978:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 97b:	31 c0                	xor    %eax,%eax
+}
+ 97d:	5b                   	pop    %ebx
+ 97e:	5e                   	pop    %esi
+ 97f:	5f                   	pop    %edi
+ 980:	5d                   	pop    %ebp
+ 981:	c3                   	ret    
+ 982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 988:	39 cf                	cmp    %ecx,%edi
+ 98a:	74 54                	je     9e0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 98c:	29 f9                	sub    %edi,%ecx
+ 98e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 991:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 994:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 997:	89 15 d0 0d 00 00    	mov    %edx,0xdd0
+}
+ 99d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 9a0:	83 c0 08             	add    $0x8,%eax
+}
+ 9a3:	5b                   	pop    %ebx
+ 9a4:	5e                   	pop    %esi
+ 9a5:	5f                   	pop    %edi
+ 9a6:	5d                   	pop    %ebp
+ 9a7:	c3                   	ret    
+ 9a8:	90                   	nop
+ 9a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 9b0:	c7 05 d0 0d 00 00 d4 	movl   $0xdd4,0xdd0
+ 9b7:	0d 00 00 
+ 9ba:	c7 05 d4 0d 00 00 d4 	movl   $0xdd4,0xdd4
+ 9c1:	0d 00 00 
+    base.s.size = 0;
+ 9c4:	b8 d4 0d 00 00       	mov    $0xdd4,%eax
+ 9c9:	c7 05 d8 0d 00 00 00 	movl   $0x0,0xdd8
+ 9d0:	00 00 00 
+ 9d3:	e9 44 ff ff ff       	jmp    91c <malloc+0x2c>
+ 9d8:	90                   	nop
+ 9d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 9e0:	8b 08                	mov    (%eax),%ecx
+ 9e2:	89 0a                	mov    %ecx,(%edx)
+ 9e4:	eb b1                	jmp    997 <malloc+0xa7>
diff -ruN xv6org/test_scheduler.c xv6mhybrid/test_scheduler.c
--- xv6org/test_scheduler.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_scheduler.c	2020-10-15 19:17:10.065105387 +0530
@@ -0,0 +1,118 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+#include "fcntl.h"
+
+// CPU bound process
+void
+random_computation()
+{
+    float a = 0, b=0;
+
+    while(b<1000000)
+    {
+        if((int)b%2 == 0)
+            a = a - (1.5*2.6);
+        else
+            a = a+ 1.6*4.9;
+        b+=1;
+    }
+}
+
+// I/O bound process
+void
+random_io()
+{
+    int i=150;
+    while(i--)
+    {
+        // printf(1,"$");
+        continue;
+    }
+    sleep(3);
+    printf(1, "\n");
+}
+
+int 
+main(int argc, char *argv[])
+{
+
+
+    // This code is for test case 3 and 4.
+    // To run this code for test case 1, change random_computation to random_io in else block.
+    // To run this code for test case 2, change random_io to random_computation in else block.
+    int n;
+    n = atoi(argv[1]);
+    if (argc < 2) n=5;
+    int burst_time=0;
+    int pids[n];
+    int returnOrder[n];    // to store completiton order
+    int map[500];          // to map process id to child number
+    int rand_bt[20] = {20, 17, 2, 5, 13, 11, 4, 10, 6, 3, 3, 2, 18, 7, 8, 13, 17, 8, 19, 8};
+    int i=0;
+    while(i<n)
+    {
+        if(i==2 || i==4 || i==9 || i==14)
+        {
+            int id = fork();
+            if (id == 0)
+            {
+                burst_time = rand_bt[i];
+                set_burst_time(burst_time);
+                random_computation();
+                exit();    
+            }
+            else if (id < 0)
+            {
+                printf(1, "Error!! Could not be forked. \n");
+                exit();
+            }
+            else
+            {
+                pids[i] = id;
+                map[id]=i;
+            }
+        }
+        else
+        {
+            int id = fork();
+            if (id == 0)
+            {
+                burst_time = rand_bt[i];
+                set_burst_time(burst_time);
+                random_computation();
+                exit();    
+            }
+            else if (id < 0)
+            {
+                printf(1, "Error!! Could not be forked. \n");
+                exit();
+            }
+            else
+            {
+                pids[i] = id;
+                map[id]=i;
+            }
+        }
+        
+        i++;
+    }
+
+    for (int i = 0; i < n; i++)
+    {
+        returnOrder[i] = wait();
+    }
+    printf(1, "Child No.\tPID\t\t Burst Time     \n");
+    for (int i = 0; i < n; i++)
+    {
+        printf(1, "%d\t\t %d\t\t %d  \n", i+1, pids[i], rand_bt[i]);
+    }
+    printf(1, "\nCompletion Order: \n");
+    printf(1, "PID\t\t Burst Time     \n");
+    for (int i = 0; i < n; i++){
+        printf(1, "%d\t\t %d  \n", returnOrder[i], rand_bt[map[returnOrder[i]]]);
+        
+    }
+    exit();
+}
diff -ruN xv6org/test_scheduler.d xv6mhybrid/test_scheduler.d
--- xv6org/test_scheduler.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_scheduler.d	2020-10-15 19:50:35.761638321 +0530
@@ -0,0 +1,2 @@
+test_scheduler.o: test_scheduler.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h fcntl.h
Binary files xv6org/test_scheduler.o and xv6mhybrid/test_scheduler.o differ
diff -ruN xv6org/test_scheduler.sym xv6mhybrid/test_scheduler.sym
--- xv6org/test_scheduler.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/test_scheduler.sym	2020-10-15 19:50:35.777637282 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+00000a00 .rodata
+00000af4 .eh_frame
+00000dd0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_scheduler.c
+00000000 ulib.c
+00000000 printf.c
+000005f0 printint
+00000ae0 digits.1056
+00000000 umalloc.c
+00000dd0 freep
+00000dd4 base
+000002b0 strcpy
+00000690 printf
+000004d0 memmove
+0000054a mknod
+000003c0 gets
+00000582 getpid
+000008f0 malloc
+00000592 sleep
+000005c2 get_burst_time
+00000512 pipe
+00000522 write
+0000055a fstat
+00000532 kill
+000005ca process_state
+00000572 chdir
+00000290 random_io
+000005d2 dec_burstTime
+0000053a exec
+0000050a wait
+000005da inc_cpucounter
+0000051a read
+00000552 unlink
+00000270 random_computation
+000004fa fork
+0000058a sbrk
+0000059a uptime
+00000dd0 __bss_start
+00000360 memset
+00000000 main
+000005ba set_burst_time
+000002e0 strcmp
+0000057a dup
+000005aa getMaxPid
+000005a2 getNumProc
+000005b2 getProcInfo
+00000440 stat
+00000dd0 _edata
+00000ddc _end
+00000562 link
+00000502 exit
+00000490 atoi
+00000330 strlen
+00000542 open
+00000380 strchr
+0000056a mkdir
+0000052a close
+00000860 free
Binary files xv6org/trapasm.o and xv6mhybrid/trapasm.o differ
diff -ruN xv6org/trap.c xv6mhybrid/trap.c
--- xv6org/trap.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/trap.c	2020-10-15 19:49:05.572159192 +0530
@@ -102,9 +102,15 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
+
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER && inc_cpucounter() == QUANTA)
+  {
+    dec_burstTime();
+    // cprintf("Interrupt %d with burst %d \n", myproc()->pid, myproc()->burst_time);
+    myproc()->cpucounter=0;
     yield();
+  }
+    
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
diff -ruN xv6org/trap.d xv6mhybrid/trap.d
--- xv6org/trap.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/trap.d	2020-10-15 19:52:18.907706042 +0530
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files xv6org/trap.o and xv6mhybrid/trap.o differ
diff -ruN xv6org/uart.d xv6mhybrid/uart.d
--- xv6org/uart.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/uart.d	2020-10-15 19:52:18.939704424 +0530
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files xv6org/uart.o and xv6mhybrid/uart.o differ
diff -ruN xv6org/ulib.d xv6mhybrid/ulib.d
--- xv6org/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/ulib.d	2020-10-15 19:50:33.709771905 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files xv6org/ulib.o and xv6mhybrid/ulib.o differ
diff -ruN xv6org/umalloc.d xv6mhybrid/umalloc.d
--- xv6org/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/umalloc.d	2020-10-15 19:50:33.777767464 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files xv6org/umalloc.o and xv6mhybrid/umalloc.o differ
diff -ruN xv6org/user.h xv6mhybrid/user.h
--- xv6org/user.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/user.h	2020-10-15 19:47:07.019096800 +0530
@@ -1,6 +1,6 @@
 struct stat;
 struct rtcdate;
-
+struct processInfo;
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -37,3 +37,13 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+
+// Function declaration for the system call
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int ,struct processInfo*);
+int set_burst_time(int);
+int get_burst_time(void);
+int process_state(void);
+void dec_burstTime(void);
+int inc_cpucounter(void);
\ No newline at end of file
Binary files xv6org/_usertests and xv6mhybrid/_usertests differ
diff -ruN xv6org/usertests.asm xv6mhybrid/usertests.asm
--- xv6org/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/usertests.asm	2020-10-15 19:50:35.505654939 +0530
@@ -0,0 +1,6691 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      11:	68 76 4d 00 00       	push   $0x4d76
+      16:	6a 01                	push   $0x1
+      18:	e8 13 3a 00 00       	call   3a30 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      1d:	59                   	pop    %ecx
+      1e:	58                   	pop    %eax
+      1f:	6a 00                	push   $0x0
+      21:	68 8a 4d 00 00       	push   $0x4d8a
+      26:	e8 b7 38 00 00       	call   38e2 <open>
+      2b:	83 c4 10             	add    $0x10,%esp
+      2e:	85 c0                	test   %eax,%eax
+      30:	78 13                	js     45 <main+0x45>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      32:	52                   	push   %edx
+      33:	52                   	push   %edx
+      34:	68 f4 54 00 00       	push   $0x54f4
+      39:	6a 01                	push   $0x1
+      3b:	e8 f0 39 00 00       	call   3a30 <printf>
+    exit();
+      40:	e8 5d 38 00 00       	call   38a2 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      45:	50                   	push   %eax
+      46:	50                   	push   %eax
+      47:	68 00 02 00 00       	push   $0x200
+      4c:	68 8a 4d 00 00       	push   $0x4d8a
+      51:	e8 8c 38 00 00       	call   38e2 <open>
+      56:	89 04 24             	mov    %eax,(%esp)
+      59:	e8 6c 38 00 00       	call   38ca <close>
+
+  argptest();
+      5e:	e8 5d 35 00 00       	call   35c0 <argptest>
+  createdelete();
+      63:	e8 a8 11 00 00       	call   1210 <createdelete>
+  linkunlink();
+      68:	e8 63 1a 00 00       	call   1ad0 <linkunlink>
+  concreate();
+      6d:	e8 5e 17 00 00       	call   17d0 <concreate>
+  fourfiles();
+      72:	e8 99 0f 00 00       	call   1010 <fourfiles>
+  sharedfd();
+      77:	e8 d4 0d 00 00       	call   e50 <sharedfd>
+
+  bigargtest();
+      7c:	e8 ff 31 00 00       	call   3280 <bigargtest>
+  bigwrite();
+      81:	e8 6a 23 00 00       	call   23f0 <bigwrite>
+  bigargtest();
+      86:	e8 f5 31 00 00       	call   3280 <bigargtest>
+  bsstest();
+      8b:	e8 70 31 00 00       	call   3200 <bsstest>
+  sbrktest();
+      90:	e8 9b 2c 00 00       	call   2d30 <sbrktest>
+  validatetest();
+      95:	e8 b6 30 00 00       	call   3150 <validatetest>
+
+  opentest();
+      9a:	e8 51 03 00 00       	call   3f0 <opentest>
+  writetest();
+      9f:	e8 dc 03 00 00       	call   480 <writetest>
+  writetest1();
+      a4:	e8 b7 05 00 00       	call   660 <writetest1>
+  createtest();
+      a9:	e8 82 07 00 00       	call   830 <createtest>
+
+  openiputtest();
+      ae:	e8 3d 02 00 00       	call   2f0 <openiputtest>
+  exitiputtest();
+      b3:	e8 48 01 00 00       	call   200 <exitiputtest>
+  iputtest();
+      b8:	e8 63 00 00 00       	call   120 <iputtest>
+
+  mem();
+      bd:	e8 be 0c 00 00       	call   d80 <mem>
+  pipe1();
+      c2:	e8 49 09 00 00       	call   a10 <pipe1>
+  preempt();
+      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>
+  exitwait();
+      cc:	e8 1f 0c 00 00       	call   cf0 <exitwait>
+
+  rmdot();
+      d1:	e8 0a 27 00 00       	call   27e0 <rmdot>
+  fourteen();
+      d6:	e8 c5 25 00 00       	call   26a0 <fourteen>
+  bigfile();
+      db:	e8 f0 23 00 00       	call   24d0 <bigfile>
+  subdir();
+      e0:	e8 2b 1c 00 00       	call   1d10 <subdir>
+  linktest();
+      e5:	e8 d6 14 00 00       	call   15c0 <linktest>
+  unlinkread();
+      ea:	e8 41 13 00 00       	call   1430 <unlinkread>
+  dirfile();
+      ef:	e8 6c 28 00 00       	call   2960 <dirfile>
+  iref();
+      f4:	e8 67 2a 00 00       	call   2b60 <iref>
+  forktest();
+      f9:	e8 82 2b 00 00       	call   2c80 <forktest>
+  bigdir(); // slow
+      fe:	e8 dd 1a 00 00       	call   1be0 <bigdir>
+
+  uio();
+     103:	e8 48 34 00 00       	call   3550 <uio>
+
+  exectest();
+     108:	e8 b3 08 00 00       	call   9c0 <exectest>
+
+  exit();
+     10d:	e8 90 37 00 00       	call   38a2 <exit>
+     112:	66 90                	xchg   %ax,%ax
+     114:	66 90                	xchg   %ax,%ax
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	55                   	push   %ebp
+     121:	89 e5                	mov    %esp,%ebp
+     123:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     126:	68 1c 3e 00 00       	push   $0x3e1c
+     12b:	ff 35 38 5e 00 00    	pushl  0x5e38
+     131:	e8 fa 38 00 00       	call   3a30 <printf>
+  if(mkdir("iputdir") < 0){
+     136:	c7 04 24 af 3d 00 00 	movl   $0x3daf,(%esp)
+     13d:	e8 c8 37 00 00       	call   390a <mkdir>
+     142:	83 c4 10             	add    $0x10,%esp
+     145:	85 c0                	test   %eax,%eax
+     147:	78 58                	js     1a1 <iputtest+0x81>
+  if(chdir("iputdir") < 0){
+     149:	83 ec 0c             	sub    $0xc,%esp
+     14c:	68 af 3d 00 00       	push   $0x3daf
+     151:	e8 bc 37 00 00       	call   3912 <chdir>
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	85 c0                	test   %eax,%eax
+     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
+  if(unlink("../iputdir") < 0){
+     161:	83 ec 0c             	sub    $0xc,%esp
+     164:	68 ac 3d 00 00       	push   $0x3dac
+     169:	e8 84 37 00 00       	call   38f2 <unlink>
+     16e:	83 c4 10             	add    $0x10,%esp
+     171:	85 c0                	test   %eax,%eax
+     173:	78 5a                	js     1cf <iputtest+0xaf>
+  if(chdir("/") < 0){
+     175:	83 ec 0c             	sub    $0xc,%esp
+     178:	68 d1 3d 00 00       	push   $0x3dd1
+     17d:	e8 90 37 00 00       	call   3912 <chdir>
+     182:	83 c4 10             	add    $0x10,%esp
+     185:	85 c0                	test   %eax,%eax
+     187:	78 2f                	js     1b8 <iputtest+0x98>
+  printf(stdout, "iput test ok\n");
+     189:	83 ec 08             	sub    $0x8,%esp
+     18c:	68 54 3e 00 00       	push   $0x3e54
+     191:	ff 35 38 5e 00 00    	pushl  0x5e38
+     197:	e8 94 38 00 00       	call   3a30 <printf>
+}
+     19c:	83 c4 10             	add    $0x10,%esp
+     19f:	c9                   	leave  
+     1a0:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a1:	50                   	push   %eax
+     1a2:	50                   	push   %eax
+     1a3:	68 88 3d 00 00       	push   $0x3d88
+     1a8:	ff 35 38 5e 00 00    	pushl  0x5e38
+     1ae:	e8 7d 38 00 00       	call   3a30 <printf>
+    exit();
+     1b3:	e8 ea 36 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir / failed\n");
+     1b8:	50                   	push   %eax
+     1b9:	50                   	push   %eax
+     1ba:	68 d3 3d 00 00       	push   $0x3dd3
+     1bf:	ff 35 38 5e 00 00    	pushl  0x5e38
+     1c5:	e8 66 38 00 00       	call   3a30 <printf>
+    exit();
+     1ca:	e8 d3 36 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1cf:	52                   	push   %edx
+     1d0:	52                   	push   %edx
+     1d1:	68 b7 3d 00 00       	push   $0x3db7
+     1d6:	ff 35 38 5e 00 00    	pushl  0x5e38
+     1dc:	e8 4f 38 00 00       	call   3a30 <printf>
+    exit();
+     1e1:	e8 bc 36 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1e6:	51                   	push   %ecx
+     1e7:	51                   	push   %ecx
+     1e8:	68 96 3d 00 00       	push   $0x3d96
+     1ed:	ff 35 38 5e 00 00    	pushl  0x5e38
+     1f3:	e8 38 38 00 00       	call   3a30 <printf>
+    exit();
+     1f8:	e8 a5 36 00 00       	call   38a2 <exit>
+     1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <exitiputtest>:
+{
+     200:	55                   	push   %ebp
+     201:	89 e5                	mov    %esp,%ebp
+     203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     206:	68 e3 3d 00 00       	push   $0x3de3
+     20b:	ff 35 38 5e 00 00    	pushl  0x5e38
+     211:	e8 1a 38 00 00       	call   3a30 <printf>
+  pid = fork();
+     216:	e8 7f 36 00 00       	call   389a <fork>
+  if(pid < 0){
+     21b:	83 c4 10             	add    $0x10,%esp
+     21e:	85 c0                	test   %eax,%eax
+     220:	0f 88 82 00 00 00    	js     2a8 <exitiputtest+0xa8>
+  if(pid == 0){
+     226:	75 48                	jne    270 <exitiputtest+0x70>
+    if(mkdir("iputdir") < 0){
+     228:	83 ec 0c             	sub    $0xc,%esp
+     22b:	68 af 3d 00 00       	push   $0x3daf
+     230:	e8 d5 36 00 00       	call   390a <mkdir>
+     235:	83 c4 10             	add    $0x10,%esp
+     238:	85 c0                	test   %eax,%eax
+     23a:	0f 88 96 00 00 00    	js     2d6 <exitiputtest+0xd6>
+    if(chdir("iputdir") < 0){
+     240:	83 ec 0c             	sub    $0xc,%esp
+     243:	68 af 3d 00 00       	push   $0x3daf
+     248:	e8 c5 36 00 00       	call   3912 <chdir>
+     24d:	83 c4 10             	add    $0x10,%esp
+     250:	85 c0                	test   %eax,%eax
+     252:	78 6b                	js     2bf <exitiputtest+0xbf>
+    if(unlink("../iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 ac 3d 00 00       	push   $0x3dac
+     25c:	e8 91 36 00 00       	call   38f2 <unlink>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	78 28                	js     290 <exitiputtest+0x90>
+    exit();
+     268:	e8 35 36 00 00       	call   38a2 <exit>
+     26d:	8d 76 00             	lea    0x0(%esi),%esi
+  wait();
+     270:	e8 35 36 00 00       	call   38aa <wait>
+  printf(stdout, "exitiput test ok\n");
+     275:	83 ec 08             	sub    $0x8,%esp
+     278:	68 06 3e 00 00       	push   $0x3e06
+     27d:	ff 35 38 5e 00 00    	pushl  0x5e38
+     283:	e8 a8 37 00 00       	call   3a30 <printf>
+}
+     288:	83 c4 10             	add    $0x10,%esp
+     28b:	c9                   	leave  
+     28c:	c3                   	ret    
+     28d:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     290:	83 ec 08             	sub    $0x8,%esp
+     293:	68 b7 3d 00 00       	push   $0x3db7
+     298:	ff 35 38 5e 00 00    	pushl  0x5e38
+     29e:	e8 8d 37 00 00       	call   3a30 <printf>
+      exit();
+     2a3:	e8 fa 35 00 00       	call   38a2 <exit>
+    printf(stdout, "fork failed\n");
+     2a8:	51                   	push   %ecx
+     2a9:	51                   	push   %ecx
+     2aa:	68 c9 4c 00 00       	push   $0x4cc9
+     2af:	ff 35 38 5e 00 00    	pushl  0x5e38
+     2b5:	e8 76 37 00 00       	call   3a30 <printf>
+    exit();
+     2ba:	e8 e3 35 00 00       	call   38a2 <exit>
+      printf(stdout, "child chdir failed\n");
+     2bf:	50                   	push   %eax
+     2c0:	50                   	push   %eax
+     2c1:	68 f2 3d 00 00       	push   $0x3df2
+     2c6:	ff 35 38 5e 00 00    	pushl  0x5e38
+     2cc:	e8 5f 37 00 00       	call   3a30 <printf>
+      exit();
+     2d1:	e8 cc 35 00 00       	call   38a2 <exit>
+      printf(stdout, "mkdir failed\n");
+     2d6:	52                   	push   %edx
+     2d7:	52                   	push   %edx
+     2d8:	68 88 3d 00 00       	push   $0x3d88
+     2dd:	ff 35 38 5e 00 00    	pushl  0x5e38
+     2e3:	e8 48 37 00 00       	call   3a30 <printf>
+      exit();
+     2e8:	e8 b5 35 00 00       	call   38a2 <exit>
+     2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <openiputtest>:
+{
+     2f0:	55                   	push   %ebp
+     2f1:	89 e5                	mov    %esp,%ebp
+     2f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     2f6:	68 18 3e 00 00       	push   $0x3e18
+     2fb:	ff 35 38 5e 00 00    	pushl  0x5e38
+     301:	e8 2a 37 00 00       	call   3a30 <printf>
+  if(mkdir("oidir") < 0){
+     306:	c7 04 24 27 3e 00 00 	movl   $0x3e27,(%esp)
+     30d:	e8 f8 35 00 00       	call   390a <mkdir>
+     312:	83 c4 10             	add    $0x10,%esp
+     315:	85 c0                	test   %eax,%eax
+     317:	0f 88 88 00 00 00    	js     3a5 <openiputtest+0xb5>
+  pid = fork();
+     31d:	e8 78 35 00 00       	call   389a <fork>
+  if(pid < 0){
+     322:	85 c0                	test   %eax,%eax
+     324:	0f 88 92 00 00 00    	js     3bc <openiputtest+0xcc>
+  if(pid == 0){
+     32a:	75 34                	jne    360 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     32c:	83 ec 08             	sub    $0x8,%esp
+     32f:	6a 02                	push   $0x2
+     331:	68 27 3e 00 00       	push   $0x3e27
+     336:	e8 a7 35 00 00       	call   38e2 <open>
+    if(fd >= 0){
+     33b:	83 c4 10             	add    $0x10,%esp
+     33e:	85 c0                	test   %eax,%eax
+     340:	78 5e                	js     3a0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     342:	83 ec 08             	sub    $0x8,%esp
+     345:	68 ac 4d 00 00       	push   $0x4dac
+     34a:	ff 35 38 5e 00 00    	pushl  0x5e38
+     350:	e8 db 36 00 00       	call   3a30 <printf>
+      exit();
+     355:	e8 48 35 00 00       	call   38a2 <exit>
+     35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  sleep(1);
+     360:	83 ec 0c             	sub    $0xc,%esp
+     363:	6a 01                	push   $0x1
+     365:	e8 c8 35 00 00       	call   3932 <sleep>
+  if(unlink("oidir") != 0){
+     36a:	c7 04 24 27 3e 00 00 	movl   $0x3e27,(%esp)
+     371:	e8 7c 35 00 00       	call   38f2 <unlink>
+     376:	83 c4 10             	add    $0x10,%esp
+     379:	85 c0                	test   %eax,%eax
+     37b:	75 56                	jne    3d3 <openiputtest+0xe3>
+  wait();
+     37d:	e8 28 35 00 00       	call   38aa <wait>
+  printf(stdout, "openiput test ok\n");
+     382:	83 ec 08             	sub    $0x8,%esp
+     385:	68 50 3e 00 00       	push   $0x3e50
+     38a:	ff 35 38 5e 00 00    	pushl  0x5e38
+     390:	e8 9b 36 00 00       	call   3a30 <printf>
+     395:	83 c4 10             	add    $0x10,%esp
+}
+     398:	c9                   	leave  
+     399:	c3                   	ret    
+     39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3a0:	e8 fd 34 00 00       	call   38a2 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3a5:	51                   	push   %ecx
+     3a6:	51                   	push   %ecx
+     3a7:	68 2d 3e 00 00       	push   $0x3e2d
+     3ac:	ff 35 38 5e 00 00    	pushl  0x5e38
+     3b2:	e8 79 36 00 00       	call   3a30 <printf>
+    exit();
+     3b7:	e8 e6 34 00 00       	call   38a2 <exit>
+    printf(stdout, "fork failed\n");
+     3bc:	52                   	push   %edx
+     3bd:	52                   	push   %edx
+     3be:	68 c9 4c 00 00       	push   $0x4cc9
+     3c3:	ff 35 38 5e 00 00    	pushl  0x5e38
+     3c9:	e8 62 36 00 00       	call   3a30 <printf>
+    exit();
+     3ce:	e8 cf 34 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink failed\n");
+     3d3:	50                   	push   %eax
+     3d4:	50                   	push   %eax
+     3d5:	68 41 3e 00 00       	push   $0x3e41
+     3da:	ff 35 38 5e 00 00    	pushl  0x5e38
+     3e0:	e8 4b 36 00 00       	call   3a30 <printf>
+    exit();
+     3e5:	e8 b8 34 00 00       	call   38a2 <exit>
+     3ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003f0 <opentest>:
+{
+     3f0:	55                   	push   %ebp
+     3f1:	89 e5                	mov    %esp,%ebp
+     3f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     3f6:	68 62 3e 00 00       	push   $0x3e62
+     3fb:	ff 35 38 5e 00 00    	pushl  0x5e38
+     401:	e8 2a 36 00 00       	call   3a30 <printf>
+  fd = open("echo", 0);
+     406:	58                   	pop    %eax
+     407:	5a                   	pop    %edx
+     408:	6a 00                	push   $0x0
+     40a:	68 6d 3e 00 00       	push   $0x3e6d
+     40f:	e8 ce 34 00 00       	call   38e2 <open>
+  if(fd < 0){
+     414:	83 c4 10             	add    $0x10,%esp
+     417:	85 c0                	test   %eax,%eax
+     419:	78 36                	js     451 <opentest+0x61>
+  close(fd);
+     41b:	83 ec 0c             	sub    $0xc,%esp
+     41e:	50                   	push   %eax
+     41f:	e8 a6 34 00 00       	call   38ca <close>
+  fd = open("doesnotexist", 0);
+     424:	5a                   	pop    %edx
+     425:	59                   	pop    %ecx
+     426:	6a 00                	push   $0x0
+     428:	68 85 3e 00 00       	push   $0x3e85
+     42d:	e8 b0 34 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     432:	83 c4 10             	add    $0x10,%esp
+     435:	85 c0                	test   %eax,%eax
+     437:	79 2f                	jns    468 <opentest+0x78>
+  printf(stdout, "open test ok\n");
+     439:	83 ec 08             	sub    $0x8,%esp
+     43c:	68 b0 3e 00 00       	push   $0x3eb0
+     441:	ff 35 38 5e 00 00    	pushl  0x5e38
+     447:	e8 e4 35 00 00       	call   3a30 <printf>
+}
+     44c:	83 c4 10             	add    $0x10,%esp
+     44f:	c9                   	leave  
+     450:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     451:	50                   	push   %eax
+     452:	50                   	push   %eax
+     453:	68 72 3e 00 00       	push   $0x3e72
+     458:	ff 35 38 5e 00 00    	pushl  0x5e38
+     45e:	e8 cd 35 00 00       	call   3a30 <printf>
+    exit();
+     463:	e8 3a 34 00 00       	call   38a2 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     468:	50                   	push   %eax
+     469:	50                   	push   %eax
+     46a:	68 92 3e 00 00       	push   $0x3e92
+     46f:	ff 35 38 5e 00 00    	pushl  0x5e38
+     475:	e8 b6 35 00 00       	call   3a30 <printf>
+    exit();
+     47a:	e8 23 34 00 00       	call   38a2 <exit>
+     47f:	90                   	nop
+
+00000480 <writetest>:
+{
+     480:	55                   	push   %ebp
+     481:	89 e5                	mov    %esp,%ebp
+     483:	56                   	push   %esi
+     484:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     485:	83 ec 08             	sub    $0x8,%esp
+     488:	68 be 3e 00 00       	push   $0x3ebe
+     48d:	ff 35 38 5e 00 00    	pushl  0x5e38
+     493:	e8 98 35 00 00       	call   3a30 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     498:	58                   	pop    %eax
+     499:	5a                   	pop    %edx
+     49a:	68 02 02 00 00       	push   $0x202
+     49f:	68 cf 3e 00 00       	push   $0x3ecf
+     4a4:	e8 39 34 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     4a9:	83 c4 10             	add    $0x10,%esp
+     4ac:	85 c0                	test   %eax,%eax
+     4ae:	0f 88 88 01 00 00    	js     63c <writetest+0x1bc>
+    printf(stdout, "creat small succeeded; ok\n");
+     4b4:	83 ec 08             	sub    $0x8,%esp
+     4b7:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4b9:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4bb:	68 d5 3e 00 00       	push   $0x3ed5
+     4c0:	ff 35 38 5e 00 00    	pushl  0x5e38
+     4c6:	e8 65 35 00 00       	call   3a30 <printf>
+     4cb:	83 c4 10             	add    $0x10,%esp
+     4ce:	66 90                	xchg   %ax,%ax
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     4d0:	83 ec 04             	sub    $0x4,%esp
+     4d3:	6a 0a                	push   $0xa
+     4d5:	68 0c 3f 00 00       	push   $0x3f0c
+     4da:	56                   	push   %esi
+     4db:	e8 e2 33 00 00       	call   38c2 <write>
+     4e0:	83 c4 10             	add    $0x10,%esp
+     4e3:	83 f8 0a             	cmp    $0xa,%eax
+     4e6:	0f 85 d9 00 00 00    	jne    5c5 <writetest+0x145>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     4ec:	83 ec 04             	sub    $0x4,%esp
+     4ef:	6a 0a                	push   $0xa
+     4f1:	68 17 3f 00 00       	push   $0x3f17
+     4f6:	56                   	push   %esi
+     4f7:	e8 c6 33 00 00       	call   38c2 <write>
+     4fc:	83 c4 10             	add    $0x10,%esp
+     4ff:	83 f8 0a             	cmp    $0xa,%eax
+     502:	0f 85 d6 00 00 00    	jne    5de <writetest+0x15e>
+  for(i = 0; i < 100; i++){
+     508:	83 c3 01             	add    $0x1,%ebx
+     50b:	83 fb 64             	cmp    $0x64,%ebx
+     50e:	75 c0                	jne    4d0 <writetest+0x50>
+  printf(stdout, "writes ok\n");
+     510:	83 ec 08             	sub    $0x8,%esp
+     513:	68 22 3f 00 00       	push   $0x3f22
+     518:	ff 35 38 5e 00 00    	pushl  0x5e38
+     51e:	e8 0d 35 00 00       	call   3a30 <printf>
+  close(fd);
+     523:	89 34 24             	mov    %esi,(%esp)
+     526:	e8 9f 33 00 00       	call   38ca <close>
+  fd = open("small", O_RDONLY);
+     52b:	5b                   	pop    %ebx
+     52c:	5e                   	pop    %esi
+     52d:	6a 00                	push   $0x0
+     52f:	68 cf 3e 00 00       	push   $0x3ecf
+     534:	e8 a9 33 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     539:	83 c4 10             	add    $0x10,%esp
+     53c:	85 c0                	test   %eax,%eax
+  fd = open("small", O_RDONLY);
+     53e:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     540:	0f 88 b1 00 00 00    	js     5f7 <writetest+0x177>
+    printf(stdout, "open small succeeded ok\n");
+     546:	83 ec 08             	sub    $0x8,%esp
+     549:	68 2d 3f 00 00       	push   $0x3f2d
+     54e:	ff 35 38 5e 00 00    	pushl  0x5e38
+     554:	e8 d7 34 00 00       	call   3a30 <printf>
+  i = read(fd, buf, 2000);
+     559:	83 c4 0c             	add    $0xc,%esp
+     55c:	68 d0 07 00 00       	push   $0x7d0
+     561:	68 20 86 00 00       	push   $0x8620
+     566:	53                   	push   %ebx
+     567:	e8 4e 33 00 00       	call   38ba <read>
+  if(i == 2000){
+     56c:	83 c4 10             	add    $0x10,%esp
+     56f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     574:	0f 85 94 00 00 00    	jne    60e <writetest+0x18e>
+    printf(stdout, "read succeeded ok\n");
+     57a:	83 ec 08             	sub    $0x8,%esp
+     57d:	68 61 3f 00 00       	push   $0x3f61
+     582:	ff 35 38 5e 00 00    	pushl  0x5e38
+     588:	e8 a3 34 00 00       	call   3a30 <printf>
+  close(fd);
+     58d:	89 1c 24             	mov    %ebx,(%esp)
+     590:	e8 35 33 00 00       	call   38ca <close>
+  if(unlink("small") < 0){
+     595:	c7 04 24 cf 3e 00 00 	movl   $0x3ecf,(%esp)
+     59c:	e8 51 33 00 00       	call   38f2 <unlink>
+     5a1:	83 c4 10             	add    $0x10,%esp
+     5a4:	85 c0                	test   %eax,%eax
+     5a6:	78 7d                	js     625 <writetest+0x1a5>
+  printf(stdout, "small file test ok\n");
+     5a8:	83 ec 08             	sub    $0x8,%esp
+     5ab:	68 89 3f 00 00       	push   $0x3f89
+     5b0:	ff 35 38 5e 00 00    	pushl  0x5e38
+     5b6:	e8 75 34 00 00       	call   3a30 <printf>
+}
+     5bb:	83 c4 10             	add    $0x10,%esp
+     5be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5c1:	5b                   	pop    %ebx
+     5c2:	5e                   	pop    %esi
+     5c3:	5d                   	pop    %ebp
+     5c4:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5c5:	83 ec 04             	sub    $0x4,%esp
+     5c8:	53                   	push   %ebx
+     5c9:	68 d0 4d 00 00       	push   $0x4dd0
+     5ce:	ff 35 38 5e 00 00    	pushl  0x5e38
+     5d4:	e8 57 34 00 00       	call   3a30 <printf>
+      exit();
+     5d9:	e8 c4 32 00 00       	call   38a2 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     5de:	83 ec 04             	sub    $0x4,%esp
+     5e1:	53                   	push   %ebx
+     5e2:	68 f4 4d 00 00       	push   $0x4df4
+     5e7:	ff 35 38 5e 00 00    	pushl  0x5e38
+     5ed:	e8 3e 34 00 00       	call   3a30 <printf>
+      exit();
+     5f2:	e8 ab 32 00 00       	call   38a2 <exit>
+    printf(stdout, "error: open small failed!\n");
+     5f7:	51                   	push   %ecx
+     5f8:	51                   	push   %ecx
+     5f9:	68 46 3f 00 00       	push   $0x3f46
+     5fe:	ff 35 38 5e 00 00    	pushl  0x5e38
+     604:	e8 27 34 00 00       	call   3a30 <printf>
+    exit();
+     609:	e8 94 32 00 00       	call   38a2 <exit>
+    printf(stdout, "read failed\n");
+     60e:	52                   	push   %edx
+     60f:	52                   	push   %edx
+     610:	68 8d 42 00 00       	push   $0x428d
+     615:	ff 35 38 5e 00 00    	pushl  0x5e38
+     61b:	e8 10 34 00 00       	call   3a30 <printf>
+    exit();
+     620:	e8 7d 32 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink small failed\n");
+     625:	50                   	push   %eax
+     626:	50                   	push   %eax
+     627:	68 74 3f 00 00       	push   $0x3f74
+     62c:	ff 35 38 5e 00 00    	pushl  0x5e38
+     632:	e8 f9 33 00 00       	call   3a30 <printf>
+    exit();
+     637:	e8 66 32 00 00       	call   38a2 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     63c:	50                   	push   %eax
+     63d:	50                   	push   %eax
+     63e:	68 f0 3e 00 00       	push   $0x3ef0
+     643:	ff 35 38 5e 00 00    	pushl  0x5e38
+     649:	e8 e2 33 00 00       	call   3a30 <printf>
+    exit();
+     64e:	e8 4f 32 00 00       	call   38a2 <exit>
+     653:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     659:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000660 <writetest1>:
+{
+     660:	55                   	push   %ebp
+     661:	89 e5                	mov    %esp,%ebp
+     663:	56                   	push   %esi
+     664:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     665:	83 ec 08             	sub    $0x8,%esp
+     668:	68 9d 3f 00 00       	push   $0x3f9d
+     66d:	ff 35 38 5e 00 00    	pushl  0x5e38
+     673:	e8 b8 33 00 00       	call   3a30 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     678:	58                   	pop    %eax
+     679:	5a                   	pop    %edx
+     67a:	68 02 02 00 00       	push   $0x202
+     67f:	68 17 40 00 00       	push   $0x4017
+     684:	e8 59 32 00 00       	call   38e2 <open>
+  if(fd < 0){
+     689:	83 c4 10             	add    $0x10,%esp
+     68c:	85 c0                	test   %eax,%eax
+     68e:	0f 88 61 01 00 00    	js     7f5 <writetest1+0x195>
+     694:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     696:	31 db                	xor    %ebx,%ebx
+     698:	90                   	nop
+     699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(write(fd, buf, 512) != 512){
+     6a0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6a3:	89 1d 20 86 00 00    	mov    %ebx,0x8620
+    if(write(fd, buf, 512) != 512){
+     6a9:	68 00 02 00 00       	push   $0x200
+     6ae:	68 20 86 00 00       	push   $0x8620
+     6b3:	56                   	push   %esi
+     6b4:	e8 09 32 00 00       	call   38c2 <write>
+     6b9:	83 c4 10             	add    $0x10,%esp
+     6bc:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6c1:	0f 85 b3 00 00 00    	jne    77a <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6c7:	83 c3 01             	add    $0x1,%ebx
+     6ca:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6d0:	75 ce                	jne    6a0 <writetest1+0x40>
+  close(fd);
+     6d2:	83 ec 0c             	sub    $0xc,%esp
+     6d5:	56                   	push   %esi
+     6d6:	e8 ef 31 00 00       	call   38ca <close>
+  fd = open("big", O_RDONLY);
+     6db:	5b                   	pop    %ebx
+     6dc:	5e                   	pop    %esi
+     6dd:	6a 00                	push   $0x0
+     6df:	68 17 40 00 00       	push   $0x4017
+     6e4:	e8 f9 31 00 00       	call   38e2 <open>
+  if(fd < 0){
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	85 c0                	test   %eax,%eax
+  fd = open("big", O_RDONLY);
+     6ee:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+     6f0:	0f 88 e8 00 00 00    	js     7de <writetest1+0x17e>
+  n = 0;
+     6f6:	31 db                	xor    %ebx,%ebx
+     6f8:	eb 1d                	jmp    717 <writetest1+0xb7>
+     6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     700:	3d 00 02 00 00       	cmp    $0x200,%eax
+     705:	0f 85 9f 00 00 00    	jne    7aa <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     70b:	a1 20 86 00 00       	mov    0x8620,%eax
+     710:	39 d8                	cmp    %ebx,%eax
+     712:	75 7f                	jne    793 <writetest1+0x133>
+    n++;
+     714:	83 c3 01             	add    $0x1,%ebx
+    i = read(fd, buf, 512);
+     717:	83 ec 04             	sub    $0x4,%esp
+     71a:	68 00 02 00 00       	push   $0x200
+     71f:	68 20 86 00 00       	push   $0x8620
+     724:	56                   	push   %esi
+     725:	e8 90 31 00 00       	call   38ba <read>
+    if(i == 0){
+     72a:	83 c4 10             	add    $0x10,%esp
+     72d:	85 c0                	test   %eax,%eax
+     72f:	75 cf                	jne    700 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     731:	81 fb 8b 00 00 00    	cmp    $0x8b,%ebx
+     737:	0f 84 86 00 00 00    	je     7c3 <writetest1+0x163>
+  close(fd);
+     73d:	83 ec 0c             	sub    $0xc,%esp
+     740:	56                   	push   %esi
+     741:	e8 84 31 00 00       	call   38ca <close>
+  if(unlink("big") < 0){
+     746:	c7 04 24 17 40 00 00 	movl   $0x4017,(%esp)
+     74d:	e8 a0 31 00 00       	call   38f2 <unlink>
+     752:	83 c4 10             	add    $0x10,%esp
+     755:	85 c0                	test   %eax,%eax
+     757:	0f 88 af 00 00 00    	js     80c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     75d:	83 ec 08             	sub    $0x8,%esp
+     760:	68 3e 40 00 00       	push   $0x403e
+     765:	ff 35 38 5e 00 00    	pushl  0x5e38
+     76b:	e8 c0 32 00 00       	call   3a30 <printf>
+}
+     770:	83 c4 10             	add    $0x10,%esp
+     773:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     776:	5b                   	pop    %ebx
+     777:	5e                   	pop    %esi
+     778:	5d                   	pop    %ebp
+     779:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     77a:	83 ec 04             	sub    $0x4,%esp
+     77d:	53                   	push   %ebx
+     77e:	68 c7 3f 00 00       	push   $0x3fc7
+     783:	ff 35 38 5e 00 00    	pushl  0x5e38
+     789:	e8 a2 32 00 00       	call   3a30 <printf>
+      exit();
+     78e:	e8 0f 31 00 00       	call   38a2 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     793:	50                   	push   %eax
+     794:	53                   	push   %ebx
+     795:	68 18 4e 00 00       	push   $0x4e18
+     79a:	ff 35 38 5e 00 00    	pushl  0x5e38
+     7a0:	e8 8b 32 00 00       	call   3a30 <printf>
+      exit();
+     7a5:	e8 f8 30 00 00       	call   38a2 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	50                   	push   %eax
+     7ae:	68 1b 40 00 00       	push   $0x401b
+     7b3:	ff 35 38 5e 00 00    	pushl  0x5e38
+     7b9:	e8 72 32 00 00       	call   3a30 <printf>
+      exit();
+     7be:	e8 df 30 00 00       	call   38a2 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7c3:	52                   	push   %edx
+     7c4:	68 8b 00 00 00       	push   $0x8b
+     7c9:	68 fe 3f 00 00       	push   $0x3ffe
+     7ce:	ff 35 38 5e 00 00    	pushl  0x5e38
+     7d4:	e8 57 32 00 00       	call   3a30 <printf>
+        exit();
+     7d9:	e8 c4 30 00 00       	call   38a2 <exit>
+    printf(stdout, "error: open big failed!\n");
+     7de:	51                   	push   %ecx
+     7df:	51                   	push   %ecx
+     7e0:	68 e5 3f 00 00       	push   $0x3fe5
+     7e5:	ff 35 38 5e 00 00    	pushl  0x5e38
+     7eb:	e8 40 32 00 00       	call   3a30 <printf>
+    exit();
+     7f0:	e8 ad 30 00 00       	call   38a2 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     7f5:	50                   	push   %eax
+     7f6:	50                   	push   %eax
+     7f7:	68 ad 3f 00 00       	push   $0x3fad
+     7fc:	ff 35 38 5e 00 00    	pushl  0x5e38
+     802:	e8 29 32 00 00       	call   3a30 <printf>
+    exit();
+     807:	e8 96 30 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink big failed\n");
+     80c:	50                   	push   %eax
+     80d:	50                   	push   %eax
+     80e:	68 2b 40 00 00       	push   $0x402b
+     813:	ff 35 38 5e 00 00    	pushl  0x5e38
+     819:	e8 12 32 00 00       	call   3a30 <printf>
+    exit();
+     81e:	e8 7f 30 00 00       	call   38a2 <exit>
+     823:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000830 <createtest>:
+{
+     830:	55                   	push   %ebp
+     831:	89 e5                	mov    %esp,%ebp
+     833:	53                   	push   %ebx
+  name[2] = '\0';
+     834:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     839:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     83c:	68 38 4e 00 00       	push   $0x4e38
+     841:	ff 35 38 5e 00 00    	pushl  0x5e38
+     847:	e8 e4 31 00 00       	call   3a30 <printf>
+  name[0] = 'a';
+     84c:	c6 05 20 a6 00 00 61 	movb   $0x61,0xa620
+  name[2] = '\0';
+     853:	c6 05 22 a6 00 00 00 	movb   $0x0,0xa622
+     85a:	83 c4 10             	add    $0x10,%esp
+     85d:	8d 76 00             	lea    0x0(%esi),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     860:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     863:	88 1d 21 a6 00 00    	mov    %bl,0xa621
+     869:	83 c3 01             	add    $0x1,%ebx
+    fd = open(name, O_CREATE|O_RDWR);
+     86c:	68 02 02 00 00       	push   $0x202
+     871:	68 20 a6 00 00       	push   $0xa620
+     876:	e8 67 30 00 00       	call   38e2 <open>
+    close(fd);
+     87b:	89 04 24             	mov    %eax,(%esp)
+     87e:	e8 47 30 00 00       	call   38ca <close>
+  for(i = 0; i < 52; i++){
+     883:	83 c4 10             	add    $0x10,%esp
+     886:	80 fb 64             	cmp    $0x64,%bl
+     889:	75 d5                	jne    860 <createtest+0x30>
+  name[0] = 'a';
+     88b:	c6 05 20 a6 00 00 61 	movb   $0x61,0xa620
+  name[2] = '\0';
+     892:	c6 05 22 a6 00 00 00 	movb   $0x0,0xa622
+     899:	bb 30 00 00 00       	mov    $0x30,%ebx
+     89e:	66 90                	xchg   %ax,%ax
+    unlink(name);
+     8a0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8a3:	88 1d 21 a6 00 00    	mov    %bl,0xa621
+     8a9:	83 c3 01             	add    $0x1,%ebx
+    unlink(name);
+     8ac:	68 20 a6 00 00       	push   $0xa620
+     8b1:	e8 3c 30 00 00       	call   38f2 <unlink>
+  for(i = 0; i < 52; i++){
+     8b6:	83 c4 10             	add    $0x10,%esp
+     8b9:	80 fb 64             	cmp    $0x64,%bl
+     8bc:	75 e2                	jne    8a0 <createtest+0x70>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8be:	83 ec 08             	sub    $0x8,%esp
+     8c1:	68 60 4e 00 00       	push   $0x4e60
+     8c6:	ff 35 38 5e 00 00    	pushl  0x5e38
+     8cc:	e8 5f 31 00 00       	call   3a30 <printf>
+}
+     8d1:	83 c4 10             	add    $0x10,%esp
+     8d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     8d7:	c9                   	leave  
+     8d8:	c3                   	ret    
+     8d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008e0 <dirtest>:
+{
+     8e0:	55                   	push   %ebp
+     8e1:	89 e5                	mov    %esp,%ebp
+     8e3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     8e6:	68 4c 40 00 00       	push   $0x404c
+     8eb:	ff 35 38 5e 00 00    	pushl  0x5e38
+     8f1:	e8 3a 31 00 00       	call   3a30 <printf>
+  if(mkdir("dir0") < 0){
+     8f6:	c7 04 24 58 40 00 00 	movl   $0x4058,(%esp)
+     8fd:	e8 08 30 00 00       	call   390a <mkdir>
+     902:	83 c4 10             	add    $0x10,%esp
+     905:	85 c0                	test   %eax,%eax
+     907:	78 58                	js     961 <dirtest+0x81>
+  if(chdir("dir0") < 0){
+     909:	83 ec 0c             	sub    $0xc,%esp
+     90c:	68 58 40 00 00       	push   $0x4058
+     911:	e8 fc 2f 00 00       	call   3912 <chdir>
+     916:	83 c4 10             	add    $0x10,%esp
+     919:	85 c0                	test   %eax,%eax
+     91b:	0f 88 85 00 00 00    	js     9a6 <dirtest+0xc6>
+  if(chdir("..") < 0){
+     921:	83 ec 0c             	sub    $0xc,%esp
+     924:	68 fd 45 00 00       	push   $0x45fd
+     929:	e8 e4 2f 00 00       	call   3912 <chdir>
+     92e:	83 c4 10             	add    $0x10,%esp
+     931:	85 c0                	test   %eax,%eax
+     933:	78 5a                	js     98f <dirtest+0xaf>
+  if(unlink("dir0") < 0){
+     935:	83 ec 0c             	sub    $0xc,%esp
+     938:	68 58 40 00 00       	push   $0x4058
+     93d:	e8 b0 2f 00 00       	call   38f2 <unlink>
+     942:	83 c4 10             	add    $0x10,%esp
+     945:	85 c0                	test   %eax,%eax
+     947:	78 2f                	js     978 <dirtest+0x98>
+  printf(stdout, "mkdir test ok\n");
+     949:	83 ec 08             	sub    $0x8,%esp
+     94c:	68 95 40 00 00       	push   $0x4095
+     951:	ff 35 38 5e 00 00    	pushl  0x5e38
+     957:	e8 d4 30 00 00       	call   3a30 <printf>
+}
+     95c:	83 c4 10             	add    $0x10,%esp
+     95f:	c9                   	leave  
+     960:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     961:	50                   	push   %eax
+     962:	50                   	push   %eax
+     963:	68 88 3d 00 00       	push   $0x3d88
+     968:	ff 35 38 5e 00 00    	pushl  0x5e38
+     96e:	e8 bd 30 00 00       	call   3a30 <printf>
+    exit();
+     973:	e8 2a 2f 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     978:	50                   	push   %eax
+     979:	50                   	push   %eax
+     97a:	68 81 40 00 00       	push   $0x4081
+     97f:	ff 35 38 5e 00 00    	pushl  0x5e38
+     985:	e8 a6 30 00 00       	call   3a30 <printf>
+    exit();
+     98a:	e8 13 2f 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir .. failed\n");
+     98f:	52                   	push   %edx
+     990:	52                   	push   %edx
+     991:	68 70 40 00 00       	push   $0x4070
+     996:	ff 35 38 5e 00 00    	pushl  0x5e38
+     99c:	e8 8f 30 00 00       	call   3a30 <printf>
+    exit();
+     9a1:	e8 fc 2e 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9a6:	51                   	push   %ecx
+     9a7:	51                   	push   %ecx
+     9a8:	68 5d 40 00 00       	push   $0x405d
+     9ad:	ff 35 38 5e 00 00    	pushl  0x5e38
+     9b3:	e8 78 30 00 00       	call   3a30 <printf>
+    exit();
+     9b8:	e8 e5 2e 00 00       	call   38a2 <exit>
+     9bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009c0 <exectest>:
+{
+     9c0:	55                   	push   %ebp
+     9c1:	89 e5                	mov    %esp,%ebp
+     9c3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     9c6:	68 a4 40 00 00       	push   $0x40a4
+     9cb:	ff 35 38 5e 00 00    	pushl  0x5e38
+     9d1:	e8 5a 30 00 00       	call   3a30 <printf>
+  if(exec("echo", echoargv) < 0){
+     9d6:	5a                   	pop    %edx
+     9d7:	59                   	pop    %ecx
+     9d8:	68 3c 5e 00 00       	push   $0x5e3c
+     9dd:	68 6d 3e 00 00       	push   $0x3e6d
+     9e2:	e8 f3 2e 00 00       	call   38da <exec>
+     9e7:	83 c4 10             	add    $0x10,%esp
+     9ea:	85 c0                	test   %eax,%eax
+     9ec:	78 02                	js     9f0 <exectest+0x30>
+}
+     9ee:	c9                   	leave  
+     9ef:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     9f0:	50                   	push   %eax
+     9f1:	50                   	push   %eax
+     9f2:	68 af 40 00 00       	push   $0x40af
+     9f7:	ff 35 38 5e 00 00    	pushl  0x5e38
+     9fd:	e8 2e 30 00 00       	call   3a30 <printf>
+    exit();
+     a02:	e8 9b 2e 00 00       	call   38a2 <exit>
+     a07:	89 f6                	mov    %esi,%esi
+     a09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000a10 <pipe1>:
+{
+     a10:	55                   	push   %ebp
+     a11:	89 e5                	mov    %esp,%ebp
+     a13:	57                   	push   %edi
+     a14:	56                   	push   %esi
+     a15:	53                   	push   %ebx
+  if(pipe(fds) != 0){
+     a16:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a19:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a1c:	50                   	push   %eax
+     a1d:	e8 90 2e 00 00       	call   38b2 <pipe>
+     a22:	83 c4 10             	add    $0x10,%esp
+     a25:	85 c0                	test   %eax,%eax
+     a27:	0f 85 3e 01 00 00    	jne    b6b <pipe1+0x15b>
+     a2d:	89 c3                	mov    %eax,%ebx
+  pid = fork();
+     a2f:	e8 66 2e 00 00       	call   389a <fork>
+  if(pid == 0){
+     a34:	83 f8 00             	cmp    $0x0,%eax
+     a37:	0f 84 84 00 00 00    	je     ac1 <pipe1+0xb1>
+  } else if(pid > 0){
+     a3d:	0f 8e 3b 01 00 00    	jle    b7e <pipe1+0x16e>
+    close(fds[1]);
+     a43:	83 ec 0c             	sub    $0xc,%esp
+     a46:	ff 75 e4             	pushl  -0x1c(%ebp)
+    cc = 1;
+     a49:	bf 01 00 00 00       	mov    $0x1,%edi
+    close(fds[1]);
+     a4e:	e8 77 2e 00 00       	call   38ca <close>
+    while((n = read(fds[0], buf, cc)) > 0){
+     a53:	83 c4 10             	add    $0x10,%esp
+    total = 0;
+     a56:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     a5d:	83 ec 04             	sub    $0x4,%esp
+     a60:	57                   	push   %edi
+     a61:	68 20 86 00 00       	push   $0x8620
+     a66:	ff 75 e0             	pushl  -0x20(%ebp)
+     a69:	e8 4c 2e 00 00       	call   38ba <read>
+     a6e:	83 c4 10             	add    $0x10,%esp
+     a71:	85 c0                	test   %eax,%eax
+     a73:	0f 8e ab 00 00 00    	jle    b24 <pipe1+0x114>
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     a79:	89 d9                	mov    %ebx,%ecx
+     a7b:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+     a7e:	f7 d9                	neg    %ecx
+     a80:	38 9c 0b 20 86 00 00 	cmp    %bl,0x8620(%ebx,%ecx,1)
+     a87:	8d 53 01             	lea    0x1(%ebx),%edx
+     a8a:	75 1b                	jne    aa7 <pipe1+0x97>
+      for(i = 0; i < n; i++){
+     a8c:	39 f2                	cmp    %esi,%edx
+     a8e:	89 d3                	mov    %edx,%ebx
+     a90:	75 ee                	jne    a80 <pipe1+0x70>
+      cc = cc * 2;
+     a92:	01 ff                	add    %edi,%edi
+      total += n;
+     a94:	01 45 d4             	add    %eax,-0x2c(%ebp)
+     a97:	b8 00 20 00 00       	mov    $0x2000,%eax
+     a9c:	81 ff 00 20 00 00    	cmp    $0x2000,%edi
+     aa2:	0f 4f f8             	cmovg  %eax,%edi
+     aa5:	eb b6                	jmp    a5d <pipe1+0x4d>
+          printf(1, "pipe1 oops 2\n");
+     aa7:	83 ec 08             	sub    $0x8,%esp
+     aaa:	68 de 40 00 00       	push   $0x40de
+     aaf:	6a 01                	push   $0x1
+     ab1:	e8 7a 2f 00 00       	call   3a30 <printf>
+          return;
+     ab6:	83 c4 10             	add    $0x10,%esp
+}
+     ab9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     abc:	5b                   	pop    %ebx
+     abd:	5e                   	pop    %esi
+     abe:	5f                   	pop    %edi
+     abf:	5d                   	pop    %ebp
+     ac0:	c3                   	ret    
+    close(fds[0]);
+     ac1:	83 ec 0c             	sub    $0xc,%esp
+     ac4:	ff 75 e0             	pushl  -0x20(%ebp)
+     ac7:	31 db                	xor    %ebx,%ebx
+     ac9:	be 09 04 00 00       	mov    $0x409,%esi
+     ace:	e8 f7 2d 00 00       	call   38ca <close>
+     ad3:	83 c4 10             	add    $0x10,%esp
+     ad6:	89 d8                	mov    %ebx,%eax
+     ad8:	89 f2                	mov    %esi,%edx
+     ada:	f7 d8                	neg    %eax
+     adc:	29 da                	sub    %ebx,%edx
+     ade:	66 90                	xchg   %ax,%ax
+        buf[i] = seq++;
+     ae0:	88 84 03 20 86 00 00 	mov    %al,0x8620(%ebx,%eax,1)
+     ae7:	83 c0 01             	add    $0x1,%eax
+      for(i = 0; i < 1033; i++)
+     aea:	39 d0                	cmp    %edx,%eax
+     aec:	75 f2                	jne    ae0 <pipe1+0xd0>
+      if(write(fds[1], buf, 1033) != 1033){
+     aee:	83 ec 04             	sub    $0x4,%esp
+     af1:	68 09 04 00 00       	push   $0x409
+     af6:	68 20 86 00 00       	push   $0x8620
+     afb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     afe:	e8 bf 2d 00 00       	call   38c2 <write>
+     b03:	83 c4 10             	add    $0x10,%esp
+     b06:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b0b:	0f 85 80 00 00 00    	jne    b91 <pipe1+0x181>
+     b11:	81 eb 09 04 00 00    	sub    $0x409,%ebx
+    for(n = 0; n < 5; n++){
+     b17:	81 fb d3 eb ff ff    	cmp    $0xffffebd3,%ebx
+     b1d:	75 b7                	jne    ad6 <pipe1+0xc6>
+    exit();
+     b1f:	e8 7e 2d 00 00       	call   38a2 <exit>
+    if(total != 5 * 1033){
+     b24:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b2b:	75 29                	jne    b56 <pipe1+0x146>
+    close(fds[0]);
+     b2d:	83 ec 0c             	sub    $0xc,%esp
+     b30:	ff 75 e0             	pushl  -0x20(%ebp)
+     b33:	e8 92 2d 00 00       	call   38ca <close>
+    wait();
+     b38:	e8 6d 2d 00 00       	call   38aa <wait>
+  printf(1, "pipe1 ok\n");
+     b3d:	5a                   	pop    %edx
+     b3e:	59                   	pop    %ecx
+     b3f:	68 03 41 00 00       	push   $0x4103
+     b44:	6a 01                	push   $0x1
+     b46:	e8 e5 2e 00 00       	call   3a30 <printf>
+     b4b:	83 c4 10             	add    $0x10,%esp
+}
+     b4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     b51:	5b                   	pop    %ebx
+     b52:	5e                   	pop    %esi
+     b53:	5f                   	pop    %edi
+     b54:	5d                   	pop    %ebp
+     b55:	c3                   	ret    
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b56:	53                   	push   %ebx
+     b57:	ff 75 d4             	pushl  -0x2c(%ebp)
+     b5a:	68 ec 40 00 00       	push   $0x40ec
+     b5f:	6a 01                	push   $0x1
+     b61:	e8 ca 2e 00 00       	call   3a30 <printf>
+      exit();
+     b66:	e8 37 2d 00 00       	call   38a2 <exit>
+    printf(1, "pipe() failed\n");
+     b6b:	57                   	push   %edi
+     b6c:	57                   	push   %edi
+     b6d:	68 c1 40 00 00       	push   $0x40c1
+     b72:	6a 01                	push   $0x1
+     b74:	e8 b7 2e 00 00       	call   3a30 <printf>
+    exit();
+     b79:	e8 24 2d 00 00       	call   38a2 <exit>
+    printf(1, "fork() failed\n");
+     b7e:	50                   	push   %eax
+     b7f:	50                   	push   %eax
+     b80:	68 0d 41 00 00       	push   $0x410d
+     b85:	6a 01                	push   $0x1
+     b87:	e8 a4 2e 00 00       	call   3a30 <printf>
+    exit();
+     b8c:	e8 11 2d 00 00       	call   38a2 <exit>
+        printf(1, "pipe1 oops 1\n");
+     b91:	56                   	push   %esi
+     b92:	56                   	push   %esi
+     b93:	68 d0 40 00 00       	push   $0x40d0
+     b98:	6a 01                	push   $0x1
+     b9a:	e8 91 2e 00 00       	call   3a30 <printf>
+        exit();
+     b9f:	e8 fe 2c 00 00       	call   38a2 <exit>
+     ba4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     baa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000bb0 <preempt>:
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	57                   	push   %edi
+     bb4:	56                   	push   %esi
+     bb5:	53                   	push   %ebx
+     bb6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     bb9:	68 1c 41 00 00       	push   $0x411c
+     bbe:	6a 01                	push   $0x1
+     bc0:	e8 6b 2e 00 00       	call   3a30 <printf>
+  pid1 = fork();
+     bc5:	e8 d0 2c 00 00       	call   389a <fork>
+  if(pid1 == 0)
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	85 c0                	test   %eax,%eax
+     bcf:	75 02                	jne    bd3 <preempt+0x23>
+     bd1:	eb fe                	jmp    bd1 <preempt+0x21>
+     bd3:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     bd5:	e8 c0 2c 00 00       	call   389a <fork>
+  if(pid2 == 0)
+     bda:	85 c0                	test   %eax,%eax
+  pid2 = fork();
+     bdc:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     bde:	75 02                	jne    be2 <preempt+0x32>
+     be0:	eb fe                	jmp    be0 <preempt+0x30>
+  pipe(pfds);
+     be2:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     be5:	83 ec 0c             	sub    $0xc,%esp
+     be8:	50                   	push   %eax
+     be9:	e8 c4 2c 00 00       	call   38b2 <pipe>
+  pid3 = fork();
+     bee:	e8 a7 2c 00 00       	call   389a <fork>
+  if(pid3 == 0){
+     bf3:	83 c4 10             	add    $0x10,%esp
+     bf6:	85 c0                	test   %eax,%eax
+  pid3 = fork();
+     bf8:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     bfa:	75 46                	jne    c42 <preempt+0x92>
+    close(pfds[0]);
+     bfc:	83 ec 0c             	sub    $0xc,%esp
+     bff:	ff 75 e0             	pushl  -0x20(%ebp)
+     c02:	e8 c3 2c 00 00       	call   38ca <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c07:	83 c4 0c             	add    $0xc,%esp
+     c0a:	6a 01                	push   $0x1
+     c0c:	68 e1 46 00 00       	push   $0x46e1
+     c11:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c14:	e8 a9 2c 00 00       	call   38c2 <write>
+     c19:	83 c4 10             	add    $0x10,%esp
+     c1c:	83 e8 01             	sub    $0x1,%eax
+     c1f:	74 11                	je     c32 <preempt+0x82>
+      printf(1, "preempt write error");
+     c21:	50                   	push   %eax
+     c22:	50                   	push   %eax
+     c23:	68 26 41 00 00       	push   $0x4126
+     c28:	6a 01                	push   $0x1
+     c2a:	e8 01 2e 00 00       	call   3a30 <printf>
+     c2f:	83 c4 10             	add    $0x10,%esp
+    close(pfds[1]);
+     c32:	83 ec 0c             	sub    $0xc,%esp
+     c35:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c38:	e8 8d 2c 00 00       	call   38ca <close>
+     c3d:	83 c4 10             	add    $0x10,%esp
+     c40:	eb fe                	jmp    c40 <preempt+0x90>
+  close(pfds[1]);
+     c42:	83 ec 0c             	sub    $0xc,%esp
+     c45:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c48:	e8 7d 2c 00 00       	call   38ca <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c4d:	83 c4 0c             	add    $0xc,%esp
+     c50:	68 00 20 00 00       	push   $0x2000
+     c55:	68 20 86 00 00       	push   $0x8620
+     c5a:	ff 75 e0             	pushl  -0x20(%ebp)
+     c5d:	e8 58 2c 00 00       	call   38ba <read>
+     c62:	83 c4 10             	add    $0x10,%esp
+     c65:	83 e8 01             	sub    $0x1,%eax
+     c68:	74 19                	je     c83 <preempt+0xd3>
+    printf(1, "preempt read error");
+     c6a:	50                   	push   %eax
+     c6b:	50                   	push   %eax
+     c6c:	68 3a 41 00 00       	push   $0x413a
+     c71:	6a 01                	push   $0x1
+     c73:	e8 b8 2d 00 00       	call   3a30 <printf>
+    return;
+     c78:	83 c4 10             	add    $0x10,%esp
+}
+     c7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c7e:	5b                   	pop    %ebx
+     c7f:	5e                   	pop    %esi
+     c80:	5f                   	pop    %edi
+     c81:	5d                   	pop    %ebp
+     c82:	c3                   	ret    
+  close(pfds[0]);
+     c83:	83 ec 0c             	sub    $0xc,%esp
+     c86:	ff 75 e0             	pushl  -0x20(%ebp)
+     c89:	e8 3c 2c 00 00       	call   38ca <close>
+  printf(1, "kill... ");
+     c8e:	58                   	pop    %eax
+     c8f:	5a                   	pop    %edx
+     c90:	68 4d 41 00 00       	push   $0x414d
+     c95:	6a 01                	push   $0x1
+     c97:	e8 94 2d 00 00       	call   3a30 <printf>
+  kill(pid1);
+     c9c:	89 3c 24             	mov    %edi,(%esp)
+     c9f:	e8 2e 2c 00 00       	call   38d2 <kill>
+  kill(pid2);
+     ca4:	89 34 24             	mov    %esi,(%esp)
+     ca7:	e8 26 2c 00 00       	call   38d2 <kill>
+  kill(pid3);
+     cac:	89 1c 24             	mov    %ebx,(%esp)
+     caf:	e8 1e 2c 00 00       	call   38d2 <kill>
+  printf(1, "wait... ");
+     cb4:	59                   	pop    %ecx
+     cb5:	5b                   	pop    %ebx
+     cb6:	68 56 41 00 00       	push   $0x4156
+     cbb:	6a 01                	push   $0x1
+     cbd:	e8 6e 2d 00 00       	call   3a30 <printf>
+  wait();
+     cc2:	e8 e3 2b 00 00       	call   38aa <wait>
+  wait();
+     cc7:	e8 de 2b 00 00       	call   38aa <wait>
+  wait();
+     ccc:	e8 d9 2b 00 00       	call   38aa <wait>
+  printf(1, "preempt ok\n");
+     cd1:	5e                   	pop    %esi
+     cd2:	5f                   	pop    %edi
+     cd3:	68 5f 41 00 00       	push   $0x415f
+     cd8:	6a 01                	push   $0x1
+     cda:	e8 51 2d 00 00       	call   3a30 <printf>
+     cdf:	83 c4 10             	add    $0x10,%esp
+     ce2:	eb 97                	jmp    c7b <preempt+0xcb>
+     ce4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     cea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000cf0 <exitwait>:
+{
+     cf0:	55                   	push   %ebp
+     cf1:	89 e5                	mov    %esp,%ebp
+     cf3:	56                   	push   %esi
+     cf4:	be 64 00 00 00       	mov    $0x64,%esi
+     cf9:	53                   	push   %ebx
+     cfa:	eb 14                	jmp    d10 <exitwait+0x20>
+     cfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid){
+     d00:	74 6f                	je     d71 <exitwait+0x81>
+      if(wait() != pid){
+     d02:	e8 a3 2b 00 00       	call   38aa <wait>
+     d07:	39 d8                	cmp    %ebx,%eax
+     d09:	75 2d                	jne    d38 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d0b:	83 ee 01             	sub    $0x1,%esi
+     d0e:	74 48                	je     d58 <exitwait+0x68>
+    pid = fork();
+     d10:	e8 85 2b 00 00       	call   389a <fork>
+    if(pid < 0){
+     d15:	85 c0                	test   %eax,%eax
+    pid = fork();
+     d17:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d19:	79 e5                	jns    d00 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d1b:	83 ec 08             	sub    $0x8,%esp
+     d1e:	68 c9 4c 00 00       	push   $0x4cc9
+     d23:	6a 01                	push   $0x1
+     d25:	e8 06 2d 00 00       	call   3a30 <printf>
+      return;
+     d2a:	83 c4 10             	add    $0x10,%esp
+}
+     d2d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d30:	5b                   	pop    %ebx
+     d31:	5e                   	pop    %esi
+     d32:	5d                   	pop    %ebp
+     d33:	c3                   	ret    
+     d34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     d38:	83 ec 08             	sub    $0x8,%esp
+     d3b:	68 6b 41 00 00       	push   $0x416b
+     d40:	6a 01                	push   $0x1
+     d42:	e8 e9 2c 00 00       	call   3a30 <printf>
+        return;
+     d47:	83 c4 10             	add    $0x10,%esp
+}
+     d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d4d:	5b                   	pop    %ebx
+     d4e:	5e                   	pop    %esi
+     d4f:	5d                   	pop    %ebp
+     d50:	c3                   	ret    
+     d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  printf(1, "exitwait ok\n");
+     d58:	83 ec 08             	sub    $0x8,%esp
+     d5b:	68 7b 41 00 00       	push   $0x417b
+     d60:	6a 01                	push   $0x1
+     d62:	e8 c9 2c 00 00       	call   3a30 <printf>
+     d67:	83 c4 10             	add    $0x10,%esp
+}
+     d6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d6d:	5b                   	pop    %ebx
+     d6e:	5e                   	pop    %esi
+     d6f:	5d                   	pop    %ebp
+     d70:	c3                   	ret    
+      exit();
+     d71:	e8 2c 2b 00 00       	call   38a2 <exit>
+     d76:	8d 76 00             	lea    0x0(%esi),%esi
+     d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000d80 <mem>:
+{
+     d80:	55                   	push   %ebp
+     d81:	89 e5                	mov    %esp,%ebp
+     d83:	57                   	push   %edi
+     d84:	56                   	push   %esi
+     d85:	53                   	push   %ebx
+     d86:	31 db                	xor    %ebx,%ebx
+     d88:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "mem test\n");
+     d8b:	68 88 41 00 00       	push   $0x4188
+     d90:	6a 01                	push   $0x1
+     d92:	e8 99 2c 00 00       	call   3a30 <printf>
+  ppid = getpid();
+     d97:	e8 86 2b 00 00       	call   3922 <getpid>
+     d9c:	89 c6                	mov    %eax,%esi
+  if((pid = fork()) == 0){
+     d9e:	e8 f7 2a 00 00       	call   389a <fork>
+     da3:	83 c4 10             	add    $0x10,%esp
+     da6:	85 c0                	test   %eax,%eax
+     da8:	74 0a                	je     db4 <mem+0x34>
+     daa:	e9 89 00 00 00       	jmp    e38 <mem+0xb8>
+     daf:	90                   	nop
+      *(char**)m2 = m1;
+     db0:	89 18                	mov    %ebx,(%eax)
+     db2:	89 c3                	mov    %eax,%ebx
+    while((m2 = malloc(10001)) != 0){
+     db4:	83 ec 0c             	sub    $0xc,%esp
+     db7:	68 11 27 00 00       	push   $0x2711
+     dbc:	e8 cf 2e 00 00       	call   3c90 <malloc>
+     dc1:	83 c4 10             	add    $0x10,%esp
+     dc4:	85 c0                	test   %eax,%eax
+     dc6:	75 e8                	jne    db0 <mem+0x30>
+    while(m1){
+     dc8:	85 db                	test   %ebx,%ebx
+     dca:	74 18                	je     de4 <mem+0x64>
+     dcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     dd0:	8b 3b                	mov    (%ebx),%edi
+      free(m1);
+     dd2:	83 ec 0c             	sub    $0xc,%esp
+     dd5:	53                   	push   %ebx
+     dd6:	89 fb                	mov    %edi,%ebx
+     dd8:	e8 23 2e 00 00       	call   3c00 <free>
+    while(m1){
+     ddd:	83 c4 10             	add    $0x10,%esp
+     de0:	85 db                	test   %ebx,%ebx
+     de2:	75 ec                	jne    dd0 <mem+0x50>
+    m1 = malloc(1024*20);
+     de4:	83 ec 0c             	sub    $0xc,%esp
+     de7:	68 00 50 00 00       	push   $0x5000
+     dec:	e8 9f 2e 00 00       	call   3c90 <malloc>
+    if(m1 == 0){
+     df1:	83 c4 10             	add    $0x10,%esp
+     df4:	85 c0                	test   %eax,%eax
+     df6:	74 20                	je     e18 <mem+0x98>
+    free(m1);
+     df8:	83 ec 0c             	sub    $0xc,%esp
+     dfb:	50                   	push   %eax
+     dfc:	e8 ff 2d 00 00       	call   3c00 <free>
+    printf(1, "mem ok\n");
+     e01:	58                   	pop    %eax
+     e02:	5a                   	pop    %edx
+     e03:	68 ac 41 00 00       	push   $0x41ac
+     e08:	6a 01                	push   $0x1
+     e0a:	e8 21 2c 00 00       	call   3a30 <printf>
+    exit();
+     e0f:	e8 8e 2a 00 00       	call   38a2 <exit>
+     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e18:	83 ec 08             	sub    $0x8,%esp
+     e1b:	68 92 41 00 00       	push   $0x4192
+     e20:	6a 01                	push   $0x1
+     e22:	e8 09 2c 00 00       	call   3a30 <printf>
+      kill(ppid);
+     e27:	89 34 24             	mov    %esi,(%esp)
+     e2a:	e8 a3 2a 00 00       	call   38d2 <kill>
+      exit();
+     e2f:	e8 6e 2a 00 00       	call   38a2 <exit>
+     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     e38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e3b:	5b                   	pop    %ebx
+     e3c:	5e                   	pop    %esi
+     e3d:	5f                   	pop    %edi
+     e3e:	5d                   	pop    %ebp
+    wait();
+     e3f:	e9 66 2a 00 00       	jmp    38aa <wait>
+     e44:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     e4a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000e50 <sharedfd>:
+{
+     e50:	55                   	push   %ebp
+     e51:	89 e5                	mov    %esp,%ebp
+     e53:	57                   	push   %edi
+     e54:	56                   	push   %esi
+     e55:	53                   	push   %ebx
+     e56:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     e59:	68 b4 41 00 00       	push   $0x41b4
+     e5e:	6a 01                	push   $0x1
+     e60:	e8 cb 2b 00 00       	call   3a30 <printf>
+  unlink("sharedfd");
+     e65:	c7 04 24 c3 41 00 00 	movl   $0x41c3,(%esp)
+     e6c:	e8 81 2a 00 00       	call   38f2 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e71:	59                   	pop    %ecx
+     e72:	5b                   	pop    %ebx
+     e73:	68 02 02 00 00       	push   $0x202
+     e78:	68 c3 41 00 00       	push   $0x41c3
+     e7d:	e8 60 2a 00 00       	call   38e2 <open>
+  if(fd < 0){
+     e82:	83 c4 10             	add    $0x10,%esp
+     e85:	85 c0                	test   %eax,%eax
+     e87:	0f 88 33 01 00 00    	js     fc0 <sharedfd+0x170>
+     e8d:	89 c6                	mov    %eax,%esi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e8f:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     e94:	e8 01 2a 00 00       	call   389a <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e99:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     e9c:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e9e:	19 c0                	sbb    %eax,%eax
+     ea0:	83 ec 04             	sub    $0x4,%esp
+     ea3:	83 e0 f3             	and    $0xfffffff3,%eax
+     ea6:	6a 0a                	push   $0xa
+     ea8:	83 c0 70             	add    $0x70,%eax
+     eab:	50                   	push   %eax
+     eac:	8d 45 de             	lea    -0x22(%ebp),%eax
+     eaf:	50                   	push   %eax
+     eb0:	e8 4b 28 00 00       	call   3700 <memset>
+     eb5:	83 c4 10             	add    $0x10,%esp
+     eb8:	eb 0b                	jmp    ec5 <sharedfd+0x75>
+     eba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(i = 0; i < 1000; i++){
+     ec0:	83 eb 01             	sub    $0x1,%ebx
+     ec3:	74 29                	je     eee <sharedfd+0x9e>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     ec5:	8d 45 de             	lea    -0x22(%ebp),%eax
+     ec8:	83 ec 04             	sub    $0x4,%esp
+     ecb:	6a 0a                	push   $0xa
+     ecd:	50                   	push   %eax
+     ece:	56                   	push   %esi
+     ecf:	e8 ee 29 00 00       	call   38c2 <write>
+     ed4:	83 c4 10             	add    $0x10,%esp
+     ed7:	83 f8 0a             	cmp    $0xa,%eax
+     eda:	74 e4                	je     ec0 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     edc:	83 ec 08             	sub    $0x8,%esp
+     edf:	68 b4 4e 00 00       	push   $0x4eb4
+     ee4:	6a 01                	push   $0x1
+     ee6:	e8 45 2b 00 00       	call   3a30 <printf>
+      break;
+     eeb:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     eee:	85 ff                	test   %edi,%edi
+     ef0:	0f 84 fe 00 00 00    	je     ff4 <sharedfd+0x1a4>
+    wait();
+     ef6:	e8 af 29 00 00       	call   38aa <wait>
+  close(fd);
+     efb:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     efe:	31 db                	xor    %ebx,%ebx
+     f00:	31 ff                	xor    %edi,%edi
+  close(fd);
+     f02:	56                   	push   %esi
+     f03:	8d 75 e8             	lea    -0x18(%ebp),%esi
+     f06:	e8 bf 29 00 00       	call   38ca <close>
+  fd = open("sharedfd", 0);
+     f0b:	58                   	pop    %eax
+     f0c:	5a                   	pop    %edx
+     f0d:	6a 00                	push   $0x0
+     f0f:	68 c3 41 00 00       	push   $0x41c3
+     f14:	e8 c9 29 00 00       	call   38e2 <open>
+  if(fd < 0){
+     f19:	83 c4 10             	add    $0x10,%esp
+     f1c:	85 c0                	test   %eax,%eax
+  fd = open("sharedfd", 0);
+     f1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  if(fd < 0){
+     f21:	0f 88 b3 00 00 00    	js     fda <sharedfd+0x18a>
+     f27:	89 f8                	mov    %edi,%eax
+     f29:	89 df                	mov    %ebx,%edi
+     f2b:	89 c3                	mov    %eax,%ebx
+     f2d:	8d 76 00             	lea    0x0(%esi),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f30:	8d 45 de             	lea    -0x22(%ebp),%eax
+     f33:	83 ec 04             	sub    $0x4,%esp
+     f36:	6a 0a                	push   $0xa
+     f38:	50                   	push   %eax
+     f39:	ff 75 d4             	pushl  -0x2c(%ebp)
+     f3c:	e8 79 29 00 00       	call   38ba <read>
+     f41:	83 c4 10             	add    $0x10,%esp
+     f44:	85 c0                	test   %eax,%eax
+     f46:	7e 28                	jle    f70 <sharedfd+0x120>
+     f48:	8d 45 de             	lea    -0x22(%ebp),%eax
+     f4b:	eb 15                	jmp    f62 <sharedfd+0x112>
+     f4d:	8d 76 00             	lea    0x0(%esi),%esi
+        np++;
+     f50:	80 fa 70             	cmp    $0x70,%dl
+     f53:	0f 94 c2             	sete   %dl
+     f56:	0f b6 d2             	movzbl %dl,%edx
+     f59:	01 d7                	add    %edx,%edi
+     f5b:	83 c0 01             	add    $0x1,%eax
+    for(i = 0; i < sizeof(buf); i++){
+     f5e:	39 f0                	cmp    %esi,%eax
+     f60:	74 ce                	je     f30 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     f62:	0f b6 10             	movzbl (%eax),%edx
+     f65:	80 fa 63             	cmp    $0x63,%dl
+     f68:	75 e6                	jne    f50 <sharedfd+0x100>
+        nc++;
+     f6a:	83 c3 01             	add    $0x1,%ebx
+     f6d:	eb ec                	jmp    f5b <sharedfd+0x10b>
+     f6f:	90                   	nop
+  close(fd);
+     f70:	83 ec 0c             	sub    $0xc,%esp
+     f73:	89 d8                	mov    %ebx,%eax
+     f75:	ff 75 d4             	pushl  -0x2c(%ebp)
+     f78:	89 fb                	mov    %edi,%ebx
+     f7a:	89 c7                	mov    %eax,%edi
+     f7c:	e8 49 29 00 00       	call   38ca <close>
+  unlink("sharedfd");
+     f81:	c7 04 24 c3 41 00 00 	movl   $0x41c3,(%esp)
+     f88:	e8 65 29 00 00       	call   38f2 <unlink>
+  if(nc == 10000 && np == 10000){
+     f8d:	83 c4 10             	add    $0x10,%esp
+     f90:	81 ff 10 27 00 00    	cmp    $0x2710,%edi
+     f96:	75 61                	jne    ff9 <sharedfd+0x1a9>
+     f98:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     f9e:	75 59                	jne    ff9 <sharedfd+0x1a9>
+    printf(1, "sharedfd ok\n");
+     fa0:	83 ec 08             	sub    $0x8,%esp
+     fa3:	68 cc 41 00 00       	push   $0x41cc
+     fa8:	6a 01                	push   $0x1
+     faa:	e8 81 2a 00 00       	call   3a30 <printf>
+     faf:	83 c4 10             	add    $0x10,%esp
+}
+     fb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fb5:	5b                   	pop    %ebx
+     fb6:	5e                   	pop    %esi
+     fb7:	5f                   	pop    %edi
+     fb8:	5d                   	pop    %ebp
+     fb9:	c3                   	ret    
+     fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(1, "fstests: cannot open sharedfd for writing");
+     fc0:	83 ec 08             	sub    $0x8,%esp
+     fc3:	68 88 4e 00 00       	push   $0x4e88
+     fc8:	6a 01                	push   $0x1
+     fca:	e8 61 2a 00 00       	call   3a30 <printf>
+    return;
+     fcf:	83 c4 10             	add    $0x10,%esp
+}
+     fd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fd5:	5b                   	pop    %ebx
+     fd6:	5e                   	pop    %esi
+     fd7:	5f                   	pop    %edi
+     fd8:	5d                   	pop    %ebp
+     fd9:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     fda:	83 ec 08             	sub    $0x8,%esp
+     fdd:	68 d4 4e 00 00       	push   $0x4ed4
+     fe2:	6a 01                	push   $0x1
+     fe4:	e8 47 2a 00 00       	call   3a30 <printf>
+    return;
+     fe9:	83 c4 10             	add    $0x10,%esp
+}
+     fec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fef:	5b                   	pop    %ebx
+     ff0:	5e                   	pop    %esi
+     ff1:	5f                   	pop    %edi
+     ff2:	5d                   	pop    %ebp
+     ff3:	c3                   	ret    
+    exit();
+     ff4:	e8 a9 28 00 00       	call   38a2 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+     ff9:	53                   	push   %ebx
+     ffa:	57                   	push   %edi
+     ffb:	68 d9 41 00 00       	push   $0x41d9
+    1000:	6a 01                	push   $0x1
+    1002:	e8 29 2a 00 00       	call   3a30 <printf>
+    exit();
+    1007:	e8 96 28 00 00       	call   38a2 <exit>
+    100c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001010 <fourfiles>:
+{
+    1010:	55                   	push   %ebp
+    1011:	89 e5                	mov    %esp,%ebp
+    1013:	57                   	push   %edi
+    1014:	56                   	push   %esi
+    1015:	53                   	push   %ebx
+  printf(1, "fourfiles test\n");
+    1016:	be ee 41 00 00       	mov    $0x41ee,%esi
+  for(pi = 0; pi < 4; pi++){
+    101b:	31 db                	xor    %ebx,%ebx
+{
+    101d:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1020:	c7 45 d8 ee 41 00 00 	movl   $0x41ee,-0x28(%ebp)
+    1027:	c7 45 dc 37 43 00 00 	movl   $0x4337,-0x24(%ebp)
+  printf(1, "fourfiles test\n");
+    102e:	68 f4 41 00 00       	push   $0x41f4
+    1033:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1035:	c7 45 e0 3b 43 00 00 	movl   $0x433b,-0x20(%ebp)
+    103c:	c7 45 e4 f1 41 00 00 	movl   $0x41f1,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    1043:	e8 e8 29 00 00       	call   3a30 <printf>
+    1048:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    104b:	83 ec 0c             	sub    $0xc,%esp
+    104e:	56                   	push   %esi
+    104f:	e8 9e 28 00 00       	call   38f2 <unlink>
+    pid = fork();
+    1054:	e8 41 28 00 00       	call   389a <fork>
+    if(pid < 0){
+    1059:	83 c4 10             	add    $0x10,%esp
+    105c:	85 c0                	test   %eax,%eax
+    105e:	0f 88 68 01 00 00    	js     11cc <fourfiles+0x1bc>
+    if(pid == 0){
+    1064:	0f 84 df 00 00 00    	je     1149 <fourfiles+0x139>
+  for(pi = 0; pi < 4; pi++){
+    106a:	83 c3 01             	add    $0x1,%ebx
+    106d:	83 fb 04             	cmp    $0x4,%ebx
+    1070:	74 06                	je     1078 <fourfiles+0x68>
+    1072:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    1076:	eb d3                	jmp    104b <fourfiles+0x3b>
+    wait();
+    1078:	e8 2d 28 00 00       	call   38aa <wait>
+  for(i = 0; i < 2; i++){
+    107d:	31 ff                	xor    %edi,%edi
+    wait();
+    107f:	e8 26 28 00 00       	call   38aa <wait>
+    1084:	e8 21 28 00 00       	call   38aa <wait>
+    1089:	e8 1c 28 00 00       	call   38aa <wait>
+    108e:	c7 45 d0 ee 41 00 00 	movl   $0x41ee,-0x30(%ebp)
+    fd = open(fname, 0);
+    1095:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    1098:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    109a:	6a 00                	push   $0x0
+    109c:	ff 75 d0             	pushl  -0x30(%ebp)
+    109f:	e8 3e 28 00 00       	call   38e2 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10a4:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    10a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    10aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b0:	83 ec 04             	sub    $0x4,%esp
+    10b3:	68 00 20 00 00       	push   $0x2000
+    10b8:	68 20 86 00 00       	push   $0x8620
+    10bd:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10c0:	e8 f5 27 00 00       	call   38ba <read>
+    10c5:	83 c4 10             	add    $0x10,%esp
+    10c8:	85 c0                	test   %eax,%eax
+    10ca:	7e 26                	jle    10f2 <fourfiles+0xe2>
+      for(j = 0; j < n; j++){
+    10cc:	31 d2                	xor    %edx,%edx
+    10ce:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    10d0:	0f be b2 20 86 00 00 	movsbl 0x8620(%edx),%esi
+    10d7:	83 ff 01             	cmp    $0x1,%edi
+    10da:	19 c9                	sbb    %ecx,%ecx
+    10dc:	83 c1 31             	add    $0x31,%ecx
+    10df:	39 ce                	cmp    %ecx,%esi
+    10e1:	0f 85 be 00 00 00    	jne    11a5 <fourfiles+0x195>
+      for(j = 0; j < n; j++){
+    10e7:	83 c2 01             	add    $0x1,%edx
+    10ea:	39 d0                	cmp    %edx,%eax
+    10ec:	75 e2                	jne    10d0 <fourfiles+0xc0>
+      total += n;
+    10ee:	01 c3                	add    %eax,%ebx
+    10f0:	eb be                	jmp    10b0 <fourfiles+0xa0>
+    close(fd);
+    10f2:	83 ec 0c             	sub    $0xc,%esp
+    10f5:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10f8:	e8 cd 27 00 00       	call   38ca <close>
+    if(total != 12*500){
+    10fd:	83 c4 10             	add    $0x10,%esp
+    1100:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1106:	0f 85 d3 00 00 00    	jne    11df <fourfiles+0x1cf>
+    unlink(fname);
+    110c:	83 ec 0c             	sub    $0xc,%esp
+    110f:	ff 75 d0             	pushl  -0x30(%ebp)
+    1112:	e8 db 27 00 00       	call   38f2 <unlink>
+  for(i = 0; i < 2; i++){
+    1117:	83 c4 10             	add    $0x10,%esp
+    111a:	83 ff 01             	cmp    $0x1,%edi
+    111d:	75 1a                	jne    1139 <fourfiles+0x129>
+  printf(1, "fourfiles ok\n");
+    111f:	83 ec 08             	sub    $0x8,%esp
+    1122:	68 32 42 00 00       	push   $0x4232
+    1127:	6a 01                	push   $0x1
+    1129:	e8 02 29 00 00       	call   3a30 <printf>
+}
+    112e:	83 c4 10             	add    $0x10,%esp
+    1131:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1134:	5b                   	pop    %ebx
+    1135:	5e                   	pop    %esi
+    1136:	5f                   	pop    %edi
+    1137:	5d                   	pop    %ebp
+    1138:	c3                   	ret    
+    1139:	8b 45 dc             	mov    -0x24(%ebp),%eax
+    113c:	bf 01 00 00 00       	mov    $0x1,%edi
+    1141:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1144:	e9 4c ff ff ff       	jmp    1095 <fourfiles+0x85>
+      fd = open(fname, O_CREATE | O_RDWR);
+    1149:	83 ec 08             	sub    $0x8,%esp
+    114c:	68 02 02 00 00       	push   $0x202
+    1151:	56                   	push   %esi
+    1152:	e8 8b 27 00 00       	call   38e2 <open>
+      if(fd < 0){
+    1157:	83 c4 10             	add    $0x10,%esp
+    115a:	85 c0                	test   %eax,%eax
+      fd = open(fname, O_CREATE | O_RDWR);
+    115c:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    115e:	78 59                	js     11b9 <fourfiles+0x1a9>
+      memset(buf, '0'+pi, 512);
+    1160:	83 ec 04             	sub    $0x4,%esp
+    1163:	83 c3 30             	add    $0x30,%ebx
+    1166:	68 00 02 00 00       	push   $0x200
+    116b:	53                   	push   %ebx
+    116c:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    1171:	68 20 86 00 00       	push   $0x8620
+    1176:	e8 85 25 00 00       	call   3700 <memset>
+    117b:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    117e:	83 ec 04             	sub    $0x4,%esp
+    1181:	68 f4 01 00 00       	push   $0x1f4
+    1186:	68 20 86 00 00       	push   $0x8620
+    118b:	56                   	push   %esi
+    118c:	e8 31 27 00 00       	call   38c2 <write>
+    1191:	83 c4 10             	add    $0x10,%esp
+    1194:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    1199:	75 57                	jne    11f2 <fourfiles+0x1e2>
+      for(i = 0; i < 12; i++){
+    119b:	83 eb 01             	sub    $0x1,%ebx
+    119e:	75 de                	jne    117e <fourfiles+0x16e>
+      exit();
+    11a0:	e8 fd 26 00 00       	call   38a2 <exit>
+          printf(1, "wrong char\n");
+    11a5:	83 ec 08             	sub    $0x8,%esp
+    11a8:	68 15 42 00 00       	push   $0x4215
+    11ad:	6a 01                	push   $0x1
+    11af:	e8 7c 28 00 00       	call   3a30 <printf>
+          exit();
+    11b4:	e8 e9 26 00 00       	call   38a2 <exit>
+        printf(1, "create failed\n");
+    11b9:	51                   	push   %ecx
+    11ba:	51                   	push   %ecx
+    11bb:	68 8f 44 00 00       	push   $0x448f
+    11c0:	6a 01                	push   $0x1
+    11c2:	e8 69 28 00 00       	call   3a30 <printf>
+        exit();
+    11c7:	e8 d6 26 00 00       	call   38a2 <exit>
+      printf(1, "fork failed\n");
+    11cc:	53                   	push   %ebx
+    11cd:	53                   	push   %ebx
+    11ce:	68 c9 4c 00 00       	push   $0x4cc9
+    11d3:	6a 01                	push   $0x1
+    11d5:	e8 56 28 00 00       	call   3a30 <printf>
+      exit();
+    11da:	e8 c3 26 00 00       	call   38a2 <exit>
+      printf(1, "wrong length %d\n", total);
+    11df:	50                   	push   %eax
+    11e0:	53                   	push   %ebx
+    11e1:	68 21 42 00 00       	push   $0x4221
+    11e6:	6a 01                	push   $0x1
+    11e8:	e8 43 28 00 00       	call   3a30 <printf>
+      exit();
+    11ed:	e8 b0 26 00 00       	call   38a2 <exit>
+          printf(1, "write failed %d\n", n);
+    11f2:	52                   	push   %edx
+    11f3:	50                   	push   %eax
+    11f4:	68 04 42 00 00       	push   $0x4204
+    11f9:	6a 01                	push   $0x1
+    11fb:	e8 30 28 00 00       	call   3a30 <printf>
+          exit();
+    1200:	e8 9d 26 00 00       	call   38a2 <exit>
+    1205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001210 <createdelete>:
+{
+    1210:	55                   	push   %ebp
+    1211:	89 e5                	mov    %esp,%ebp
+    1213:	57                   	push   %edi
+    1214:	56                   	push   %esi
+    1215:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    1216:	31 db                	xor    %ebx,%ebx
+{
+    1218:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    121b:	68 40 42 00 00       	push   $0x4240
+    1220:	6a 01                	push   $0x1
+    1222:	e8 09 28 00 00       	call   3a30 <printf>
+    1227:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    122a:	e8 6b 26 00 00       	call   389a <fork>
+    if(pid < 0){
+    122f:	85 c0                	test   %eax,%eax
+    1231:	0f 88 be 01 00 00    	js     13f5 <createdelete+0x1e5>
+    if(pid == 0){
+    1237:	0f 84 0b 01 00 00    	je     1348 <createdelete+0x138>
+  for(pi = 0; pi < 4; pi++){
+    123d:	83 c3 01             	add    $0x1,%ebx
+    1240:	83 fb 04             	cmp    $0x4,%ebx
+    1243:	75 e5                	jne    122a <createdelete+0x1a>
+    1245:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  name[0] = name[1] = name[2] = 0;
+    1248:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    wait();
+    124d:	e8 58 26 00 00       	call   38aa <wait>
+    1252:	e8 53 26 00 00       	call   38aa <wait>
+    1257:	e8 4e 26 00 00       	call   38aa <wait>
+    125c:	e8 49 26 00 00       	call   38aa <wait>
+  name[0] = name[1] = name[2] = 0;
+    1261:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1265:	8d 76 00             	lea    0x0(%esi),%esi
+    1268:	8d 46 31             	lea    0x31(%esi),%eax
+    126b:	88 45 c7             	mov    %al,-0x39(%ebp)
+    126e:	8d 46 01             	lea    0x1(%esi),%eax
+    1271:	83 f8 09             	cmp    $0x9,%eax
+    1274:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    1277:	0f 9f c3             	setg   %bl
+    127a:	85 c0                	test   %eax,%eax
+    127c:	0f 94 c0             	sete   %al
+    127f:	09 c3                	or     %eax,%ebx
+    1281:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    1284:	bb 70 00 00 00       	mov    $0x70,%ebx
+      name[1] = '0' + i;
+    1289:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      fd = open(name, 0);
+    128d:	83 ec 08             	sub    $0x8,%esp
+      name[0] = 'p' + pi;
+    1290:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    1293:	6a 00                	push   $0x0
+    1295:	57                   	push   %edi
+      name[1] = '0' + i;
+    1296:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1299:	e8 44 26 00 00       	call   38e2 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    129e:	83 c4 10             	add    $0x10,%esp
+    12a1:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    12a5:	0f 84 85 00 00 00    	je     1330 <createdelete+0x120>
+    12ab:	85 c0                	test   %eax,%eax
+    12ad:	0f 88 1a 01 00 00    	js     13cd <createdelete+0x1bd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    12b3:	83 fe 08             	cmp    $0x8,%esi
+    12b6:	0f 86 54 01 00 00    	jbe    1410 <createdelete+0x200>
+        close(fd);
+    12bc:	83 ec 0c             	sub    $0xc,%esp
+    12bf:	50                   	push   %eax
+    12c0:	e8 05 26 00 00       	call   38ca <close>
+    12c5:	83 c4 10             	add    $0x10,%esp
+    12c8:	83 c3 01             	add    $0x1,%ebx
+    for(pi = 0; pi < 4; pi++){
+    12cb:	80 fb 74             	cmp    $0x74,%bl
+    12ce:	75 b9                	jne    1289 <createdelete+0x79>
+    12d0:	8b 75 c0             	mov    -0x40(%ebp),%esi
+  for(i = 0; i < N; i++){
+    12d3:	83 fe 13             	cmp    $0x13,%esi
+    12d6:	75 90                	jne    1268 <createdelete+0x58>
+    12d8:	be 70 00 00 00       	mov    $0x70,%esi
+    12dd:	8d 76 00             	lea    0x0(%esi),%esi
+    12e0:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    12e3:	bb 04 00 00 00       	mov    $0x4,%ebx
+    12e8:	88 45 c7             	mov    %al,-0x39(%ebp)
+      name[0] = 'p' + i;
+    12eb:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    12ed:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    12f0:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      unlink(name);
+    12f7:	57                   	push   %edi
+      name[1] = '0' + i;
+    12f8:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    12fb:	e8 f2 25 00 00       	call   38f2 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1300:	83 c4 10             	add    $0x10,%esp
+    1303:	83 eb 01             	sub    $0x1,%ebx
+    1306:	75 e3                	jne    12eb <createdelete+0xdb>
+    1308:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; i < N; i++){
+    130b:	89 f0                	mov    %esi,%eax
+    130d:	3c 84                	cmp    $0x84,%al
+    130f:	75 cf                	jne    12e0 <createdelete+0xd0>
+  printf(1, "createdelete ok\n");
+    1311:	83 ec 08             	sub    $0x8,%esp
+    1314:	68 53 42 00 00       	push   $0x4253
+    1319:	6a 01                	push   $0x1
+    131b:	e8 10 27 00 00       	call   3a30 <printf>
+}
+    1320:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1323:	5b                   	pop    %ebx
+    1324:	5e                   	pop    %esi
+    1325:	5f                   	pop    %edi
+    1326:	5d                   	pop    %ebp
+    1327:	c3                   	ret    
+    1328:	90                   	nop
+    1329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1330:	83 fe 08             	cmp    $0x8,%esi
+    1333:	0f 86 cf 00 00 00    	jbe    1408 <createdelete+0x1f8>
+      if(fd >= 0)
+    1339:	85 c0                	test   %eax,%eax
+    133b:	78 8b                	js     12c8 <createdelete+0xb8>
+    133d:	e9 7a ff ff ff       	jmp    12bc <createdelete+0xac>
+    1342:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    1348:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    134b:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    134f:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    1352:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    1355:	31 db                	xor    %ebx,%ebx
+    1357:	eb 0f                	jmp    1368 <createdelete+0x158>
+    1359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    1360:	83 fb 13             	cmp    $0x13,%ebx
+    1363:	74 63                	je     13c8 <createdelete+0x1b8>
+    1365:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    1368:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    136b:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    136e:	68 02 02 00 00       	push   $0x202
+    1373:	57                   	push   %edi
+        name[1] = '0' + i;
+    1374:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    1377:	e8 66 25 00 00       	call   38e2 <open>
+        if(fd < 0){
+    137c:	83 c4 10             	add    $0x10,%esp
+    137f:	85 c0                	test   %eax,%eax
+    1381:	78 5f                	js     13e2 <createdelete+0x1d2>
+        close(fd);
+    1383:	83 ec 0c             	sub    $0xc,%esp
+    1386:	50                   	push   %eax
+    1387:	e8 3e 25 00 00       	call   38ca <close>
+        if(i > 0 && (i % 2 ) == 0){
+    138c:	83 c4 10             	add    $0x10,%esp
+    138f:	85 db                	test   %ebx,%ebx
+    1391:	74 d2                	je     1365 <createdelete+0x155>
+    1393:	f6 c3 01             	test   $0x1,%bl
+    1396:	75 c8                	jne    1360 <createdelete+0x150>
+          if(unlink(name) < 0){
+    1398:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    139b:	89 d8                	mov    %ebx,%eax
+    139d:	d1 f8                	sar    %eax
+          if(unlink(name) < 0){
+    139f:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    13a0:	83 c0 30             	add    $0x30,%eax
+    13a3:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    13a6:	e8 47 25 00 00       	call   38f2 <unlink>
+    13ab:	83 c4 10             	add    $0x10,%esp
+    13ae:	85 c0                	test   %eax,%eax
+    13b0:	79 ae                	jns    1360 <createdelete+0x150>
+            printf(1, "unlink failed\n");
+    13b2:	52                   	push   %edx
+    13b3:	52                   	push   %edx
+    13b4:	68 41 3e 00 00       	push   $0x3e41
+    13b9:	6a 01                	push   $0x1
+    13bb:	e8 70 26 00 00       	call   3a30 <printf>
+            exit();
+    13c0:	e8 dd 24 00 00       	call   38a2 <exit>
+    13c5:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    13c8:	e8 d5 24 00 00       	call   38a2 <exit>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    13cd:	83 ec 04             	sub    $0x4,%esp
+    13d0:	57                   	push   %edi
+    13d1:	68 00 4f 00 00       	push   $0x4f00
+    13d6:	6a 01                	push   $0x1
+    13d8:	e8 53 26 00 00       	call   3a30 <printf>
+        exit();
+    13dd:	e8 c0 24 00 00       	call   38a2 <exit>
+          printf(1, "create failed\n");
+    13e2:	51                   	push   %ecx
+    13e3:	51                   	push   %ecx
+    13e4:	68 8f 44 00 00       	push   $0x448f
+    13e9:	6a 01                	push   $0x1
+    13eb:	e8 40 26 00 00       	call   3a30 <printf>
+          exit();
+    13f0:	e8 ad 24 00 00       	call   38a2 <exit>
+      printf(1, "fork failed\n");
+    13f5:	53                   	push   %ebx
+    13f6:	53                   	push   %ebx
+    13f7:	68 c9 4c 00 00       	push   $0x4cc9
+    13fc:	6a 01                	push   $0x1
+    13fe:	e8 2d 26 00 00       	call   3a30 <printf>
+      exit();
+    1403:	e8 9a 24 00 00       	call   38a2 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1408:	85 c0                	test   %eax,%eax
+    140a:	0f 88 b8 fe ff ff    	js     12c8 <createdelete+0xb8>
+        printf(1, "oops createdelete %s did exist\n", name);
+    1410:	50                   	push   %eax
+    1411:	57                   	push   %edi
+    1412:	68 24 4f 00 00       	push   $0x4f24
+    1417:	6a 01                	push   $0x1
+    1419:	e8 12 26 00 00       	call   3a30 <printf>
+        exit();
+    141e:	e8 7f 24 00 00       	call   38a2 <exit>
+    1423:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001430 <unlinkread>:
+{
+    1430:	55                   	push   %ebp
+    1431:	89 e5                	mov    %esp,%ebp
+    1433:	56                   	push   %esi
+    1434:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    1435:	83 ec 08             	sub    $0x8,%esp
+    1438:	68 64 42 00 00       	push   $0x4264
+    143d:	6a 01                	push   $0x1
+    143f:	e8 ec 25 00 00       	call   3a30 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1444:	5b                   	pop    %ebx
+    1445:	5e                   	pop    %esi
+    1446:	68 02 02 00 00       	push   $0x202
+    144b:	68 75 42 00 00       	push   $0x4275
+    1450:	e8 8d 24 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1455:	83 c4 10             	add    $0x10,%esp
+    1458:	85 c0                	test   %eax,%eax
+    145a:	0f 88 e6 00 00 00    	js     1546 <unlinkread+0x116>
+  write(fd, "hello", 5);
+    1460:	83 ec 04             	sub    $0x4,%esp
+    1463:	89 c3                	mov    %eax,%ebx
+    1465:	6a 05                	push   $0x5
+    1467:	68 9a 42 00 00       	push   $0x429a
+    146c:	50                   	push   %eax
+    146d:	e8 50 24 00 00       	call   38c2 <write>
+  close(fd);
+    1472:	89 1c 24             	mov    %ebx,(%esp)
+    1475:	e8 50 24 00 00       	call   38ca <close>
+  fd = open("unlinkread", O_RDWR);
+    147a:	58                   	pop    %eax
+    147b:	5a                   	pop    %edx
+    147c:	6a 02                	push   $0x2
+    147e:	68 75 42 00 00       	push   $0x4275
+    1483:	e8 5a 24 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1488:	83 c4 10             	add    $0x10,%esp
+    148b:	85 c0                	test   %eax,%eax
+  fd = open("unlinkread", O_RDWR);
+    148d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    148f:	0f 88 10 01 00 00    	js     15a5 <unlinkread+0x175>
+  if(unlink("unlinkread") != 0){
+    1495:	83 ec 0c             	sub    $0xc,%esp
+    1498:	68 75 42 00 00       	push   $0x4275
+    149d:	e8 50 24 00 00       	call   38f2 <unlink>
+    14a2:	83 c4 10             	add    $0x10,%esp
+    14a5:	85 c0                	test   %eax,%eax
+    14a7:	0f 85 e5 00 00 00    	jne    1592 <unlinkread+0x162>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14ad:	83 ec 08             	sub    $0x8,%esp
+    14b0:	68 02 02 00 00       	push   $0x202
+    14b5:	68 75 42 00 00       	push   $0x4275
+    14ba:	e8 23 24 00 00       	call   38e2 <open>
+  write(fd1, "yyy", 3);
+    14bf:	83 c4 0c             	add    $0xc,%esp
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14c2:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    14c4:	6a 03                	push   $0x3
+    14c6:	68 d2 42 00 00       	push   $0x42d2
+    14cb:	50                   	push   %eax
+    14cc:	e8 f1 23 00 00       	call   38c2 <write>
+  close(fd1);
+    14d1:	89 34 24             	mov    %esi,(%esp)
+    14d4:	e8 f1 23 00 00       	call   38ca <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    14d9:	83 c4 0c             	add    $0xc,%esp
+    14dc:	68 00 20 00 00       	push   $0x2000
+    14e1:	68 20 86 00 00       	push   $0x8620
+    14e6:	53                   	push   %ebx
+    14e7:	e8 ce 23 00 00       	call   38ba <read>
+    14ec:	83 c4 10             	add    $0x10,%esp
+    14ef:	83 f8 05             	cmp    $0x5,%eax
+    14f2:	0f 85 87 00 00 00    	jne    157f <unlinkread+0x14f>
+  if(buf[0] != 'h'){
+    14f8:	80 3d 20 86 00 00 68 	cmpb   $0x68,0x8620
+    14ff:	75 6b                	jne    156c <unlinkread+0x13c>
+  if(write(fd, buf, 10) != 10){
+    1501:	83 ec 04             	sub    $0x4,%esp
+    1504:	6a 0a                	push   $0xa
+    1506:	68 20 86 00 00       	push   $0x8620
+    150b:	53                   	push   %ebx
+    150c:	e8 b1 23 00 00       	call   38c2 <write>
+    1511:	83 c4 10             	add    $0x10,%esp
+    1514:	83 f8 0a             	cmp    $0xa,%eax
+    1517:	75 40                	jne    1559 <unlinkread+0x129>
+  close(fd);
+    1519:	83 ec 0c             	sub    $0xc,%esp
+    151c:	53                   	push   %ebx
+    151d:	e8 a8 23 00 00       	call   38ca <close>
+  unlink("unlinkread");
+    1522:	c7 04 24 75 42 00 00 	movl   $0x4275,(%esp)
+    1529:	e8 c4 23 00 00       	call   38f2 <unlink>
+  printf(1, "unlinkread ok\n");
+    152e:	58                   	pop    %eax
+    152f:	5a                   	pop    %edx
+    1530:	68 1d 43 00 00       	push   $0x431d
+    1535:	6a 01                	push   $0x1
+    1537:	e8 f4 24 00 00       	call   3a30 <printf>
+}
+    153c:	83 c4 10             	add    $0x10,%esp
+    153f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1542:	5b                   	pop    %ebx
+    1543:	5e                   	pop    %esi
+    1544:	5d                   	pop    %ebp
+    1545:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    1546:	51                   	push   %ecx
+    1547:	51                   	push   %ecx
+    1548:	68 80 42 00 00       	push   $0x4280
+    154d:	6a 01                	push   $0x1
+    154f:	e8 dc 24 00 00       	call   3a30 <printf>
+    exit();
+    1554:	e8 49 23 00 00       	call   38a2 <exit>
+    printf(1, "unlinkread write failed\n");
+    1559:	51                   	push   %ecx
+    155a:	51                   	push   %ecx
+    155b:	68 04 43 00 00       	push   $0x4304
+    1560:	6a 01                	push   $0x1
+    1562:	e8 c9 24 00 00       	call   3a30 <printf>
+    exit();
+    1567:	e8 36 23 00 00       	call   38a2 <exit>
+    printf(1, "unlinkread wrong data\n");
+    156c:	53                   	push   %ebx
+    156d:	53                   	push   %ebx
+    156e:	68 ed 42 00 00       	push   $0x42ed
+    1573:	6a 01                	push   $0x1
+    1575:	e8 b6 24 00 00       	call   3a30 <printf>
+    exit();
+    157a:	e8 23 23 00 00       	call   38a2 <exit>
+    printf(1, "unlinkread read failed");
+    157f:	56                   	push   %esi
+    1580:	56                   	push   %esi
+    1581:	68 d6 42 00 00       	push   $0x42d6
+    1586:	6a 01                	push   $0x1
+    1588:	e8 a3 24 00 00       	call   3a30 <printf>
+    exit();
+    158d:	e8 10 23 00 00       	call   38a2 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    1592:	50                   	push   %eax
+    1593:	50                   	push   %eax
+    1594:	68 b8 42 00 00       	push   $0x42b8
+    1599:	6a 01                	push   $0x1
+    159b:	e8 90 24 00 00       	call   3a30 <printf>
+    exit();
+    15a0:	e8 fd 22 00 00       	call   38a2 <exit>
+    printf(1, "open unlinkread failed\n");
+    15a5:	50                   	push   %eax
+    15a6:	50                   	push   %eax
+    15a7:	68 a0 42 00 00       	push   $0x42a0
+    15ac:	6a 01                	push   $0x1
+    15ae:	e8 7d 24 00 00       	call   3a30 <printf>
+    exit();
+    15b3:	e8 ea 22 00 00       	call   38a2 <exit>
+    15b8:	90                   	nop
+    15b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000015c0 <linktest>:
+{
+    15c0:	55                   	push   %ebp
+    15c1:	89 e5                	mov    %esp,%ebp
+    15c3:	53                   	push   %ebx
+    15c4:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    15c7:	68 2c 43 00 00       	push   $0x432c
+    15cc:	6a 01                	push   $0x1
+    15ce:	e8 5d 24 00 00       	call   3a30 <printf>
+  unlink("lf1");
+    15d3:	c7 04 24 36 43 00 00 	movl   $0x4336,(%esp)
+    15da:	e8 13 23 00 00       	call   38f2 <unlink>
+  unlink("lf2");
+    15df:	c7 04 24 3a 43 00 00 	movl   $0x433a,(%esp)
+    15e6:	e8 07 23 00 00       	call   38f2 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    15eb:	58                   	pop    %eax
+    15ec:	5a                   	pop    %edx
+    15ed:	68 02 02 00 00       	push   $0x202
+    15f2:	68 36 43 00 00       	push   $0x4336
+    15f7:	e8 e6 22 00 00       	call   38e2 <open>
+  if(fd < 0){
+    15fc:	83 c4 10             	add    $0x10,%esp
+    15ff:	85 c0                	test   %eax,%eax
+    1601:	0f 88 1e 01 00 00    	js     1725 <linktest+0x165>
+  if(write(fd, "hello", 5) != 5){
+    1607:	83 ec 04             	sub    $0x4,%esp
+    160a:	89 c3                	mov    %eax,%ebx
+    160c:	6a 05                	push   $0x5
+    160e:	68 9a 42 00 00       	push   $0x429a
+    1613:	50                   	push   %eax
+    1614:	e8 a9 22 00 00       	call   38c2 <write>
+    1619:	83 c4 10             	add    $0x10,%esp
+    161c:	83 f8 05             	cmp    $0x5,%eax
+    161f:	0f 85 98 01 00 00    	jne    17bd <linktest+0x1fd>
+  close(fd);
+    1625:	83 ec 0c             	sub    $0xc,%esp
+    1628:	53                   	push   %ebx
+    1629:	e8 9c 22 00 00       	call   38ca <close>
+  if(link("lf1", "lf2") < 0){
+    162e:	5b                   	pop    %ebx
+    162f:	58                   	pop    %eax
+    1630:	68 3a 43 00 00       	push   $0x433a
+    1635:	68 36 43 00 00       	push   $0x4336
+    163a:	e8 c3 22 00 00       	call   3902 <link>
+    163f:	83 c4 10             	add    $0x10,%esp
+    1642:	85 c0                	test   %eax,%eax
+    1644:	0f 88 60 01 00 00    	js     17aa <linktest+0x1ea>
+  unlink("lf1");
+    164a:	83 ec 0c             	sub    $0xc,%esp
+    164d:	68 36 43 00 00       	push   $0x4336
+    1652:	e8 9b 22 00 00       	call   38f2 <unlink>
+  if(open("lf1", 0) >= 0){
+    1657:	58                   	pop    %eax
+    1658:	5a                   	pop    %edx
+    1659:	6a 00                	push   $0x0
+    165b:	68 36 43 00 00       	push   $0x4336
+    1660:	e8 7d 22 00 00       	call   38e2 <open>
+    1665:	83 c4 10             	add    $0x10,%esp
+    1668:	85 c0                	test   %eax,%eax
+    166a:	0f 89 27 01 00 00    	jns    1797 <linktest+0x1d7>
+  fd = open("lf2", 0);
+    1670:	83 ec 08             	sub    $0x8,%esp
+    1673:	6a 00                	push   $0x0
+    1675:	68 3a 43 00 00       	push   $0x433a
+    167a:	e8 63 22 00 00       	call   38e2 <open>
+  if(fd < 0){
+    167f:	83 c4 10             	add    $0x10,%esp
+    1682:	85 c0                	test   %eax,%eax
+  fd = open("lf2", 0);
+    1684:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1686:	0f 88 f8 00 00 00    	js     1784 <linktest+0x1c4>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    168c:	83 ec 04             	sub    $0x4,%esp
+    168f:	68 00 20 00 00       	push   $0x2000
+    1694:	68 20 86 00 00       	push   $0x8620
+    1699:	50                   	push   %eax
+    169a:	e8 1b 22 00 00       	call   38ba <read>
+    169f:	83 c4 10             	add    $0x10,%esp
+    16a2:	83 f8 05             	cmp    $0x5,%eax
+    16a5:	0f 85 c6 00 00 00    	jne    1771 <linktest+0x1b1>
+  close(fd);
+    16ab:	83 ec 0c             	sub    $0xc,%esp
+    16ae:	53                   	push   %ebx
+    16af:	e8 16 22 00 00       	call   38ca <close>
+  if(link("lf2", "lf2") >= 0){
+    16b4:	58                   	pop    %eax
+    16b5:	5a                   	pop    %edx
+    16b6:	68 3a 43 00 00       	push   $0x433a
+    16bb:	68 3a 43 00 00       	push   $0x433a
+    16c0:	e8 3d 22 00 00       	call   3902 <link>
+    16c5:	83 c4 10             	add    $0x10,%esp
+    16c8:	85 c0                	test   %eax,%eax
+    16ca:	0f 89 8e 00 00 00    	jns    175e <linktest+0x19e>
+  unlink("lf2");
+    16d0:	83 ec 0c             	sub    $0xc,%esp
+    16d3:	68 3a 43 00 00       	push   $0x433a
+    16d8:	e8 15 22 00 00       	call   38f2 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    16dd:	59                   	pop    %ecx
+    16de:	5b                   	pop    %ebx
+    16df:	68 36 43 00 00       	push   $0x4336
+    16e4:	68 3a 43 00 00       	push   $0x433a
+    16e9:	e8 14 22 00 00       	call   3902 <link>
+    16ee:	83 c4 10             	add    $0x10,%esp
+    16f1:	85 c0                	test   %eax,%eax
+    16f3:	79 56                	jns    174b <linktest+0x18b>
+  if(link(".", "lf1") >= 0){
+    16f5:	83 ec 08             	sub    $0x8,%esp
+    16f8:	68 36 43 00 00       	push   $0x4336
+    16fd:	68 fe 45 00 00       	push   $0x45fe
+    1702:	e8 fb 21 00 00       	call   3902 <link>
+    1707:	83 c4 10             	add    $0x10,%esp
+    170a:	85 c0                	test   %eax,%eax
+    170c:	79 2a                	jns    1738 <linktest+0x178>
+  printf(1, "linktest ok\n");
+    170e:	83 ec 08             	sub    $0x8,%esp
+    1711:	68 d4 43 00 00       	push   $0x43d4
+    1716:	6a 01                	push   $0x1
+    1718:	e8 13 23 00 00       	call   3a30 <printf>
+}
+    171d:	83 c4 10             	add    $0x10,%esp
+    1720:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1723:	c9                   	leave  
+    1724:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1725:	50                   	push   %eax
+    1726:	50                   	push   %eax
+    1727:	68 3e 43 00 00       	push   $0x433e
+    172c:	6a 01                	push   $0x1
+    172e:	e8 fd 22 00 00       	call   3a30 <printf>
+    exit();
+    1733:	e8 6a 21 00 00       	call   38a2 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    1738:	50                   	push   %eax
+    1739:	50                   	push   %eax
+    173a:	68 b8 43 00 00       	push   $0x43b8
+    173f:	6a 01                	push   $0x1
+    1741:	e8 ea 22 00 00       	call   3a30 <printf>
+    exit();
+    1746:	e8 57 21 00 00       	call   38a2 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    174b:	52                   	push   %edx
+    174c:	52                   	push   %edx
+    174d:	68 6c 4f 00 00       	push   $0x4f6c
+    1752:	6a 01                	push   $0x1
+    1754:	e8 d7 22 00 00       	call   3a30 <printf>
+    exit();
+    1759:	e8 44 21 00 00       	call   38a2 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    175e:	50                   	push   %eax
+    175f:	50                   	push   %eax
+    1760:	68 9a 43 00 00       	push   $0x439a
+    1765:	6a 01                	push   $0x1
+    1767:	e8 c4 22 00 00       	call   3a30 <printf>
+    exit();
+    176c:	e8 31 21 00 00       	call   38a2 <exit>
+    printf(1, "read lf2 failed\n");
+    1771:	51                   	push   %ecx
+    1772:	51                   	push   %ecx
+    1773:	68 89 43 00 00       	push   $0x4389
+    1778:	6a 01                	push   $0x1
+    177a:	e8 b1 22 00 00       	call   3a30 <printf>
+    exit();
+    177f:	e8 1e 21 00 00       	call   38a2 <exit>
+    printf(1, "open lf2 failed\n");
+    1784:	53                   	push   %ebx
+    1785:	53                   	push   %ebx
+    1786:	68 78 43 00 00       	push   $0x4378
+    178b:	6a 01                	push   $0x1
+    178d:	e8 9e 22 00 00       	call   3a30 <printf>
+    exit();
+    1792:	e8 0b 21 00 00       	call   38a2 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    1797:	50                   	push   %eax
+    1798:	50                   	push   %eax
+    1799:	68 44 4f 00 00       	push   $0x4f44
+    179e:	6a 01                	push   $0x1
+    17a0:	e8 8b 22 00 00       	call   3a30 <printf>
+    exit();
+    17a5:	e8 f8 20 00 00       	call   38a2 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    17aa:	51                   	push   %ecx
+    17ab:	51                   	push   %ecx
+    17ac:	68 63 43 00 00       	push   $0x4363
+    17b1:	6a 01                	push   $0x1
+    17b3:	e8 78 22 00 00       	call   3a30 <printf>
+    exit();
+    17b8:	e8 e5 20 00 00       	call   38a2 <exit>
+    printf(1, "write lf1 failed\n");
+    17bd:	50                   	push   %eax
+    17be:	50                   	push   %eax
+    17bf:	68 51 43 00 00       	push   $0x4351
+    17c4:	6a 01                	push   $0x1
+    17c6:	e8 65 22 00 00       	call   3a30 <printf>
+    exit();
+    17cb:	e8 d2 20 00 00       	call   38a2 <exit>
+
+000017d0 <concreate>:
+{
+    17d0:	55                   	push   %ebp
+    17d1:	89 e5                	mov    %esp,%ebp
+    17d3:	57                   	push   %edi
+    17d4:	56                   	push   %esi
+    17d5:	53                   	push   %ebx
+  for(i = 0; i < 40; i++){
+    17d6:	31 f6                	xor    %esi,%esi
+    17d8:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    if(pid && (i % 3) == 1){
+    17db:	bf ab aa aa aa       	mov    $0xaaaaaaab,%edi
+{
+    17e0:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    17e3:	68 e1 43 00 00       	push   $0x43e1
+    17e8:	6a 01                	push   $0x1
+    17ea:	e8 41 22 00 00       	call   3a30 <printf>
+  file[0] = 'C';
+    17ef:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    17f3:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+    17f7:	83 c4 10             	add    $0x10,%esp
+    17fa:	eb 4c                	jmp    1848 <concreate+0x78>
+    17fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid && (i % 3) == 1){
+    1800:	89 f0                	mov    %esi,%eax
+    1802:	89 f1                	mov    %esi,%ecx
+    1804:	f7 e7                	mul    %edi
+    1806:	d1 ea                	shr    %edx
+    1808:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    180b:	29 c1                	sub    %eax,%ecx
+    180d:	83 f9 01             	cmp    $0x1,%ecx
+    1810:	0f 84 ba 00 00 00    	je     18d0 <concreate+0x100>
+      fd = open(file, O_CREATE | O_RDWR);
+    1816:	83 ec 08             	sub    $0x8,%esp
+    1819:	68 02 02 00 00       	push   $0x202
+    181e:	53                   	push   %ebx
+    181f:	e8 be 20 00 00       	call   38e2 <open>
+      if(fd < 0){
+    1824:	83 c4 10             	add    $0x10,%esp
+    1827:	85 c0                	test   %eax,%eax
+    1829:	78 67                	js     1892 <concreate+0xc2>
+      close(fd);
+    182b:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    182e:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    1831:	50                   	push   %eax
+    1832:	e8 93 20 00 00       	call   38ca <close>
+    1837:	83 c4 10             	add    $0x10,%esp
+      wait();
+    183a:	e8 6b 20 00 00       	call   38aa <wait>
+  for(i = 0; i < 40; i++){
+    183f:	83 fe 28             	cmp    $0x28,%esi
+    1842:	0f 84 aa 00 00 00    	je     18f2 <concreate+0x122>
+    unlink(file);
+    1848:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    184b:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    184e:	53                   	push   %ebx
+    file[1] = '0' + i;
+    184f:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    1852:	e8 9b 20 00 00       	call   38f2 <unlink>
+    pid = fork();
+    1857:	e8 3e 20 00 00       	call   389a <fork>
+    if(pid && (i % 3) == 1){
+    185c:	83 c4 10             	add    $0x10,%esp
+    185f:	85 c0                	test   %eax,%eax
+    1861:	75 9d                	jne    1800 <concreate+0x30>
+    } else if(pid == 0 && (i % 5) == 1){
+    1863:	89 f0                	mov    %esi,%eax
+    1865:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    186a:	f7 e2                	mul    %edx
+    186c:	c1 ea 02             	shr    $0x2,%edx
+    186f:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    1872:	29 c6                	sub    %eax,%esi
+    1874:	83 fe 01             	cmp    $0x1,%esi
+    1877:	74 37                	je     18b0 <concreate+0xe0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1879:	83 ec 08             	sub    $0x8,%esp
+    187c:	68 02 02 00 00       	push   $0x202
+    1881:	53                   	push   %ebx
+    1882:	e8 5b 20 00 00       	call   38e2 <open>
+      if(fd < 0){
+    1887:	83 c4 10             	add    $0x10,%esp
+    188a:	85 c0                	test   %eax,%eax
+    188c:	0f 89 28 02 00 00    	jns    1aba <concreate+0x2ea>
+        printf(1, "concreate create %s failed\n", file);
+    1892:	83 ec 04             	sub    $0x4,%esp
+    1895:	53                   	push   %ebx
+    1896:	68 f4 43 00 00       	push   $0x43f4
+    189b:	6a 01                	push   $0x1
+    189d:	e8 8e 21 00 00       	call   3a30 <printf>
+        exit();
+    18a2:	e8 fb 1f 00 00       	call   38a2 <exit>
+    18a7:	89 f6                	mov    %esi,%esi
+    18a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      link("C0", file);
+    18b0:	83 ec 08             	sub    $0x8,%esp
+    18b3:	53                   	push   %ebx
+    18b4:	68 f1 43 00 00       	push   $0x43f1
+    18b9:	e8 44 20 00 00       	call   3902 <link>
+    18be:	83 c4 10             	add    $0x10,%esp
+      exit();
+    18c1:	e8 dc 1f 00 00       	call   38a2 <exit>
+    18c6:	8d 76 00             	lea    0x0(%esi),%esi
+    18c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      link("C0", file);
+    18d0:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    18d3:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    18d6:	53                   	push   %ebx
+    18d7:	68 f1 43 00 00       	push   $0x43f1
+    18dc:	e8 21 20 00 00       	call   3902 <link>
+    18e1:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18e4:	e8 c1 1f 00 00       	call   38aa <wait>
+  for(i = 0; i < 40; i++){
+    18e9:	83 fe 28             	cmp    $0x28,%esi
+    18ec:	0f 85 56 ff ff ff    	jne    1848 <concreate+0x78>
+  memset(fa, 0, sizeof(fa));
+    18f2:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    18f5:	83 ec 04             	sub    $0x4,%esp
+    18f8:	6a 28                	push   $0x28
+    18fa:	6a 00                	push   $0x0
+    18fc:	50                   	push   %eax
+    18fd:	e8 fe 1d 00 00       	call   3700 <memset>
+  fd = open(".", 0);
+    1902:	5f                   	pop    %edi
+    1903:	58                   	pop    %eax
+    1904:	6a 00                	push   $0x0
+    1906:	68 fe 45 00 00       	push   $0x45fe
+    190b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    190e:	e8 cf 1f 00 00       	call   38e2 <open>
+  while(read(fd, &de, sizeof(de)) > 0){
+    1913:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    1916:	89 c6                	mov    %eax,%esi
+  n = 0;
+    1918:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+    191f:	90                   	nop
+  while(read(fd, &de, sizeof(de)) > 0){
+    1920:	83 ec 04             	sub    $0x4,%esp
+    1923:	6a 10                	push   $0x10
+    1925:	57                   	push   %edi
+    1926:	56                   	push   %esi
+    1927:	e8 8e 1f 00 00       	call   38ba <read>
+    192c:	83 c4 10             	add    $0x10,%esp
+    192f:	85 c0                	test   %eax,%eax
+    1931:	7e 3d                	jle    1970 <concreate+0x1a0>
+    if(de.inum == 0)
+    1933:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1938:	74 e6                	je     1920 <concreate+0x150>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    193a:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    193e:	75 e0                	jne    1920 <concreate+0x150>
+    1940:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    1944:	75 da                	jne    1920 <concreate+0x150>
+      i = de.name[1] - '0';
+    1946:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    194a:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    194d:	83 f8 27             	cmp    $0x27,%eax
+    1950:	0f 87 4e 01 00 00    	ja     1aa4 <concreate+0x2d4>
+      if(fa[i]){
+    1956:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    195b:	0f 85 2d 01 00 00    	jne    1a8e <concreate+0x2be>
+      fa[i] = 1;
+    1961:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    1966:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+    196a:	eb b4                	jmp    1920 <concreate+0x150>
+    196c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    1970:	83 ec 0c             	sub    $0xc,%esp
+    1973:	56                   	push   %esi
+    1974:	e8 51 1f 00 00       	call   38ca <close>
+  if(n != 40){
+    1979:	83 c4 10             	add    $0x10,%esp
+    197c:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1980:	0f 85 f5 00 00 00    	jne    1a7b <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    1986:	31 f6                	xor    %esi,%esi
+    1988:	eb 48                	jmp    19d2 <concreate+0x202>
+    198a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1990:	85 ff                	test   %edi,%edi
+    1992:	74 05                	je     1999 <concreate+0x1c9>
+    1994:	83 fa 01             	cmp    $0x1,%edx
+    1997:	74 64                	je     19fd <concreate+0x22d>
+      unlink(file);
+    1999:	83 ec 0c             	sub    $0xc,%esp
+    199c:	53                   	push   %ebx
+    199d:	e8 50 1f 00 00       	call   38f2 <unlink>
+      unlink(file);
+    19a2:	89 1c 24             	mov    %ebx,(%esp)
+    19a5:	e8 48 1f 00 00       	call   38f2 <unlink>
+      unlink(file);
+    19aa:	89 1c 24             	mov    %ebx,(%esp)
+    19ad:	e8 40 1f 00 00       	call   38f2 <unlink>
+      unlink(file);
+    19b2:	89 1c 24             	mov    %ebx,(%esp)
+    19b5:	e8 38 1f 00 00       	call   38f2 <unlink>
+    19ba:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    19bd:	85 ff                	test   %edi,%edi
+    19bf:	0f 84 fc fe ff ff    	je     18c1 <concreate+0xf1>
+  for(i = 0; i < 40; i++){
+    19c5:	83 c6 01             	add    $0x1,%esi
+      wait();
+    19c8:	e8 dd 1e 00 00       	call   38aa <wait>
+  for(i = 0; i < 40; i++){
+    19cd:	83 fe 28             	cmp    $0x28,%esi
+    19d0:	74 7e                	je     1a50 <concreate+0x280>
+    file[1] = '0' + i;
+    19d2:	8d 46 30             	lea    0x30(%esi),%eax
+    19d5:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    19d8:	e8 bd 1e 00 00       	call   389a <fork>
+    if(pid < 0){
+    19dd:	85 c0                	test   %eax,%eax
+    pid = fork();
+    19df:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    19e1:	0f 88 80 00 00 00    	js     1a67 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    19e7:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    19ec:	f7 e6                	mul    %esi
+    19ee:	d1 ea                	shr    %edx
+    19f0:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    19f3:	89 f2                	mov    %esi,%edx
+    19f5:	29 c2                	sub    %eax,%edx
+    19f7:	89 d0                	mov    %edx,%eax
+    19f9:	09 f8                	or     %edi,%eax
+    19fb:	75 93                	jne    1990 <concreate+0x1c0>
+      close(open(file, 0));
+    19fd:	83 ec 08             	sub    $0x8,%esp
+    1a00:	6a 00                	push   $0x0
+    1a02:	53                   	push   %ebx
+    1a03:	e8 da 1e 00 00       	call   38e2 <open>
+    1a08:	89 04 24             	mov    %eax,(%esp)
+    1a0b:	e8 ba 1e 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1a10:	58                   	pop    %eax
+    1a11:	5a                   	pop    %edx
+    1a12:	6a 00                	push   $0x0
+    1a14:	53                   	push   %ebx
+    1a15:	e8 c8 1e 00 00       	call   38e2 <open>
+    1a1a:	89 04 24             	mov    %eax,(%esp)
+    1a1d:	e8 a8 1e 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1a22:	59                   	pop    %ecx
+    1a23:	58                   	pop    %eax
+    1a24:	6a 00                	push   $0x0
+    1a26:	53                   	push   %ebx
+    1a27:	e8 b6 1e 00 00       	call   38e2 <open>
+    1a2c:	89 04 24             	mov    %eax,(%esp)
+    1a2f:	e8 96 1e 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1a34:	58                   	pop    %eax
+    1a35:	5a                   	pop    %edx
+    1a36:	6a 00                	push   $0x0
+    1a38:	53                   	push   %ebx
+    1a39:	e8 a4 1e 00 00       	call   38e2 <open>
+    1a3e:	89 04 24             	mov    %eax,(%esp)
+    1a41:	e8 84 1e 00 00       	call   38ca <close>
+    1a46:	83 c4 10             	add    $0x10,%esp
+    1a49:	e9 6f ff ff ff       	jmp    19bd <concreate+0x1ed>
+    1a4e:	66 90                	xchg   %ax,%ax
+  printf(1, "concreate ok\n");
+    1a50:	83 ec 08             	sub    $0x8,%esp
+    1a53:	68 46 44 00 00       	push   $0x4446
+    1a58:	6a 01                	push   $0x1
+    1a5a:	e8 d1 1f 00 00       	call   3a30 <printf>
+}
+    1a5f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1a62:	5b                   	pop    %ebx
+    1a63:	5e                   	pop    %esi
+    1a64:	5f                   	pop    %edi
+    1a65:	5d                   	pop    %ebp
+    1a66:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1a67:	83 ec 08             	sub    $0x8,%esp
+    1a6a:	68 c9 4c 00 00       	push   $0x4cc9
+    1a6f:	6a 01                	push   $0x1
+    1a71:	e8 ba 1f 00 00       	call   3a30 <printf>
+      exit();
+    1a76:	e8 27 1e 00 00       	call   38a2 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1a7b:	51                   	push   %ecx
+    1a7c:	51                   	push   %ecx
+    1a7d:	68 90 4f 00 00       	push   $0x4f90
+    1a82:	6a 01                	push   $0x1
+    1a84:	e8 a7 1f 00 00       	call   3a30 <printf>
+    exit();
+    1a89:	e8 14 1e 00 00       	call   38a2 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1a8e:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1a91:	53                   	push   %ebx
+    1a92:	50                   	push   %eax
+    1a93:	68 29 44 00 00       	push   $0x4429
+    1a98:	6a 01                	push   $0x1
+    1a9a:	e8 91 1f 00 00       	call   3a30 <printf>
+        exit();
+    1a9f:	e8 fe 1d 00 00       	call   38a2 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1aa4:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1aa7:	56                   	push   %esi
+    1aa8:	50                   	push   %eax
+    1aa9:	68 10 44 00 00       	push   $0x4410
+    1aae:	6a 01                	push   $0x1
+    1ab0:	e8 7b 1f 00 00       	call   3a30 <printf>
+        exit();
+    1ab5:	e8 e8 1d 00 00       	call   38a2 <exit>
+      close(fd);
+    1aba:	83 ec 0c             	sub    $0xc,%esp
+    1abd:	50                   	push   %eax
+    1abe:	e8 07 1e 00 00       	call   38ca <close>
+    1ac3:	83 c4 10             	add    $0x10,%esp
+    1ac6:	e9 f6 fd ff ff       	jmp    18c1 <concreate+0xf1>
+    1acb:	90                   	nop
+    1acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001ad0 <linkunlink>:
+{
+    1ad0:	55                   	push   %ebp
+    1ad1:	89 e5                	mov    %esp,%ebp
+    1ad3:	57                   	push   %edi
+    1ad4:	56                   	push   %esi
+    1ad5:	53                   	push   %ebx
+    1ad6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1ad9:	68 54 44 00 00       	push   $0x4454
+    1ade:	6a 01                	push   $0x1
+    1ae0:	e8 4b 1f 00 00       	call   3a30 <printf>
+  unlink("x");
+    1ae5:	c7 04 24 e1 46 00 00 	movl   $0x46e1,(%esp)
+    1aec:	e8 01 1e 00 00       	call   38f2 <unlink>
+  pid = fork();
+    1af1:	e8 a4 1d 00 00       	call   389a <fork>
+  if(pid < 0){
+    1af6:	83 c4 10             	add    $0x10,%esp
+    1af9:	85 c0                	test   %eax,%eax
+  pid = fork();
+    1afb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1afe:	0f 88 b6 00 00 00    	js     1bba <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b04:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b08:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b0d:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b12:	19 ff                	sbb    %edi,%edi
+    1b14:	83 e7 60             	and    $0x60,%edi
+    1b17:	83 c7 01             	add    $0x1,%edi
+    1b1a:	eb 1e                	jmp    1b3a <linkunlink+0x6a>
+    1b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if((x % 3) == 1){
+    1b20:	83 fa 01             	cmp    $0x1,%edx
+    1b23:	74 7b                	je     1ba0 <linkunlink+0xd0>
+      unlink("x");
+    1b25:	83 ec 0c             	sub    $0xc,%esp
+    1b28:	68 e1 46 00 00       	push   $0x46e1
+    1b2d:	e8 c0 1d 00 00       	call   38f2 <unlink>
+    1b32:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b35:	83 eb 01             	sub    $0x1,%ebx
+    1b38:	74 3d                	je     1b77 <linkunlink+0xa7>
+    x = x * 1103515245 + 12345;
+    1b3a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1b40:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1b46:	89 f8                	mov    %edi,%eax
+    1b48:	f7 e6                	mul    %esi
+    1b4a:	d1 ea                	shr    %edx
+    1b4c:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1b4f:	89 fa                	mov    %edi,%edx
+    1b51:	29 c2                	sub    %eax,%edx
+    1b53:	75 cb                	jne    1b20 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1b55:	83 ec 08             	sub    $0x8,%esp
+    1b58:	68 02 02 00 00       	push   $0x202
+    1b5d:	68 e1 46 00 00       	push   $0x46e1
+    1b62:	e8 7b 1d 00 00       	call   38e2 <open>
+    1b67:	89 04 24             	mov    %eax,(%esp)
+    1b6a:	e8 5b 1d 00 00       	call   38ca <close>
+    1b6f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b72:	83 eb 01             	sub    $0x1,%ebx
+    1b75:	75 c3                	jne    1b3a <linkunlink+0x6a>
+  if(pid)
+    1b77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1b7a:	85 c0                	test   %eax,%eax
+    1b7c:	74 4f                	je     1bcd <linkunlink+0xfd>
+    wait();
+    1b7e:	e8 27 1d 00 00       	call   38aa <wait>
+  printf(1, "linkunlink ok\n");
+    1b83:	83 ec 08             	sub    $0x8,%esp
+    1b86:	68 69 44 00 00       	push   $0x4469
+    1b8b:	6a 01                	push   $0x1
+    1b8d:	e8 9e 1e 00 00       	call   3a30 <printf>
+}
+    1b92:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1b95:	5b                   	pop    %ebx
+    1b96:	5e                   	pop    %esi
+    1b97:	5f                   	pop    %edi
+    1b98:	5d                   	pop    %ebp
+    1b99:	c3                   	ret    
+    1b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("cat", "x");
+    1ba0:	83 ec 08             	sub    $0x8,%esp
+    1ba3:	68 e1 46 00 00       	push   $0x46e1
+    1ba8:	68 65 44 00 00       	push   $0x4465
+    1bad:	e8 50 1d 00 00       	call   3902 <link>
+    1bb2:	83 c4 10             	add    $0x10,%esp
+    1bb5:	e9 7b ff ff ff       	jmp    1b35 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1bba:	52                   	push   %edx
+    1bbb:	52                   	push   %edx
+    1bbc:	68 c9 4c 00 00       	push   $0x4cc9
+    1bc1:	6a 01                	push   $0x1
+    1bc3:	e8 68 1e 00 00       	call   3a30 <printf>
+    exit();
+    1bc8:	e8 d5 1c 00 00       	call   38a2 <exit>
+    exit();
+    1bcd:	e8 d0 1c 00 00       	call   38a2 <exit>
+    1bd2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1bd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001be0 <bigdir>:
+{
+    1be0:	55                   	push   %ebp
+    1be1:	89 e5                	mov    %esp,%ebp
+    1be3:	57                   	push   %edi
+    1be4:	56                   	push   %esi
+    1be5:	53                   	push   %ebx
+    1be6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1be9:	68 78 44 00 00       	push   $0x4478
+    1bee:	6a 01                	push   $0x1
+    1bf0:	e8 3b 1e 00 00       	call   3a30 <printf>
+  unlink("bd");
+    1bf5:	c7 04 24 85 44 00 00 	movl   $0x4485,(%esp)
+    1bfc:	e8 f1 1c 00 00       	call   38f2 <unlink>
+  fd = open("bd", O_CREATE);
+    1c01:	5a                   	pop    %edx
+    1c02:	59                   	pop    %ecx
+    1c03:	68 00 02 00 00       	push   $0x200
+    1c08:	68 85 44 00 00       	push   $0x4485
+    1c0d:	e8 d0 1c 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1c12:	83 c4 10             	add    $0x10,%esp
+    1c15:	85 c0                	test   %eax,%eax
+    1c17:	0f 88 de 00 00 00    	js     1cfb <bigdir+0x11b>
+  close(fd);
+    1c1d:	83 ec 0c             	sub    $0xc,%esp
+    1c20:	8d 7d de             	lea    -0x22(%ebp),%edi
+  for(i = 0; i < 500; i++){
+    1c23:	31 f6                	xor    %esi,%esi
+  close(fd);
+    1c25:	50                   	push   %eax
+    1c26:	e8 9f 1c 00 00       	call   38ca <close>
+    1c2b:	83 c4 10             	add    $0x10,%esp
+    1c2e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + (i / 64);
+    1c30:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1c32:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1c35:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c39:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1c3c:	57                   	push   %edi
+    1c3d:	68 85 44 00 00       	push   $0x4485
+    name[1] = '0' + (i / 64);
+    1c42:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1c45:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1c49:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c4c:	89 f0                	mov    %esi,%eax
+    1c4e:	83 e0 3f             	and    $0x3f,%eax
+    1c51:	83 c0 30             	add    $0x30,%eax
+    1c54:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1c57:	e8 a6 1c 00 00       	call   3902 <link>
+    1c5c:	83 c4 10             	add    $0x10,%esp
+    1c5f:	85 c0                	test   %eax,%eax
+    1c61:	89 c3                	mov    %eax,%ebx
+    1c63:	75 6e                	jne    1cd3 <bigdir+0xf3>
+  for(i = 0; i < 500; i++){
+    1c65:	83 c6 01             	add    $0x1,%esi
+    1c68:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1c6e:	75 c0                	jne    1c30 <bigdir+0x50>
+  unlink("bd");
+    1c70:	83 ec 0c             	sub    $0xc,%esp
+    1c73:	68 85 44 00 00       	push   $0x4485
+    1c78:	e8 75 1c 00 00       	call   38f2 <unlink>
+    1c7d:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + (i / 64);
+    1c80:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1c82:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1c85:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c89:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1c8c:	57                   	push   %edi
+    name[3] = '\0';
+    1c8d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1c91:	83 c0 30             	add    $0x30,%eax
+    1c94:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c97:	89 d8                	mov    %ebx,%eax
+    1c99:	83 e0 3f             	and    $0x3f,%eax
+    1c9c:	83 c0 30             	add    $0x30,%eax
+    1c9f:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1ca2:	e8 4b 1c 00 00       	call   38f2 <unlink>
+    1ca7:	83 c4 10             	add    $0x10,%esp
+    1caa:	85 c0                	test   %eax,%eax
+    1cac:	75 39                	jne    1ce7 <bigdir+0x107>
+  for(i = 0; i < 500; i++){
+    1cae:	83 c3 01             	add    $0x1,%ebx
+    1cb1:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1cb7:	75 c7                	jne    1c80 <bigdir+0xa0>
+  printf(1, "bigdir ok\n");
+    1cb9:	83 ec 08             	sub    $0x8,%esp
+    1cbc:	68 c7 44 00 00       	push   $0x44c7
+    1cc1:	6a 01                	push   $0x1
+    1cc3:	e8 68 1d 00 00       	call   3a30 <printf>
+}
+    1cc8:	83 c4 10             	add    $0x10,%esp
+    1ccb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1cce:	5b                   	pop    %ebx
+    1ccf:	5e                   	pop    %esi
+    1cd0:	5f                   	pop    %edi
+    1cd1:	5d                   	pop    %ebp
+    1cd2:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1cd3:	83 ec 08             	sub    $0x8,%esp
+    1cd6:	68 9e 44 00 00       	push   $0x449e
+    1cdb:	6a 01                	push   $0x1
+    1cdd:	e8 4e 1d 00 00       	call   3a30 <printf>
+      exit();
+    1ce2:	e8 bb 1b 00 00       	call   38a2 <exit>
+      printf(1, "bigdir unlink failed");
+    1ce7:	83 ec 08             	sub    $0x8,%esp
+    1cea:	68 b2 44 00 00       	push   $0x44b2
+    1cef:	6a 01                	push   $0x1
+    1cf1:	e8 3a 1d 00 00       	call   3a30 <printf>
+      exit();
+    1cf6:	e8 a7 1b 00 00       	call   38a2 <exit>
+    printf(1, "bigdir create failed\n");
+    1cfb:	50                   	push   %eax
+    1cfc:	50                   	push   %eax
+    1cfd:	68 88 44 00 00       	push   $0x4488
+    1d02:	6a 01                	push   $0x1
+    1d04:	e8 27 1d 00 00       	call   3a30 <printf>
+    exit();
+    1d09:	e8 94 1b 00 00       	call   38a2 <exit>
+    1d0e:	66 90                	xchg   %ax,%ax
+
+00001d10 <subdir>:
+{
+    1d10:	55                   	push   %ebp
+    1d11:	89 e5                	mov    %esp,%ebp
+    1d13:	53                   	push   %ebx
+    1d14:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1d17:	68 d2 44 00 00       	push   $0x44d2
+    1d1c:	6a 01                	push   $0x1
+    1d1e:	e8 0d 1d 00 00       	call   3a30 <printf>
+  unlink("ff");
+    1d23:	c7 04 24 5b 45 00 00 	movl   $0x455b,(%esp)
+    1d2a:	e8 c3 1b 00 00       	call   38f2 <unlink>
+  if(mkdir("dd") != 0){
+    1d2f:	c7 04 24 f8 45 00 00 	movl   $0x45f8,(%esp)
+    1d36:	e8 cf 1b 00 00       	call   390a <mkdir>
+    1d3b:	83 c4 10             	add    $0x10,%esp
+    1d3e:	85 c0                	test   %eax,%eax
+    1d40:	0f 85 b3 05 00 00    	jne    22f9 <subdir+0x5e9>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d46:	83 ec 08             	sub    $0x8,%esp
+    1d49:	68 02 02 00 00       	push   $0x202
+    1d4e:	68 31 45 00 00       	push   $0x4531
+    1d53:	e8 8a 1b 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1d58:	83 c4 10             	add    $0x10,%esp
+    1d5b:	85 c0                	test   %eax,%eax
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d5d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1d5f:	0f 88 81 05 00 00    	js     22e6 <subdir+0x5d6>
+  write(fd, "ff", 2);
+    1d65:	83 ec 04             	sub    $0x4,%esp
+    1d68:	6a 02                	push   $0x2
+    1d6a:	68 5b 45 00 00       	push   $0x455b
+    1d6f:	50                   	push   %eax
+    1d70:	e8 4d 1b 00 00       	call   38c2 <write>
+  close(fd);
+    1d75:	89 1c 24             	mov    %ebx,(%esp)
+    1d78:	e8 4d 1b 00 00       	call   38ca <close>
+  if(unlink("dd") >= 0){
+    1d7d:	c7 04 24 f8 45 00 00 	movl   $0x45f8,(%esp)
+    1d84:	e8 69 1b 00 00       	call   38f2 <unlink>
+    1d89:	83 c4 10             	add    $0x10,%esp
+    1d8c:	85 c0                	test   %eax,%eax
+    1d8e:	0f 89 3f 05 00 00    	jns    22d3 <subdir+0x5c3>
+  if(mkdir("/dd/dd") != 0){
+    1d94:	83 ec 0c             	sub    $0xc,%esp
+    1d97:	68 0c 45 00 00       	push   $0x450c
+    1d9c:	e8 69 1b 00 00       	call   390a <mkdir>
+    1da1:	83 c4 10             	add    $0x10,%esp
+    1da4:	85 c0                	test   %eax,%eax
+    1da6:	0f 85 14 05 00 00    	jne    22c0 <subdir+0x5b0>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dac:	83 ec 08             	sub    $0x8,%esp
+    1daf:	68 02 02 00 00       	push   $0x202
+    1db4:	68 2e 45 00 00       	push   $0x452e
+    1db9:	e8 24 1b 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1dbe:	83 c4 10             	add    $0x10,%esp
+    1dc1:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dc3:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1dc5:	0f 88 24 04 00 00    	js     21ef <subdir+0x4df>
+  write(fd, "FF", 2);
+    1dcb:	83 ec 04             	sub    $0x4,%esp
+    1dce:	6a 02                	push   $0x2
+    1dd0:	68 4f 45 00 00       	push   $0x454f
+    1dd5:	50                   	push   %eax
+    1dd6:	e8 e7 1a 00 00       	call   38c2 <write>
+  close(fd);
+    1ddb:	89 1c 24             	mov    %ebx,(%esp)
+    1dde:	e8 e7 1a 00 00       	call   38ca <close>
+  fd = open("dd/dd/../ff", 0);
+    1de3:	58                   	pop    %eax
+    1de4:	5a                   	pop    %edx
+    1de5:	6a 00                	push   $0x0
+    1de7:	68 52 45 00 00       	push   $0x4552
+    1dec:	e8 f1 1a 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1df1:	83 c4 10             	add    $0x10,%esp
+    1df4:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/../ff", 0);
+    1df6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1df8:	0f 88 de 03 00 00    	js     21dc <subdir+0x4cc>
+  cc = read(fd, buf, sizeof(buf));
+    1dfe:	83 ec 04             	sub    $0x4,%esp
+    1e01:	68 00 20 00 00       	push   $0x2000
+    1e06:	68 20 86 00 00       	push   $0x8620
+    1e0b:	50                   	push   %eax
+    1e0c:	e8 a9 1a 00 00       	call   38ba <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1e11:	83 c4 10             	add    $0x10,%esp
+    1e14:	83 f8 02             	cmp    $0x2,%eax
+    1e17:	0f 85 3a 03 00 00    	jne    2157 <subdir+0x447>
+    1e1d:	80 3d 20 86 00 00 66 	cmpb   $0x66,0x8620
+    1e24:	0f 85 2d 03 00 00    	jne    2157 <subdir+0x447>
+  close(fd);
+    1e2a:	83 ec 0c             	sub    $0xc,%esp
+    1e2d:	53                   	push   %ebx
+    1e2e:	e8 97 1a 00 00       	call   38ca <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1e33:	5b                   	pop    %ebx
+    1e34:	58                   	pop    %eax
+    1e35:	68 92 45 00 00       	push   $0x4592
+    1e3a:	68 2e 45 00 00       	push   $0x452e
+    1e3f:	e8 be 1a 00 00       	call   3902 <link>
+    1e44:	83 c4 10             	add    $0x10,%esp
+    1e47:	85 c0                	test   %eax,%eax
+    1e49:	0f 85 c6 03 00 00    	jne    2215 <subdir+0x505>
+  if(unlink("dd/dd/ff") != 0){
+    1e4f:	83 ec 0c             	sub    $0xc,%esp
+    1e52:	68 2e 45 00 00       	push   $0x452e
+    1e57:	e8 96 1a 00 00       	call   38f2 <unlink>
+    1e5c:	83 c4 10             	add    $0x10,%esp
+    1e5f:	85 c0                	test   %eax,%eax
+    1e61:	0f 85 16 03 00 00    	jne    217d <subdir+0x46d>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1e67:	83 ec 08             	sub    $0x8,%esp
+    1e6a:	6a 00                	push   $0x0
+    1e6c:	68 2e 45 00 00       	push   $0x452e
+    1e71:	e8 6c 1a 00 00       	call   38e2 <open>
+    1e76:	83 c4 10             	add    $0x10,%esp
+    1e79:	85 c0                	test   %eax,%eax
+    1e7b:	0f 89 2c 04 00 00    	jns    22ad <subdir+0x59d>
+  if(chdir("dd") != 0){
+    1e81:	83 ec 0c             	sub    $0xc,%esp
+    1e84:	68 f8 45 00 00       	push   $0x45f8
+    1e89:	e8 84 1a 00 00       	call   3912 <chdir>
+    1e8e:	83 c4 10             	add    $0x10,%esp
+    1e91:	85 c0                	test   %eax,%eax
+    1e93:	0f 85 01 04 00 00    	jne    229a <subdir+0x58a>
+  if(chdir("dd/../../dd") != 0){
+    1e99:	83 ec 0c             	sub    $0xc,%esp
+    1e9c:	68 c6 45 00 00       	push   $0x45c6
+    1ea1:	e8 6c 1a 00 00       	call   3912 <chdir>
+    1ea6:	83 c4 10             	add    $0x10,%esp
+    1ea9:	85 c0                	test   %eax,%eax
+    1eab:	0f 85 b9 02 00 00    	jne    216a <subdir+0x45a>
+  if(chdir("dd/../../../dd") != 0){
+    1eb1:	83 ec 0c             	sub    $0xc,%esp
+    1eb4:	68 ec 45 00 00       	push   $0x45ec
+    1eb9:	e8 54 1a 00 00       	call   3912 <chdir>
+    1ebe:	83 c4 10             	add    $0x10,%esp
+    1ec1:	85 c0                	test   %eax,%eax
+    1ec3:	0f 85 a1 02 00 00    	jne    216a <subdir+0x45a>
+  if(chdir("./..") != 0){
+    1ec9:	83 ec 0c             	sub    $0xc,%esp
+    1ecc:	68 fb 45 00 00       	push   $0x45fb
+    1ed1:	e8 3c 1a 00 00       	call   3912 <chdir>
+    1ed6:	83 c4 10             	add    $0x10,%esp
+    1ed9:	85 c0                	test   %eax,%eax
+    1edb:	0f 85 21 03 00 00    	jne    2202 <subdir+0x4f2>
+  fd = open("dd/dd/ffff", 0);
+    1ee1:	83 ec 08             	sub    $0x8,%esp
+    1ee4:	6a 00                	push   $0x0
+    1ee6:	68 92 45 00 00       	push   $0x4592
+    1eeb:	e8 f2 19 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/ffff", 0);
+    1ef5:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1ef7:	0f 88 e0 04 00 00    	js     23dd <subdir+0x6cd>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1efd:	83 ec 04             	sub    $0x4,%esp
+    1f00:	68 00 20 00 00       	push   $0x2000
+    1f05:	68 20 86 00 00       	push   $0x8620
+    1f0a:	50                   	push   %eax
+    1f0b:	e8 aa 19 00 00       	call   38ba <read>
+    1f10:	83 c4 10             	add    $0x10,%esp
+    1f13:	83 f8 02             	cmp    $0x2,%eax
+    1f16:	0f 85 ae 04 00 00    	jne    23ca <subdir+0x6ba>
+  close(fd);
+    1f1c:	83 ec 0c             	sub    $0xc,%esp
+    1f1f:	53                   	push   %ebx
+    1f20:	e8 a5 19 00 00       	call   38ca <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1f25:	59                   	pop    %ecx
+    1f26:	5b                   	pop    %ebx
+    1f27:	6a 00                	push   $0x0
+    1f29:	68 2e 45 00 00       	push   $0x452e
+    1f2e:	e8 af 19 00 00       	call   38e2 <open>
+    1f33:	83 c4 10             	add    $0x10,%esp
+    1f36:	85 c0                	test   %eax,%eax
+    1f38:	0f 89 65 02 00 00    	jns    21a3 <subdir+0x493>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1f3e:	83 ec 08             	sub    $0x8,%esp
+    1f41:	68 02 02 00 00       	push   $0x202
+    1f46:	68 46 46 00 00       	push   $0x4646
+    1f4b:	e8 92 19 00 00       	call   38e2 <open>
+    1f50:	83 c4 10             	add    $0x10,%esp
+    1f53:	85 c0                	test   %eax,%eax
+    1f55:	0f 89 35 02 00 00    	jns    2190 <subdir+0x480>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1f5b:	83 ec 08             	sub    $0x8,%esp
+    1f5e:	68 02 02 00 00       	push   $0x202
+    1f63:	68 6b 46 00 00       	push   $0x466b
+    1f68:	e8 75 19 00 00       	call   38e2 <open>
+    1f6d:	83 c4 10             	add    $0x10,%esp
+    1f70:	85 c0                	test   %eax,%eax
+    1f72:	0f 89 0f 03 00 00    	jns    2287 <subdir+0x577>
+  if(open("dd", O_CREATE) >= 0){
+    1f78:	83 ec 08             	sub    $0x8,%esp
+    1f7b:	68 00 02 00 00       	push   $0x200
+    1f80:	68 f8 45 00 00       	push   $0x45f8
+    1f85:	e8 58 19 00 00       	call   38e2 <open>
+    1f8a:	83 c4 10             	add    $0x10,%esp
+    1f8d:	85 c0                	test   %eax,%eax
+    1f8f:	0f 89 df 02 00 00    	jns    2274 <subdir+0x564>
+  if(open("dd", O_RDWR) >= 0){
+    1f95:	83 ec 08             	sub    $0x8,%esp
+    1f98:	6a 02                	push   $0x2
+    1f9a:	68 f8 45 00 00       	push   $0x45f8
+    1f9f:	e8 3e 19 00 00       	call   38e2 <open>
+    1fa4:	83 c4 10             	add    $0x10,%esp
+    1fa7:	85 c0                	test   %eax,%eax
+    1fa9:	0f 89 b2 02 00 00    	jns    2261 <subdir+0x551>
+  if(open("dd", O_WRONLY) >= 0){
+    1faf:	83 ec 08             	sub    $0x8,%esp
+    1fb2:	6a 01                	push   $0x1
+    1fb4:	68 f8 45 00 00       	push   $0x45f8
+    1fb9:	e8 24 19 00 00       	call   38e2 <open>
+    1fbe:	83 c4 10             	add    $0x10,%esp
+    1fc1:	85 c0                	test   %eax,%eax
+    1fc3:	0f 89 85 02 00 00    	jns    224e <subdir+0x53e>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    1fc9:	83 ec 08             	sub    $0x8,%esp
+    1fcc:	68 da 46 00 00       	push   $0x46da
+    1fd1:	68 46 46 00 00       	push   $0x4646
+    1fd6:	e8 27 19 00 00       	call   3902 <link>
+    1fdb:	83 c4 10             	add    $0x10,%esp
+    1fde:	85 c0                	test   %eax,%eax
+    1fe0:	0f 84 55 02 00 00    	je     223b <subdir+0x52b>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    1fe6:	83 ec 08             	sub    $0x8,%esp
+    1fe9:	68 da 46 00 00       	push   $0x46da
+    1fee:	68 6b 46 00 00       	push   $0x466b
+    1ff3:	e8 0a 19 00 00       	call   3902 <link>
+    1ff8:	83 c4 10             	add    $0x10,%esp
+    1ffb:	85 c0                	test   %eax,%eax
+    1ffd:	0f 84 25 02 00 00    	je     2228 <subdir+0x518>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2003:	83 ec 08             	sub    $0x8,%esp
+    2006:	68 92 45 00 00       	push   $0x4592
+    200b:	68 31 45 00 00       	push   $0x4531
+    2010:	e8 ed 18 00 00       	call   3902 <link>
+    2015:	83 c4 10             	add    $0x10,%esp
+    2018:	85 c0                	test   %eax,%eax
+    201a:	0f 84 a9 01 00 00    	je     21c9 <subdir+0x4b9>
+  if(mkdir("dd/ff/ff") == 0){
+    2020:	83 ec 0c             	sub    $0xc,%esp
+    2023:	68 46 46 00 00       	push   $0x4646
+    2028:	e8 dd 18 00 00       	call   390a <mkdir>
+    202d:	83 c4 10             	add    $0x10,%esp
+    2030:	85 c0                	test   %eax,%eax
+    2032:	0f 84 7e 01 00 00    	je     21b6 <subdir+0x4a6>
+  if(mkdir("dd/xx/ff") == 0){
+    2038:	83 ec 0c             	sub    $0xc,%esp
+    203b:	68 6b 46 00 00       	push   $0x466b
+    2040:	e8 c5 18 00 00       	call   390a <mkdir>
+    2045:	83 c4 10             	add    $0x10,%esp
+    2048:	85 c0                	test   %eax,%eax
+    204a:	0f 84 67 03 00 00    	je     23b7 <subdir+0x6a7>
+  if(mkdir("dd/dd/ffff") == 0){
+    2050:	83 ec 0c             	sub    $0xc,%esp
+    2053:	68 92 45 00 00       	push   $0x4592
+    2058:	e8 ad 18 00 00       	call   390a <mkdir>
+    205d:	83 c4 10             	add    $0x10,%esp
+    2060:	85 c0                	test   %eax,%eax
+    2062:	0f 84 3c 03 00 00    	je     23a4 <subdir+0x694>
+  if(unlink("dd/xx/ff") == 0){
+    2068:	83 ec 0c             	sub    $0xc,%esp
+    206b:	68 6b 46 00 00       	push   $0x466b
+    2070:	e8 7d 18 00 00       	call   38f2 <unlink>
+    2075:	83 c4 10             	add    $0x10,%esp
+    2078:	85 c0                	test   %eax,%eax
+    207a:	0f 84 11 03 00 00    	je     2391 <subdir+0x681>
+  if(unlink("dd/ff/ff") == 0){
+    2080:	83 ec 0c             	sub    $0xc,%esp
+    2083:	68 46 46 00 00       	push   $0x4646
+    2088:	e8 65 18 00 00       	call   38f2 <unlink>
+    208d:	83 c4 10             	add    $0x10,%esp
+    2090:	85 c0                	test   %eax,%eax
+    2092:	0f 84 e6 02 00 00    	je     237e <subdir+0x66e>
+  if(chdir("dd/ff") == 0){
+    2098:	83 ec 0c             	sub    $0xc,%esp
+    209b:	68 31 45 00 00       	push   $0x4531
+    20a0:	e8 6d 18 00 00       	call   3912 <chdir>
+    20a5:	83 c4 10             	add    $0x10,%esp
+    20a8:	85 c0                	test   %eax,%eax
+    20aa:	0f 84 bb 02 00 00    	je     236b <subdir+0x65b>
+  if(chdir("dd/xx") == 0){
+    20b0:	83 ec 0c             	sub    $0xc,%esp
+    20b3:	68 dd 46 00 00       	push   $0x46dd
+    20b8:	e8 55 18 00 00       	call   3912 <chdir>
+    20bd:	83 c4 10             	add    $0x10,%esp
+    20c0:	85 c0                	test   %eax,%eax
+    20c2:	0f 84 90 02 00 00    	je     2358 <subdir+0x648>
+  if(unlink("dd/dd/ffff") != 0){
+    20c8:	83 ec 0c             	sub    $0xc,%esp
+    20cb:	68 92 45 00 00       	push   $0x4592
+    20d0:	e8 1d 18 00 00       	call   38f2 <unlink>
+    20d5:	83 c4 10             	add    $0x10,%esp
+    20d8:	85 c0                	test   %eax,%eax
+    20da:	0f 85 9d 00 00 00    	jne    217d <subdir+0x46d>
+  if(unlink("dd/ff") != 0){
+    20e0:	83 ec 0c             	sub    $0xc,%esp
+    20e3:	68 31 45 00 00       	push   $0x4531
+    20e8:	e8 05 18 00 00       	call   38f2 <unlink>
+    20ed:	83 c4 10             	add    $0x10,%esp
+    20f0:	85 c0                	test   %eax,%eax
+    20f2:	0f 85 4d 02 00 00    	jne    2345 <subdir+0x635>
+  if(unlink("dd") == 0){
+    20f8:	83 ec 0c             	sub    $0xc,%esp
+    20fb:	68 f8 45 00 00       	push   $0x45f8
+    2100:	e8 ed 17 00 00       	call   38f2 <unlink>
+    2105:	83 c4 10             	add    $0x10,%esp
+    2108:	85 c0                	test   %eax,%eax
+    210a:	0f 84 22 02 00 00    	je     2332 <subdir+0x622>
+  if(unlink("dd/dd") < 0){
+    2110:	83 ec 0c             	sub    $0xc,%esp
+    2113:	68 0d 45 00 00       	push   $0x450d
+    2118:	e8 d5 17 00 00       	call   38f2 <unlink>
+    211d:	83 c4 10             	add    $0x10,%esp
+    2120:	85 c0                	test   %eax,%eax
+    2122:	0f 88 f7 01 00 00    	js     231f <subdir+0x60f>
+  if(unlink("dd") < 0){
+    2128:	83 ec 0c             	sub    $0xc,%esp
+    212b:	68 f8 45 00 00       	push   $0x45f8
+    2130:	e8 bd 17 00 00       	call   38f2 <unlink>
+    2135:	83 c4 10             	add    $0x10,%esp
+    2138:	85 c0                	test   %eax,%eax
+    213a:	0f 88 cc 01 00 00    	js     230c <subdir+0x5fc>
+  printf(1, "subdir ok\n");
+    2140:	83 ec 08             	sub    $0x8,%esp
+    2143:	68 da 47 00 00       	push   $0x47da
+    2148:	6a 01                	push   $0x1
+    214a:	e8 e1 18 00 00       	call   3a30 <printf>
+}
+    214f:	83 c4 10             	add    $0x10,%esp
+    2152:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2155:	c9                   	leave  
+    2156:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    2157:	50                   	push   %eax
+    2158:	50                   	push   %eax
+    2159:	68 77 45 00 00       	push   $0x4577
+    215e:	6a 01                	push   $0x1
+    2160:	e8 cb 18 00 00       	call   3a30 <printf>
+    exit();
+    2165:	e8 38 17 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    216a:	50                   	push   %eax
+    216b:	50                   	push   %eax
+    216c:	68 d2 45 00 00       	push   $0x45d2
+    2171:	6a 01                	push   $0x1
+    2173:	e8 b8 18 00 00       	call   3a30 <printf>
+    exit();
+    2178:	e8 25 17 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    217d:	52                   	push   %edx
+    217e:	52                   	push   %edx
+    217f:	68 9d 45 00 00       	push   $0x459d
+    2184:	6a 01                	push   $0x1
+    2186:	e8 a5 18 00 00       	call   3a30 <printf>
+    exit();
+    218b:	e8 12 17 00 00       	call   38a2 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2190:	50                   	push   %eax
+    2191:	50                   	push   %eax
+    2192:	68 4f 46 00 00       	push   $0x464f
+    2197:	6a 01                	push   $0x1
+    2199:	e8 92 18 00 00       	call   3a30 <printf>
+    exit();
+    219e:	e8 ff 16 00 00       	call   38a2 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    21a3:	52                   	push   %edx
+    21a4:	52                   	push   %edx
+    21a5:	68 34 50 00 00       	push   $0x5034
+    21aa:	6a 01                	push   $0x1
+    21ac:	e8 7f 18 00 00       	call   3a30 <printf>
+    exit();
+    21b1:	e8 ec 16 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    21b6:	52                   	push   %edx
+    21b7:	52                   	push   %edx
+    21b8:	68 e3 46 00 00       	push   $0x46e3
+    21bd:	6a 01                	push   $0x1
+    21bf:	e8 6c 18 00 00       	call   3a30 <printf>
+    exit();
+    21c4:	e8 d9 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    21c9:	51                   	push   %ecx
+    21ca:	51                   	push   %ecx
+    21cb:	68 a4 50 00 00       	push   $0x50a4
+    21d0:	6a 01                	push   $0x1
+    21d2:	e8 59 18 00 00       	call   3a30 <printf>
+    exit();
+    21d7:	e8 c6 16 00 00       	call   38a2 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    21dc:	50                   	push   %eax
+    21dd:	50                   	push   %eax
+    21de:	68 5e 45 00 00       	push   $0x455e
+    21e3:	6a 01                	push   $0x1
+    21e5:	e8 46 18 00 00       	call   3a30 <printf>
+    exit();
+    21ea:	e8 b3 16 00 00       	call   38a2 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    21ef:	51                   	push   %ecx
+    21f0:	51                   	push   %ecx
+    21f1:	68 37 45 00 00       	push   $0x4537
+    21f6:	6a 01                	push   $0x1
+    21f8:	e8 33 18 00 00       	call   3a30 <printf>
+    exit();
+    21fd:	e8 a0 16 00 00       	call   38a2 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2202:	50                   	push   %eax
+    2203:	50                   	push   %eax
+    2204:	68 00 46 00 00       	push   $0x4600
+    2209:	6a 01                	push   $0x1
+    220b:	e8 20 18 00 00       	call   3a30 <printf>
+    exit();
+    2210:	e8 8d 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    2215:	51                   	push   %ecx
+    2216:	51                   	push   %ecx
+    2217:	68 ec 4f 00 00       	push   $0x4fec
+    221c:	6a 01                	push   $0x1
+    221e:	e8 0d 18 00 00       	call   3a30 <printf>
+    exit();
+    2223:	e8 7a 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2228:	53                   	push   %ebx
+    2229:	53                   	push   %ebx
+    222a:	68 80 50 00 00       	push   $0x5080
+    222f:	6a 01                	push   $0x1
+    2231:	e8 fa 17 00 00       	call   3a30 <printf>
+    exit();
+    2236:	e8 67 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    223b:	50                   	push   %eax
+    223c:	50                   	push   %eax
+    223d:	68 5c 50 00 00       	push   $0x505c
+    2242:	6a 01                	push   $0x1
+    2244:	e8 e7 17 00 00       	call   3a30 <printf>
+    exit();
+    2249:	e8 54 16 00 00       	call   38a2 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    224e:	50                   	push   %eax
+    224f:	50                   	push   %eax
+    2250:	68 bf 46 00 00       	push   $0x46bf
+    2255:	6a 01                	push   $0x1
+    2257:	e8 d4 17 00 00       	call   3a30 <printf>
+    exit();
+    225c:	e8 41 16 00 00       	call   38a2 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    2261:	50                   	push   %eax
+    2262:	50                   	push   %eax
+    2263:	68 a6 46 00 00       	push   $0x46a6
+    2268:	6a 01                	push   $0x1
+    226a:	e8 c1 17 00 00       	call   3a30 <printf>
+    exit();
+    226f:	e8 2e 16 00 00       	call   38a2 <exit>
+    printf(1, "create dd succeeded!\n");
+    2274:	50                   	push   %eax
+    2275:	50                   	push   %eax
+    2276:	68 90 46 00 00       	push   $0x4690
+    227b:	6a 01                	push   $0x1
+    227d:	e8 ae 17 00 00       	call   3a30 <printf>
+    exit();
+    2282:	e8 1b 16 00 00       	call   38a2 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2287:	50                   	push   %eax
+    2288:	50                   	push   %eax
+    2289:	68 74 46 00 00       	push   $0x4674
+    228e:	6a 01                	push   $0x1
+    2290:	e8 9b 17 00 00       	call   3a30 <printf>
+    exit();
+    2295:	e8 08 16 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd failed\n");
+    229a:	50                   	push   %eax
+    229b:	50                   	push   %eax
+    229c:	68 b5 45 00 00       	push   $0x45b5
+    22a1:	6a 01                	push   $0x1
+    22a3:	e8 88 17 00 00       	call   3a30 <printf>
+    exit();
+    22a8:	e8 f5 15 00 00       	call   38a2 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    22ad:	50                   	push   %eax
+    22ae:	50                   	push   %eax
+    22af:	68 10 50 00 00       	push   $0x5010
+    22b4:	6a 01                	push   $0x1
+    22b6:	e8 75 17 00 00       	call   3a30 <printf>
+    exit();
+    22bb:	e8 e2 15 00 00       	call   38a2 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    22c0:	53                   	push   %ebx
+    22c1:	53                   	push   %ebx
+    22c2:	68 13 45 00 00       	push   $0x4513
+    22c7:	6a 01                	push   $0x1
+    22c9:	e8 62 17 00 00       	call   3a30 <printf>
+    exit();
+    22ce:	e8 cf 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    22d3:	50                   	push   %eax
+    22d4:	50                   	push   %eax
+    22d5:	68 c4 4f 00 00       	push   $0x4fc4
+    22da:	6a 01                	push   $0x1
+    22dc:	e8 4f 17 00 00       	call   3a30 <printf>
+    exit();
+    22e1:	e8 bc 15 00 00       	call   38a2 <exit>
+    printf(1, "create dd/ff failed\n");
+    22e6:	50                   	push   %eax
+    22e7:	50                   	push   %eax
+    22e8:	68 f7 44 00 00       	push   $0x44f7
+    22ed:	6a 01                	push   $0x1
+    22ef:	e8 3c 17 00 00       	call   3a30 <printf>
+    exit();
+    22f4:	e8 a9 15 00 00       	call   38a2 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    22f9:	50                   	push   %eax
+    22fa:	50                   	push   %eax
+    22fb:	68 df 44 00 00       	push   $0x44df
+    2300:	6a 01                	push   $0x1
+    2302:	e8 29 17 00 00       	call   3a30 <printf>
+    exit();
+    2307:	e8 96 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd failed\n");
+    230c:	50                   	push   %eax
+    230d:	50                   	push   %eax
+    230e:	68 c8 47 00 00       	push   $0x47c8
+    2313:	6a 01                	push   $0x1
+    2315:	e8 16 17 00 00       	call   3a30 <printf>
+    exit();
+    231a:	e8 83 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    231f:	52                   	push   %edx
+    2320:	52                   	push   %edx
+    2321:	68 b3 47 00 00       	push   $0x47b3
+    2326:	6a 01                	push   $0x1
+    2328:	e8 03 17 00 00       	call   3a30 <printf>
+    exit();
+    232d:	e8 70 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2332:	51                   	push   %ecx
+    2333:	51                   	push   %ecx
+    2334:	68 c8 50 00 00       	push   $0x50c8
+    2339:	6a 01                	push   $0x1
+    233b:	e8 f0 16 00 00       	call   3a30 <printf>
+    exit();
+    2340:	e8 5d 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    2345:	53                   	push   %ebx
+    2346:	53                   	push   %ebx
+    2347:	68 9e 47 00 00       	push   $0x479e
+    234c:	6a 01                	push   $0x1
+    234e:	e8 dd 16 00 00       	call   3a30 <printf>
+    exit();
+    2353:	e8 4a 15 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    2358:	50                   	push   %eax
+    2359:	50                   	push   %eax
+    235a:	68 86 47 00 00       	push   $0x4786
+    235f:	6a 01                	push   $0x1
+    2361:	e8 ca 16 00 00       	call   3a30 <printf>
+    exit();
+    2366:	e8 37 15 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    236b:	50                   	push   %eax
+    236c:	50                   	push   %eax
+    236d:	68 6e 47 00 00       	push   $0x476e
+    2372:	6a 01                	push   $0x1
+    2374:	e8 b7 16 00 00       	call   3a30 <printf>
+    exit();
+    2379:	e8 24 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    237e:	50                   	push   %eax
+    237f:	50                   	push   %eax
+    2380:	68 52 47 00 00       	push   $0x4752
+    2385:	6a 01                	push   $0x1
+    2387:	e8 a4 16 00 00       	call   3a30 <printf>
+    exit();
+    238c:	e8 11 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2391:	50                   	push   %eax
+    2392:	50                   	push   %eax
+    2393:	68 36 47 00 00       	push   $0x4736
+    2398:	6a 01                	push   $0x1
+    239a:	e8 91 16 00 00       	call   3a30 <printf>
+    exit();
+    239f:	e8 fe 14 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    23a4:	50                   	push   %eax
+    23a5:	50                   	push   %eax
+    23a6:	68 19 47 00 00       	push   $0x4719
+    23ab:	6a 01                	push   $0x1
+    23ad:	e8 7e 16 00 00       	call   3a30 <printf>
+    exit();
+    23b2:	e8 eb 14 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    23b7:	50                   	push   %eax
+    23b8:	50                   	push   %eax
+    23b9:	68 fe 46 00 00       	push   $0x46fe
+    23be:	6a 01                	push   $0x1
+    23c0:	e8 6b 16 00 00       	call   3a30 <printf>
+    exit();
+    23c5:	e8 d8 14 00 00       	call   38a2 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    23ca:	50                   	push   %eax
+    23cb:	50                   	push   %eax
+    23cc:	68 2b 46 00 00       	push   $0x462b
+    23d1:	6a 01                	push   $0x1
+    23d3:	e8 58 16 00 00       	call   3a30 <printf>
+    exit();
+    23d8:	e8 c5 14 00 00       	call   38a2 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    23dd:	50                   	push   %eax
+    23de:	50                   	push   %eax
+    23df:	68 13 46 00 00       	push   $0x4613
+    23e4:	6a 01                	push   $0x1
+    23e6:	e8 45 16 00 00       	call   3a30 <printf>
+    exit();
+    23eb:	e8 b2 14 00 00       	call   38a2 <exit>
+
+000023f0 <bigwrite>:
+{
+    23f0:	55                   	push   %ebp
+    23f1:	89 e5                	mov    %esp,%ebp
+    23f3:	56                   	push   %esi
+    23f4:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    23f5:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    23fa:	83 ec 08             	sub    $0x8,%esp
+    23fd:	68 e5 47 00 00       	push   $0x47e5
+    2402:	6a 01                	push   $0x1
+    2404:	e8 27 16 00 00       	call   3a30 <printf>
+  unlink("bigwrite");
+    2409:	c7 04 24 f4 47 00 00 	movl   $0x47f4,(%esp)
+    2410:	e8 dd 14 00 00       	call   38f2 <unlink>
+    2415:	83 c4 10             	add    $0x10,%esp
+    2418:	90                   	nop
+    2419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2420:	83 ec 08             	sub    $0x8,%esp
+    2423:	68 02 02 00 00       	push   $0x202
+    2428:	68 f4 47 00 00       	push   $0x47f4
+    242d:	e8 b0 14 00 00       	call   38e2 <open>
+    if(fd < 0){
+    2432:	83 c4 10             	add    $0x10,%esp
+    2435:	85 c0                	test   %eax,%eax
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2437:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    2439:	78 7e                	js     24b9 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    243b:	83 ec 04             	sub    $0x4,%esp
+    243e:	53                   	push   %ebx
+    243f:	68 20 86 00 00       	push   $0x8620
+    2444:	50                   	push   %eax
+    2445:	e8 78 14 00 00       	call   38c2 <write>
+      if(cc != sz){
+    244a:	83 c4 10             	add    $0x10,%esp
+    244d:	39 d8                	cmp    %ebx,%eax
+    244f:	75 55                	jne    24a6 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    2451:	83 ec 04             	sub    $0x4,%esp
+    2454:	53                   	push   %ebx
+    2455:	68 20 86 00 00       	push   $0x8620
+    245a:	56                   	push   %esi
+    245b:	e8 62 14 00 00       	call   38c2 <write>
+      if(cc != sz){
+    2460:	83 c4 10             	add    $0x10,%esp
+    2463:	39 d8                	cmp    %ebx,%eax
+    2465:	75 3f                	jne    24a6 <bigwrite+0xb6>
+    close(fd);
+    2467:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    246a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2470:	56                   	push   %esi
+    2471:	e8 54 14 00 00       	call   38ca <close>
+    unlink("bigwrite");
+    2476:	c7 04 24 f4 47 00 00 	movl   $0x47f4,(%esp)
+    247d:	e8 70 14 00 00       	call   38f2 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2482:	83 c4 10             	add    $0x10,%esp
+    2485:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    248b:	75 93                	jne    2420 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    248d:	83 ec 08             	sub    $0x8,%esp
+    2490:	68 27 48 00 00       	push   $0x4827
+    2495:	6a 01                	push   $0x1
+    2497:	e8 94 15 00 00       	call   3a30 <printf>
+}
+    249c:	83 c4 10             	add    $0x10,%esp
+    249f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    24a2:	5b                   	pop    %ebx
+    24a3:	5e                   	pop    %esi
+    24a4:	5d                   	pop    %ebp
+    24a5:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    24a6:	50                   	push   %eax
+    24a7:	53                   	push   %ebx
+    24a8:	68 15 48 00 00       	push   $0x4815
+    24ad:	6a 01                	push   $0x1
+    24af:	e8 7c 15 00 00       	call   3a30 <printf>
+        exit();
+    24b4:	e8 e9 13 00 00       	call   38a2 <exit>
+      printf(1, "cannot create bigwrite\n");
+    24b9:	83 ec 08             	sub    $0x8,%esp
+    24bc:	68 fd 47 00 00       	push   $0x47fd
+    24c1:	6a 01                	push   $0x1
+    24c3:	e8 68 15 00 00       	call   3a30 <printf>
+      exit();
+    24c8:	e8 d5 13 00 00       	call   38a2 <exit>
+    24cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000024d0 <bigfile>:
+{
+    24d0:	55                   	push   %ebp
+    24d1:	89 e5                	mov    %esp,%ebp
+    24d3:	57                   	push   %edi
+    24d4:	56                   	push   %esi
+    24d5:	53                   	push   %ebx
+    24d6:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    24d9:	68 34 48 00 00       	push   $0x4834
+    24de:	6a 01                	push   $0x1
+    24e0:	e8 4b 15 00 00       	call   3a30 <printf>
+  unlink("bigfile");
+    24e5:	c7 04 24 50 48 00 00 	movl   $0x4850,(%esp)
+    24ec:	e8 01 14 00 00       	call   38f2 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    24f1:	58                   	pop    %eax
+    24f2:	5a                   	pop    %edx
+    24f3:	68 02 02 00 00       	push   $0x202
+    24f8:	68 50 48 00 00       	push   $0x4850
+    24fd:	e8 e0 13 00 00       	call   38e2 <open>
+  if(fd < 0){
+    2502:	83 c4 10             	add    $0x10,%esp
+    2505:	85 c0                	test   %eax,%eax
+    2507:	0f 88 5e 01 00 00    	js     266b <bigfile+0x19b>
+    250d:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    250f:	31 db                	xor    %ebx,%ebx
+    2511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    memset(buf, i, 600);
+    2518:	83 ec 04             	sub    $0x4,%esp
+    251b:	68 58 02 00 00       	push   $0x258
+    2520:	53                   	push   %ebx
+    2521:	68 20 86 00 00       	push   $0x8620
+    2526:	e8 d5 11 00 00       	call   3700 <memset>
+    if(write(fd, buf, 600) != 600){
+    252b:	83 c4 0c             	add    $0xc,%esp
+    252e:	68 58 02 00 00       	push   $0x258
+    2533:	68 20 86 00 00       	push   $0x8620
+    2538:	56                   	push   %esi
+    2539:	e8 84 13 00 00       	call   38c2 <write>
+    253e:	83 c4 10             	add    $0x10,%esp
+    2541:	3d 58 02 00 00       	cmp    $0x258,%eax
+    2546:	0f 85 f8 00 00 00    	jne    2644 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    254c:	83 c3 01             	add    $0x1,%ebx
+    254f:	83 fb 14             	cmp    $0x14,%ebx
+    2552:	75 c4                	jne    2518 <bigfile+0x48>
+  close(fd);
+    2554:	83 ec 0c             	sub    $0xc,%esp
+    2557:	56                   	push   %esi
+    2558:	e8 6d 13 00 00       	call   38ca <close>
+  fd = open("bigfile", 0);
+    255d:	5e                   	pop    %esi
+    255e:	5f                   	pop    %edi
+    255f:	6a 00                	push   $0x0
+    2561:	68 50 48 00 00       	push   $0x4850
+    2566:	e8 77 13 00 00       	call   38e2 <open>
+  if(fd < 0){
+    256b:	83 c4 10             	add    $0x10,%esp
+    256e:	85 c0                	test   %eax,%eax
+  fd = open("bigfile", 0);
+    2570:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2572:	0f 88 e0 00 00 00    	js     2658 <bigfile+0x188>
+  total = 0;
+    2578:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    257a:	31 ff                	xor    %edi,%edi
+    257c:	eb 30                	jmp    25ae <bigfile+0xde>
+    257e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2580:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2585:	0f 85 91 00 00 00    	jne    261c <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    258b:	0f be 05 20 86 00 00 	movsbl 0x8620,%eax
+    2592:	89 fa                	mov    %edi,%edx
+    2594:	d1 fa                	sar    %edx
+    2596:	39 d0                	cmp    %edx,%eax
+    2598:	75 6e                	jne    2608 <bigfile+0x138>
+    259a:	0f be 15 4b 87 00 00 	movsbl 0x874b,%edx
+    25a1:	39 d0                	cmp    %edx,%eax
+    25a3:	75 63                	jne    2608 <bigfile+0x138>
+    total += cc;
+    25a5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    25ab:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    25ae:	83 ec 04             	sub    $0x4,%esp
+    25b1:	68 2c 01 00 00       	push   $0x12c
+    25b6:	68 20 86 00 00       	push   $0x8620
+    25bb:	56                   	push   %esi
+    25bc:	e8 f9 12 00 00       	call   38ba <read>
+    if(cc < 0){
+    25c1:	83 c4 10             	add    $0x10,%esp
+    25c4:	85 c0                	test   %eax,%eax
+    25c6:	78 68                	js     2630 <bigfile+0x160>
+    if(cc == 0)
+    25c8:	75 b6                	jne    2580 <bigfile+0xb0>
+  close(fd);
+    25ca:	83 ec 0c             	sub    $0xc,%esp
+    25cd:	56                   	push   %esi
+    25ce:	e8 f7 12 00 00       	call   38ca <close>
+  if(total != 20*600){
+    25d3:	83 c4 10             	add    $0x10,%esp
+    25d6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    25dc:	0f 85 9c 00 00 00    	jne    267e <bigfile+0x1ae>
+  unlink("bigfile");
+    25e2:	83 ec 0c             	sub    $0xc,%esp
+    25e5:	68 50 48 00 00       	push   $0x4850
+    25ea:	e8 03 13 00 00       	call   38f2 <unlink>
+  printf(1, "bigfile test ok\n");
+    25ef:	58                   	pop    %eax
+    25f0:	5a                   	pop    %edx
+    25f1:	68 df 48 00 00       	push   $0x48df
+    25f6:	6a 01                	push   $0x1
+    25f8:	e8 33 14 00 00       	call   3a30 <printf>
+}
+    25fd:	83 c4 10             	add    $0x10,%esp
+    2600:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2603:	5b                   	pop    %ebx
+    2604:	5e                   	pop    %esi
+    2605:	5f                   	pop    %edi
+    2606:	5d                   	pop    %ebp
+    2607:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    2608:	83 ec 08             	sub    $0x8,%esp
+    260b:	68 ac 48 00 00       	push   $0x48ac
+    2610:	6a 01                	push   $0x1
+    2612:	e8 19 14 00 00       	call   3a30 <printf>
+      exit();
+    2617:	e8 86 12 00 00       	call   38a2 <exit>
+      printf(1, "short read bigfile\n");
+    261c:	83 ec 08             	sub    $0x8,%esp
+    261f:	68 98 48 00 00       	push   $0x4898
+    2624:	6a 01                	push   $0x1
+    2626:	e8 05 14 00 00       	call   3a30 <printf>
+      exit();
+    262b:	e8 72 12 00 00       	call   38a2 <exit>
+      printf(1, "read bigfile failed\n");
+    2630:	83 ec 08             	sub    $0x8,%esp
+    2633:	68 83 48 00 00       	push   $0x4883
+    2638:	6a 01                	push   $0x1
+    263a:	e8 f1 13 00 00       	call   3a30 <printf>
+      exit();
+    263f:	e8 5e 12 00 00       	call   38a2 <exit>
+      printf(1, "write bigfile failed\n");
+    2644:	83 ec 08             	sub    $0x8,%esp
+    2647:	68 58 48 00 00       	push   $0x4858
+    264c:	6a 01                	push   $0x1
+    264e:	e8 dd 13 00 00       	call   3a30 <printf>
+      exit();
+    2653:	e8 4a 12 00 00       	call   38a2 <exit>
+    printf(1, "cannot open bigfile\n");
+    2658:	53                   	push   %ebx
+    2659:	53                   	push   %ebx
+    265a:	68 6e 48 00 00       	push   $0x486e
+    265f:	6a 01                	push   $0x1
+    2661:	e8 ca 13 00 00       	call   3a30 <printf>
+    exit();
+    2666:	e8 37 12 00 00       	call   38a2 <exit>
+    printf(1, "cannot create bigfile");
+    266b:	50                   	push   %eax
+    266c:	50                   	push   %eax
+    266d:	68 42 48 00 00       	push   $0x4842
+    2672:	6a 01                	push   $0x1
+    2674:	e8 b7 13 00 00       	call   3a30 <printf>
+    exit();
+    2679:	e8 24 12 00 00       	call   38a2 <exit>
+    printf(1, "read bigfile wrong total\n");
+    267e:	51                   	push   %ecx
+    267f:	51                   	push   %ecx
+    2680:	68 c5 48 00 00       	push   $0x48c5
+    2685:	6a 01                	push   $0x1
+    2687:	e8 a4 13 00 00       	call   3a30 <printf>
+    exit();
+    268c:	e8 11 12 00 00       	call   38a2 <exit>
+    2691:	eb 0d                	jmp    26a0 <fourteen>
+    2693:	90                   	nop
+    2694:	90                   	nop
+    2695:	90                   	nop
+    2696:	90                   	nop
+    2697:	90                   	nop
+    2698:	90                   	nop
+    2699:	90                   	nop
+    269a:	90                   	nop
+    269b:	90                   	nop
+    269c:	90                   	nop
+    269d:	90                   	nop
+    269e:	90                   	nop
+    269f:	90                   	nop
+
+000026a0 <fourteen>:
+{
+    26a0:	55                   	push   %ebp
+    26a1:	89 e5                	mov    %esp,%ebp
+    26a3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    26a6:	68 f0 48 00 00       	push   $0x48f0
+    26ab:	6a 01                	push   $0x1
+    26ad:	e8 7e 13 00 00       	call   3a30 <printf>
+  if(mkdir("12345678901234") != 0){
+    26b2:	c7 04 24 2b 49 00 00 	movl   $0x492b,(%esp)
+    26b9:	e8 4c 12 00 00       	call   390a <mkdir>
+    26be:	83 c4 10             	add    $0x10,%esp
+    26c1:	85 c0                	test   %eax,%eax
+    26c3:	0f 85 97 00 00 00    	jne    2760 <fourteen+0xc0>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26c9:	83 ec 0c             	sub    $0xc,%esp
+    26cc:	68 e8 50 00 00       	push   $0x50e8
+    26d1:	e8 34 12 00 00       	call   390a <mkdir>
+    26d6:	83 c4 10             	add    $0x10,%esp
+    26d9:	85 c0                	test   %eax,%eax
+    26db:	0f 85 de 00 00 00    	jne    27bf <fourteen+0x11f>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26e1:	83 ec 08             	sub    $0x8,%esp
+    26e4:	68 00 02 00 00       	push   $0x200
+    26e9:	68 38 51 00 00       	push   $0x5138
+    26ee:	e8 ef 11 00 00       	call   38e2 <open>
+  if(fd < 0){
+    26f3:	83 c4 10             	add    $0x10,%esp
+    26f6:	85 c0                	test   %eax,%eax
+    26f8:	0f 88 ae 00 00 00    	js     27ac <fourteen+0x10c>
+  close(fd);
+    26fe:	83 ec 0c             	sub    $0xc,%esp
+    2701:	50                   	push   %eax
+    2702:	e8 c3 11 00 00       	call   38ca <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2707:	58                   	pop    %eax
+    2708:	5a                   	pop    %edx
+    2709:	6a 00                	push   $0x0
+    270b:	68 a8 51 00 00       	push   $0x51a8
+    2710:	e8 cd 11 00 00       	call   38e2 <open>
+  if(fd < 0){
+    2715:	83 c4 10             	add    $0x10,%esp
+    2718:	85 c0                	test   %eax,%eax
+    271a:	78 7d                	js     2799 <fourteen+0xf9>
+  close(fd);
+    271c:	83 ec 0c             	sub    $0xc,%esp
+    271f:	50                   	push   %eax
+    2720:	e8 a5 11 00 00       	call   38ca <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2725:	c7 04 24 1c 49 00 00 	movl   $0x491c,(%esp)
+    272c:	e8 d9 11 00 00       	call   390a <mkdir>
+    2731:	83 c4 10             	add    $0x10,%esp
+    2734:	85 c0                	test   %eax,%eax
+    2736:	74 4e                	je     2786 <fourteen+0xe6>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2738:	83 ec 0c             	sub    $0xc,%esp
+    273b:	68 44 52 00 00       	push   $0x5244
+    2740:	e8 c5 11 00 00       	call   390a <mkdir>
+    2745:	83 c4 10             	add    $0x10,%esp
+    2748:	85 c0                	test   %eax,%eax
+    274a:	74 27                	je     2773 <fourteen+0xd3>
+  printf(1, "fourteen ok\n");
+    274c:	83 ec 08             	sub    $0x8,%esp
+    274f:	68 3a 49 00 00       	push   $0x493a
+    2754:	6a 01                	push   $0x1
+    2756:	e8 d5 12 00 00       	call   3a30 <printf>
+}
+    275b:	83 c4 10             	add    $0x10,%esp
+    275e:	c9                   	leave  
+    275f:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2760:	50                   	push   %eax
+    2761:	50                   	push   %eax
+    2762:	68 ff 48 00 00       	push   $0x48ff
+    2767:	6a 01                	push   $0x1
+    2769:	e8 c2 12 00 00       	call   3a30 <printf>
+    exit();
+    276e:	e8 2f 11 00 00       	call   38a2 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2773:	50                   	push   %eax
+    2774:	50                   	push   %eax
+    2775:	68 64 52 00 00       	push   $0x5264
+    277a:	6a 01                	push   $0x1
+    277c:	e8 af 12 00 00       	call   3a30 <printf>
+    exit();
+    2781:	e8 1c 11 00 00       	call   38a2 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2786:	52                   	push   %edx
+    2787:	52                   	push   %edx
+    2788:	68 14 52 00 00       	push   $0x5214
+    278d:	6a 01                	push   $0x1
+    278f:	e8 9c 12 00 00       	call   3a30 <printf>
+    exit();
+    2794:	e8 09 11 00 00       	call   38a2 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    2799:	51                   	push   %ecx
+    279a:	51                   	push   %ecx
+    279b:	68 d8 51 00 00       	push   $0x51d8
+    27a0:	6a 01                	push   $0x1
+    27a2:	e8 89 12 00 00       	call   3a30 <printf>
+    exit();
+    27a7:	e8 f6 10 00 00       	call   38a2 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    27ac:	51                   	push   %ecx
+    27ad:	51                   	push   %ecx
+    27ae:	68 68 51 00 00       	push   $0x5168
+    27b3:	6a 01                	push   $0x1
+    27b5:	e8 76 12 00 00       	call   3a30 <printf>
+    exit();
+    27ba:	e8 e3 10 00 00       	call   38a2 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    27bf:	50                   	push   %eax
+    27c0:	50                   	push   %eax
+    27c1:	68 08 51 00 00       	push   $0x5108
+    27c6:	6a 01                	push   $0x1
+    27c8:	e8 63 12 00 00       	call   3a30 <printf>
+    exit();
+    27cd:	e8 d0 10 00 00       	call   38a2 <exit>
+    27d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    27d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000027e0 <rmdot>:
+{
+    27e0:	55                   	push   %ebp
+    27e1:	89 e5                	mov    %esp,%ebp
+    27e3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    27e6:	68 47 49 00 00       	push   $0x4947
+    27eb:	6a 01                	push   $0x1
+    27ed:	e8 3e 12 00 00       	call   3a30 <printf>
+  if(mkdir("dots") != 0){
+    27f2:	c7 04 24 53 49 00 00 	movl   $0x4953,(%esp)
+    27f9:	e8 0c 11 00 00       	call   390a <mkdir>
+    27fe:	83 c4 10             	add    $0x10,%esp
+    2801:	85 c0                	test   %eax,%eax
+    2803:	0f 85 b0 00 00 00    	jne    28b9 <rmdot+0xd9>
+  if(chdir("dots") != 0){
+    2809:	83 ec 0c             	sub    $0xc,%esp
+    280c:	68 53 49 00 00       	push   $0x4953
+    2811:	e8 fc 10 00 00       	call   3912 <chdir>
+    2816:	83 c4 10             	add    $0x10,%esp
+    2819:	85 c0                	test   %eax,%eax
+    281b:	0f 85 1d 01 00 00    	jne    293e <rmdot+0x15e>
+  if(unlink(".") == 0){
+    2821:	83 ec 0c             	sub    $0xc,%esp
+    2824:	68 fe 45 00 00       	push   $0x45fe
+    2829:	e8 c4 10 00 00       	call   38f2 <unlink>
+    282e:	83 c4 10             	add    $0x10,%esp
+    2831:	85 c0                	test   %eax,%eax
+    2833:	0f 84 f2 00 00 00    	je     292b <rmdot+0x14b>
+  if(unlink("..") == 0){
+    2839:	83 ec 0c             	sub    $0xc,%esp
+    283c:	68 fd 45 00 00       	push   $0x45fd
+    2841:	e8 ac 10 00 00       	call   38f2 <unlink>
+    2846:	83 c4 10             	add    $0x10,%esp
+    2849:	85 c0                	test   %eax,%eax
+    284b:	0f 84 c7 00 00 00    	je     2918 <rmdot+0x138>
+  if(chdir("/") != 0){
+    2851:	83 ec 0c             	sub    $0xc,%esp
+    2854:	68 d1 3d 00 00       	push   $0x3dd1
+    2859:	e8 b4 10 00 00       	call   3912 <chdir>
+    285e:	83 c4 10             	add    $0x10,%esp
+    2861:	85 c0                	test   %eax,%eax
+    2863:	0f 85 9c 00 00 00    	jne    2905 <rmdot+0x125>
+  if(unlink("dots/.") == 0){
+    2869:	83 ec 0c             	sub    $0xc,%esp
+    286c:	68 9b 49 00 00       	push   $0x499b
+    2871:	e8 7c 10 00 00       	call   38f2 <unlink>
+    2876:	83 c4 10             	add    $0x10,%esp
+    2879:	85 c0                	test   %eax,%eax
+    287b:	74 75                	je     28f2 <rmdot+0x112>
+  if(unlink("dots/..") == 0){
+    287d:	83 ec 0c             	sub    $0xc,%esp
+    2880:	68 b9 49 00 00       	push   $0x49b9
+    2885:	e8 68 10 00 00       	call   38f2 <unlink>
+    288a:	83 c4 10             	add    $0x10,%esp
+    288d:	85 c0                	test   %eax,%eax
+    288f:	74 4e                	je     28df <rmdot+0xff>
+  if(unlink("dots") != 0){
+    2891:	83 ec 0c             	sub    $0xc,%esp
+    2894:	68 53 49 00 00       	push   $0x4953
+    2899:	e8 54 10 00 00       	call   38f2 <unlink>
+    289e:	83 c4 10             	add    $0x10,%esp
+    28a1:	85 c0                	test   %eax,%eax
+    28a3:	75 27                	jne    28cc <rmdot+0xec>
+  printf(1, "rmdot ok\n");
+    28a5:	83 ec 08             	sub    $0x8,%esp
+    28a8:	68 ee 49 00 00       	push   $0x49ee
+    28ad:	6a 01                	push   $0x1
+    28af:	e8 7c 11 00 00       	call   3a30 <printf>
+}
+    28b4:	83 c4 10             	add    $0x10,%esp
+    28b7:	c9                   	leave  
+    28b8:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    28b9:	50                   	push   %eax
+    28ba:	50                   	push   %eax
+    28bb:	68 58 49 00 00       	push   $0x4958
+    28c0:	6a 01                	push   $0x1
+    28c2:	e8 69 11 00 00       	call   3a30 <printf>
+    exit();
+    28c7:	e8 d6 0f 00 00       	call   38a2 <exit>
+    printf(1, "unlink dots failed!\n");
+    28cc:	50                   	push   %eax
+    28cd:	50                   	push   %eax
+    28ce:	68 d9 49 00 00       	push   $0x49d9
+    28d3:	6a 01                	push   $0x1
+    28d5:	e8 56 11 00 00       	call   3a30 <printf>
+    exit();
+    28da:	e8 c3 0f 00 00       	call   38a2 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    28df:	52                   	push   %edx
+    28e0:	52                   	push   %edx
+    28e1:	68 c1 49 00 00       	push   $0x49c1
+    28e6:	6a 01                	push   $0x1
+    28e8:	e8 43 11 00 00       	call   3a30 <printf>
+    exit();
+    28ed:	e8 b0 0f 00 00       	call   38a2 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    28f2:	51                   	push   %ecx
+    28f3:	51                   	push   %ecx
+    28f4:	68 a2 49 00 00       	push   $0x49a2
+    28f9:	6a 01                	push   $0x1
+    28fb:	e8 30 11 00 00       	call   3a30 <printf>
+    exit();
+    2900:	e8 9d 0f 00 00       	call   38a2 <exit>
+    printf(1, "chdir / failed\n");
+    2905:	50                   	push   %eax
+    2906:	50                   	push   %eax
+    2907:	68 d3 3d 00 00       	push   $0x3dd3
+    290c:	6a 01                	push   $0x1
+    290e:	e8 1d 11 00 00       	call   3a30 <printf>
+    exit();
+    2913:	e8 8a 0f 00 00       	call   38a2 <exit>
+    printf(1, "rm .. worked!\n");
+    2918:	50                   	push   %eax
+    2919:	50                   	push   %eax
+    291a:	68 8c 49 00 00       	push   $0x498c
+    291f:	6a 01                	push   $0x1
+    2921:	e8 0a 11 00 00       	call   3a30 <printf>
+    exit();
+    2926:	e8 77 0f 00 00       	call   38a2 <exit>
+    printf(1, "rm . worked!\n");
+    292b:	50                   	push   %eax
+    292c:	50                   	push   %eax
+    292d:	68 7e 49 00 00       	push   $0x497e
+    2932:	6a 01                	push   $0x1
+    2934:	e8 f7 10 00 00       	call   3a30 <printf>
+    exit();
+    2939:	e8 64 0f 00 00       	call   38a2 <exit>
+    printf(1, "chdir dots failed\n");
+    293e:	50                   	push   %eax
+    293f:	50                   	push   %eax
+    2940:	68 6b 49 00 00       	push   $0x496b
+    2945:	6a 01                	push   $0x1
+    2947:	e8 e4 10 00 00       	call   3a30 <printf>
+    exit();
+    294c:	e8 51 0f 00 00       	call   38a2 <exit>
+    2951:	eb 0d                	jmp    2960 <dirfile>
+    2953:	90                   	nop
+    2954:	90                   	nop
+    2955:	90                   	nop
+    2956:	90                   	nop
+    2957:	90                   	nop
+    2958:	90                   	nop
+    2959:	90                   	nop
+    295a:	90                   	nop
+    295b:	90                   	nop
+    295c:	90                   	nop
+    295d:	90                   	nop
+    295e:	90                   	nop
+    295f:	90                   	nop
+
+00002960 <dirfile>:
+{
+    2960:	55                   	push   %ebp
+    2961:	89 e5                	mov    %esp,%ebp
+    2963:	53                   	push   %ebx
+    2964:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2967:	68 f8 49 00 00       	push   $0x49f8
+    296c:	6a 01                	push   $0x1
+    296e:	e8 bd 10 00 00       	call   3a30 <printf>
+  fd = open("dirfile", O_CREATE);
+    2973:	59                   	pop    %ecx
+    2974:	5b                   	pop    %ebx
+    2975:	68 00 02 00 00       	push   $0x200
+    297a:	68 05 4a 00 00       	push   $0x4a05
+    297f:	e8 5e 0f 00 00       	call   38e2 <open>
+  if(fd < 0){
+    2984:	83 c4 10             	add    $0x10,%esp
+    2987:	85 c0                	test   %eax,%eax
+    2989:	0f 88 43 01 00 00    	js     2ad2 <dirfile+0x172>
+  close(fd);
+    298f:	83 ec 0c             	sub    $0xc,%esp
+    2992:	50                   	push   %eax
+    2993:	e8 32 0f 00 00       	call   38ca <close>
+  if(chdir("dirfile") == 0){
+    2998:	c7 04 24 05 4a 00 00 	movl   $0x4a05,(%esp)
+    299f:	e8 6e 0f 00 00       	call   3912 <chdir>
+    29a4:	83 c4 10             	add    $0x10,%esp
+    29a7:	85 c0                	test   %eax,%eax
+    29a9:	0f 84 10 01 00 00    	je     2abf <dirfile+0x15f>
+  fd = open("dirfile/xx", 0);
+    29af:	83 ec 08             	sub    $0x8,%esp
+    29b2:	6a 00                	push   $0x0
+    29b4:	68 3e 4a 00 00       	push   $0x4a3e
+    29b9:	e8 24 0f 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    29be:	83 c4 10             	add    $0x10,%esp
+    29c1:	85 c0                	test   %eax,%eax
+    29c3:	0f 89 e3 00 00 00    	jns    2aac <dirfile+0x14c>
+  fd = open("dirfile/xx", O_CREATE);
+    29c9:	83 ec 08             	sub    $0x8,%esp
+    29cc:	68 00 02 00 00       	push   $0x200
+    29d1:	68 3e 4a 00 00       	push   $0x4a3e
+    29d6:	e8 07 0f 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    29db:	83 c4 10             	add    $0x10,%esp
+    29de:	85 c0                	test   %eax,%eax
+    29e0:	0f 89 c6 00 00 00    	jns    2aac <dirfile+0x14c>
+  if(mkdir("dirfile/xx") == 0){
+    29e6:	83 ec 0c             	sub    $0xc,%esp
+    29e9:	68 3e 4a 00 00       	push   $0x4a3e
+    29ee:	e8 17 0f 00 00       	call   390a <mkdir>
+    29f3:	83 c4 10             	add    $0x10,%esp
+    29f6:	85 c0                	test   %eax,%eax
+    29f8:	0f 84 46 01 00 00    	je     2b44 <dirfile+0x1e4>
+  if(unlink("dirfile/xx") == 0){
+    29fe:	83 ec 0c             	sub    $0xc,%esp
+    2a01:	68 3e 4a 00 00       	push   $0x4a3e
+    2a06:	e8 e7 0e 00 00       	call   38f2 <unlink>
+    2a0b:	83 c4 10             	add    $0x10,%esp
+    2a0e:	85 c0                	test   %eax,%eax
+    2a10:	0f 84 1b 01 00 00    	je     2b31 <dirfile+0x1d1>
+  if(link("README", "dirfile/xx") == 0){
+    2a16:	83 ec 08             	sub    $0x8,%esp
+    2a19:	68 3e 4a 00 00       	push   $0x4a3e
+    2a1e:	68 a2 4a 00 00       	push   $0x4aa2
+    2a23:	e8 da 0e 00 00       	call   3902 <link>
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	0f 84 eb 00 00 00    	je     2b1e <dirfile+0x1be>
+  if(unlink("dirfile") != 0){
+    2a33:	83 ec 0c             	sub    $0xc,%esp
+    2a36:	68 05 4a 00 00       	push   $0x4a05
+    2a3b:	e8 b2 0e 00 00       	call   38f2 <unlink>
+    2a40:	83 c4 10             	add    $0x10,%esp
+    2a43:	85 c0                	test   %eax,%eax
+    2a45:	0f 85 c0 00 00 00    	jne    2b0b <dirfile+0x1ab>
+  fd = open(".", O_RDWR);
+    2a4b:	83 ec 08             	sub    $0x8,%esp
+    2a4e:	6a 02                	push   $0x2
+    2a50:	68 fe 45 00 00       	push   $0x45fe
+    2a55:	e8 88 0e 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    2a5a:	83 c4 10             	add    $0x10,%esp
+    2a5d:	85 c0                	test   %eax,%eax
+    2a5f:	0f 89 93 00 00 00    	jns    2af8 <dirfile+0x198>
+  fd = open(".", 0);
+    2a65:	83 ec 08             	sub    $0x8,%esp
+    2a68:	6a 00                	push   $0x0
+    2a6a:	68 fe 45 00 00       	push   $0x45fe
+    2a6f:	e8 6e 0e 00 00       	call   38e2 <open>
+  if(write(fd, "x", 1) > 0){
+    2a74:	83 c4 0c             	add    $0xc,%esp
+  fd = open(".", 0);
+    2a77:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2a79:	6a 01                	push   $0x1
+    2a7b:	68 e1 46 00 00       	push   $0x46e1
+    2a80:	50                   	push   %eax
+    2a81:	e8 3c 0e 00 00       	call   38c2 <write>
+    2a86:	83 c4 10             	add    $0x10,%esp
+    2a89:	85 c0                	test   %eax,%eax
+    2a8b:	7f 58                	jg     2ae5 <dirfile+0x185>
+  close(fd);
+    2a8d:	83 ec 0c             	sub    $0xc,%esp
+    2a90:	53                   	push   %ebx
+    2a91:	e8 34 0e 00 00       	call   38ca <close>
+  printf(1, "dir vs file OK\n");
+    2a96:	58                   	pop    %eax
+    2a97:	5a                   	pop    %edx
+    2a98:	68 d5 4a 00 00       	push   $0x4ad5
+    2a9d:	6a 01                	push   $0x1
+    2a9f:	e8 8c 0f 00 00       	call   3a30 <printf>
+}
+    2aa4:	83 c4 10             	add    $0x10,%esp
+    2aa7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2aaa:	c9                   	leave  
+    2aab:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2aac:	50                   	push   %eax
+    2aad:	50                   	push   %eax
+    2aae:	68 49 4a 00 00       	push   $0x4a49
+    2ab3:	6a 01                	push   $0x1
+    2ab5:	e8 76 0f 00 00       	call   3a30 <printf>
+    exit();
+    2aba:	e8 e3 0d 00 00       	call   38a2 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2abf:	50                   	push   %eax
+    2ac0:	50                   	push   %eax
+    2ac1:	68 24 4a 00 00       	push   $0x4a24
+    2ac6:	6a 01                	push   $0x1
+    2ac8:	e8 63 0f 00 00       	call   3a30 <printf>
+    exit();
+    2acd:	e8 d0 0d 00 00       	call   38a2 <exit>
+    printf(1, "create dirfile failed\n");
+    2ad2:	52                   	push   %edx
+    2ad3:	52                   	push   %edx
+    2ad4:	68 0d 4a 00 00       	push   $0x4a0d
+    2ad9:	6a 01                	push   $0x1
+    2adb:	e8 50 0f 00 00       	call   3a30 <printf>
+    exit();
+    2ae0:	e8 bd 0d 00 00       	call   38a2 <exit>
+    printf(1, "write . succeeded!\n");
+    2ae5:	51                   	push   %ecx
+    2ae6:	51                   	push   %ecx
+    2ae7:	68 c1 4a 00 00       	push   $0x4ac1
+    2aec:	6a 01                	push   $0x1
+    2aee:	e8 3d 0f 00 00       	call   3a30 <printf>
+    exit();
+    2af3:	e8 aa 0d 00 00       	call   38a2 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2af8:	53                   	push   %ebx
+    2af9:	53                   	push   %ebx
+    2afa:	68 b8 52 00 00       	push   $0x52b8
+    2aff:	6a 01                	push   $0x1
+    2b01:	e8 2a 0f 00 00       	call   3a30 <printf>
+    exit();
+    2b06:	e8 97 0d 00 00       	call   38a2 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2b0b:	50                   	push   %eax
+    2b0c:	50                   	push   %eax
+    2b0d:	68 a9 4a 00 00       	push   $0x4aa9
+    2b12:	6a 01                	push   $0x1
+    2b14:	e8 17 0f 00 00       	call   3a30 <printf>
+    exit();
+    2b19:	e8 84 0d 00 00       	call   38a2 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2b1e:	50                   	push   %eax
+    2b1f:	50                   	push   %eax
+    2b20:	68 98 52 00 00       	push   $0x5298
+    2b25:	6a 01                	push   $0x1
+    2b27:	e8 04 0f 00 00       	call   3a30 <printf>
+    exit();
+    2b2c:	e8 71 0d 00 00       	call   38a2 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2b31:	50                   	push   %eax
+    2b32:	50                   	push   %eax
+    2b33:	68 84 4a 00 00       	push   $0x4a84
+    2b38:	6a 01                	push   $0x1
+    2b3a:	e8 f1 0e 00 00       	call   3a30 <printf>
+    exit();
+    2b3f:	e8 5e 0d 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2b44:	50                   	push   %eax
+    2b45:	50                   	push   %eax
+    2b46:	68 67 4a 00 00       	push   $0x4a67
+    2b4b:	6a 01                	push   $0x1
+    2b4d:	e8 de 0e 00 00       	call   3a30 <printf>
+    exit();
+    2b52:	e8 4b 0d 00 00       	call   38a2 <exit>
+    2b57:	89 f6                	mov    %esi,%esi
+    2b59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00002b60 <iref>:
+{
+    2b60:	55                   	push   %ebp
+    2b61:	89 e5                	mov    %esp,%ebp
+    2b63:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2b64:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2b69:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2b6c:	68 e5 4a 00 00       	push   $0x4ae5
+    2b71:	6a 01                	push   $0x1
+    2b73:	e8 b8 0e 00 00       	call   3a30 <printf>
+    2b78:	83 c4 10             	add    $0x10,%esp
+    2b7b:	90                   	nop
+    2b7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(mkdir("irefd") != 0){
+    2b80:	83 ec 0c             	sub    $0xc,%esp
+    2b83:	68 f6 4a 00 00       	push   $0x4af6
+    2b88:	e8 7d 0d 00 00       	call   390a <mkdir>
+    2b8d:	83 c4 10             	add    $0x10,%esp
+    2b90:	85 c0                	test   %eax,%eax
+    2b92:	0f 85 bb 00 00 00    	jne    2c53 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2b98:	83 ec 0c             	sub    $0xc,%esp
+    2b9b:	68 f6 4a 00 00       	push   $0x4af6
+    2ba0:	e8 6d 0d 00 00       	call   3912 <chdir>
+    2ba5:	83 c4 10             	add    $0x10,%esp
+    2ba8:	85 c0                	test   %eax,%eax
+    2baa:	0f 85 b7 00 00 00    	jne    2c67 <iref+0x107>
+    mkdir("");
+    2bb0:	83 ec 0c             	sub    $0xc,%esp
+    2bb3:	68 ab 41 00 00       	push   $0x41ab
+    2bb8:	e8 4d 0d 00 00       	call   390a <mkdir>
+    link("README", "");
+    2bbd:	59                   	pop    %ecx
+    2bbe:	58                   	pop    %eax
+    2bbf:	68 ab 41 00 00       	push   $0x41ab
+    2bc4:	68 a2 4a 00 00       	push   $0x4aa2
+    2bc9:	e8 34 0d 00 00       	call   3902 <link>
+    fd = open("", O_CREATE);
+    2bce:	58                   	pop    %eax
+    2bcf:	5a                   	pop    %edx
+    2bd0:	68 00 02 00 00       	push   $0x200
+    2bd5:	68 ab 41 00 00       	push   $0x41ab
+    2bda:	e8 03 0d 00 00       	call   38e2 <open>
+    if(fd >= 0)
+    2bdf:	83 c4 10             	add    $0x10,%esp
+    2be2:	85 c0                	test   %eax,%eax
+    2be4:	78 0c                	js     2bf2 <iref+0x92>
+      close(fd);
+    2be6:	83 ec 0c             	sub    $0xc,%esp
+    2be9:	50                   	push   %eax
+    2bea:	e8 db 0c 00 00       	call   38ca <close>
+    2bef:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2bf2:	83 ec 08             	sub    $0x8,%esp
+    2bf5:	68 00 02 00 00       	push   $0x200
+    2bfa:	68 e0 46 00 00       	push   $0x46e0
+    2bff:	e8 de 0c 00 00       	call   38e2 <open>
+    if(fd >= 0)
+    2c04:	83 c4 10             	add    $0x10,%esp
+    2c07:	85 c0                	test   %eax,%eax
+    2c09:	78 0c                	js     2c17 <iref+0xb7>
+      close(fd);
+    2c0b:	83 ec 0c             	sub    $0xc,%esp
+    2c0e:	50                   	push   %eax
+    2c0f:	e8 b6 0c 00 00       	call   38ca <close>
+    2c14:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2c17:	83 ec 0c             	sub    $0xc,%esp
+    2c1a:	68 e0 46 00 00       	push   $0x46e0
+    2c1f:	e8 ce 0c 00 00       	call   38f2 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2c24:	83 c4 10             	add    $0x10,%esp
+    2c27:	83 eb 01             	sub    $0x1,%ebx
+    2c2a:	0f 85 50 ff ff ff    	jne    2b80 <iref+0x20>
+  chdir("/");
+    2c30:	83 ec 0c             	sub    $0xc,%esp
+    2c33:	68 d1 3d 00 00       	push   $0x3dd1
+    2c38:	e8 d5 0c 00 00       	call   3912 <chdir>
+  printf(1, "empty file name OK\n");
+    2c3d:	58                   	pop    %eax
+    2c3e:	5a                   	pop    %edx
+    2c3f:	68 24 4b 00 00       	push   $0x4b24
+    2c44:	6a 01                	push   $0x1
+    2c46:	e8 e5 0d 00 00       	call   3a30 <printf>
+}
+    2c4b:	83 c4 10             	add    $0x10,%esp
+    2c4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2c51:	c9                   	leave  
+    2c52:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2c53:	83 ec 08             	sub    $0x8,%esp
+    2c56:	68 fc 4a 00 00       	push   $0x4afc
+    2c5b:	6a 01                	push   $0x1
+    2c5d:	e8 ce 0d 00 00       	call   3a30 <printf>
+      exit();
+    2c62:	e8 3b 0c 00 00       	call   38a2 <exit>
+      printf(1, "chdir irefd failed\n");
+    2c67:	83 ec 08             	sub    $0x8,%esp
+    2c6a:	68 10 4b 00 00       	push   $0x4b10
+    2c6f:	6a 01                	push   $0x1
+    2c71:	e8 ba 0d 00 00       	call   3a30 <printf>
+      exit();
+    2c76:	e8 27 0c 00 00       	call   38a2 <exit>
+    2c7b:	90                   	nop
+    2c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002c80 <forktest>:
+{
+    2c80:	55                   	push   %ebp
+    2c81:	89 e5                	mov    %esp,%ebp
+    2c83:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2c84:	31 db                	xor    %ebx,%ebx
+{
+    2c86:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2c89:	68 38 4b 00 00       	push   $0x4b38
+    2c8e:	6a 01                	push   $0x1
+    2c90:	e8 9b 0d 00 00       	call   3a30 <printf>
+    2c95:	83 c4 10             	add    $0x10,%esp
+    2c98:	eb 13                	jmp    2cad <forktest+0x2d>
+    2c9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(pid == 0)
+    2ca0:	74 62                	je     2d04 <forktest+0x84>
+  for(n=0; n<1000; n++){
+    2ca2:	83 c3 01             	add    $0x1,%ebx
+    2ca5:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2cab:	74 43                	je     2cf0 <forktest+0x70>
+    pid = fork();
+    2cad:	e8 e8 0b 00 00       	call   389a <fork>
+    if(pid < 0)
+    2cb2:	85 c0                	test   %eax,%eax
+    2cb4:	79 ea                	jns    2ca0 <forktest+0x20>
+  for(; n > 0; n--){
+    2cb6:	85 db                	test   %ebx,%ebx
+    2cb8:	74 14                	je     2cce <forktest+0x4e>
+    2cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2cc0:	e8 e5 0b 00 00       	call   38aa <wait>
+    2cc5:	85 c0                	test   %eax,%eax
+    2cc7:	78 40                	js     2d09 <forktest+0x89>
+  for(; n > 0; n--){
+    2cc9:	83 eb 01             	sub    $0x1,%ebx
+    2ccc:	75 f2                	jne    2cc0 <forktest+0x40>
+  if(wait() != -1){
+    2cce:	e8 d7 0b 00 00       	call   38aa <wait>
+    2cd3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2cd6:	75 45                	jne    2d1d <forktest+0x9d>
+  printf(1, "fork test OK\n");
+    2cd8:	83 ec 08             	sub    $0x8,%esp
+    2cdb:	68 6a 4b 00 00       	push   $0x4b6a
+    2ce0:	6a 01                	push   $0x1
+    2ce2:	e8 49 0d 00 00       	call   3a30 <printf>
+}
+    2ce7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cea:	c9                   	leave  
+    2ceb:	c3                   	ret    
+    2cec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "fork claimed to work 1000 times!\n");
+    2cf0:	83 ec 08             	sub    $0x8,%esp
+    2cf3:	68 d8 52 00 00       	push   $0x52d8
+    2cf8:	6a 01                	push   $0x1
+    2cfa:	e8 31 0d 00 00       	call   3a30 <printf>
+    exit();
+    2cff:	e8 9e 0b 00 00       	call   38a2 <exit>
+      exit();
+    2d04:	e8 99 0b 00 00       	call   38a2 <exit>
+      printf(1, "wait stopped early\n");
+    2d09:	83 ec 08             	sub    $0x8,%esp
+    2d0c:	68 43 4b 00 00       	push   $0x4b43
+    2d11:	6a 01                	push   $0x1
+    2d13:	e8 18 0d 00 00       	call   3a30 <printf>
+      exit();
+    2d18:	e8 85 0b 00 00       	call   38a2 <exit>
+    printf(1, "wait got too many\n");
+    2d1d:	50                   	push   %eax
+    2d1e:	50                   	push   %eax
+    2d1f:	68 57 4b 00 00       	push   $0x4b57
+    2d24:	6a 01                	push   $0x1
+    2d26:	e8 05 0d 00 00       	call   3a30 <printf>
+    exit();
+    2d2b:	e8 72 0b 00 00       	call   38a2 <exit>
+
+00002d30 <sbrktest>:
+{
+    2d30:	55                   	push   %ebp
+    2d31:	89 e5                	mov    %esp,%ebp
+    2d33:	57                   	push   %edi
+    2d34:	56                   	push   %esi
+    2d35:	53                   	push   %ebx
+  for(i = 0; i < 5000; i++){
+    2d36:	31 ff                	xor    %edi,%edi
+{
+    2d38:	83 ec 64             	sub    $0x64,%esp
+  printf(stdout, "sbrk test\n");
+    2d3b:	68 78 4b 00 00       	push   $0x4b78
+    2d40:	ff 35 38 5e 00 00    	pushl  0x5e38
+    2d46:	e8 e5 0c 00 00       	call   3a30 <printf>
+  oldbrk = sbrk(0);
+    2d4b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2d52:	e8 d3 0b 00 00       	call   392a <sbrk>
+  a = sbrk(0);
+    2d57:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2d5e:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2d60:	e8 c5 0b 00 00       	call   392a <sbrk>
+    2d65:	83 c4 10             	add    $0x10,%esp
+    2d68:	89 c6                	mov    %eax,%esi
+    2d6a:	eb 06                	jmp    2d72 <sbrktest+0x42>
+    2d6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    a = b + 1;
+    2d70:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2d72:	83 ec 0c             	sub    $0xc,%esp
+    2d75:	6a 01                	push   $0x1
+    2d77:	e8 ae 0b 00 00       	call   392a <sbrk>
+    if(b != a){
+    2d7c:	83 c4 10             	add    $0x10,%esp
+    2d7f:	39 f0                	cmp    %esi,%eax
+    2d81:	0f 85 62 02 00 00    	jne    2fe9 <sbrktest+0x2b9>
+  for(i = 0; i < 5000; i++){
+    2d87:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2d8a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2d8d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2d90:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2d96:	75 d8                	jne    2d70 <sbrktest+0x40>
+  pid = fork();
+    2d98:	e8 fd 0a 00 00       	call   389a <fork>
+  if(pid < 0){
+    2d9d:	85 c0                	test   %eax,%eax
+  pid = fork();
+    2d9f:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2da1:	0f 88 82 03 00 00    	js     3129 <sbrktest+0x3f9>
+  c = sbrk(1);
+    2da7:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2daa:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2dad:	6a 01                	push   $0x1
+    2daf:	e8 76 0b 00 00       	call   392a <sbrk>
+  c = sbrk(1);
+    2db4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2dbb:	e8 6a 0b 00 00       	call   392a <sbrk>
+  if(c != a + 1){
+    2dc0:	83 c4 10             	add    $0x10,%esp
+    2dc3:	39 f0                	cmp    %esi,%eax
+    2dc5:	0f 85 47 03 00 00    	jne    3112 <sbrktest+0x3e2>
+  if(pid == 0)
+    2dcb:	85 ff                	test   %edi,%edi
+    2dcd:	0f 84 3a 03 00 00    	je     310d <sbrktest+0x3dd>
+  wait();
+    2dd3:	e8 d2 0a 00 00       	call   38aa <wait>
+  a = sbrk(0);
+    2dd8:	83 ec 0c             	sub    $0xc,%esp
+    2ddb:	6a 00                	push   $0x0
+    2ddd:	e8 48 0b 00 00       	call   392a <sbrk>
+    2de2:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2de4:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2de9:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2deb:	89 04 24             	mov    %eax,(%esp)
+    2dee:	e8 37 0b 00 00       	call   392a <sbrk>
+  if (p != a) {
+    2df3:	83 c4 10             	add    $0x10,%esp
+    2df6:	39 c6                	cmp    %eax,%esi
+    2df8:	0f 85 f8 02 00 00    	jne    30f6 <sbrktest+0x3c6>
+  a = sbrk(0);
+    2dfe:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2e01:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2e08:	6a 00                	push   $0x0
+    2e0a:	e8 1b 0b 00 00       	call   392a <sbrk>
+  c = sbrk(-4096);
+    2e0f:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2e16:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2e18:	e8 0d 0b 00 00       	call   392a <sbrk>
+  if(c == (char*)0xffffffff){
+    2e1d:	83 c4 10             	add    $0x10,%esp
+    2e20:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2e23:	0f 84 b6 02 00 00    	je     30df <sbrktest+0x3af>
+  c = sbrk(0);
+    2e29:	83 ec 0c             	sub    $0xc,%esp
+    2e2c:	6a 00                	push   $0x0
+    2e2e:	e8 f7 0a 00 00       	call   392a <sbrk>
+  if(c != a - 4096){
+    2e33:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2e39:	83 c4 10             	add    $0x10,%esp
+    2e3c:	39 d0                	cmp    %edx,%eax
+    2e3e:	0f 85 84 02 00 00    	jne    30c8 <sbrktest+0x398>
+  a = sbrk(0);
+    2e44:	83 ec 0c             	sub    $0xc,%esp
+    2e47:	6a 00                	push   $0x0
+    2e49:	e8 dc 0a 00 00       	call   392a <sbrk>
+    2e4e:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2e50:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+    2e57:	e8 ce 0a 00 00       	call   392a <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2e5c:	83 c4 10             	add    $0x10,%esp
+    2e5f:	39 c6                	cmp    %eax,%esi
+  c = sbrk(4096);
+    2e61:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2e63:	0f 85 48 02 00 00    	jne    30b1 <sbrktest+0x381>
+    2e69:	83 ec 0c             	sub    $0xc,%esp
+    2e6c:	6a 00                	push   $0x0
+    2e6e:	e8 b7 0a 00 00       	call   392a <sbrk>
+    2e73:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2e79:	83 c4 10             	add    $0x10,%esp
+    2e7c:	39 d0                	cmp    %edx,%eax
+    2e7e:	0f 85 2d 02 00 00    	jne    30b1 <sbrktest+0x381>
+  if(*lastaddr == 99){
+    2e84:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2e8b:	0f 84 09 02 00 00    	je     309a <sbrktest+0x36a>
+  a = sbrk(0);
+    2e91:	83 ec 0c             	sub    $0xc,%esp
+    2e94:	6a 00                	push   $0x0
+    2e96:	e8 8f 0a 00 00       	call   392a <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2e9b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2ea2:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2ea4:	e8 81 0a 00 00       	call   392a <sbrk>
+    2ea9:	89 d9                	mov    %ebx,%ecx
+    2eab:	29 c1                	sub    %eax,%ecx
+    2ead:	89 0c 24             	mov    %ecx,(%esp)
+    2eb0:	e8 75 0a 00 00       	call   392a <sbrk>
+  if(c != a){
+    2eb5:	83 c4 10             	add    $0x10,%esp
+    2eb8:	39 c6                	cmp    %eax,%esi
+    2eba:	0f 85 c3 01 00 00    	jne    3083 <sbrktest+0x353>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ec0:	be 00 00 00 80       	mov    $0x80000000,%esi
+    ppid = getpid();
+    2ec5:	e8 58 0a 00 00       	call   3922 <getpid>
+    2eca:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2ecc:	e8 c9 09 00 00       	call   389a <fork>
+    if(pid < 0){
+    2ed1:	85 c0                	test   %eax,%eax
+    2ed3:	0f 88 93 01 00 00    	js     306c <sbrktest+0x33c>
+    if(pid == 0){
+    2ed9:	0f 84 6b 01 00 00    	je     304a <sbrktest+0x31a>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2edf:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    wait();
+    2ee5:	e8 c0 09 00 00       	call   38aa <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2eea:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2ef0:	75 d3                	jne    2ec5 <sbrktest+0x195>
+  if(pipe(fds) != 0){
+    2ef2:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2ef5:	83 ec 0c             	sub    $0xc,%esp
+    2ef8:	50                   	push   %eax
+    2ef9:	e8 b4 09 00 00       	call   38b2 <pipe>
+    2efe:	83 c4 10             	add    $0x10,%esp
+    2f01:	85 c0                	test   %eax,%eax
+    2f03:	0f 85 2e 01 00 00    	jne    3037 <sbrktest+0x307>
+    2f09:	8d 7d c0             	lea    -0x40(%ebp),%edi
+    2f0c:	89 fe                	mov    %edi,%esi
+    2f0e:	eb 23                	jmp    2f33 <sbrktest+0x203>
+    if(pids[i] != -1)
+    2f10:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f13:	74 14                	je     2f29 <sbrktest+0x1f9>
+      read(fds[0], &scratch, 1);
+    2f15:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2f18:	83 ec 04             	sub    $0x4,%esp
+    2f1b:	6a 01                	push   $0x1
+    2f1d:	50                   	push   %eax
+    2f1e:	ff 75 b8             	pushl  -0x48(%ebp)
+    2f21:	e8 94 09 00 00       	call   38ba <read>
+    2f26:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f29:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2f2c:	83 c6 04             	add    $0x4,%esi
+    2f2f:	39 c6                	cmp    %eax,%esi
+    2f31:	74 4f                	je     2f82 <sbrktest+0x252>
+    if((pids[i] = fork()) == 0){
+    2f33:	e8 62 09 00 00       	call   389a <fork>
+    2f38:	85 c0                	test   %eax,%eax
+    2f3a:	89 06                	mov    %eax,(%esi)
+    2f3c:	75 d2                	jne    2f10 <sbrktest+0x1e0>
+      sbrk(BIG - (uint)sbrk(0));
+    2f3e:	83 ec 0c             	sub    $0xc,%esp
+    2f41:	6a 00                	push   $0x0
+    2f43:	e8 e2 09 00 00       	call   392a <sbrk>
+    2f48:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    2f4d:	29 c2                	sub    %eax,%edx
+    2f4f:	89 14 24             	mov    %edx,(%esp)
+    2f52:	e8 d3 09 00 00       	call   392a <sbrk>
+      write(fds[1], "x", 1);
+    2f57:	83 c4 0c             	add    $0xc,%esp
+    2f5a:	6a 01                	push   $0x1
+    2f5c:	68 e1 46 00 00       	push   $0x46e1
+    2f61:	ff 75 bc             	pushl  -0x44(%ebp)
+    2f64:	e8 59 09 00 00       	call   38c2 <write>
+    2f69:	83 c4 10             	add    $0x10,%esp
+    2f6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      for(;;) sleep(1000);
+    2f70:	83 ec 0c             	sub    $0xc,%esp
+    2f73:	68 e8 03 00 00       	push   $0x3e8
+    2f78:	e8 b5 09 00 00       	call   3932 <sleep>
+    2f7d:	83 c4 10             	add    $0x10,%esp
+    2f80:	eb ee                	jmp    2f70 <sbrktest+0x240>
+  c = sbrk(4096);
+    2f82:	83 ec 0c             	sub    $0xc,%esp
+    2f85:	68 00 10 00 00       	push   $0x1000
+    2f8a:	e8 9b 09 00 00       	call   392a <sbrk>
+    2f8f:	83 c4 10             	add    $0x10,%esp
+    2f92:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    if(pids[i] == -1)
+    2f95:	8b 07                	mov    (%edi),%eax
+    2f97:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f9a:	74 11                	je     2fad <sbrktest+0x27d>
+    kill(pids[i]);
+    2f9c:	83 ec 0c             	sub    $0xc,%esp
+    2f9f:	50                   	push   %eax
+    2fa0:	e8 2d 09 00 00       	call   38d2 <kill>
+    wait();
+    2fa5:	e8 00 09 00 00       	call   38aa <wait>
+    2faa:	83 c4 10             	add    $0x10,%esp
+    2fad:	83 c7 04             	add    $0x4,%edi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2fb0:	39 fe                	cmp    %edi,%esi
+    2fb2:	75 e1                	jne    2f95 <sbrktest+0x265>
+  if(c == (char*)0xffffffff){
+    2fb4:	83 7d a4 ff          	cmpl   $0xffffffff,-0x5c(%ebp)
+    2fb8:	74 66                	je     3020 <sbrktest+0x2f0>
+  if(sbrk(0) > oldbrk)
+    2fba:	83 ec 0c             	sub    $0xc,%esp
+    2fbd:	6a 00                	push   $0x0
+    2fbf:	e8 66 09 00 00       	call   392a <sbrk>
+    2fc4:	83 c4 10             	add    $0x10,%esp
+    2fc7:	39 d8                	cmp    %ebx,%eax
+    2fc9:	77 3c                	ja     3007 <sbrktest+0x2d7>
+  printf(stdout, "sbrk test OK\n");
+    2fcb:	83 ec 08             	sub    $0x8,%esp
+    2fce:	68 20 4c 00 00       	push   $0x4c20
+    2fd3:	ff 35 38 5e 00 00    	pushl  0x5e38
+    2fd9:	e8 52 0a 00 00       	call   3a30 <printf>
+}
+    2fde:	83 c4 10             	add    $0x10,%esp
+    2fe1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2fe4:	5b                   	pop    %ebx
+    2fe5:	5e                   	pop    %esi
+    2fe6:	5f                   	pop    %edi
+    2fe7:	5d                   	pop    %ebp
+    2fe8:	c3                   	ret    
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    2fe9:	83 ec 0c             	sub    $0xc,%esp
+    2fec:	50                   	push   %eax
+    2fed:	56                   	push   %esi
+    2fee:	57                   	push   %edi
+    2fef:	68 83 4b 00 00       	push   $0x4b83
+    2ff4:	ff 35 38 5e 00 00    	pushl  0x5e38
+    2ffa:	e8 31 0a 00 00       	call   3a30 <printf>
+      exit();
+    2fff:	83 c4 20             	add    $0x20,%esp
+    3002:	e8 9b 08 00 00       	call   38a2 <exit>
+    sbrk(-(sbrk(0) - oldbrk));
+    3007:	83 ec 0c             	sub    $0xc,%esp
+    300a:	6a 00                	push   $0x0
+    300c:	e8 19 09 00 00       	call   392a <sbrk>
+    3011:	29 c3                	sub    %eax,%ebx
+    3013:	89 1c 24             	mov    %ebx,(%esp)
+    3016:	e8 0f 09 00 00       	call   392a <sbrk>
+    301b:	83 c4 10             	add    $0x10,%esp
+    301e:	eb ab                	jmp    2fcb <sbrktest+0x29b>
+    printf(stdout, "failed sbrk leaked memory\n");
+    3020:	50                   	push   %eax
+    3021:	50                   	push   %eax
+    3022:	68 05 4c 00 00       	push   $0x4c05
+    3027:	ff 35 38 5e 00 00    	pushl  0x5e38
+    302d:	e8 fe 09 00 00       	call   3a30 <printf>
+    exit();
+    3032:	e8 6b 08 00 00       	call   38a2 <exit>
+    printf(1, "pipe() failed\n");
+    3037:	52                   	push   %edx
+    3038:	52                   	push   %edx
+    3039:	68 c1 40 00 00       	push   $0x40c1
+    303e:	6a 01                	push   $0x1
+    3040:	e8 eb 09 00 00       	call   3a30 <printf>
+    exit();
+    3045:	e8 58 08 00 00       	call   38a2 <exit>
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    304a:	0f be 06             	movsbl (%esi),%eax
+    304d:	50                   	push   %eax
+    304e:	56                   	push   %esi
+    304f:	68 ec 4b 00 00       	push   $0x4bec
+    3054:	ff 35 38 5e 00 00    	pushl  0x5e38
+    305a:	e8 d1 09 00 00       	call   3a30 <printf>
+      kill(ppid);
+    305f:	89 3c 24             	mov    %edi,(%esp)
+    3062:	e8 6b 08 00 00       	call   38d2 <kill>
+      exit();
+    3067:	e8 36 08 00 00       	call   38a2 <exit>
+      printf(stdout, "fork failed\n");
+    306c:	51                   	push   %ecx
+    306d:	51                   	push   %ecx
+    306e:	68 c9 4c 00 00       	push   $0x4cc9
+    3073:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3079:	e8 b2 09 00 00       	call   3a30 <printf>
+      exit();
+    307e:	e8 1f 08 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    3083:	50                   	push   %eax
+    3084:	56                   	push   %esi
+    3085:	68 cc 53 00 00       	push   $0x53cc
+    308a:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3090:	e8 9b 09 00 00       	call   3a30 <printf>
+    exit();
+    3095:	e8 08 08 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    309a:	53                   	push   %ebx
+    309b:	53                   	push   %ebx
+    309c:	68 9c 53 00 00       	push   $0x539c
+    30a1:	ff 35 38 5e 00 00    	pushl  0x5e38
+    30a7:	e8 84 09 00 00       	call   3a30 <printf>
+    exit();
+    30ac:	e8 f1 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    30b1:	57                   	push   %edi
+    30b2:	56                   	push   %esi
+    30b3:	68 74 53 00 00       	push   $0x5374
+    30b8:	ff 35 38 5e 00 00    	pushl  0x5e38
+    30be:	e8 6d 09 00 00       	call   3a30 <printf>
+    exit();
+    30c3:	e8 da 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    30c8:	50                   	push   %eax
+    30c9:	56                   	push   %esi
+    30ca:	68 3c 53 00 00       	push   $0x533c
+    30cf:	ff 35 38 5e 00 00    	pushl  0x5e38
+    30d5:	e8 56 09 00 00       	call   3a30 <printf>
+    exit();
+    30da:	e8 c3 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    30df:	56                   	push   %esi
+    30e0:	56                   	push   %esi
+    30e1:	68 d1 4b 00 00       	push   $0x4bd1
+    30e6:	ff 35 38 5e 00 00    	pushl  0x5e38
+    30ec:	e8 3f 09 00 00       	call   3a30 <printf>
+    exit();
+    30f1:	e8 ac 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    30f6:	57                   	push   %edi
+    30f7:	57                   	push   %edi
+    30f8:	68 fc 52 00 00       	push   $0x52fc
+    30fd:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3103:	e8 28 09 00 00       	call   3a30 <printf>
+    exit();
+    3108:	e8 95 07 00 00       	call   38a2 <exit>
+    exit();
+    310d:	e8 90 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    3112:	50                   	push   %eax
+    3113:	50                   	push   %eax
+    3114:	68 b5 4b 00 00       	push   $0x4bb5
+    3119:	ff 35 38 5e 00 00    	pushl  0x5e38
+    311f:	e8 0c 09 00 00       	call   3a30 <printf>
+    exit();
+    3124:	e8 79 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    3129:	50                   	push   %eax
+    312a:	50                   	push   %eax
+    312b:	68 9e 4b 00 00       	push   $0x4b9e
+    3130:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3136:	e8 f5 08 00 00       	call   3a30 <printf>
+    exit();
+    313b:	e8 62 07 00 00       	call   38a2 <exit>
+
+00003140 <validateint>:
+{
+    3140:	55                   	push   %ebp
+    3141:	89 e5                	mov    %esp,%ebp
+}
+    3143:	5d                   	pop    %ebp
+    3144:	c3                   	ret    
+    3145:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003150 <validatetest>:
+{
+    3150:	55                   	push   %ebp
+    3151:	89 e5                	mov    %esp,%ebp
+    3153:	56                   	push   %esi
+    3154:	53                   	push   %ebx
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3155:	31 db                	xor    %ebx,%ebx
+  printf(stdout, "validate test\n");
+    3157:	83 ec 08             	sub    $0x8,%esp
+    315a:	68 2e 4c 00 00       	push   $0x4c2e
+    315f:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3165:	e8 c6 08 00 00       	call   3a30 <printf>
+    316a:	83 c4 10             	add    $0x10,%esp
+    316d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((pid = fork()) == 0){
+    3170:	e8 25 07 00 00       	call   389a <fork>
+    3175:	85 c0                	test   %eax,%eax
+    3177:	89 c6                	mov    %eax,%esi
+    3179:	74 63                	je     31de <validatetest+0x8e>
+    sleep(0);
+    317b:	83 ec 0c             	sub    $0xc,%esp
+    317e:	6a 00                	push   $0x0
+    3180:	e8 ad 07 00 00       	call   3932 <sleep>
+    sleep(0);
+    3185:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    318c:	e8 a1 07 00 00       	call   3932 <sleep>
+    kill(pid);
+    3191:	89 34 24             	mov    %esi,(%esp)
+    3194:	e8 39 07 00 00       	call   38d2 <kill>
+    wait();
+    3199:	e8 0c 07 00 00       	call   38aa <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    319e:	58                   	pop    %eax
+    319f:	5a                   	pop    %edx
+    31a0:	53                   	push   %ebx
+    31a1:	68 3d 4c 00 00       	push   $0x4c3d
+    31a6:	e8 57 07 00 00       	call   3902 <link>
+    31ab:	83 c4 10             	add    $0x10,%esp
+    31ae:	83 f8 ff             	cmp    $0xffffffff,%eax
+    31b1:	75 30                	jne    31e3 <validatetest+0x93>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    31b3:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    31b9:	81 fb 00 40 11 00    	cmp    $0x114000,%ebx
+    31bf:	75 af                	jne    3170 <validatetest+0x20>
+  printf(stdout, "validate ok\n");
+    31c1:	83 ec 08             	sub    $0x8,%esp
+    31c4:	68 61 4c 00 00       	push   $0x4c61
+    31c9:	ff 35 38 5e 00 00    	pushl  0x5e38
+    31cf:	e8 5c 08 00 00       	call   3a30 <printf>
+}
+    31d4:	83 c4 10             	add    $0x10,%esp
+    31d7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    31da:	5b                   	pop    %ebx
+    31db:	5e                   	pop    %esi
+    31dc:	5d                   	pop    %ebp
+    31dd:	c3                   	ret    
+      exit();
+    31de:	e8 bf 06 00 00       	call   38a2 <exit>
+      printf(stdout, "link should not succeed\n");
+    31e3:	83 ec 08             	sub    $0x8,%esp
+    31e6:	68 48 4c 00 00       	push   $0x4c48
+    31eb:	ff 35 38 5e 00 00    	pushl  0x5e38
+    31f1:	e8 3a 08 00 00       	call   3a30 <printf>
+      exit();
+    31f6:	e8 a7 06 00 00       	call   38a2 <exit>
+    31fb:	90                   	nop
+    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003200 <bsstest>:
+{
+    3200:	55                   	push   %ebp
+    3201:	89 e5                	mov    %esp,%ebp
+    3203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    3206:	68 6e 4c 00 00       	push   $0x4c6e
+    320b:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3211:	e8 1a 08 00 00       	call   3a30 <printf>
+    if(uninit[i] != '\0'){
+    3216:	83 c4 10             	add    $0x10,%esp
+    3219:	80 3d 00 5f 00 00 00 	cmpb   $0x0,0x5f00
+    3220:	75 39                	jne    325b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3222:	b8 01 00 00 00       	mov    $0x1,%eax
+    3227:	89 f6                	mov    %esi,%esi
+    3229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(uninit[i] != '\0'){
+    3230:	80 b8 00 5f 00 00 00 	cmpb   $0x0,0x5f00(%eax)
+    3237:	75 22                	jne    325b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3239:	83 c0 01             	add    $0x1,%eax
+    323c:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    3241:	75 ed                	jne    3230 <bsstest+0x30>
+  printf(stdout, "bss test ok\n");
+    3243:	83 ec 08             	sub    $0x8,%esp
+    3246:	68 89 4c 00 00       	push   $0x4c89
+    324b:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3251:	e8 da 07 00 00       	call   3a30 <printf>
+}
+    3256:	83 c4 10             	add    $0x10,%esp
+    3259:	c9                   	leave  
+    325a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    325b:	83 ec 08             	sub    $0x8,%esp
+    325e:	68 78 4c 00 00       	push   $0x4c78
+    3263:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3269:	e8 c2 07 00 00       	call   3a30 <printf>
+      exit();
+    326e:	e8 2f 06 00 00       	call   38a2 <exit>
+    3273:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003280 <bigargtest>:
+{
+    3280:	55                   	push   %ebp
+    3281:	89 e5                	mov    %esp,%ebp
+    3283:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    3286:	68 96 4c 00 00       	push   $0x4c96
+    328b:	e8 62 06 00 00       	call   38f2 <unlink>
+  pid = fork();
+    3290:	e8 05 06 00 00       	call   389a <fork>
+  if(pid == 0){
+    3295:	83 c4 10             	add    $0x10,%esp
+    3298:	85 c0                	test   %eax,%eax
+    329a:	74 3f                	je     32db <bigargtest+0x5b>
+  } else if(pid < 0){
+    329c:	0f 88 c2 00 00 00    	js     3364 <bigargtest+0xe4>
+  wait();
+    32a2:	e8 03 06 00 00       	call   38aa <wait>
+  fd = open("bigarg-ok", 0);
+    32a7:	83 ec 08             	sub    $0x8,%esp
+    32aa:	6a 00                	push   $0x0
+    32ac:	68 96 4c 00 00       	push   $0x4c96
+    32b1:	e8 2c 06 00 00       	call   38e2 <open>
+  if(fd < 0){
+    32b6:	83 c4 10             	add    $0x10,%esp
+    32b9:	85 c0                	test   %eax,%eax
+    32bb:	0f 88 8c 00 00 00    	js     334d <bigargtest+0xcd>
+  close(fd);
+    32c1:	83 ec 0c             	sub    $0xc,%esp
+    32c4:	50                   	push   %eax
+    32c5:	e8 00 06 00 00       	call   38ca <close>
+  unlink("bigarg-ok");
+    32ca:	c7 04 24 96 4c 00 00 	movl   $0x4c96,(%esp)
+    32d1:	e8 1c 06 00 00       	call   38f2 <unlink>
+}
+    32d6:	83 c4 10             	add    $0x10,%esp
+    32d9:	c9                   	leave  
+    32da:	c3                   	ret    
+    32db:	b8 60 5e 00 00       	mov    $0x5e60,%eax
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    32e0:	c7 00 f0 53 00 00    	movl   $0x53f0,(%eax)
+    32e6:	83 c0 04             	add    $0x4,%eax
+    for(i = 0; i < MAXARG-1; i++)
+    32e9:	3d dc 5e 00 00       	cmp    $0x5edc,%eax
+    32ee:	75 f0                	jne    32e0 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    32f0:	51                   	push   %ecx
+    32f1:	51                   	push   %ecx
+    32f2:	68 a0 4c 00 00       	push   $0x4ca0
+    32f7:	ff 35 38 5e 00 00    	pushl  0x5e38
+    args[MAXARG-1] = 0;
+    32fd:	c7 05 dc 5e 00 00 00 	movl   $0x0,0x5edc
+    3304:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    3307:	e8 24 07 00 00       	call   3a30 <printf>
+    exec("echo", args);
+    330c:	58                   	pop    %eax
+    330d:	5a                   	pop    %edx
+    330e:	68 60 5e 00 00       	push   $0x5e60
+    3313:	68 6d 3e 00 00       	push   $0x3e6d
+    3318:	e8 bd 05 00 00       	call   38da <exec>
+    printf(stdout, "bigarg test ok\n");
+    331d:	59                   	pop    %ecx
+    331e:	58                   	pop    %eax
+    331f:	68 ad 4c 00 00       	push   $0x4cad
+    3324:	ff 35 38 5e 00 00    	pushl  0x5e38
+    332a:	e8 01 07 00 00       	call   3a30 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    332f:	58                   	pop    %eax
+    3330:	5a                   	pop    %edx
+    3331:	68 00 02 00 00       	push   $0x200
+    3336:	68 96 4c 00 00       	push   $0x4c96
+    333b:	e8 a2 05 00 00       	call   38e2 <open>
+    close(fd);
+    3340:	89 04 24             	mov    %eax,(%esp)
+    3343:	e8 82 05 00 00       	call   38ca <close>
+    exit();
+    3348:	e8 55 05 00 00       	call   38a2 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    334d:	50                   	push   %eax
+    334e:	50                   	push   %eax
+    334f:	68 d6 4c 00 00       	push   $0x4cd6
+    3354:	ff 35 38 5e 00 00    	pushl  0x5e38
+    335a:	e8 d1 06 00 00       	call   3a30 <printf>
+    exit();
+    335f:	e8 3e 05 00 00       	call   38a2 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3364:	52                   	push   %edx
+    3365:	52                   	push   %edx
+    3366:	68 bd 4c 00 00       	push   $0x4cbd
+    336b:	ff 35 38 5e 00 00    	pushl  0x5e38
+    3371:	e8 ba 06 00 00       	call   3a30 <printf>
+    exit();
+    3376:	e8 27 05 00 00       	call   38a2 <exit>
+    337b:	90                   	nop
+    337c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003380 <fsfull>:
+{
+    3380:	55                   	push   %ebp
+    3381:	89 e5                	mov    %esp,%ebp
+    3383:	57                   	push   %edi
+    3384:	56                   	push   %esi
+    3385:	53                   	push   %ebx
+  for(nfiles = 0; ; nfiles++){
+    3386:	31 db                	xor    %ebx,%ebx
+{
+    3388:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    338b:	68 eb 4c 00 00       	push   $0x4ceb
+    3390:	6a 01                	push   $0x1
+    3392:	e8 99 06 00 00       	call   3a30 <printf>
+    3397:	83 c4 10             	add    $0x10,%esp
+    339a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    33a0:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33a5:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    33aa:	83 ec 04             	sub    $0x4,%esp
+    name[1] = '0' + nfiles / 1000;
+    33ad:	f7 e3                	mul    %ebx
+    name[0] = 'f';
+    33af:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[5] = '\0';
+    33b3:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33b7:	c1 ea 06             	shr    $0x6,%edx
+    33ba:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33bd:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    33c3:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33c6:	89 d8                	mov    %ebx,%eax
+    33c8:	29 d0                	sub    %edx,%eax
+    33ca:	89 c2                	mov    %eax,%edx
+    33cc:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    33d1:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    33d3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33d8:	c1 ea 05             	shr    $0x5,%edx
+    33db:	83 c2 30             	add    $0x30,%edx
+    33de:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    33e1:	f7 e3                	mul    %ebx
+    33e3:	89 d8                	mov    %ebx,%eax
+    33e5:	c1 ea 05             	shr    $0x5,%edx
+    33e8:	6b d2 64             	imul   $0x64,%edx,%edx
+    33eb:	29 d0                	sub    %edx,%eax
+    33ed:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    33ef:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33f1:	c1 ea 03             	shr    $0x3,%edx
+    33f4:	83 c2 30             	add    $0x30,%edx
+    33f7:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    33fa:	f7 e1                	mul    %ecx
+    33fc:	89 d9                	mov    %ebx,%ecx
+    33fe:	c1 ea 03             	shr    $0x3,%edx
+    3401:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    3404:	01 c0                	add    %eax,%eax
+    3406:	29 c1                	sub    %eax,%ecx
+    3408:	89 c8                	mov    %ecx,%eax
+    340a:	83 c0 30             	add    $0x30,%eax
+    340d:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    3410:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3413:	50                   	push   %eax
+    3414:	68 f8 4c 00 00       	push   $0x4cf8
+    3419:	6a 01                	push   $0x1
+    341b:	e8 10 06 00 00       	call   3a30 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    3420:	58                   	pop    %eax
+    3421:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3424:	5a                   	pop    %edx
+    3425:	68 02 02 00 00       	push   $0x202
+    342a:	50                   	push   %eax
+    342b:	e8 b2 04 00 00       	call   38e2 <open>
+    if(fd < 0){
+    3430:	83 c4 10             	add    $0x10,%esp
+    3433:	85 c0                	test   %eax,%eax
+    int fd = open(name, O_CREATE|O_RDWR);
+    3435:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    3437:	78 57                	js     3490 <fsfull+0x110>
+    int total = 0;
+    3439:	31 f6                	xor    %esi,%esi
+    343b:	eb 05                	jmp    3442 <fsfull+0xc2>
+    343d:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    3440:	01 c6                	add    %eax,%esi
+      int cc = write(fd, buf, 512);
+    3442:	83 ec 04             	sub    $0x4,%esp
+    3445:	68 00 02 00 00       	push   $0x200
+    344a:	68 20 86 00 00       	push   $0x8620
+    344f:	57                   	push   %edi
+    3450:	e8 6d 04 00 00       	call   38c2 <write>
+      if(cc < 512)
+    3455:	83 c4 10             	add    $0x10,%esp
+    3458:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    345d:	7f e1                	jg     3440 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    345f:	83 ec 04             	sub    $0x4,%esp
+    3462:	56                   	push   %esi
+    3463:	68 14 4d 00 00       	push   $0x4d14
+    3468:	6a 01                	push   $0x1
+    346a:	e8 c1 05 00 00       	call   3a30 <printf>
+    close(fd);
+    346f:	89 3c 24             	mov    %edi,(%esp)
+    3472:	e8 53 04 00 00       	call   38ca <close>
+    if(total == 0)
+    3477:	83 c4 10             	add    $0x10,%esp
+    347a:	85 f6                	test   %esi,%esi
+    347c:	74 28                	je     34a6 <fsfull+0x126>
+  for(nfiles = 0; ; nfiles++){
+    347e:	83 c3 01             	add    $0x1,%ebx
+    3481:	e9 1a ff ff ff       	jmp    33a0 <fsfull+0x20>
+    3486:	8d 76 00             	lea    0x0(%esi),%esi
+    3489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      printf(1, "open %s failed\n", name);
+    3490:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3493:	83 ec 04             	sub    $0x4,%esp
+    3496:	50                   	push   %eax
+    3497:	68 04 4d 00 00       	push   $0x4d04
+    349c:	6a 01                	push   $0x1
+    349e:	e8 8d 05 00 00       	call   3a30 <printf>
+      break;
+    34a3:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    34a6:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34ab:	be 1f 85 eb 51       	mov    $0x51eb851f,%esi
+    name[1] = '0' + nfiles / 1000;
+    34b0:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34b2:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    unlink(name);
+    34b7:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + nfiles / 1000;
+    34ba:	f7 e7                	mul    %edi
+    name[0] = 'f';
+    34bc:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[5] = '\0';
+    34c0:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34c4:	c1 ea 06             	shr    $0x6,%edx
+    34c7:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34ca:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    34d0:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34d3:	89 d8                	mov    %ebx,%eax
+    34d5:	29 d0                	sub    %edx,%eax
+    34d7:	f7 e6                	mul    %esi
+    name[3] = '0' + (nfiles % 100) / 10;
+    34d9:	89 d8                	mov    %ebx,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34db:	c1 ea 05             	shr    $0x5,%edx
+    34de:	83 c2 30             	add    $0x30,%edx
+    34e1:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    34e4:	f7 e6                	mul    %esi
+    34e6:	89 d8                	mov    %ebx,%eax
+    34e8:	c1 ea 05             	shr    $0x5,%edx
+    34eb:	6b d2 64             	imul   $0x64,%edx,%edx
+    34ee:	29 d0                	sub    %edx,%eax
+    34f0:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    34f2:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34f4:	c1 ea 03             	shr    $0x3,%edx
+    34f7:	83 c2 30             	add    $0x30,%edx
+    34fa:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    34fd:	f7 e1                	mul    %ecx
+    34ff:	89 d9                	mov    %ebx,%ecx
+    nfiles--;
+    3501:	83 eb 01             	sub    $0x1,%ebx
+    name[4] = '0' + (nfiles % 10);
+    3504:	c1 ea 03             	shr    $0x3,%edx
+    3507:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    350a:	01 c0                	add    %eax,%eax
+    350c:	29 c1                	sub    %eax,%ecx
+    350e:	89 c8                	mov    %ecx,%eax
+    3510:	83 c0 30             	add    $0x30,%eax
+    3513:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    3516:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3519:	50                   	push   %eax
+    351a:	e8 d3 03 00 00       	call   38f2 <unlink>
+  while(nfiles >= 0){
+    351f:	83 c4 10             	add    $0x10,%esp
+    3522:	83 fb ff             	cmp    $0xffffffff,%ebx
+    3525:	75 89                	jne    34b0 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    3527:	83 ec 08             	sub    $0x8,%esp
+    352a:	68 24 4d 00 00       	push   $0x4d24
+    352f:	6a 01                	push   $0x1
+    3531:	e8 fa 04 00 00       	call   3a30 <printf>
+}
+    3536:	83 c4 10             	add    $0x10,%esp
+    3539:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    353c:	5b                   	pop    %ebx
+    353d:	5e                   	pop    %esi
+    353e:	5f                   	pop    %edi
+    353f:	5d                   	pop    %ebp
+    3540:	c3                   	ret    
+    3541:	eb 0d                	jmp    3550 <uio>
+    3543:	90                   	nop
+    3544:	90                   	nop
+    3545:	90                   	nop
+    3546:	90                   	nop
+    3547:	90                   	nop
+    3548:	90                   	nop
+    3549:	90                   	nop
+    354a:	90                   	nop
+    354b:	90                   	nop
+    354c:	90                   	nop
+    354d:	90                   	nop
+    354e:	90                   	nop
+    354f:	90                   	nop
+
+00003550 <uio>:
+{
+    3550:	55                   	push   %ebp
+    3551:	89 e5                	mov    %esp,%ebp
+    3553:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    3556:	68 3a 4d 00 00       	push   $0x4d3a
+    355b:	6a 01                	push   $0x1
+    355d:	e8 ce 04 00 00       	call   3a30 <printf>
+  pid = fork();
+    3562:	e8 33 03 00 00       	call   389a <fork>
+  if(pid == 0){
+    3567:	83 c4 10             	add    $0x10,%esp
+    356a:	85 c0                	test   %eax,%eax
+    356c:	74 1b                	je     3589 <uio+0x39>
+  } else if(pid < 0){
+    356e:	78 3d                	js     35ad <uio+0x5d>
+  wait();
+    3570:	e8 35 03 00 00       	call   38aa <wait>
+  printf(1, "uio test done\n");
+    3575:	83 ec 08             	sub    $0x8,%esp
+    3578:	68 44 4d 00 00       	push   $0x4d44
+    357d:	6a 01                	push   $0x1
+    357f:	e8 ac 04 00 00       	call   3a30 <printf>
+}
+    3584:	83 c4 10             	add    $0x10,%esp
+    3587:	c9                   	leave  
+    3588:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    3589:	b8 09 00 00 00       	mov    $0x9,%eax
+    358e:	ba 70 00 00 00       	mov    $0x70,%edx
+    3593:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    3594:	ba 71 00 00 00       	mov    $0x71,%edx
+    3599:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    359a:	52                   	push   %edx
+    359b:	52                   	push   %edx
+    359c:	68 d0 54 00 00       	push   $0x54d0
+    35a1:	6a 01                	push   $0x1
+    35a3:	e8 88 04 00 00       	call   3a30 <printf>
+    exit();
+    35a8:	e8 f5 02 00 00       	call   38a2 <exit>
+    printf (1, "fork failed\n");
+    35ad:	50                   	push   %eax
+    35ae:	50                   	push   %eax
+    35af:	68 c9 4c 00 00       	push   $0x4cc9
+    35b4:	6a 01                	push   $0x1
+    35b6:	e8 75 04 00 00       	call   3a30 <printf>
+    exit();
+    35bb:	e8 e2 02 00 00       	call   38a2 <exit>
+
+000035c0 <argptest>:
+{
+    35c0:	55                   	push   %ebp
+    35c1:	89 e5                	mov    %esp,%ebp
+    35c3:	53                   	push   %ebx
+    35c4:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    35c7:	6a 00                	push   $0x0
+    35c9:	68 53 4d 00 00       	push   $0x4d53
+    35ce:	e8 0f 03 00 00       	call   38e2 <open>
+  if (fd < 0) {
+    35d3:	83 c4 10             	add    $0x10,%esp
+    35d6:	85 c0                	test   %eax,%eax
+    35d8:	78 39                	js     3613 <argptest+0x53>
+  read(fd, sbrk(0) - 1, -1);
+    35da:	83 ec 0c             	sub    $0xc,%esp
+    35dd:	89 c3                	mov    %eax,%ebx
+    35df:	6a 00                	push   $0x0
+    35e1:	e8 44 03 00 00       	call   392a <sbrk>
+    35e6:	83 c4 0c             	add    $0xc,%esp
+    35e9:	83 e8 01             	sub    $0x1,%eax
+    35ec:	6a ff                	push   $0xffffffff
+    35ee:	50                   	push   %eax
+    35ef:	53                   	push   %ebx
+    35f0:	e8 c5 02 00 00       	call   38ba <read>
+  close(fd);
+    35f5:	89 1c 24             	mov    %ebx,(%esp)
+    35f8:	e8 cd 02 00 00       	call   38ca <close>
+  printf(1, "arg test passed\n");
+    35fd:	58                   	pop    %eax
+    35fe:	5a                   	pop    %edx
+    35ff:	68 65 4d 00 00       	push   $0x4d65
+    3604:	6a 01                	push   $0x1
+    3606:	e8 25 04 00 00       	call   3a30 <printf>
+}
+    360b:	83 c4 10             	add    $0x10,%esp
+    360e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    3611:	c9                   	leave  
+    3612:	c3                   	ret    
+    printf(2, "open failed\n");
+    3613:	51                   	push   %ecx
+    3614:	51                   	push   %ecx
+    3615:	68 58 4d 00 00       	push   $0x4d58
+    361a:	6a 02                	push   $0x2
+    361c:	e8 0f 04 00 00       	call   3a30 <printf>
+    exit();
+    3621:	e8 7c 02 00 00       	call   38a2 <exit>
+    3626:	8d 76 00             	lea    0x0(%esi),%esi
+    3629:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003630 <rand>:
+  randstate = randstate * 1664525 + 1013904223;
+    3630:	69 05 34 5e 00 00 0d 	imul   $0x19660d,0x5e34,%eax
+    3637:	66 19 00 
+{
+    363a:	55                   	push   %ebp
+    363b:	89 e5                	mov    %esp,%ebp
+}
+    363d:	5d                   	pop    %ebp
+  randstate = randstate * 1664525 + 1013904223;
+    363e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3643:	a3 34 5e 00 00       	mov    %eax,0x5e34
+}
+    3648:	c3                   	ret    
+    3649:	66 90                	xchg   %ax,%ax
+    364b:	66 90                	xchg   %ax,%ax
+    364d:	66 90                	xchg   %ax,%ax
+    364f:	90                   	nop
+
+00003650 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3650:	55                   	push   %ebp
+    3651:	89 e5                	mov    %esp,%ebp
+    3653:	53                   	push   %ebx
+    3654:	8b 45 08             	mov    0x8(%ebp),%eax
+    3657:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    365a:	89 c2                	mov    %eax,%edx
+    365c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3660:	83 c1 01             	add    $0x1,%ecx
+    3663:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+    3667:	83 c2 01             	add    $0x1,%edx
+    366a:	84 db                	test   %bl,%bl
+    366c:	88 5a ff             	mov    %bl,-0x1(%edx)
+    366f:	75 ef                	jne    3660 <strcpy+0x10>
+    ;
+  return os;
+}
+    3671:	5b                   	pop    %ebx
+    3672:	5d                   	pop    %ebp
+    3673:	c3                   	ret    
+    3674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    367a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00003680 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3680:	55                   	push   %ebp
+    3681:	89 e5                	mov    %esp,%ebp
+    3683:	53                   	push   %ebx
+    3684:	8b 55 08             	mov    0x8(%ebp),%edx
+    3687:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+    368a:	0f b6 02             	movzbl (%edx),%eax
+    368d:	0f b6 19             	movzbl (%ecx),%ebx
+    3690:	84 c0                	test   %al,%al
+    3692:	75 1c                	jne    36b0 <strcmp+0x30>
+    3694:	eb 2a                	jmp    36c0 <strcmp+0x40>
+    3696:	8d 76 00             	lea    0x0(%esi),%esi
+    3699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+    36a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+    36a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+    36a6:	83 c1 01             	add    $0x1,%ecx
+    36a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+    36ac:	84 c0                	test   %al,%al
+    36ae:	74 10                	je     36c0 <strcmp+0x40>
+    36b0:	38 d8                	cmp    %bl,%al
+    36b2:	74 ec                	je     36a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+    36b4:	29 d8                	sub    %ebx,%eax
+}
+    36b6:	5b                   	pop    %ebx
+    36b7:	5d                   	pop    %ebp
+    36b8:	c3                   	ret    
+    36b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+    36c2:	29 d8                	sub    %ebx,%eax
+}
+    36c4:	5b                   	pop    %ebx
+    36c5:	5d                   	pop    %ebp
+    36c6:	c3                   	ret    
+    36c7:	89 f6                	mov    %esi,%esi
+    36c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000036d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    36d0:	55                   	push   %ebp
+    36d1:	89 e5                	mov    %esp,%ebp
+    36d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    36d6:	80 39 00             	cmpb   $0x0,(%ecx)
+    36d9:	74 15                	je     36f0 <strlen+0x20>
+    36db:	31 d2                	xor    %edx,%edx
+    36dd:	8d 76 00             	lea    0x0(%esi),%esi
+    36e0:	83 c2 01             	add    $0x1,%edx
+    36e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+    36e7:	89 d0                	mov    %edx,%eax
+    36e9:	75 f5                	jne    36e0 <strlen+0x10>
+    ;
+  return n;
+}
+    36eb:	5d                   	pop    %ebp
+    36ec:	c3                   	ret    
+    36ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+    36f0:	31 c0                	xor    %eax,%eax
+}
+    36f2:	5d                   	pop    %ebp
+    36f3:	c3                   	ret    
+    36f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    36fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00003700 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    3700:	55                   	push   %ebp
+    3701:	89 e5                	mov    %esp,%ebp
+    3703:	57                   	push   %edi
+    3704:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    3707:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    370a:	8b 45 0c             	mov    0xc(%ebp),%eax
+    370d:	89 d7                	mov    %edx,%edi
+    370f:	fc                   	cld    
+    3710:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    3712:	89 d0                	mov    %edx,%eax
+    3714:	5f                   	pop    %edi
+    3715:	5d                   	pop    %ebp
+    3716:	c3                   	ret    
+    3717:	89 f6                	mov    %esi,%esi
+    3719:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003720 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3720:	55                   	push   %ebp
+    3721:	89 e5                	mov    %esp,%ebp
+    3723:	53                   	push   %ebx
+    3724:	8b 45 08             	mov    0x8(%ebp),%eax
+    3727:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+    372a:	0f b6 10             	movzbl (%eax),%edx
+    372d:	84 d2                	test   %dl,%dl
+    372f:	74 1d                	je     374e <strchr+0x2e>
+    if(*s == c)
+    3731:	38 d3                	cmp    %dl,%bl
+    3733:	89 d9                	mov    %ebx,%ecx
+    3735:	75 0d                	jne    3744 <strchr+0x24>
+    3737:	eb 17                	jmp    3750 <strchr+0x30>
+    3739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3740:	38 ca                	cmp    %cl,%dl
+    3742:	74 0c                	je     3750 <strchr+0x30>
+  for(; *s; s++)
+    3744:	83 c0 01             	add    $0x1,%eax
+    3747:	0f b6 10             	movzbl (%eax),%edx
+    374a:	84 d2                	test   %dl,%dl
+    374c:	75 f2                	jne    3740 <strchr+0x20>
+      return (char*)s;
+  return 0;
+    374e:	31 c0                	xor    %eax,%eax
+}
+    3750:	5b                   	pop    %ebx
+    3751:	5d                   	pop    %ebp
+    3752:	c3                   	ret    
+    3753:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3759:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003760 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3760:	55                   	push   %ebp
+    3761:	89 e5                	mov    %esp,%ebp
+    3763:	57                   	push   %edi
+    3764:	56                   	push   %esi
+    3765:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3766:	31 f6                	xor    %esi,%esi
+    3768:	89 f3                	mov    %esi,%ebx
+{
+    376a:	83 ec 1c             	sub    $0x1c,%esp
+    376d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    3770:	eb 2f                	jmp    37a1 <gets+0x41>
+    3772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    3778:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    377b:	83 ec 04             	sub    $0x4,%esp
+    377e:	6a 01                	push   $0x1
+    3780:	50                   	push   %eax
+    3781:	6a 00                	push   $0x0
+    3783:	e8 32 01 00 00       	call   38ba <read>
+    if(cc < 1)
+    3788:	83 c4 10             	add    $0x10,%esp
+    378b:	85 c0                	test   %eax,%eax
+    378d:	7e 1c                	jle    37ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+    378f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    3793:	83 c7 01             	add    $0x1,%edi
+    3796:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    3799:	3c 0a                	cmp    $0xa,%al
+    379b:	74 23                	je     37c0 <gets+0x60>
+    379d:	3c 0d                	cmp    $0xd,%al
+    379f:	74 1f                	je     37c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+    37a1:	83 c3 01             	add    $0x1,%ebx
+    37a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    37a7:	89 fe                	mov    %edi,%esi
+    37a9:	7c cd                	jl     3778 <gets+0x18>
+    37ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    37ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    37b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    37b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37b6:	5b                   	pop    %ebx
+    37b7:	5e                   	pop    %esi
+    37b8:	5f                   	pop    %edi
+    37b9:	5d                   	pop    %ebp
+    37ba:	c3                   	ret    
+    37bb:	90                   	nop
+    37bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37c0:	8b 75 08             	mov    0x8(%ebp),%esi
+    37c3:	8b 45 08             	mov    0x8(%ebp),%eax
+    37c6:	01 de                	add    %ebx,%esi
+    37c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    37ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    37cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37d0:	5b                   	pop    %ebx
+    37d1:	5e                   	pop    %esi
+    37d2:	5f                   	pop    %edi
+    37d3:	5d                   	pop    %ebp
+    37d4:	c3                   	ret    
+    37d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000037e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    37e0:	55                   	push   %ebp
+    37e1:	89 e5                	mov    %esp,%ebp
+    37e3:	56                   	push   %esi
+    37e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    37e5:	83 ec 08             	sub    $0x8,%esp
+    37e8:	6a 00                	push   $0x0
+    37ea:	ff 75 08             	pushl  0x8(%ebp)
+    37ed:	e8 f0 00 00 00       	call   38e2 <open>
+  if(fd < 0)
+    37f2:	83 c4 10             	add    $0x10,%esp
+    37f5:	85 c0                	test   %eax,%eax
+    37f7:	78 27                	js     3820 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+    37f9:	83 ec 08             	sub    $0x8,%esp
+    37fc:	ff 75 0c             	pushl  0xc(%ebp)
+    37ff:	89 c3                	mov    %eax,%ebx
+    3801:	50                   	push   %eax
+    3802:	e8 f3 00 00 00       	call   38fa <fstat>
+  close(fd);
+    3807:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    380a:	89 c6                	mov    %eax,%esi
+  close(fd);
+    380c:	e8 b9 00 00 00       	call   38ca <close>
+  return r;
+    3811:	83 c4 10             	add    $0x10,%esp
+}
+    3814:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3817:	89 f0                	mov    %esi,%eax
+    3819:	5b                   	pop    %ebx
+    381a:	5e                   	pop    %esi
+    381b:	5d                   	pop    %ebp
+    381c:	c3                   	ret    
+    381d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+    3820:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    3825:	eb ed                	jmp    3814 <stat+0x34>
+    3827:	89 f6                	mov    %esi,%esi
+    3829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003830 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3830:	55                   	push   %ebp
+    3831:	89 e5                	mov    %esp,%ebp
+    3833:	53                   	push   %ebx
+    3834:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3837:	0f be 11             	movsbl (%ecx),%edx
+    383a:	8d 42 d0             	lea    -0x30(%edx),%eax
+    383d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+    383f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+    3844:	77 1f                	ja     3865 <atoi+0x35>
+    3846:	8d 76 00             	lea    0x0(%esi),%esi
+    3849:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+    3850:	8d 04 80             	lea    (%eax,%eax,4),%eax
+    3853:	83 c1 01             	add    $0x1,%ecx
+    3856:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+    385a:	0f be 11             	movsbl (%ecx),%edx
+    385d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+    3860:	80 fb 09             	cmp    $0x9,%bl
+    3863:	76 eb                	jbe    3850 <atoi+0x20>
+  return n;
+}
+    3865:	5b                   	pop    %ebx
+    3866:	5d                   	pop    %ebp
+    3867:	c3                   	ret    
+    3868:	90                   	nop
+    3869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003870 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3870:	55                   	push   %ebp
+    3871:	89 e5                	mov    %esp,%ebp
+    3873:	56                   	push   %esi
+    3874:	53                   	push   %ebx
+    3875:	8b 5d 10             	mov    0x10(%ebp),%ebx
+    3878:	8b 45 08             	mov    0x8(%ebp),%eax
+    387b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    387e:	85 db                	test   %ebx,%ebx
+    3880:	7e 14                	jle    3896 <memmove+0x26>
+    3882:	31 d2                	xor    %edx,%edx
+    3884:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+    3888:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+    388c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    388f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+    3892:	39 d3                	cmp    %edx,%ebx
+    3894:	75 f2                	jne    3888 <memmove+0x18>
+  return vdst;
+}
+    3896:	5b                   	pop    %ebx
+    3897:	5e                   	pop    %esi
+    3898:	5d                   	pop    %ebp
+    3899:	c3                   	ret    
+
+0000389a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    389a:	b8 01 00 00 00       	mov    $0x1,%eax
+    389f:	cd 40                	int    $0x40
+    38a1:	c3                   	ret    
+
+000038a2 <exit>:
+SYSCALL(exit)
+    38a2:	b8 02 00 00 00       	mov    $0x2,%eax
+    38a7:	cd 40                	int    $0x40
+    38a9:	c3                   	ret    
+
+000038aa <wait>:
+SYSCALL(wait)
+    38aa:	b8 03 00 00 00       	mov    $0x3,%eax
+    38af:	cd 40                	int    $0x40
+    38b1:	c3                   	ret    
+
+000038b2 <pipe>:
+SYSCALL(pipe)
+    38b2:	b8 04 00 00 00       	mov    $0x4,%eax
+    38b7:	cd 40                	int    $0x40
+    38b9:	c3                   	ret    
+
+000038ba <read>:
+SYSCALL(read)
+    38ba:	b8 05 00 00 00       	mov    $0x5,%eax
+    38bf:	cd 40                	int    $0x40
+    38c1:	c3                   	ret    
+
+000038c2 <write>:
+SYSCALL(write)
+    38c2:	b8 10 00 00 00       	mov    $0x10,%eax
+    38c7:	cd 40                	int    $0x40
+    38c9:	c3                   	ret    
+
+000038ca <close>:
+SYSCALL(close)
+    38ca:	b8 15 00 00 00       	mov    $0x15,%eax
+    38cf:	cd 40                	int    $0x40
+    38d1:	c3                   	ret    
+
+000038d2 <kill>:
+SYSCALL(kill)
+    38d2:	b8 06 00 00 00       	mov    $0x6,%eax
+    38d7:	cd 40                	int    $0x40
+    38d9:	c3                   	ret    
+
+000038da <exec>:
+SYSCALL(exec)
+    38da:	b8 07 00 00 00       	mov    $0x7,%eax
+    38df:	cd 40                	int    $0x40
+    38e1:	c3                   	ret    
+
+000038e2 <open>:
+SYSCALL(open)
+    38e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+    38e7:	cd 40                	int    $0x40
+    38e9:	c3                   	ret    
+
+000038ea <mknod>:
+SYSCALL(mknod)
+    38ea:	b8 11 00 00 00       	mov    $0x11,%eax
+    38ef:	cd 40                	int    $0x40
+    38f1:	c3                   	ret    
+
+000038f2 <unlink>:
+SYSCALL(unlink)
+    38f2:	b8 12 00 00 00       	mov    $0x12,%eax
+    38f7:	cd 40                	int    $0x40
+    38f9:	c3                   	ret    
+
+000038fa <fstat>:
+SYSCALL(fstat)
+    38fa:	b8 08 00 00 00       	mov    $0x8,%eax
+    38ff:	cd 40                	int    $0x40
+    3901:	c3                   	ret    
+
+00003902 <link>:
+SYSCALL(link)
+    3902:	b8 13 00 00 00       	mov    $0x13,%eax
+    3907:	cd 40                	int    $0x40
+    3909:	c3                   	ret    
+
+0000390a <mkdir>:
+SYSCALL(mkdir)
+    390a:	b8 14 00 00 00       	mov    $0x14,%eax
+    390f:	cd 40                	int    $0x40
+    3911:	c3                   	ret    
+
+00003912 <chdir>:
+SYSCALL(chdir)
+    3912:	b8 09 00 00 00       	mov    $0x9,%eax
+    3917:	cd 40                	int    $0x40
+    3919:	c3                   	ret    
+
+0000391a <dup>:
+SYSCALL(dup)
+    391a:	b8 0a 00 00 00       	mov    $0xa,%eax
+    391f:	cd 40                	int    $0x40
+    3921:	c3                   	ret    
+
+00003922 <getpid>:
+SYSCALL(getpid)
+    3922:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3927:	cd 40                	int    $0x40
+    3929:	c3                   	ret    
+
+0000392a <sbrk>:
+SYSCALL(sbrk)
+    392a:	b8 0c 00 00 00       	mov    $0xc,%eax
+    392f:	cd 40                	int    $0x40
+    3931:	c3                   	ret    
+
+00003932 <sleep>:
+SYSCALL(sleep)
+    3932:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3937:	cd 40                	int    $0x40
+    3939:	c3                   	ret    
+
+0000393a <uptime>:
+SYSCALL(uptime)
+    393a:	b8 0e 00 00 00       	mov    $0xe,%eax
+    393f:	cd 40                	int    $0x40
+    3941:	c3                   	ret    
+
+00003942 <getNumProc>:
+SYSCALL(getNumProc)
+    3942:	b8 16 00 00 00       	mov    $0x16,%eax
+    3947:	cd 40                	int    $0x40
+    3949:	c3                   	ret    
+
+0000394a <getMaxPid>:
+SYSCALL(getMaxPid)
+    394a:	b8 17 00 00 00       	mov    $0x17,%eax
+    394f:	cd 40                	int    $0x40
+    3951:	c3                   	ret    
+
+00003952 <getProcInfo>:
+SYSCALL(getProcInfo)
+    3952:	b8 18 00 00 00       	mov    $0x18,%eax
+    3957:	cd 40                	int    $0x40
+    3959:	c3                   	ret    
+
+0000395a <set_burst_time>:
+SYSCALL(set_burst_time)
+    395a:	b8 19 00 00 00       	mov    $0x19,%eax
+    395f:	cd 40                	int    $0x40
+    3961:	c3                   	ret    
+
+00003962 <get_burst_time>:
+SYSCALL(get_burst_time)
+    3962:	b8 1a 00 00 00       	mov    $0x1a,%eax
+    3967:	cd 40                	int    $0x40
+    3969:	c3                   	ret    
+
+0000396a <process_state>:
+SYSCALL(process_state)
+    396a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+    396f:	cd 40                	int    $0x40
+    3971:	c3                   	ret    
+
+00003972 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+    3972:	b8 1d 00 00 00       	mov    $0x1d,%eax
+    3977:	cd 40                	int    $0x40
+    3979:	c3                   	ret    
+
+0000397a <inc_cpucounter>:
+    397a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+    397f:	cd 40                	int    $0x40
+    3981:	c3                   	ret    
+    3982:	66 90                	xchg   %ax,%ax
+    3984:	66 90                	xchg   %ax,%ax
+    3986:	66 90                	xchg   %ax,%ax
+    3988:	66 90                	xchg   %ax,%ax
+    398a:	66 90                	xchg   %ax,%ax
+    398c:	66 90                	xchg   %ax,%ax
+    398e:	66 90                	xchg   %ax,%ax
+
+00003990 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3990:	55                   	push   %ebp
+    3991:	89 e5                	mov    %esp,%ebp
+    3993:	57                   	push   %edi
+    3994:	56                   	push   %esi
+    3995:	53                   	push   %ebx
+    3996:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    3999:	85 d2                	test   %edx,%edx
+{
+    399b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+    399e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+    39a0:	79 76                	jns    3a18 <printint+0x88>
+    39a2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    39a6:	74 70                	je     3a18 <printint+0x88>
+    x = -xx;
+    39a8:	f7 d8                	neg    %eax
+    neg = 1;
+    39aa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    39b1:	31 f6                	xor    %esi,%esi
+    39b3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+    39b6:	eb 0a                	jmp    39c2 <printint+0x32>
+    39b8:	90                   	nop
+    39b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+    39c0:	89 fe                	mov    %edi,%esi
+    39c2:	31 d2                	xor    %edx,%edx
+    39c4:	8d 7e 01             	lea    0x1(%esi),%edi
+    39c7:	f7 f1                	div    %ecx
+    39c9:	0f b6 92 28 55 00 00 	movzbl 0x5528(%edx),%edx
+  }while((x /= base) != 0);
+    39d0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+    39d2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+    39d5:	75 e9                	jne    39c0 <printint+0x30>
+  if(neg)
+    39d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+    39da:	85 c0                	test   %eax,%eax
+    39dc:	74 08                	je     39e6 <printint+0x56>
+    buf[i++] = '-';
+    39de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+    39e3:	8d 7e 02             	lea    0x2(%esi),%edi
+    39e6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+    39ea:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    39ed:	8d 76 00             	lea    0x0(%esi),%esi
+    39f0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+    39f3:	83 ec 04             	sub    $0x4,%esp
+    39f6:	83 ee 01             	sub    $0x1,%esi
+    39f9:	6a 01                	push   $0x1
+    39fb:	53                   	push   %ebx
+    39fc:	57                   	push   %edi
+    39fd:	88 45 d7             	mov    %al,-0x29(%ebp)
+    3a00:	e8 bd fe ff ff       	call   38c2 <write>
+
+  while(--i >= 0)
+    3a05:	83 c4 10             	add    $0x10,%esp
+    3a08:	39 de                	cmp    %ebx,%esi
+    3a0a:	75 e4                	jne    39f0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+    3a0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3a0f:	5b                   	pop    %ebx
+    3a10:	5e                   	pop    %esi
+    3a11:	5f                   	pop    %edi
+    3a12:	5d                   	pop    %ebp
+    3a13:	c3                   	ret    
+    3a14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3a18:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+    3a1f:	eb 90                	jmp    39b1 <printint+0x21>
+    3a21:	eb 0d                	jmp    3a30 <printf>
+    3a23:	90                   	nop
+    3a24:	90                   	nop
+    3a25:	90                   	nop
+    3a26:	90                   	nop
+    3a27:	90                   	nop
+    3a28:	90                   	nop
+    3a29:	90                   	nop
+    3a2a:	90                   	nop
+    3a2b:	90                   	nop
+    3a2c:	90                   	nop
+    3a2d:	90                   	nop
+    3a2e:	90                   	nop
+    3a2f:	90                   	nop
+
+00003a30 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a30:	55                   	push   %ebp
+    3a31:	89 e5                	mov    %esp,%ebp
+    3a33:	57                   	push   %edi
+    3a34:	56                   	push   %esi
+    3a35:	53                   	push   %ebx
+    3a36:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a39:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3a3c:	0f b6 1e             	movzbl (%esi),%ebx
+    3a3f:	84 db                	test   %bl,%bl
+    3a41:	0f 84 b3 00 00 00    	je     3afa <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+    3a47:	8d 45 10             	lea    0x10(%ebp),%eax
+    3a4a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+    3a4d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+    3a4f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    3a52:	eb 2f                	jmp    3a83 <printf+0x53>
+    3a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+    3a58:	83 f8 25             	cmp    $0x25,%eax
+    3a5b:	0f 84 a7 00 00 00    	je     3b08 <printf+0xd8>
+  write(fd, &c, 1);
+    3a61:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+    3a64:	83 ec 04             	sub    $0x4,%esp
+    3a67:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+    3a6a:	6a 01                	push   $0x1
+    3a6c:	50                   	push   %eax
+    3a6d:	ff 75 08             	pushl  0x8(%ebp)
+    3a70:	e8 4d fe ff ff       	call   38c2 <write>
+    3a75:	83 c4 10             	add    $0x10,%esp
+    3a78:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+    3a7b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+    3a7f:	84 db                	test   %bl,%bl
+    3a81:	74 77                	je     3afa <printf+0xca>
+    if(state == 0){
+    3a83:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+    3a85:	0f be cb             	movsbl %bl,%ecx
+    3a88:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3a8b:	74 cb                	je     3a58 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+    3a8d:	83 ff 25             	cmp    $0x25,%edi
+    3a90:	75 e6                	jne    3a78 <printf+0x48>
+      if(c == 'd'){
+    3a92:	83 f8 64             	cmp    $0x64,%eax
+    3a95:	0f 84 05 01 00 00    	je     3ba0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3a9b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3aa1:	83 f9 70             	cmp    $0x70,%ecx
+    3aa4:	74 72                	je     3b18 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3aa6:	83 f8 73             	cmp    $0x73,%eax
+    3aa9:	0f 84 99 00 00 00    	je     3b48 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3aaf:	83 f8 63             	cmp    $0x63,%eax
+    3ab2:	0f 84 08 01 00 00    	je     3bc0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3ab8:	83 f8 25             	cmp    $0x25,%eax
+    3abb:	0f 84 ef 00 00 00    	je     3bb0 <printf+0x180>
+  write(fd, &c, 1);
+    3ac1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3ac4:	83 ec 04             	sub    $0x4,%esp
+    3ac7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3acb:	6a 01                	push   $0x1
+    3acd:	50                   	push   %eax
+    3ace:	ff 75 08             	pushl  0x8(%ebp)
+    3ad1:	e8 ec fd ff ff       	call   38c2 <write>
+    3ad6:	83 c4 0c             	add    $0xc,%esp
+    3ad9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+    3adc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+    3adf:	6a 01                	push   $0x1
+    3ae1:	50                   	push   %eax
+    3ae2:	ff 75 08             	pushl  0x8(%ebp)
+    3ae5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    3ae8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+    3aea:	e8 d3 fd ff ff       	call   38c2 <write>
+  for(i = 0; fmt[i]; i++){
+    3aef:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+    3af3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3af6:	84 db                	test   %bl,%bl
+    3af8:	75 89                	jne    3a83 <printf+0x53>
+    }
+  }
+}
+    3afa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3afd:	5b                   	pop    %ebx
+    3afe:	5e                   	pop    %esi
+    3aff:	5f                   	pop    %edi
+    3b00:	5d                   	pop    %ebp
+    3b01:	c3                   	ret    
+    3b02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+    3b08:	bf 25 00 00 00       	mov    $0x25,%edi
+    3b0d:	e9 66 ff ff ff       	jmp    3a78 <printf+0x48>
+    3b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+    3b18:	83 ec 0c             	sub    $0xc,%esp
+    3b1b:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3b20:	6a 00                	push   $0x0
+    3b22:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+    3b25:	8b 45 08             	mov    0x8(%ebp),%eax
+    3b28:	8b 17                	mov    (%edi),%edx
+    3b2a:	e8 61 fe ff ff       	call   3990 <printint>
+        ap++;
+    3b2f:	89 f8                	mov    %edi,%eax
+    3b31:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b34:	31 ff                	xor    %edi,%edi
+        ap++;
+    3b36:	83 c0 04             	add    $0x4,%eax
+    3b39:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    3b3c:	e9 37 ff ff ff       	jmp    3a78 <printf+0x48>
+    3b41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+    3b48:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    3b4b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+    3b4d:	83 c0 04             	add    $0x4,%eax
+    3b50:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+    3b53:	85 c9                	test   %ecx,%ecx
+    3b55:	0f 84 8e 00 00 00    	je     3be9 <printf+0x1b9>
+        while(*s != 0){
+    3b5b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+    3b5e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+    3b60:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+    3b62:	84 c0                	test   %al,%al
+    3b64:	0f 84 0e ff ff ff    	je     3a78 <printf+0x48>
+    3b6a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+    3b6d:	89 de                	mov    %ebx,%esi
+    3b6f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3b72:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+    3b75:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+    3b78:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3b7b:	83 c6 01             	add    $0x1,%esi
+    3b7e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+    3b81:	6a 01                	push   $0x1
+    3b83:	57                   	push   %edi
+    3b84:	53                   	push   %ebx
+    3b85:	e8 38 fd ff ff       	call   38c2 <write>
+        while(*s != 0){
+    3b8a:	0f b6 06             	movzbl (%esi),%eax
+    3b8d:	83 c4 10             	add    $0x10,%esp
+    3b90:	84 c0                	test   %al,%al
+    3b92:	75 e4                	jne    3b78 <printf+0x148>
+    3b94:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+    3b97:	31 ff                	xor    %edi,%edi
+    3b99:	e9 da fe ff ff       	jmp    3a78 <printf+0x48>
+    3b9e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+    3ba0:	83 ec 0c             	sub    $0xc,%esp
+    3ba3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3ba8:	6a 01                	push   $0x1
+    3baa:	e9 73 ff ff ff       	jmp    3b22 <printf+0xf2>
+    3baf:	90                   	nop
+  write(fd, &c, 1);
+    3bb0:	83 ec 04             	sub    $0x4,%esp
+    3bb3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+    3bb6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    3bb9:	6a 01                	push   $0x1
+    3bbb:	e9 21 ff ff ff       	jmp    3ae1 <printf+0xb1>
+        putc(fd, *ap);
+    3bc0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+    3bc3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3bc6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+    3bc8:	6a 01                	push   $0x1
+        ap++;
+    3bca:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+    3bcd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+    3bd0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    3bd3:	50                   	push   %eax
+    3bd4:	ff 75 08             	pushl  0x8(%ebp)
+    3bd7:	e8 e6 fc ff ff       	call   38c2 <write>
+        ap++;
+    3bdc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+    3bdf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3be2:	31 ff                	xor    %edi,%edi
+    3be4:	e9 8f fe ff ff       	jmp    3a78 <printf+0x48>
+          s = "(null)";
+    3be9:	bb 20 55 00 00       	mov    $0x5520,%ebx
+        while(*s != 0){
+    3bee:	b8 28 00 00 00       	mov    $0x28,%eax
+    3bf3:	e9 72 ff ff ff       	jmp    3b6a <printf+0x13a>
+    3bf8:	66 90                	xchg   %ax,%ax
+    3bfa:	66 90                	xchg   %ax,%ax
+    3bfc:	66 90                	xchg   %ax,%ax
+    3bfe:	66 90                	xchg   %ax,%ax
+
+00003c00 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3c00:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3c01:	a1 e0 5e 00 00       	mov    0x5ee0,%eax
+{
+    3c06:	89 e5                	mov    %esp,%ebp
+    3c08:	57                   	push   %edi
+    3c09:	56                   	push   %esi
+    3c0a:	53                   	push   %ebx
+    3c0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    3c0e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    3c11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3c18:	39 c8                	cmp    %ecx,%eax
+    3c1a:	8b 10                	mov    (%eax),%edx
+    3c1c:	73 32                	jae    3c50 <free+0x50>
+    3c1e:	39 d1                	cmp    %edx,%ecx
+    3c20:	72 04                	jb     3c26 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c22:	39 d0                	cmp    %edx,%eax
+    3c24:	72 32                	jb     3c58 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3c26:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3c29:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3c2c:	39 fa                	cmp    %edi,%edx
+    3c2e:	74 30                	je     3c60 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3c30:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c33:	8b 50 04             	mov    0x4(%eax),%edx
+    3c36:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c39:	39 f1                	cmp    %esi,%ecx
+    3c3b:	74 3a                	je     3c77 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3c3d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+    3c3f:	a3 e0 5e 00 00       	mov    %eax,0x5ee0
+}
+    3c44:	5b                   	pop    %ebx
+    3c45:	5e                   	pop    %esi
+    3c46:	5f                   	pop    %edi
+    3c47:	5d                   	pop    %ebp
+    3c48:	c3                   	ret    
+    3c49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c50:	39 d0                	cmp    %edx,%eax
+    3c52:	72 04                	jb     3c58 <free+0x58>
+    3c54:	39 d1                	cmp    %edx,%ecx
+    3c56:	72 ce                	jb     3c26 <free+0x26>
+{
+    3c58:	89 d0                	mov    %edx,%eax
+    3c5a:	eb bc                	jmp    3c18 <free+0x18>
+    3c5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+    3c60:	03 72 04             	add    0x4(%edx),%esi
+    3c63:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c66:	8b 10                	mov    (%eax),%edx
+    3c68:	8b 12                	mov    (%edx),%edx
+    3c6a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c6d:	8b 50 04             	mov    0x4(%eax),%edx
+    3c70:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c73:	39 f1                	cmp    %esi,%ecx
+    3c75:	75 c6                	jne    3c3d <free+0x3d>
+    p->s.size += bp->s.size;
+    3c77:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3c7a:	a3 e0 5e 00 00       	mov    %eax,0x5ee0
+    p->s.size += bp->s.size;
+    3c7f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3c82:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3c85:	89 10                	mov    %edx,(%eax)
+}
+    3c87:	5b                   	pop    %ebx
+    3c88:	5e                   	pop    %esi
+    3c89:	5f                   	pop    %edi
+    3c8a:	5d                   	pop    %ebp
+    3c8b:	c3                   	ret    
+    3c8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003c90 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3c90:	55                   	push   %ebp
+    3c91:	89 e5                	mov    %esp,%ebp
+    3c93:	57                   	push   %edi
+    3c94:	56                   	push   %esi
+    3c95:	53                   	push   %ebx
+    3c96:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c99:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3c9c:	8b 15 e0 5e 00 00    	mov    0x5ee0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3ca2:	8d 78 07             	lea    0x7(%eax),%edi
+    3ca5:	c1 ef 03             	shr    $0x3,%edi
+    3ca8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+    3cab:	85 d2                	test   %edx,%edx
+    3cad:	0f 84 9d 00 00 00    	je     3d50 <malloc+0xc0>
+    3cb3:	8b 02                	mov    (%edx),%eax
+    3cb5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+    3cb8:	39 cf                	cmp    %ecx,%edi
+    3cba:	76 6c                	jbe    3d28 <malloc+0x98>
+    3cbc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    3cc2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3cc7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3cca:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+    3cd1:	eb 0e                	jmp    3ce1 <malloc+0x51>
+    3cd3:	90                   	nop
+    3cd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3cd8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    3cda:	8b 48 04             	mov    0x4(%eax),%ecx
+    3cdd:	39 f9                	cmp    %edi,%ecx
+    3cdf:	73 47                	jae    3d28 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3ce1:	39 05 e0 5e 00 00    	cmp    %eax,0x5ee0
+    3ce7:	89 c2                	mov    %eax,%edx
+    3ce9:	75 ed                	jne    3cd8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    3ceb:	83 ec 0c             	sub    $0xc,%esp
+    3cee:	56                   	push   %esi
+    3cef:	e8 36 fc ff ff       	call   392a <sbrk>
+  if(p == (char*)-1)
+    3cf4:	83 c4 10             	add    $0x10,%esp
+    3cf7:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3cfa:	74 1c                	je     3d18 <malloc+0x88>
+  hp->s.size = nu;
+    3cfc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3cff:	83 ec 0c             	sub    $0xc,%esp
+    3d02:	83 c0 08             	add    $0x8,%eax
+    3d05:	50                   	push   %eax
+    3d06:	e8 f5 fe ff ff       	call   3c00 <free>
+  return freep;
+    3d0b:	8b 15 e0 5e 00 00    	mov    0x5ee0,%edx
+      if((p = morecore(nunits)) == 0)
+    3d11:	83 c4 10             	add    $0x10,%esp
+    3d14:	85 d2                	test   %edx,%edx
+    3d16:	75 c0                	jne    3cd8 <malloc+0x48>
+        return 0;
+  }
+}
+    3d18:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3d1b:	31 c0                	xor    %eax,%eax
+}
+    3d1d:	5b                   	pop    %ebx
+    3d1e:	5e                   	pop    %esi
+    3d1f:	5f                   	pop    %edi
+    3d20:	5d                   	pop    %ebp
+    3d21:	c3                   	ret    
+    3d22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    3d28:	39 cf                	cmp    %ecx,%edi
+    3d2a:	74 54                	je     3d80 <malloc+0xf0>
+        p->s.size -= nunits;
+    3d2c:	29 f9                	sub    %edi,%ecx
+    3d2e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    3d31:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    3d34:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+    3d37:	89 15 e0 5e 00 00    	mov    %edx,0x5ee0
+}
+    3d3d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3d40:	83 c0 08             	add    $0x8,%eax
+}
+    3d43:	5b                   	pop    %ebx
+    3d44:	5e                   	pop    %esi
+    3d45:	5f                   	pop    %edi
+    3d46:	5d                   	pop    %ebp
+    3d47:	c3                   	ret    
+    3d48:	90                   	nop
+    3d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    3d50:	c7 05 e0 5e 00 00 e4 	movl   $0x5ee4,0x5ee0
+    3d57:	5e 00 00 
+    3d5a:	c7 05 e4 5e 00 00 e4 	movl   $0x5ee4,0x5ee4
+    3d61:	5e 00 00 
+    base.s.size = 0;
+    3d64:	b8 e4 5e 00 00       	mov    $0x5ee4,%eax
+    3d69:	c7 05 e8 5e 00 00 00 	movl   $0x0,0x5ee8
+    3d70:	00 00 00 
+    3d73:	e9 44 ff ff ff       	jmp    3cbc <malloc+0x2c>
+    3d78:	90                   	nop
+    3d79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+    3d80:	8b 08                	mov    (%eax),%ecx
+    3d82:	89 0a                	mov    %ecx,(%edx)
+    3d84:	eb b1                	jmp    3d37 <malloc+0xa7>
diff -ruN xv6org/usertests.d xv6mhybrid/usertests.d
--- xv6org/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/usertests.d	2020-10-15 19:50:35.481656497 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6org/usertests.o and xv6mhybrid/usertests.o differ
diff -ruN xv6org/usertests.sym xv6mhybrid/usertests.sym
--- xv6org/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/usertests.sym	2020-10-15 19:50:35.509654680 +0530
@@ -0,0 +1,111 @@
+00000000 .text
+00003d88 .rodata
+0000553c .eh_frame
+00005e34 .data
+00005e60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005e60 args.1420
+00000000 ulib.c
+00000000 printf.c
+00003990 printint
+00005528 digits.1056
+00000000 umalloc.c
+00005ee0 freep
+00005ee4 base
+00003650 strcpy
+00000cf0 exitwait
+00003a30 printf
+00005e38 stdout
+00003280 bigargtest
+00003870 memmove
+000002f0 openiputtest
+000038ea mknod
+00003760 gets
+00003922 getpid
+00000a10 pipe1
+00002b60 iref
+00003c90 malloc
+00003932 sleep
+00003962 get_burst_time
+00000200 exitiputtest
+00003380 fsfull
+00001be0 bigdir
+00002c80 forktest
+00000660 writetest1
+000023f0 bigwrite
+00000e50 sharedfd
+00005e34 randstate
+000038b2 pipe
+00005f00 uninit
+00002960 dirfile
+000038c2 write
+00003200 bsstest
+00005e3c echoargv
+000038fa fstat
+000038d2 kill
+00003150 validatetest
+0000396a process_state
+000027e0 rmdot
+00003912 chdir
+00003972 dec_burstTime
+000009c0 exectest
+000038da exec
+000038aa wait
+00003630 rand
+0000397a inc_cpucounter
+000038ba read
+00000bb0 preempt
+000038f2 unlink
+000035c0 argptest
+00000d80 mem
+0000389a fork
+0000392a sbrk
+0000393a uptime
+00005e50 __bss_start
+00003700 memset
+00000830 createtest
+00000000 main
+0000395a set_burst_time
+00001210 createdelete
+00003680 strcmp
+00000480 writetest
+0000391a dup
+00002d30 sbrktest
+000003f0 opentest
+00001d10 subdir
+0000394a getMaxPid
+00003550 uio
+000015c0 linktest
+00008620 buf
+000008e0 dirtest
+00000120 iputtest
+00003942 getNumProc
+00003952 getProcInfo
+000037e0 stat
+000024d0 bigfile
+00005e50 _edata
+0000a624 _end
+00001430 unlinkread
+00003902 link
+000038a2 exit
+00003830 atoi
+00001ad0 linkunlink
+0000a620 name
+000036d0 strlen
+000038e2 open
+00003720 strchr
+000017d0 concreate
+000026a0 fourteen
+00003140 validateint
+00001010 fourfiles
+0000390a mkdir
+000038ca close
+00003c00 free
Binary files xv6org/usys.o and xv6mhybrid/usys.o differ
diff -ruN xv6org/usys.S xv6mhybrid/usys.S
--- xv6org/usys.S	2020-08-10 23:58:02.000000000 +0530
+++ xv6mhybrid/usys.S	2020-10-15 19:47:12.279237153 +0530
@@ -29,3 +29,11 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
+SYSCALL(process_state)
+SYSCALL(dec_burstTime)
+SYSCALL(inc_cpucounter)
\ No newline at end of file
Binary files xv6org/vectors.o and xv6mhybrid/vectors.o differ
diff -ruN xv6org/vectors.S xv6mhybrid/vectors.S
--- xv6org/vectors.S	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/vectors.S	2020-10-15 18:57:01.697602086 +0530
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
diff -ruN xv6org/vm.d xv6mhybrid/vm.d
--- xv6org/vm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/vm.d	2020-10-15 19:52:19.019700381 +0530
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files xv6org/vm.o and xv6mhybrid/vm.o differ
Binary files xv6org/_wc and xv6mhybrid/_wc differ
diff -ruN xv6org/wc.asm xv6mhybrid/wc.asm
--- xv6org/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/wc.asm	2020-10-15 19:50:35.549652083 +0530
@@ -0,0 +1,1352 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	be 01 00 00 00       	mov    $0x1,%esi
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  21:	83 f8 01             	cmp    $0x1,%eax
+{
+  24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(argc <= 1){
+  27:	7e 56                	jle    7f <main+0x7f>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 d6 03 00 00       	call   412 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	89 c7                	mov    %eax,%edi
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+    wc(fd, argv[i]);
+  4d:	50                   	push   %eax
+  4e:	83 c3 04             	add    $0x4,%ebx
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 9c 03 00 00       	call   3fa <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 67 03 00 00       	call   3d2 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 db 08 00 00       	push   $0x8db
+  73:	6a 01                	push   $0x1
+  75:	e8 e6 04 00 00       	call   560 <printf>
+      exit();
+  7a:	e8 53 03 00 00       	call   3d2 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 cd 08 00 00       	push   $0x8cd
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 40 03 00 00       	call   3d2 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	57                   	push   %edi
+  a4:	56                   	push   %esi
+  a5:	53                   	push   %ebx
+  l = w = c = 0;
+  a6:	31 db                	xor    %ebx,%ebx
+{
+  a8:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  b9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c0:	83 ec 04             	sub    $0x4,%esp
+  c3:	68 00 02 00 00       	push   $0x200
+  c8:	68 00 0c 00 00       	push   $0xc00
+  cd:	ff 75 08             	pushl  0x8(%ebp)
+  d0:	e8 15 03 00 00       	call   3ea <read>
+  d5:	83 c4 10             	add    $0x10,%esp
+  d8:	83 f8 00             	cmp    $0x0,%eax
+  db:	89 c6                	mov    %eax,%esi
+  dd:	7e 61                	jle    140 <wc+0xa0>
+    for(i=0; i<n; i++){
+  df:	31 ff                	xor    %edi,%edi
+  e1:	eb 13                	jmp    f6 <wc+0x56>
+  e3:	90                   	nop
+  e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        inword = 0;
+  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  ef:	83 c7 01             	add    $0x1,%edi
+  f2:	39 fe                	cmp    %edi,%esi
+  f4:	74 42                	je     138 <wc+0x98>
+      if(buf[i] == '\n')
+  f6:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+        l++;
+  fd:	31 c9                	xor    %ecx,%ecx
+  ff:	3c 0a                	cmp    $0xa,%al
+ 101:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 104:	83 ec 08             	sub    $0x8,%esp
+ 107:	50                   	push   %eax
+ 108:	68 b8 08 00 00       	push   $0x8b8
+        l++;
+ 10d:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10f:	e8 3c 01 00 00       	call   250 <strchr>
+ 114:	83 c4 10             	add    $0x10,%esp
+ 117:	85 c0                	test   %eax,%eax
+ 119:	75 cd                	jne    e8 <wc+0x48>
+      else if(!inword){
+ 11b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 11e:	85 d2                	test   %edx,%edx
+ 120:	75 cd                	jne    ef <wc+0x4f>
+    for(i=0; i<n; i++){
+ 122:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 125:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+        inword = 1;
+ 129:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 130:	39 fe                	cmp    %edi,%esi
+ 132:	75 c2                	jne    f6 <wc+0x56>
+ 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 138:	01 75 e0             	add    %esi,-0x20(%ebp)
+ 13b:	eb 83                	jmp    c0 <wc+0x20>
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 140:	75 24                	jne    166 <wc+0xc6>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 142:	83 ec 08             	sub    $0x8,%esp
+ 145:	ff 75 0c             	pushl  0xc(%ebp)
+ 148:	ff 75 e0             	pushl  -0x20(%ebp)
+ 14b:	ff 75 dc             	pushl  -0x24(%ebp)
+ 14e:	53                   	push   %ebx
+ 14f:	68 ce 08 00 00       	push   $0x8ce
+ 154:	6a 01                	push   $0x1
+ 156:	e8 05 04 00 00       	call   560 <printf>
+}
+ 15b:	83 c4 20             	add    $0x20,%esp
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 166:	50                   	push   %eax
+ 167:	50                   	push   %eax
+ 168:	68 be 08 00 00       	push   $0x8be
+ 16d:	6a 01                	push   $0x1
+ 16f:	e8 ec 03 00 00       	call   560 <printf>
+    exit();
+ 174:	e8 59 02 00 00       	call   3d2 <exit>
+ 179:	66 90                	xchg   %ax,%ax
+ 17b:	66 90                	xchg   %ax,%ax
+ 17d:	66 90                	xchg   %ax,%ax
+ 17f:	90                   	nop
+
+00000180 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 45 08             	mov    0x8(%ebp),%eax
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 18a:	89 c2                	mov    %eax,%edx
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 190:	83 c1 01             	add    $0x1,%ecx
+ 193:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 197:	83 c2 01             	add    $0x1,%edx
+ 19a:	84 db                	test   %bl,%bl
+ 19c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 19f:	75 ef                	jne    190 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1a1:	5b                   	pop    %ebx
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	c3                   	ret    
+ 1a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	53                   	push   %ebx
+ 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1ba:	0f b6 02             	movzbl (%edx),%eax
+ 1bd:	0f b6 19             	movzbl (%ecx),%ebx
+ 1c0:	84 c0                	test   %al,%al
+ 1c2:	75 1c                	jne    1e0 <strcmp+0x30>
+ 1c4:	eb 2a                	jmp    1f0 <strcmp+0x40>
+ 1c6:	8d 76 00             	lea    0x0(%esi),%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1d0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1d6:	83 c1 01             	add    $0x1,%ecx
+ 1d9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 1dc:	84 c0                	test   %al,%al
+ 1de:	74 10                	je     1f0 <strcmp+0x40>
+ 1e0:	38 d8                	cmp    %bl,%al
+ 1e2:	74 ec                	je     1d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1e4:	29 d8                	sub    %ebx,%eax
+}
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5d                   	pop    %ebp
+ 1e8:	c3                   	ret    
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1f2:	29 d8                	sub    %ebx,%eax
+}
+ 1f4:	5b                   	pop    %ebx
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	89 f6                	mov    %esi,%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 206:	80 39 00             	cmpb   $0x0,(%ecx)
+ 209:	74 15                	je     220 <strlen+0x20>
+ 20b:	31 d2                	xor    %edx,%edx
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+ 210:	83 c2 01             	add    $0x1,%edx
+ 213:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 217:	89 d0                	mov    %edx,%eax
+ 219:	75 f5                	jne    210 <strlen+0x10>
+    ;
+  return n;
+}
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 220:	31 c0                	xor    %eax,%eax
+}
+ 222:	5d                   	pop    %ebp
+ 223:	c3                   	ret    
+ 224:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 22a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000230 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 237:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 23a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 23d:	89 d7                	mov    %edx,%edi
+ 23f:	fc                   	cld    
+ 240:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 242:	89 d0                	mov    %edx,%eax
+ 244:	5f                   	pop    %edi
+ 245:	5d                   	pop    %ebp
+ 246:	c3                   	ret    
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 45 08             	mov    0x8(%ebp),%eax
+ 257:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 25a:	0f b6 10             	movzbl (%eax),%edx
+ 25d:	84 d2                	test   %dl,%dl
+ 25f:	74 1d                	je     27e <strchr+0x2e>
+    if(*s == c)
+ 261:	38 d3                	cmp    %dl,%bl
+ 263:	89 d9                	mov    %ebx,%ecx
+ 265:	75 0d                	jne    274 <strchr+0x24>
+ 267:	eb 17                	jmp    280 <strchr+0x30>
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 270:	38 ca                	cmp    %cl,%dl
+ 272:	74 0c                	je     280 <strchr+0x30>
+  for(; *s; s++)
+ 274:	83 c0 01             	add    $0x1,%eax
+ 277:	0f b6 10             	movzbl (%eax),%edx
+ 27a:	84 d2                	test   %dl,%dl
+ 27c:	75 f2                	jne    270 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 27e:	31 c0                	xor    %eax,%eax
+}
+ 280:	5b                   	pop    %ebx
+ 281:	5d                   	pop    %ebp
+ 282:	c3                   	ret    
+ 283:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000290 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	56                   	push   %esi
+ 295:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 296:	31 f6                	xor    %esi,%esi
+ 298:	89 f3                	mov    %esi,%ebx
+{
+ 29a:	83 ec 1c             	sub    $0x1c,%esp
+ 29d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2a0:	eb 2f                	jmp    2d1 <gets+0x41>
+ 2a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2ab:	83 ec 04             	sub    $0x4,%esp
+ 2ae:	6a 01                	push   $0x1
+ 2b0:	50                   	push   %eax
+ 2b1:	6a 00                	push   $0x0
+ 2b3:	e8 32 01 00 00       	call   3ea <read>
+    if(cc < 1)
+ 2b8:	83 c4 10             	add    $0x10,%esp
+ 2bb:	85 c0                	test   %eax,%eax
+ 2bd:	7e 1c                	jle    2db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 2bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2c3:	83 c7 01             	add    $0x1,%edi
+ 2c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2c9:	3c 0a                	cmp    $0xa,%al
+ 2cb:	74 23                	je     2f0 <gets+0x60>
+ 2cd:	3c 0d                	cmp    $0xd,%al
+ 2cf:	74 1f                	je     2f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2d1:	83 c3 01             	add    $0x1,%ebx
+ 2d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2d7:	89 fe                	mov    %edi,%esi
+ 2d9:	7c cd                	jl     2a8 <gets+0x18>
+ 2db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e6:	5b                   	pop    %ebx
+ 2e7:	5e                   	pop    %esi
+ 2e8:	5f                   	pop    %edi
+ 2e9:	5d                   	pop    %ebp
+ 2ea:	c3                   	ret    
+ 2eb:	90                   	nop
+ 2ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2f6:	01 de                	add    %ebx,%esi
+ 2f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 300:	5b                   	pop    %ebx
+ 301:	5e                   	pop    %esi
+ 302:	5f                   	pop    %edi
+ 303:	5d                   	pop    %ebp
+ 304:	c3                   	ret    
+ 305:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000310 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 315:	83 ec 08             	sub    $0x8,%esp
+ 318:	6a 00                	push   $0x0
+ 31a:	ff 75 08             	pushl  0x8(%ebp)
+ 31d:	e8 f0 00 00 00       	call   412 <open>
+  if(fd < 0)
+ 322:	83 c4 10             	add    $0x10,%esp
+ 325:	85 c0                	test   %eax,%eax
+ 327:	78 27                	js     350 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 329:	83 ec 08             	sub    $0x8,%esp
+ 32c:	ff 75 0c             	pushl  0xc(%ebp)
+ 32f:	89 c3                	mov    %eax,%ebx
+ 331:	50                   	push   %eax
+ 332:	e8 f3 00 00 00       	call   42a <fstat>
+  close(fd);
+ 337:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 33a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 33c:	e8 b9 00 00 00       	call   3fa <close>
+  return r;
+ 341:	83 c4 10             	add    $0x10,%esp
+}
+ 344:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 347:	89 f0                	mov    %esi,%eax
+ 349:	5b                   	pop    %ebx
+ 34a:	5e                   	pop    %esi
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 350:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 355:	eb ed                	jmp    344 <stat+0x34>
+ 357:	89 f6                	mov    %esi,%esi
+ 359:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000360 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 367:	0f be 11             	movsbl (%ecx),%edx
+ 36a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 36d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 36f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 374:	77 1f                	ja     395 <atoi+0x35>
+ 376:	8d 76 00             	lea    0x0(%esi),%esi
+ 379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 380:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 383:	83 c1 01             	add    $0x1,%ecx
+ 386:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 38a:	0f be 11             	movsbl (%ecx),%edx
+ 38d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 390:	80 fb 09             	cmp    $0x9,%bl
+ 393:	76 eb                	jbe    380 <atoi+0x20>
+  return n;
+}
+ 395:	5b                   	pop    %ebx
+ 396:	5d                   	pop    %ebp
+ 397:	c3                   	ret    
+ 398:	90                   	nop
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	56                   	push   %esi
+ 3a4:	53                   	push   %ebx
+ 3a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3ae:	85 db                	test   %ebx,%ebx
+ 3b0:	7e 14                	jle    3c6 <memmove+0x26>
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 3b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 3bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 3bf:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 3c2:	39 d3                	cmp    %edx,%ebx
+ 3c4:	75 f2                	jne    3b8 <memmove+0x18>
+  return vdst;
+}
+ 3c6:	5b                   	pop    %ebx
+ 3c7:	5e                   	pop    %esi
+ 3c8:	5d                   	pop    %ebp
+ 3c9:	c3                   	ret    
+
+000003ca <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <exit>:
+SYSCALL(exit)
+ 3d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <wait>:
+SYSCALL(wait)
+ 3da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <pipe>:
+SYSCALL(pipe)
+ 3e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <read>:
+SYSCALL(read)
+ 3ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <write>:
+SYSCALL(write)
+ 3f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <close>:
+SYSCALL(close)
+ 3fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <kill>:
+SYSCALL(kill)
+ 402:	b8 06 00 00 00       	mov    $0x6,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <exec>:
+SYSCALL(exec)
+ 40a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <open>:
+SYSCALL(open)
+ 412:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <mknod>:
+SYSCALL(mknod)
+ 41a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <unlink>:
+SYSCALL(unlink)
+ 422:	b8 12 00 00 00       	mov    $0x12,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <fstat>:
+SYSCALL(fstat)
+ 42a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <link>:
+SYSCALL(link)
+ 432:	b8 13 00 00 00       	mov    $0x13,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <mkdir>:
+SYSCALL(mkdir)
+ 43a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <chdir>:
+SYSCALL(chdir)
+ 442:	b8 09 00 00 00       	mov    $0x9,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <dup>:
+SYSCALL(dup)
+ 44a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <getpid>:
+SYSCALL(getpid)
+ 452:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <sbrk>:
+SYSCALL(sbrk)
+ 45a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <sleep>:
+SYSCALL(sleep)
+ 462:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <uptime>:
+SYSCALL(uptime)
+ 46a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+
+00000472 <getNumProc>:
+SYSCALL(getNumProc)
+ 472:	b8 16 00 00 00       	mov    $0x16,%eax
+ 477:	cd 40                	int    $0x40
+ 479:	c3                   	ret    
+
+0000047a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 47a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 47f:	cd 40                	int    $0x40
+ 481:	c3                   	ret    
+
+00000482 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 482:	b8 18 00 00 00       	mov    $0x18,%eax
+ 487:	cd 40                	int    $0x40
+ 489:	c3                   	ret    
+
+0000048a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 48a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 48f:	cd 40                	int    $0x40
+ 491:	c3                   	ret    
+
+00000492 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 492:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 497:	cd 40                	int    $0x40
+ 499:	c3                   	ret    
+
+0000049a <process_state>:
+SYSCALL(process_state)
+ 49a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 49f:	cd 40                	int    $0x40
+ 4a1:	c3                   	ret    
+
+000004a2 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 4a2:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 4a7:	cd 40                	int    $0x40
+ 4a9:	c3                   	ret    
+
+000004aa <inc_cpucounter>:
+ 4aa:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 4af:	cd 40                	int    $0x40
+ 4b1:	c3                   	ret    
+ 4b2:	66 90                	xchg   %ax,%ax
+ 4b4:	66 90                	xchg   %ax,%ax
+ 4b6:	66 90                	xchg   %ax,%ax
+ 4b8:	66 90                	xchg   %ax,%ax
+ 4ba:	66 90                	xchg   %ax,%ax
+ 4bc:	66 90                	xchg   %ax,%ax
+ 4be:	66 90                	xchg   %ax,%ax
+
+000004c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
+ 4c4:	56                   	push   %esi
+ 4c5:	53                   	push   %ebx
+ 4c6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 4c9:	85 d2                	test   %edx,%edx
+{
+ 4cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 4ce:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 4d0:	79 76                	jns    548 <printint+0x88>
+ 4d2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4d6:	74 70                	je     548 <printint+0x88>
+    x = -xx;
+ 4d8:	f7 d8                	neg    %eax
+    neg = 1;
+ 4da:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4e1:	31 f6                	xor    %esi,%esi
+ 4e3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 4e6:	eb 0a                	jmp    4f2 <printint+0x32>
+ 4e8:	90                   	nop
+ 4e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4f0:	89 fe                	mov    %edi,%esi
+ 4f2:	31 d2                	xor    %edx,%edx
+ 4f4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 4f7:	f7 f1                	div    %ecx
+ 4f9:	0f b6 92 f8 08 00 00 	movzbl 0x8f8(%edx),%edx
+  }while((x /= base) != 0);
+ 500:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 502:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 505:	75 e9                	jne    4f0 <printint+0x30>
+  if(neg)
+ 507:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 50a:	85 c0                	test   %eax,%eax
+ 50c:	74 08                	je     516 <printint+0x56>
+    buf[i++] = '-';
+ 50e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 513:	8d 7e 02             	lea    0x2(%esi),%edi
+ 516:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 51a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+ 520:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 523:	83 ec 04             	sub    $0x4,%esp
+ 526:	83 ee 01             	sub    $0x1,%esi
+ 529:	6a 01                	push   $0x1
+ 52b:	53                   	push   %ebx
+ 52c:	57                   	push   %edi
+ 52d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 530:	e8 bd fe ff ff       	call   3f2 <write>
+
+  while(--i >= 0)
+ 535:	83 c4 10             	add    $0x10,%esp
+ 538:	39 de                	cmp    %ebx,%esi
+ 53a:	75 e4                	jne    520 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 53c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 53f:	5b                   	pop    %ebx
+ 540:	5e                   	pop    %esi
+ 541:	5f                   	pop    %edi
+ 542:	5d                   	pop    %ebp
+ 543:	c3                   	ret    
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 548:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 54f:	eb 90                	jmp    4e1 <printint+0x21>
+ 551:	eb 0d                	jmp    560 <printf>
+ 553:	90                   	nop
+ 554:	90                   	nop
+ 555:	90                   	nop
+ 556:	90                   	nop
+ 557:	90                   	nop
+ 558:	90                   	nop
+ 559:	90                   	nop
+ 55a:	90                   	nop
+ 55b:	90                   	nop
+ 55c:	90                   	nop
+ 55d:	90                   	nop
+ 55e:	90                   	nop
+ 55f:	90                   	nop
+
+00000560 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 560:	55                   	push   %ebp
+ 561:	89 e5                	mov    %esp,%ebp
+ 563:	57                   	push   %edi
+ 564:	56                   	push   %esi
+ 565:	53                   	push   %ebx
+ 566:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 569:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 56c:	0f b6 1e             	movzbl (%esi),%ebx
+ 56f:	84 db                	test   %bl,%bl
+ 571:	0f 84 b3 00 00 00    	je     62a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 577:	8d 45 10             	lea    0x10(%ebp),%eax
+ 57a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 57d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 57f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 582:	eb 2f                	jmp    5b3 <printf+0x53>
+ 584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 588:	83 f8 25             	cmp    $0x25,%eax
+ 58b:	0f 84 a7 00 00 00    	je     638 <printf+0xd8>
+  write(fd, &c, 1);
+ 591:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 594:	83 ec 04             	sub    $0x4,%esp
+ 597:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 59a:	6a 01                	push   $0x1
+ 59c:	50                   	push   %eax
+ 59d:	ff 75 08             	pushl  0x8(%ebp)
+ 5a0:	e8 4d fe ff ff       	call   3f2 <write>
+ 5a5:	83 c4 10             	add    $0x10,%esp
+ 5a8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 5ab:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5af:	84 db                	test   %bl,%bl
+ 5b1:	74 77                	je     62a <printf+0xca>
+    if(state == 0){
+ 5b3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 5b5:	0f be cb             	movsbl %bl,%ecx
+ 5b8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 5bb:	74 cb                	je     588 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 5bd:	83 ff 25             	cmp    $0x25,%edi
+ 5c0:	75 e6                	jne    5a8 <printf+0x48>
+      if(c == 'd'){
+ 5c2:	83 f8 64             	cmp    $0x64,%eax
+ 5c5:	0f 84 05 01 00 00    	je     6d0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5cb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5d1:	83 f9 70             	cmp    $0x70,%ecx
+ 5d4:	74 72                	je     648 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5d6:	83 f8 73             	cmp    $0x73,%eax
+ 5d9:	0f 84 99 00 00 00    	je     678 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5df:	83 f8 63             	cmp    $0x63,%eax
+ 5e2:	0f 84 08 01 00 00    	je     6f0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5e8:	83 f8 25             	cmp    $0x25,%eax
+ 5eb:	0f 84 ef 00 00 00    	je     6e0 <printf+0x180>
+  write(fd, &c, 1);
+ 5f1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5f4:	83 ec 04             	sub    $0x4,%esp
+ 5f7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5fb:	6a 01                	push   $0x1
+ 5fd:	50                   	push   %eax
+ 5fe:	ff 75 08             	pushl  0x8(%ebp)
+ 601:	e8 ec fd ff ff       	call   3f2 <write>
+ 606:	83 c4 0c             	add    $0xc,%esp
+ 609:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 60c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 60f:	6a 01                	push   $0x1
+ 611:	50                   	push   %eax
+ 612:	ff 75 08             	pushl  0x8(%ebp)
+ 615:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 618:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 61a:	e8 d3 fd ff ff       	call   3f2 <write>
+  for(i = 0; fmt[i]; i++){
+ 61f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 623:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 626:	84 db                	test   %bl,%bl
+ 628:	75 89                	jne    5b3 <printf+0x53>
+    }
+  }
+}
+ 62a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 62d:	5b                   	pop    %ebx
+ 62e:	5e                   	pop    %esi
+ 62f:	5f                   	pop    %edi
+ 630:	5d                   	pop    %ebp
+ 631:	c3                   	ret    
+ 632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 638:	bf 25 00 00 00       	mov    $0x25,%edi
+ 63d:	e9 66 ff ff ff       	jmp    5a8 <printf+0x48>
+ 642:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 648:	83 ec 0c             	sub    $0xc,%esp
+ 64b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 650:	6a 00                	push   $0x0
+ 652:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 655:	8b 45 08             	mov    0x8(%ebp),%eax
+ 658:	8b 17                	mov    (%edi),%edx
+ 65a:	e8 61 fe ff ff       	call   4c0 <printint>
+        ap++;
+ 65f:	89 f8                	mov    %edi,%eax
+ 661:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 664:	31 ff                	xor    %edi,%edi
+        ap++;
+ 666:	83 c0 04             	add    $0x4,%eax
+ 669:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 66c:	e9 37 ff ff ff       	jmp    5a8 <printf+0x48>
+ 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 678:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 67b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 67d:	83 c0 04             	add    $0x4,%eax
+ 680:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 683:	85 c9                	test   %ecx,%ecx
+ 685:	0f 84 8e 00 00 00    	je     719 <printf+0x1b9>
+        while(*s != 0){
+ 68b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 68e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 690:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 692:	84 c0                	test   %al,%al
+ 694:	0f 84 0e ff ff ff    	je     5a8 <printf+0x48>
+ 69a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 69d:	89 de                	mov    %ebx,%esi
+ 69f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 6a5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 6a8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6ab:	83 c6 01             	add    $0x1,%esi
+ 6ae:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 6b1:	6a 01                	push   $0x1
+ 6b3:	57                   	push   %edi
+ 6b4:	53                   	push   %ebx
+ 6b5:	e8 38 fd ff ff       	call   3f2 <write>
+        while(*s != 0){
+ 6ba:	0f b6 06             	movzbl (%esi),%eax
+ 6bd:	83 c4 10             	add    $0x10,%esp
+ 6c0:	84 c0                	test   %al,%al
+ 6c2:	75 e4                	jne    6a8 <printf+0x148>
+ 6c4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 6c7:	31 ff                	xor    %edi,%edi
+ 6c9:	e9 da fe ff ff       	jmp    5a8 <printf+0x48>
+ 6ce:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 6d0:	83 ec 0c             	sub    $0xc,%esp
+ 6d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6d8:	6a 01                	push   $0x1
+ 6da:	e9 73 ff ff ff       	jmp    652 <printf+0xf2>
+ 6df:	90                   	nop
+  write(fd, &c, 1);
+ 6e0:	83 ec 04             	sub    $0x4,%esp
+ 6e3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 6e6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 6e9:	6a 01                	push   $0x1
+ 6eb:	e9 21 ff ff ff       	jmp    611 <printf+0xb1>
+        putc(fd, *ap);
+ 6f0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 6f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6f6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 6f8:	6a 01                	push   $0x1
+        ap++;
+ 6fa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 6fd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 700:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 703:	50                   	push   %eax
+ 704:	ff 75 08             	pushl  0x8(%ebp)
+ 707:	e8 e6 fc ff ff       	call   3f2 <write>
+        ap++;
+ 70c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 70f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 712:	31 ff                	xor    %edi,%edi
+ 714:	e9 8f fe ff ff       	jmp    5a8 <printf+0x48>
+          s = "(null)";
+ 719:	bb ef 08 00 00       	mov    $0x8ef,%ebx
+        while(*s != 0){
+ 71e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 723:	e9 72 ff ff ff       	jmp    69a <printf+0x13a>
+ 728:	66 90                	xchg   %ax,%ax
+ 72a:	66 90                	xchg   %ax,%ax
+ 72c:	66 90                	xchg   %ax,%ax
+ 72e:	66 90                	xchg   %ax,%ax
+
+00000730 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 730:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 731:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+{
+ 736:	89 e5                	mov    %esp,%ebp
+ 738:	57                   	push   %edi
+ 739:	56                   	push   %esi
+ 73a:	53                   	push   %ebx
+ 73b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 73e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 748:	39 c8                	cmp    %ecx,%eax
+ 74a:	8b 10                	mov    (%eax),%edx
+ 74c:	73 32                	jae    780 <free+0x50>
+ 74e:	39 d1                	cmp    %edx,%ecx
+ 750:	72 04                	jb     756 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 752:	39 d0                	cmp    %edx,%eax
+ 754:	72 32                	jb     788 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 756:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 759:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 75c:	39 fa                	cmp    %edi,%edx
+ 75e:	74 30                	je     790 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 760:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 763:	8b 50 04             	mov    0x4(%eax),%edx
+ 766:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 769:	39 f1                	cmp    %esi,%ecx
+ 76b:	74 3a                	je     7a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 76d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 76f:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+}
+ 774:	5b                   	pop    %ebx
+ 775:	5e                   	pop    %esi
+ 776:	5f                   	pop    %edi
+ 777:	5d                   	pop    %ebp
+ 778:	c3                   	ret    
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 780:	39 d0                	cmp    %edx,%eax
+ 782:	72 04                	jb     788 <free+0x58>
+ 784:	39 d1                	cmp    %edx,%ecx
+ 786:	72 ce                	jb     756 <free+0x26>
+{
+ 788:	89 d0                	mov    %edx,%eax
+ 78a:	eb bc                	jmp    748 <free+0x18>
+ 78c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 790:	03 72 04             	add    0x4(%edx),%esi
+ 793:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 796:	8b 10                	mov    (%eax),%edx
+ 798:	8b 12                	mov    (%edx),%edx
+ 79a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 79d:	8b 50 04             	mov    0x4(%eax),%edx
+ 7a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7a3:	39 f1                	cmp    %esi,%ecx
+ 7a5:	75 c6                	jne    76d <free+0x3d>
+    p->s.size += bp->s.size;
+ 7a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 7aa:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+    p->s.size += bp->s.size;
+ 7af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 7b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7b5:	89 10                	mov    %edx,(%eax)
+}
+ 7b7:	5b                   	pop    %ebx
+ 7b8:	5e                   	pop    %esi
+ 7b9:	5f                   	pop    %edi
+ 7ba:	5d                   	pop    %ebp
+ 7bb:	c3                   	ret    
+ 7bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000007c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7c0:	55                   	push   %ebp
+ 7c1:	89 e5                	mov    %esp,%ebp
+ 7c3:	57                   	push   %edi
+ 7c4:	56                   	push   %esi
+ 7c5:	53                   	push   %ebx
+ 7c6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7c9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7cc:	8b 15 e0 0b 00 00    	mov    0xbe0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7d2:	8d 78 07             	lea    0x7(%eax),%edi
+ 7d5:	c1 ef 03             	shr    $0x3,%edi
+ 7d8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 7db:	85 d2                	test   %edx,%edx
+ 7dd:	0f 84 9d 00 00 00    	je     880 <malloc+0xc0>
+ 7e3:	8b 02                	mov    (%edx),%eax
+ 7e5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 7e8:	39 cf                	cmp    %ecx,%edi
+ 7ea:	76 6c                	jbe    858 <malloc+0x98>
+ 7ec:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 7f2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7f7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7fa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 801:	eb 0e                	jmp    811 <malloc+0x51>
+ 803:	90                   	nop
+ 804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 808:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 80a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 80d:	39 f9                	cmp    %edi,%ecx
+ 80f:	73 47                	jae    858 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 811:	39 05 e0 0b 00 00    	cmp    %eax,0xbe0
+ 817:	89 c2                	mov    %eax,%edx
+ 819:	75 ed                	jne    808 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 81b:	83 ec 0c             	sub    $0xc,%esp
+ 81e:	56                   	push   %esi
+ 81f:	e8 36 fc ff ff       	call   45a <sbrk>
+  if(p == (char*)-1)
+ 824:	83 c4 10             	add    $0x10,%esp
+ 827:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 82a:	74 1c                	je     848 <malloc+0x88>
+  hp->s.size = nu;
+ 82c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 82f:	83 ec 0c             	sub    $0xc,%esp
+ 832:	83 c0 08             	add    $0x8,%eax
+ 835:	50                   	push   %eax
+ 836:	e8 f5 fe ff ff       	call   730 <free>
+  return freep;
+ 83b:	8b 15 e0 0b 00 00    	mov    0xbe0,%edx
+      if((p = morecore(nunits)) == 0)
+ 841:	83 c4 10             	add    $0x10,%esp
+ 844:	85 d2                	test   %edx,%edx
+ 846:	75 c0                	jne    808 <malloc+0x48>
+        return 0;
+  }
+}
+ 848:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 84b:	31 c0                	xor    %eax,%eax
+}
+ 84d:	5b                   	pop    %ebx
+ 84e:	5e                   	pop    %esi
+ 84f:	5f                   	pop    %edi
+ 850:	5d                   	pop    %ebp
+ 851:	c3                   	ret    
+ 852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 858:	39 cf                	cmp    %ecx,%edi
+ 85a:	74 54                	je     8b0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 85c:	29 f9                	sub    %edi,%ecx
+ 85e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 861:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 864:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 867:	89 15 e0 0b 00 00    	mov    %edx,0xbe0
+}
+ 86d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 870:	83 c0 08             	add    $0x8,%eax
+}
+ 873:	5b                   	pop    %ebx
+ 874:	5e                   	pop    %esi
+ 875:	5f                   	pop    %edi
+ 876:	5d                   	pop    %ebp
+ 877:	c3                   	ret    
+ 878:	90                   	nop
+ 879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 880:	c7 05 e0 0b 00 00 e4 	movl   $0xbe4,0xbe0
+ 887:	0b 00 00 
+ 88a:	c7 05 e4 0b 00 00 e4 	movl   $0xbe4,0xbe4
+ 891:	0b 00 00 
+    base.s.size = 0;
+ 894:	b8 e4 0b 00 00       	mov    $0xbe4,%eax
+ 899:	c7 05 e8 0b 00 00 00 	movl   $0x0,0xbe8
+ 8a0:	00 00 00 
+ 8a3:	e9 44 ff ff ff       	jmp    7ec <malloc+0x2c>
+ 8a8:	90                   	nop
+ 8a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8b0:	8b 08                	mov    (%eax),%ecx
+ 8b2:	89 0a                	mov    %ecx,(%edx)
+ 8b4:	eb b1                	jmp    867 <malloc+0xa7>
diff -ruN xv6org/wc.d xv6mhybrid/wc.d
--- xv6org/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/wc.d	2020-10-15 19:50:35.533653122 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/wc.o and xv6mhybrid/wc.o differ
diff -ruN xv6org/wc.sym xv6mhybrid/wc.sym
--- xv6org/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/wc.sym	2020-10-15 19:50:35.553651823 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+000008b8 .rodata
+0000090c .eh_frame
+00000be0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+000004c0 printint
+000008f8 digits.1056
+00000000 umalloc.c
+00000be0 freep
+00000be4 base
+00000180 strcpy
+00000560 printf
+000003a0 memmove
+0000041a mknod
+00000290 gets
+00000452 getpid
+000007c0 malloc
+00000462 sleep
+00000492 get_burst_time
+000003e2 pipe
+000003f2 write
+0000042a fstat
+00000402 kill
+0000049a process_state
+00000442 chdir
+000004a2 dec_burstTime
+0000040a exec
+000003da wait
+000004aa inc_cpucounter
+000003ea read
+00000422 unlink
+000000a0 wc
+000003ca fork
+0000045a sbrk
+0000046a uptime
+00000bd8 __bss_start
+00000230 memset
+00000000 main
+0000048a set_burst_time
+000001b0 strcmp
+0000044a dup
+0000047a getMaxPid
+00000c00 buf
+00000472 getNumProc
+00000482 getProcInfo
+00000310 stat
+00000bd8 _edata
+00000e00 _end
+00000432 link
+000003d2 exit
+00000360 atoi
+00000200 strlen
+00000412 open
+00000250 strchr
+0000043a mkdir
+000003fa close
+00000730 free
Binary files xv6org/xv6.img and xv6mhybrid/xv6.img differ
Binary files xv6org/_zombie and xv6mhybrid/_zombie differ
diff -ruN xv6org/zombie.asm xv6mhybrid/zombie.asm
--- xv6org/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/zombie.asm	2020-10-15 19:50:35.577650265 +0530
@@ -0,0 +1,1187 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  11:	e8 64 02 00 00       	call   27a <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
+    sleep(5);  // Let child exit before parent.
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 ee 02 00 00       	call   312 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
+  exit();
+  27:	e8 56 02 00 00       	call   282 <exit>
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  31:	89 e5                	mov    %esp,%ebp
+  33:	53                   	push   %ebx
+  34:	8b 45 08             	mov    0x8(%ebp),%eax
+  37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  3a:	89 c2                	mov    %eax,%edx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  40:	83 c1 01             	add    $0x1,%ecx
+  43:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  47:	83 c2 01             	add    $0x1,%edx
+  4a:	84 db                	test   %bl,%bl
+  4c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  4f:	75 ef                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  51:	5b                   	pop    %ebx
+  52:	5d                   	pop    %ebp
+  53:	c3                   	ret    
+  54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	0f b6 19             	movzbl (%ecx),%ebx
+  70:	84 c0                	test   %al,%al
+  72:	75 1c                	jne    90 <strcmp+0x30>
+  74:	eb 2a                	jmp    a0 <strcmp+0x40>
+  76:	8d 76 00             	lea    0x0(%esi),%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  80:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  83:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  86:	83 c1 01             	add    $0x1,%ecx
+  89:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  8c:	84 c0                	test   %al,%al
+  8e:	74 10                	je     a0 <strcmp+0x40>
+  90:	38 d8                	cmp    %bl,%al
+  92:	74 ec                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  94:	29 d8                	sub    %ebx,%eax
+}
+  96:	5b                   	pop    %ebx
+  97:	5d                   	pop    %ebp
+  98:	c3                   	ret    
+  99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b6:	80 39 00             	cmpb   $0x0,(%ecx)
+  b9:	74 15                	je     d0 <strlen+0x20>
+  bb:	31 d2                	xor    %edx,%edx
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  c0:	83 c2 01             	add    $0x1,%edx
+  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	75 f5                	jne    c0 <strlen+0x10>
+    ;
+  return n;
+}
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  d0:	31 c0                	xor    %eax,%eax
+}
+  d2:	5d                   	pop    %ebp
+  d3:	c3                   	ret    
+  d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	57                   	push   %edi
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ed:	89 d7                	mov    %edx,%edi
+  ef:	fc                   	cld    
+  f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  f2:	89 d0                	mov    %edx,%eax
+  f4:	5f                   	pop    %edi
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 45 08             	mov    0x8(%ebp),%eax
+ 107:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 10a:	0f b6 10             	movzbl (%eax),%edx
+ 10d:	84 d2                	test   %dl,%dl
+ 10f:	74 1d                	je     12e <strchr+0x2e>
+    if(*s == c)
+ 111:	38 d3                	cmp    %dl,%bl
+ 113:	89 d9                	mov    %ebx,%ecx
+ 115:	75 0d                	jne    124 <strchr+0x24>
+ 117:	eb 17                	jmp    130 <strchr+0x30>
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	38 ca                	cmp    %cl,%dl
+ 122:	74 0c                	je     130 <strchr+0x30>
+  for(; *s; s++)
+ 124:	83 c0 01             	add    $0x1,%eax
+ 127:	0f b6 10             	movzbl (%eax),%edx
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 12e:	31 c0                	xor    %eax,%eax
+}
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	56                   	push   %esi
+ 145:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 146:	31 f6                	xor    %esi,%esi
+ 148:	89 f3                	mov    %esi,%ebx
+{
+ 14a:	83 ec 1c             	sub    $0x1c,%esp
+ 14d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 150:	eb 2f                	jmp    181 <gets+0x41>
+ 152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 158:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 15b:	83 ec 04             	sub    $0x4,%esp
+ 15e:	6a 01                	push   $0x1
+ 160:	50                   	push   %eax
+ 161:	6a 00                	push   $0x0
+ 163:	e8 32 01 00 00       	call   29a <read>
+    if(cc < 1)
+ 168:	83 c4 10             	add    $0x10,%esp
+ 16b:	85 c0                	test   %eax,%eax
+ 16d:	7e 1c                	jle    18b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 16f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 173:	83 c7 01             	add    $0x1,%edi
+ 176:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 179:	3c 0a                	cmp    $0xa,%al
+ 17b:	74 23                	je     1a0 <gets+0x60>
+ 17d:	3c 0d                	cmp    $0xd,%al
+ 17f:	74 1f                	je     1a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 181:	83 c3 01             	add    $0x1,%ebx
+ 184:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 187:	89 fe                	mov    %edi,%esi
+ 189:	7c cd                	jl     158 <gets+0x18>
+ 18b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 18d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 190:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 193:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 196:	5b                   	pop    %ebx
+ 197:	5e                   	pop    %esi
+ 198:	5f                   	pop    %edi
+ 199:	5d                   	pop    %ebp
+ 19a:	c3                   	ret    
+ 19b:	90                   	nop
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a6:	01 de                	add    %ebx,%esi
+ 1a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5e                   	pop    %esi
+ 1b2:	5f                   	pop    %edi
+ 1b3:	5d                   	pop    %ebp
+ 1b4:	c3                   	ret    
+ 1b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	pushl  0x8(%ebp)
+ 1cd:	e8 f0 00 00 00       	call   2c2 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f3 00 00 00       	call   2da <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 b9 00 00 00       	call   2aa <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	89 f6                	mov    %esi,%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 11             	movsbl (%ecx),%edx
+ 21a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 21d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 21f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 224:	77 1f                	ja     245 <atoi+0x35>
+ 226:	8d 76 00             	lea    0x0(%esi),%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 230:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 233:	83 c1 01             	add    $0x1,%ecx
+ 236:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 11             	movsbl (%ecx),%edx
+ 23d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	5b                   	pop    %ebx
+ 246:	5d                   	pop    %ebp
+ 247:	c3                   	ret    
+ 248:	90                   	nop
+ 249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	56                   	push   %esi
+ 254:	53                   	push   %ebx
+ 255:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 258:	8b 45 08             	mov    0x8(%ebp),%eax
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 db                	test   %ebx,%ebx
+ 260:	7e 14                	jle    276 <memmove+0x26>
+ 262:	31 d2                	xor    %edx,%edx
+ 264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 268:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 26c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 26f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 272:	39 d3                	cmp    %edx,%ebx
+ 274:	75 f2                	jne    268 <memmove+0x18>
+  return vdst;
+}
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5d                   	pop    %ebp
+ 279:	c3                   	ret    
+
+0000027a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 27f:	cd 40                	int    $0x40
+ 281:	c3                   	ret    
+
+00000282 <exit>:
+SYSCALL(exit)
+ 282:	b8 02 00 00 00       	mov    $0x2,%eax
+ 287:	cd 40                	int    $0x40
+ 289:	c3                   	ret    
+
+0000028a <wait>:
+SYSCALL(wait)
+ 28a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 28f:	cd 40                	int    $0x40
+ 291:	c3                   	ret    
+
+00000292 <pipe>:
+SYSCALL(pipe)
+ 292:	b8 04 00 00 00       	mov    $0x4,%eax
+ 297:	cd 40                	int    $0x40
+ 299:	c3                   	ret    
+
+0000029a <read>:
+SYSCALL(read)
+ 29a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <write>:
+SYSCALL(write)
+ 2a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <close>:
+SYSCALL(close)
+ 2aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <kill>:
+SYSCALL(kill)
+ 2b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <exec>:
+SYSCALL(exec)
+ 2ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <open>:
+SYSCALL(open)
+ 2c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <mknod>:
+SYSCALL(mknod)
+ 2ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <unlink>:
+SYSCALL(unlink)
+ 2d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <fstat>:
+SYSCALL(fstat)
+ 2da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <link>:
+SYSCALL(link)
+ 2e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mkdir>:
+SYSCALL(mkdir)
+ 2ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <chdir>:
+SYSCALL(chdir)
+ 2f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <dup>:
+SYSCALL(dup)
+ 2fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <getpid>:
+SYSCALL(getpid)
+ 302:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <sbrk>:
+SYSCALL(sbrk)
+ 30a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <sleep>:
+SYSCALL(sleep)
+ 312:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <uptime>:
+SYSCALL(uptime)
+ 31a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getNumProc>:
+SYSCALL(getNumProc)
+ 322:	b8 16 00 00 00       	mov    $0x16,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <getMaxPid>:
+SYSCALL(getMaxPid)
+ 32a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 332:	b8 18 00 00 00       	mov    $0x18,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <set_burst_time>:
+SYSCALL(set_burst_time)
+ 33a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 342:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <process_state>:
+SYSCALL(process_state)
+ 34a:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <dec_burstTime>:
+SYSCALL(dec_burstTime)
+ 352:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <inc_cpucounter>:
+ 35a:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+ 362:	66 90                	xchg   %ax,%ax
+ 364:	66 90                	xchg   %ax,%ax
+ 366:	66 90                	xchg   %ax,%ax
+ 368:	66 90                	xchg   %ax,%ax
+ 36a:	66 90                	xchg   %ax,%ax
+ 36c:	66 90                	xchg   %ax,%ax
+ 36e:	66 90                	xchg   %ax,%ax
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 379:	85 d2                	test   %edx,%edx
+{
+ 37b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 37e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 380:	79 76                	jns    3f8 <printint+0x88>
+ 382:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 386:	74 70                	je     3f8 <printint+0x88>
+    x = -xx;
+ 388:	f7 d8                	neg    %eax
+    neg = 1;
+ 38a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 391:	31 f6                	xor    %esi,%esi
+ 393:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 396:	eb 0a                	jmp    3a2 <printint+0x32>
+ 398:	90                   	nop
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	89 fe                	mov    %edi,%esi
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3a7:	f7 f1                	div    %ecx
+ 3a9:	0f b6 92 70 07 00 00 	movzbl 0x770(%edx),%edx
+  }while((x /= base) != 0);
+ 3b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3b5:	75 e9                	jne    3a0 <printint+0x30>
+  if(neg)
+ 3b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ba:	85 c0                	test   %eax,%eax
+ 3bc:	74 08                	je     3c6 <printint+0x56>
+    buf[i++] = '-';
+ 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3d3:	83 ec 04             	sub    $0x4,%esp
+ 3d6:	83 ee 01             	sub    $0x1,%esi
+ 3d9:	6a 01                	push   $0x1
+ 3db:	53                   	push   %ebx
+ 3dc:	57                   	push   %edi
+ 3dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3e0:	e8 bd fe ff ff       	call   2a2 <write>
+
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3ff:	eb 90                	jmp    391 <printint+0x21>
+ 401:	eb 0d                	jmp    410 <printf>
+ 403:	90                   	nop
+ 404:	90                   	nop
+ 405:	90                   	nop
+ 406:	90                   	nop
+ 407:	90                   	nop
+ 408:	90                   	nop
+ 409:	90                   	nop
+ 40a:	90                   	nop
+ 40b:	90                   	nop
+ 40c:	90                   	nop
+ 40d:	90                   	nop
+ 40e:	90                   	nop
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 419:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 41c:	0f b6 1e             	movzbl (%esi),%ebx
+ 41f:	84 db                	test   %bl,%bl
+ 421:	0f 84 b3 00 00 00    	je     4da <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 427:	8d 45 10             	lea    0x10(%ebp),%eax
+ 42a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 42d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 42f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 432:	eb 2f                	jmp    463 <printf+0x53>
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	0f 84 a7 00 00 00    	je     4e8 <printf+0xd8>
+  write(fd, &c, 1);
+ 441:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 444:	83 ec 04             	sub    $0x4,%esp
+ 447:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 44a:	6a 01                	push   $0x1
+ 44c:	50                   	push   %eax
+ 44d:	ff 75 08             	pushl  0x8(%ebp)
+ 450:	e8 4d fe ff ff       	call   2a2 <write>
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 45b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 45f:	84 db                	test   %bl,%bl
+ 461:	74 77                	je     4da <printf+0xca>
+    if(state == 0){
+ 463:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 465:	0f be cb             	movsbl %bl,%ecx
+ 468:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 46b:	74 cb                	je     438 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 46d:	83 ff 25             	cmp    $0x25,%edi
+ 470:	75 e6                	jne    458 <printf+0x48>
+      if(c == 'd'){
+ 472:	83 f8 64             	cmp    $0x64,%eax
+ 475:	0f 84 05 01 00 00    	je     580 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 47b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 481:	83 f9 70             	cmp    $0x70,%ecx
+ 484:	74 72                	je     4f8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 486:	83 f8 73             	cmp    $0x73,%eax
+ 489:	0f 84 99 00 00 00    	je     528 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 48f:	83 f8 63             	cmp    $0x63,%eax
+ 492:	0f 84 08 01 00 00    	je     5a0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 ef 00 00 00    	je     590 <printf+0x180>
+  write(fd, &c, 1);
+ 4a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a4:	83 ec 04             	sub    $0x4,%esp
+ 4a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ab:	6a 01                	push   $0x1
+ 4ad:	50                   	push   %eax
+ 4ae:	ff 75 08             	pushl  0x8(%ebp)
+ 4b1:	e8 ec fd ff ff       	call   2a2 <write>
+ 4b6:	83 c4 0c             	add    $0xc,%esp
+ 4b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4bf:	6a 01                	push   $0x1
+ 4c1:	50                   	push   %eax
+ 4c2:	ff 75 08             	pushl  0x8(%ebp)
+ 4c5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4c8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4ca:	e8 d3 fd ff ff       	call   2a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4d6:	84 db                	test   %bl,%bl
+ 4d8:	75 89                	jne    463 <printf+0x53>
+    }
+  }
+}
+ 4da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4dd:	5b                   	pop    %ebx
+ 4de:	5e                   	pop    %esi
+ 4df:	5f                   	pop    %edi
+ 4e0:	5d                   	pop    %ebp
+ 4e1:	c3                   	ret    
+ 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4ed:	e9 66 ff ff ff       	jmp    458 <printf+0x48>
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f8:	83 ec 0c             	sub    $0xc,%esp
+ 4fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	6a 00                	push   $0x0
+ 502:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 505:	8b 45 08             	mov    0x8(%ebp),%eax
+ 508:	8b 17                	mov    (%edi),%edx
+ 50a:	e8 61 fe ff ff       	call   370 <printint>
+        ap++;
+ 50f:	89 f8                	mov    %edi,%eax
+ 511:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 514:	31 ff                	xor    %edi,%edi
+        ap++;
+ 516:	83 c0 04             	add    $0x4,%eax
+ 519:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 51c:	e9 37 ff ff ff       	jmp    458 <printf+0x48>
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 52b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 52d:	83 c0 04             	add    $0x4,%eax
+ 530:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 533:	85 c9                	test   %ecx,%ecx
+ 535:	0f 84 8e 00 00 00    	je     5c9 <printf+0x1b9>
+        while(*s != 0){
+ 53b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 53e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 540:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 542:	84 c0                	test   %al,%al
+ 544:	0f 84 0e ff ff ff    	je     458 <printf+0x48>
+ 54a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 54d:	89 de                	mov    %ebx,%esi
+ 54f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 552:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 555:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 558:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 55b:	83 c6 01             	add    $0x1,%esi
+ 55e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 561:	6a 01                	push   $0x1
+ 563:	57                   	push   %edi
+ 564:	53                   	push   %ebx
+ 565:	e8 38 fd ff ff       	call   2a2 <write>
+        while(*s != 0){
+ 56a:	0f b6 06             	movzbl (%esi),%eax
+ 56d:	83 c4 10             	add    $0x10,%esp
+ 570:	84 c0                	test   %al,%al
+ 572:	75 e4                	jne    558 <printf+0x148>
+ 574:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 577:	31 ff                	xor    %edi,%edi
+ 579:	e9 da fe ff ff       	jmp    458 <printf+0x48>
+ 57e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	e9 73 ff ff ff       	jmp    502 <printf+0xf2>
+ 58f:	90                   	nop
+  write(fd, &c, 1);
+ 590:	83 ec 04             	sub    $0x4,%esp
+ 593:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 596:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 599:	6a 01                	push   $0x1
+ 59b:	e9 21 ff ff ff       	jmp    4c1 <printf+0xb1>
+        putc(fd, *ap);
+ 5a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5a6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5a8:	6a 01                	push   $0x1
+        ap++;
+ 5aa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5b3:	50                   	push   %eax
+ 5b4:	ff 75 08             	pushl  0x8(%ebp)
+ 5b7:	e8 e6 fc ff ff       	call   2a2 <write>
+        ap++;
+ 5bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5bf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5c2:	31 ff                	xor    %edi,%edi
+ 5c4:	e9 8f fe ff ff       	jmp    458 <printf+0x48>
+          s = "(null)";
+ 5c9:	bb 68 07 00 00       	mov    $0x768,%ebx
+        while(*s != 0){
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	e9 72 ff ff ff       	jmp    54a <printf+0x13a>
+ 5d8:	66 90                	xchg   %ax,%ax
+ 5da:	66 90                	xchg   %ax,%ax
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	a1 14 0a 00 00       	mov    0xa14,%eax
+{
+ 5e6:	89 e5                	mov    %esp,%ebp
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	53                   	push   %ebx
+ 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f8:	39 c8                	cmp    %ecx,%eax
+ 5fa:	8b 10                	mov    (%eax),%edx
+ 5fc:	73 32                	jae    630 <free+0x50>
+ 5fe:	39 d1                	cmp    %edx,%ecx
+ 600:	72 04                	jb     606 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 602:	39 d0                	cmp    %edx,%eax
+ 604:	72 32                	jb     638 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 606:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 609:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60c:	39 fa                	cmp    %edi,%edx
+ 60e:	74 30                	je     640 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 610:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 613:	8b 50 04             	mov    0x4(%eax),%edx
+ 616:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 619:	39 f1                	cmp    %esi,%ecx
+ 61b:	74 3a                	je     657 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 61d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 61f:	a3 14 0a 00 00       	mov    %eax,0xa14
+}
+ 624:	5b                   	pop    %ebx
+ 625:	5e                   	pop    %esi
+ 626:	5f                   	pop    %edi
+ 627:	5d                   	pop    %ebp
+ 628:	c3                   	ret    
+ 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 04                	jb     638 <free+0x58>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	72 ce                	jb     606 <free+0x26>
+{
+ 638:	89 d0                	mov    %edx,%eax
+ 63a:	eb bc                	jmp    5f8 <free+0x18>
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 640:	03 72 04             	add    0x4(%edx),%esi
+ 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 646:	8b 10                	mov    (%eax),%edx
+ 648:	8b 12                	mov    (%edx),%edx
+ 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 64d:	8b 50 04             	mov    0x4(%eax),%edx
+ 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 653:	39 f1                	cmp    %esi,%ecx
+ 655:	75 c6                	jne    61d <free+0x3d>
+    p->s.size += bp->s.size;
+ 657:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 65a:	a3 14 0a 00 00       	mov    %eax,0xa14
+    p->s.size += bp->s.size;
+ 65f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 665:	89 10                	mov    %edx,(%eax)
+}
+ 667:	5b                   	pop    %ebx
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000670 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 679:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 67c:	8b 15 14 0a 00 00    	mov    0xa14,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 682:	8d 78 07             	lea    0x7(%eax),%edi
+ 685:	c1 ef 03             	shr    $0x3,%edi
+ 688:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 68b:	85 d2                	test   %edx,%edx
+ 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
+ 693:	8b 02                	mov    (%edx),%eax
+ 695:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 698:	39 cf                	cmp    %ecx,%edi
+ 69a:	76 6c                	jbe    708 <malloc+0x98>
+ 69c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6a7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6b1:	eb 0e                	jmp    6c1 <malloc+0x51>
+ 6b3:	90                   	nop
+ 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bd:	39 f9                	cmp    %edi,%ecx
+ 6bf:	73 47                	jae    708 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6c1:	39 05 14 0a 00 00    	cmp    %eax,0xa14
+ 6c7:	89 c2                	mov    %eax,%edx
+ 6c9:	75 ed                	jne    6b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6cb:	83 ec 0c             	sub    $0xc,%esp
+ 6ce:	56                   	push   %esi
+ 6cf:	e8 36 fc ff ff       	call   30a <sbrk>
+  if(p == (char*)-1)
+ 6d4:	83 c4 10             	add    $0x10,%esp
+ 6d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6da:	74 1c                	je     6f8 <malloc+0x88>
+  hp->s.size = nu;
+ 6dc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6df:	83 ec 0c             	sub    $0xc,%esp
+ 6e2:	83 c0 08             	add    $0x8,%eax
+ 6e5:	50                   	push   %eax
+ 6e6:	e8 f5 fe ff ff       	call   5e0 <free>
+  return freep;
+ 6eb:	8b 15 14 0a 00 00    	mov    0xa14,%edx
+      if((p = morecore(nunits)) == 0)
+ 6f1:	83 c4 10             	add    $0x10,%esp
+ 6f4:	85 d2                	test   %edx,%edx
+ 6f6:	75 c0                	jne    6b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6fb:	31 c0                	xor    %eax,%eax
+}
+ 6fd:	5b                   	pop    %ebx
+ 6fe:	5e                   	pop    %esi
+ 6ff:	5f                   	pop    %edi
+ 700:	5d                   	pop    %ebp
+ 701:	c3                   	ret    
+ 702:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 708:	39 cf                	cmp    %ecx,%edi
+ 70a:	74 54                	je     760 <malloc+0xf0>
+        p->s.size -= nunits;
+ 70c:	29 f9                	sub    %edi,%ecx
+ 70e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 711:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 714:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 717:	89 15 14 0a 00 00    	mov    %edx,0xa14
+}
+ 71d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 720:	83 c0 08             	add    $0x8,%eax
+}
+ 723:	5b                   	pop    %ebx
+ 724:	5e                   	pop    %esi
+ 725:	5f                   	pop    %edi
+ 726:	5d                   	pop    %ebp
+ 727:	c3                   	ret    
+ 728:	90                   	nop
+ 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 730:	c7 05 14 0a 00 00 18 	movl   $0xa18,0xa14
+ 737:	0a 00 00 
+ 73a:	c7 05 18 0a 00 00 18 	movl   $0xa18,0xa18
+ 741:	0a 00 00 
+    base.s.size = 0;
+ 744:	b8 18 0a 00 00       	mov    $0xa18,%eax
+ 749:	c7 05 1c 0a 00 00 00 	movl   $0x0,0xa1c
+ 750:	00 00 00 
+ 753:	e9 44 ff ff ff       	jmp    69c <malloc+0x2c>
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 760:	8b 08                	mov    (%eax),%ecx
+ 762:	89 0a                	mov    %ecx,(%edx)
+ 764:	eb b1                	jmp    717 <malloc+0xa7>
diff -ruN xv6org/zombie.d xv6mhybrid/zombie.d
--- xv6org/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/zombie.d	2020-10-15 19:50:35.565651044 +0530
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6org/zombie.o and xv6mhybrid/zombie.o differ
diff -ruN xv6org/zombie.sym xv6mhybrid/zombie.sym
--- xv6org/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6mhybrid/zombie.sym	2020-10-15 19:50:35.577650265 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000768 .rodata
+00000784 .eh_frame
+00000a14 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+00000770 digits.1056
+00000000 umalloc.c
+00000a14 freep
+00000a18 base
+00000030 strcpy
+00000410 printf
+00000250 memmove
+000002ca mknod
+00000140 gets
+00000302 getpid
+00000670 malloc
+00000312 sleep
+00000342 get_burst_time
+00000292 pipe
+000002a2 write
+000002da fstat
+000002b2 kill
+0000034a process_state
+000002f2 chdir
+00000352 dec_burstTime
+000002ba exec
+0000028a wait
+0000035a inc_cpucounter
+0000029a read
+000002d2 unlink
+0000027a fork
+0000030a sbrk
+0000031a uptime
+00000a14 __bss_start
+000000e0 memset
+00000000 main
+0000033a set_burst_time
+00000060 strcmp
+000002fa dup
+0000032a getMaxPid
+00000322 getNumProc
+00000332 getProcInfo
+000001c0 stat
+00000a14 _edata
+00000a20 _end
+000002e2 link
+00000282 exit
+00000210 atoi
+000000b0 strlen
+000002c2 open
+00000100 strchr
+000002ea mkdir
+000002aa close
+000005e0 free
